00001  0000                        ;===============================================================================
00002  0001             ; COMMODORE 64: "HOTEL MAP"
00003  0001             ;
00004  0001             ; FILE: PROJECT 12-13: "ENEMY ATTACKS"
00005  0001             ;===============================================================================
00006  0001                        
00007  0001             ; BUGS FOUND: WHEN SCROLLING THE SCREEN, SOMETIMES THE WALL DETECTION IS NOT FOUND
00008  0001             ; AND SPRITE PASSES THROUGH IT.
00009  0001             
00010  0001             ; SPRITE ANIMATION LOOPING IS OFF. THE ANIMATION IS RUNNING FAST
00011  0001             ; SPRITE IDLE ANIMATION IS NOT SHOWING.
00012  0001             ;===============================================================================
00013  0001             ; SCROLLING MAP EXAMPLE 1 - C64 YOUTUBE GAME PROJECT
00014  0001             ; 2016/17 - PETER 'SIG' HEWETT AKA RETROROMICON (CONTRIBUTIONS)
00015  0001             ; ADDITIONAL CODING BY STEVE MORROW
00016  0001             ;===============================================================================
00017  0001             OPERATOR   CALC        ; IMPORTANT - CALCULATIONS ARE MADE BEFORE HI/LO BYTES
00018  0001                        ;             IN PRECIDENCE (FOR EXPRESSIONS AND TABLES)
00019  0001             ;===============================================================================
00020  0001             ; DEFINITIONS
00021  0001             ;===============================================================================
00022  0001             ;===============================================================================
00023  0001             ; VIC II REGISTER INCLUDE FILE
00024  0001             ;===============================================================================
00025  0001             ; PETER 'SIG' HEWETT AKA RETROROMICON
00026  0001             ; - 2016
00027  0001             ;===============================================================================
00028  0001             
00029  0001             ; VIC II REGISTERS
00030  0001             VIC_SPRITE_X_POS =  $D000        ; INCREMENT BY 2 BYTES FOR THE NEXT SPRITE X POS
00031  0001             VIC_SPRITE_Y_POS =  $D001        ; INCREMENT BY 2 BYTES FOR THE NEXT SPRITE Y POS
00032  0001             VIC_SPRITE_X_EXTEND =  $D010        ; BITS #0 - 7 : EXTENDED X BIT FOR SPRITES 0-7
00033  0001             
00034  0001             VIC_SCREEN_CONTROL_Y =  $D011
00035  0001             VIC_SCREEN_CONTROL =  $D011        ; SCREEN CONTROL REGISTER 1
00036  0001                        ; BITS #0-#2: VERTICAL RASTER SCROLL
00037  0001                        ; BIT #3 : SCREEN HEIGHT 0 = 24 ROWS 1 = 25 ROWS
00038  0001                        ; BIT #4 : 0 = SCREEN OFF  1 = SCREEN ON (NORMAL FUNCTION)
00039  0001                        ; BIT #5 : 0 = TEXT MODE ; 1 = BITMAP MODE
00040  0001                        ; BIT #6 : 1 = EXTENDED BACKGROUND MODE ON
00041  0001                        ; BIT #7 : READ CURRENT RASTER LINE (BIT #8)
00042  0001                        ;          WRITE: RASTER LINE TO GENERATE INTERRUPT AT (BIT #8)
00043  0001                        ;
00044  0001             
00045  0001             VIC_RASTER_LINE =  $D012        ; READ: CURRENT RASTER LINE (BITS #0-#7)
00046  0001                        ; WRITE: RASTER LINE TO GENERATE INTERRUPT AT (BITS #0-#7).
00047  0001                        
00048  0001             VIC_SPRITE_ENABLE =  $D015        ; (53269) SET BITS 0-8 TO ENABLE REPECTIVE SPRITE
00049  0001             
00050  0001             VIC_SCREEN_CONTROL_X =  $D016
00051  0001             VIC_CONTROL =  $D016        ; SCREEN CONTROL REGISTER 2
00052  0001                        ; BITS #0-#2 : HORIZONTAL RASTER SCROLL
00053  0001                        ; BIT #3 : SCREEN WIDTH ; 0 = 38 COLS 1 = 40 COLS
00054  0001                        ; BIT #4 : 1 = MULTICOLOR MODE ON
00055  0001                        ; DEFAULT : $C8 (%11001000)
00056  0001                        
00057  0001             VIC_MEMORY_CONTROL =  $D018        ; MEMORY SETUP REGISTER BITS
00058  0001                        ; BITS #1-#3 IN TEXT MODE ARE A POINTER
00059  0001                        ; TO CHARACTER MEMORY RELATIVE TO VIC_BANK ($DD00)
00060  0001                        ;       %000, 0 : $0000-$07FF
00061  0001                        ;       %001, 1 : $0800-$0FFF
00062  0001                        ;       %010, 2 : $1000-$17FF
00063  0001                        ;       %011, 3 : $1800-$1FFF
00064  0001                        ;       %100, 4 : $2000-$27FF
00065  0001                        ;       %101, 5 : $2800-$2FFF
00066  0001                        ;       %110, 6 : $3000-$37FF
00067  0001                        ;       %111, 7 : $3800-$3FFF
00068  0001                        ; VALUES %010 AND %011 IN VIC BANK #0 AND #2
00069  0001                        ; SELECT CHARACTER ROM INSTEAD
00070  0001                        ;
00071  0001                        ; IN BITMAP MODE, POINTER TO BITMAP MEMORY
00072  0001                        ; (BIT #13) RELATIVE TO VIC_BANK ADDRESS ($DD00)
00073  0001                        ;       %0XX, 0 : $0000-$1FFFF
00074  0001                        ;       %1XX, 4 : $2000-$3FFFF
00075  0001                        ;
00076  0001                        ; BITS #4-#7 : POINTER TO SCREEN MEMORY (BITS #10-#13)
00077  0001                        ; RELATIVE TO VIC_BANK ADDRESS ($DD00)
00078  0001                        ;       %0000, 0  : $0000 - $03FF
00079  0001                        ;       %0001, 1  : $0400 - $07FF
00080  0001                        ;       %0010, 2  : $0800 - $0BFF
00081  0001                        ;       %0011, 3  : $0C00 - $0FFF
00082  0001                        ;       %0100, 4  : $1000 - $13FF
00083  0001                        ;       %0101, 5  : $1400 - $17FF
00084  0001                        ;       %0110, 6  : $1800 - $1BFF
00085  0001                        ;       %0111, 7  : $1C00 - $1FFF
00086  0001                        ;       %1000, 8  : $2000 - $23FF
00087  0001                        ;       %1001, 9  : $2400 - $27FF
00088  0001                        ;       %1010, 10 : $2800 - $2BFF
00089  0001                        ;       %1011, 11 : $2C00 - $2FFF
00090  0001                        ;       %1100, 12 : $3000 - $33FF
00091  0001                        ;       %1101, 13 : $3400 - $37FF
00092  0001                        ;       %1110, 14 : $3800 - $3BFF
00093  0001                        ;       %1111, 15 : $3C00 - $3FFF
00094  0001             
00095  0001             VIC_MASK_IRQ =  $D019
00096  0001             
00097  0001             VIC_INTERRUPT_CONTROL =  $D01A        ; (53274) INTERRUPT CONTROL REGISTER
00098  0001                        ;  BIT #0 1 = RASTER INTERUPT ENABLED
00099  0001                        ;  BIT #1 1 = SPRITE - BACKGROUND COLLISION INTERUPT ENABLED
00100  0001                        ;  BIT #2 1 = SPRITE - SPRITE COLLISION INTERRUPT ENABLED
00101  0001                        ;  BIT #3 1 = LIGHT PEN INTERRUPT ENABLED
00102  0001             
00103  0001             VIC_SPRITE_MULTICOLOR =  $D01C        ; (53276) SPRITE MULTICOLOR MODE REGISTER
00104  0001                        ;  #BIT - SET INDIVIDUAL SPRITES TO MULTICOLOR
00105  0001                        ;  BIT #X = 0 - SPRITEX IS SINGLE COLOR 1 = SPRITE X IS MULTICOLOR
00106  0001                        ;
00107  0001             
00108  0001             VIC_BORDER_COLOR =  $D020        ; (53280) BORDER COLOR
00109  0001             VIC_BACKGROUND_COLOR =  $D021        ; (53281) BACKGROUND COLOR
00110  0001             VIC_CHARSET_MULTICOLOR_1 = $D022        ; (53282) EXTRA BACKGROUND COLOR 1 - MULTICOLOR 1
00111  0001             VIC_CHARSET_MULTICOLOR_2 = $D023        ; (53283) EXTRA BACKGROUND COLOR 2 - MULTICOLOR 2
00112  0001             VIC_CHARSET_MULTICOLOR_3 = $D024        ; (53284) EXTRA BACKGROUND COLOR 3
00113  0001             VIC_SPRITE_MULTICOLOR_1 =  $D025        ; (53285) SPRITE EXTRA COLOR 1
00114  0001             VIC_SPRITE_MULTICOLOR_2 =  $D026        ; (53286) SPRITE EXTRA COLOR 2
00115  0001             VIC_SPRITE_COLOR =  $D027        ; (53287) SPRITE COLOR ($D027 - $D02E = SPRITES 0 - 7)
00116  0001             
00117  0001             ; CIA REGISTERS
00118  0001             PORT_A     = $DC00        ; CIA PORT A - JOYSTICK #2
00119  0001             JOY_2      = $DC00        ; KEYBOARD MATRIX COLUMNS AND JOYSTICK #2
00120  0001                        ; READ BITS:
00121  0001                        ;       BIT #0 0 = PORT 2 JOYSTICK UP PRESSED
00122  0001                        ;       BIT #1 0 = PORT 2 JOYSTICK DOWN PRESSED
00123  0001                        ;       BIT #2 0 = PORT 2 JOYSTICK LEFT PRESSED
00124  0001                        ;       BIT #3 0 = PORT 2 JOYSTICK RIGHT PRESSED
00125  0001                        ;       BIT #4 0 = PORT 2 JOYSTICK FIRE PRESSED
00126  0001                        ; WRITE BITS:
00127  0001                        ;       BIT #X : 0 = SELECT KEYBOARD MATRIX COLUMN #X
00128  0001                        ;       BIT #6-#7 : PADLE SELECTION %01 = PADDLE 1; #10 = PADDLE #2
00129  0001             
00130  0001                        
00131  0001             INT_CONTROL = $DC0D        ; INTERRUPT CONTROL AND STATUS REGISTER
00132  0001                        ; READ BITS
00133  0001                        ;   #0 - 1 = TIMER A UNDERFLOW OCCURRED
00134  0001                        ;   #1 - 1 = TIMER B UNDERFLOW OCCURRED
00135  0001                        ;   #2 - 1 = TOD IS EQUAL TO ALARM TIME
00136  0001                        ;   #3 - 1 = A COMPLETE BYTE HAS BEEN RECEIVED INTO OR
00137  0001                        ;            SENT FROM SERIAL SHIFT REGISTER
00138  0001                        ;   #4 - SIGNAL LEVEL ON FLAG PIN, DATASETTE INPUT
00139  0001                        ;   #7 - AN INTERRUPT HAS BEEN GENERATED
00140  0001                        ;
00141  0001                        ; WRITE BITS
00142  0001                        ;   #0 - 1 = ENABLE INTERRUPTS GENERATED BY TIMER A UNDERFLOW
00143  0001                        ;   #1 - 1 = ENABLE INTERRUPTS GENERATED BY TIMER B UNDERFLOW
00144  0001                        ;   #2 - 1 = ENABLE TOD ALARM INTERRUPT
00145  0001                        ;   #3 - 1 = ENABLE INTERRUPTS GENERATED BY A BYTE HAVING BEEN
00146  0001                        ;                        RECIEVED/SENT VIA SERIAL SHIFT REGISTER
00147  0001                        ;   #4 - 1 = ENABLE INTERRUPTS GENERATED BY POSITIVY EDGE ON FLAG PIN
00148  0001                        ;   #7 - FILL BIT ; BITS #0-#6 THAT ARE SET TO 1, GET THEIR VALUES FROM
00149  0001                        ;        THIS BIT; BITS #0-#6, THAT ARE SET TO 0, ARE LEFT UNCHANGED
00150  0001             
00151  0001             VIC_BANK   = $DD00
00152  0001             CIA_PRA    = $DD00        ; CIA#2 - PORT_A, SERIAL BUS ACCESS
00153  0001                        ; BITS #0-#1 : VIC BANK VALUES
00154  0001                        ;       %00 - BANK #3 - $C000 - $FFFF
00155  0001                        ;       %01 - BANK #2 - $8000 - $BFFF
00156  0001                        ;       %10 - BANK #1 - $4000 - $7FFF
00157  0001                        ;       %11 - BANK #0 - $0000 - $3FFF
00158  0001                        ; BIT #2 - RS232 TXD LINE, OUTPUT BIT
00159  0001                        ; BIT #3 - SERIAL BUS ATN OUT; 0 = HIGH; 1 = LOW
00160  0001                        ; BIT #4 - SERIAL BUS CLOCK OUT; 0 - HIGH; 1 = LOW
00161  0001                        ; BIT #5 - SERIAL BUS DATA OUT; 0 - LOW ; 1 = HIGH
00162  0001                        ; BIT #6 - SERIAL BUS CLOCK IN; 0 = LOW; 1 = HIGH
00163  0001                        ; BIT #7 - SERIAL BUS DATA IN; 0 = LOW; 1 = HIGH
00164  0001                        
00165  0001             ;-------------------------------------------------------------------------------
00166  0001             ; ZERO PAGE
00167  0001             ;-------------------------------------------------------------------------------
00168  0001             PROC_PORT  = $0001
00169  0001             ; BITS #0 - #2 : CONFIGURATION FOR MEMORY AREAS $A000-$BFFF,
00170  0001                        ; $D000-$DFFF AND $E000-$FFFF
00171  0001             ;       VALUES :  %X00 :  RAM VISIBLE IN ALL 3 AREAS
00172  0001             ;                 %X01 :  RAM VISIBLE AT $A000-$BFFF AND $E000-$FFFF
00173  0001             ;                 %X10 :  RAM VISIBLE AT $A000-$BFFF ; KERNAL ROM VISIBLE AT $E000-$FFFF
00174  0001             ;                 %X11 :  BASIC ROM VISIBLE AT $A000-$BFFF; KERNAL ROM VISIBLE AT $E000-$FFFF
00175  0001             ;                 %1XX :  I/O AREA VISIBLE AT $D000-$DFFF (EXCEPT FOR THE VALUE %100, SEE ABOVE)
00176  0001             ;
00177  0001             ; BIT #3 : DATASETTE OUTPUT SIGNAL LEVEL
00178  0001             ; BIT #4 : DATASETTE BUTTON STATUS;  0 = ONE OR MORE OF PLAY,RECORD,FFWD OR REW PRESSED
00179  0001             ;                                    1 = NO BUTTON PRESSED
00180  0001             ; BIT #5 : DATASETTE MOTOR CONTROL; 0 = ON; 1 = OFF
00181  0001             ;
00182  0001             ; DEFAULT: #$37, %00110111
00183  0001             ;-------------------------------------------------------------------------------
00184  0001             ; COLORS
00185  0001             ;-------------------------------------------------------------------------------
00186  0001             COLOR_BLACK = 0
00187  0001             COLOR_WHITE = 1
00188  0001             COLOR_RED  = 2
00189  0001             COLOR_CYAN = 3
00190  0001             COLOR_VIOLET = 4
00191  0001             COLOR_GREEN = 5
00192  0001             COLOR_BLUE = 6
00193  0001             COLOR_YELLOW = 7
00194  0001             COLOR_ORANGE = 8
00195  0001             COLOR_BROWN = 9
00196  0001             COLOR_LTRED = 10
00197  0001             COLOR_GREY1 = 11
00198  0001             COLOR_GREY2 = 12
00199  0001             COLOR_LTGREEN = 13
00200  0001             COLOR_LTBLUE = 14
00201  0001             COLOR_GREY3 = 15
00202  0001             ;===============================================================================
00203  0001             ; CBM PRG STUDIO MACROS
00204  0001             ;===============================================================================
00205  0001             ; - PETER 'SIG' HEWETT
00206  0001             ; 2016
00207  0001             ;-------------------------------------------------------------------------------
00208  0001             ;  HELPER MACROS TO SHORTEN REPEDATIVE TASKS AND MAKE MORE READABLE CODE
00209  0001             ;-------------------------------------------------------------------------------
00210  0001             ;-------------------------------------------------------------------------------
00211  0001             ; LOADPOINTER
00212  0001             ;-------------------------------------------------------------------------------
00213  0001             ; USAGE :
00214  0001             ; LOADPOINTER <ZEROPAGE_POINTER>, <LABEL>
00215  0001             ;
00216  0001             ; LOADS THE ADDRESS OF <LABEL> INTO <ZEROPAGE_POINTER>
00217  0001             ; NOTE : THE LABLE MUST BE AN ABSOLUTE ADDRESS
00218  0001             ;-------------------------------------------------------------------------------
00219  0001             
00220  0001             DEFM       LOADPOINTER
00221  0001                        LDA #</2
00222  0001                        STA /1     ; ZEROPAGE_POINTER_1
00223  0001                        LDA #>/2
00224  0001                        STA /1 + 1 ; ZEROPAGE_POINTER_1 + 1
00225  0001             
00226  0001                        ENDM
00227  0001             
00228  0001             ;-------------------------------------------------------------------------------
00229  0001             ; COPY POINTER
00230  0001             ;-------------------------------------------------------------------------------
00231  0001             ; USAGE :
00232  0001             ; COPYPOINTER <SOURCE POINTER>, <DEST POINTER>
00233  0001             ;
00234  0001             ; COPIES THE CONTENTS OF ONE POINTER TO ANOTHER
00235  0001             ;-------------------------------------------------------------------------------
00236  0001             
00237  0001             DEFM       COPYPOINTER
00238  0001                        LDA /1     ; ZEROPAGE_POINTER_1
00239  0001                        STA /2     ; ZEROPAGE_POINTER_2
00240  0001                        LDA /1 + 1 ; ZEROPAGE_POINTER_1 + 1
00241  0001                        STA /2 + 1 ; ZEROPAGE_POINTER_2 + 1
00242  0001                        
00243  0001                        ENDM
00244  0001             
00245  0001             ;-------------------------------------------------------------------------------
00246  0001             ; ADD POINTER
00247  0001             ;-------------------------------------------------------------------------------
00248  0001             ; USAGE :
00249  0001             ; ADDPOINTER <POINTER ADDRESS>, <AMOUNT - 00 - FF>
00250  0001             ;
00251  0001             ; ADDS AN IMMEDIATE 1 BYTE AMOUNT TO A POINTER
00252  0001             ;-------------------------------------------------------------------------------
00253  0001             DEFM       ADDPOINTER
00254  0001                        LDA /1
00255  0001                        CLC
00256  0001                        ADC #/2
00257  0001                        STA /1
00258  0001                        LDA /1 + 1
00259  0001                        ADC #0
00260  0001                        STA /1 + 1
00261  0001             
00262  0001                        ENDM
00263  0001             ;-------------------------------------------------------------------------------
00264  0001             ;-------------------------------------------------------------------------------
00265  0001             ; SAVE REGISTERS
00266  0001             ;-------------------------------------------------------------------------------
00267  0001             ; USAGE :
00268  0001             ; SAVEREGS
00269  0001             ;
00270  0001             ; SAVES THE CONTENTS OF A X AND Y ONTO THE STACK
00271  0001             ;-------------------------------------------------------------------------------
00272  0001             DEFM       SAVEREGS
00273  0001                        PHA             ; SAVE A
00274  0001                        TXA
00275  0001                        PHA             ; SAVE X
00276  0001                        TYA
00277  0001                        PHA             ; SAVE Y
00278  0001                        ENDM
00279  0001             
00280  0001             ;-------------------------------------------------------------------------------
00281  0001             ; RESTORE REGISTERS
00282  0001             ;-------------------------------------------------------------------------------
00283  0001             ; USAGE:
00284  0001             ; RESTOREREGS
00285  0001             ;
00286  0001             ; PULLS SAVED VALUES OFF THE STACK AND RETURNS THEM TO A X AND Y
00287  0001             ;-------------------------------------------------------------------------------
00288  0001             
00289  0001             DEFM       RESTOREREGS
00290  0001                        PLA
00291  0001                        TAY             ; RESTORE Y
00292  0001                        PLA
00293  0001                        TAX             ; RESTORE X
00294  0001                        PLA             ; RESTORE A
00295  0001                        ENDM
00296  0001             ;===============================================================================
00297  0001             ;===============================================================================
00298  0001             ; CONSTANTS
00299  0001             ;===============================================================================
00300  0001             
00301  0001             CONSOLE_TEXT = SPRITE_CONSOLE_TEXT
00302  0001             CONSOLE_DISPLAY = DISPLAYSPRITEINFO
00303  0001             
00304  0001             
00305  0001             SCREEN1_MEM = $4000                 ; BANK 1 - SCREEN 0 ; $4000
00306  0001             SCREEN2_MEM = $4400                 ; BANK 1 - SCREEN 1 ; $4400
00307  0001             SCORE_SCREEN = $5800                 ; BANK 1 - SCREEN 6 ; $5800
00308  0001             
00309  0001             ;MAP_MEM = $8000
00310  0001             ;ATTRIBUTE_MEM = MAP_MEM + 2
00311  0001             ;TILE_MEM = ATTRIBUTE_MEM + 2
00312  0001             
00313  0001             
00314  0001             ; ****** CURRENT PROJECT *******
00315  0001             ; START $4800: 18432
00316  0001             
00317  0001             ; TOP BLUE BACKGROUND: 18680
00318  0001             ; ROCK STACKED WALL: 19112
00319  0001             ; REGULAR BRICK WALL: 19256
00320  0001             ; POLE FACING TO LEFT: 19304
00321  0001             ; TOP PART OF WALL (BEHIND WINDOW): 19544
00322  0001             ; SOLID WATER PART: 19744, 19888
00323  0001             ; ROCK STACKED WALL: 19864
00324  0001             
00325  0001             CHRADR1    = 19992                      ; MIDDLE OF ROPE
00326  0001             CHRADR2    = 19144                      ; TOP OF WINDOW
00327  0001             CHRADR3    = 20128                      ; TOP WATER TILE: 20288
00328  0001             CHRADR3    = 19544                     ; 20200, 20080: ROCK STACKED WALL
00329  0001             
00330  0001             ; 19544 = TOP PART OF ORANGE (BACKGROUND WALL)
00331  0001             ; 20128 = TOP MIDDLE OF ROPE FACING RIGHT
00332  0001             ; 20144 = TOP PART OF ROPE FACING RIGHT
00333  0001             ; 20192 = CENTER OF ROPE FACING RIGHT
00334  0001             ; 20224 = TOP/CENTER OF ROPE FACING LEFT (TOP PART)
00335  0001             
00336  0001             ; 20320 = TOP OF WATER
00337  0001             CHRADR4    = 20312
00338  0001             
00339  0001             COLOR_MEM  = $D800                   ; COLOR MEM NEVER CHANGES
00340  0001             
00341  0001             SPRITE_POINTER_BASE = SCREEN1_MEM + $3F8 ; LAST 8 BYTES OF SCREEN MEM
00342  0001             
00343  0001             SPRITE_BASE = $70                       ; THE POINTER TO THE FIRST IMAGE#
00344  0001             
00345  0001             SPRITE_0_PTR = SPRITE_POINTER_BASE + 0  ; SPRITE POINTERS
00346  0001             SPRITE_1_PTR = SPRITE_POINTER_BASE + 1
00347  0001             SPRITE_2_PTR = SPRITE_POINTER_BASE + 2
00348  0001             SPRITE_3_PTR = SPRITE_POINTER_BASE + 3
00349  0001             SPRITE_4_PTR = SPRITE_POINTER_BASE + 4
00350  0001             SPRITE_5_PTR = SPRITE_POINTER_BASE + 5
00351  0001             SPRITE_6_PTR = SPRITE_POINTER_BASE + 6
00352  0001             SPRITE_7_PTR = SPRITE_POINTER_BASE + 7
00353  0001             
00354  0001             ; SET MAP WALKING LIMITS
00355  0001             MAP_RIGHT_LIMIT = 17
00356  0001             MAP_DOWN_LIMIT = 10
00357  0001             
00358  0001             ; FARMLIFE
00359  0001             TILE_DEPTH1 = 16
00360  0001             TILE_DEPTH2 = 32
00361  0001             TILE_DEPTH3 = 48
00362  0001             TILE_DEPTH4 = 64
00363  0001             TILE_DEPTH5 = 80
00364  0001             TILE_DEPTH6 = 96
00365  0001             TILE_DEPTH7 = 112
00366  0001             TILE_DEPTH8 = 128
00367  0001             TILE_DEPTH9 = 144
00368  0001             TILE_DEPTH10 = 160
00369  0001             TILE_DEPTH11 = 176
00370  0001             TILE_DEPTH12 = 192
00371  0001             TILE_DEPTH13 = 208
00372  0001             TILE_DEPTH14 = 224
00373  0001             TILE_DEPTH15 = 240
00374  0001             TILE_DEPTH16 = 256
00375  0001             TILE_DEPTH17 = 272
00376  0001             TILE_DEPTH18 = 288
00377  0001             TILE_DEPTH19 = 304
00378  0001             TILE_DEPTH20 = 320
00379  0001             TILE_DEPTH21 = 336
00380  0001             
00381  0001             TILE2_DEPTH1 = 17
00382  0001             TILE2_DEPTH2 = 34
00383  0001             TILE2_DEPTH3 = 51
00384  0001             TILE2_DEPTH4 = 68
00385  0001             TILE2_DEPTH5 = 85
00386  0001             TILE2_DEPTH6 = 102
00387  0001             TILE2_DEPTH7 = 119
00388  0001             TILE2_DEPTH8 = 136
00389  0001             TILE2_DEPTH9 = 153
00390  0001             TILE2_DEPTH10 = 170
00391  0001             TILE2_DEPTH11 = 187
00392  0001             TILE2_DEPTH12 = 204
00393  0001             TILE2_DEPTH13 = 221
00394  0001             TILE2_DEPTH14 = 238
00395  0001             TILE2_DEPTH15 = 255
00396  0001             TILE2_DEPTH16 = 272
00397  0001             TILE2_DEPTH17 = 289
00398  0001             TILE2_DEPTH18 = 306
00399  0001             TILE2_DEPTH19 = 323
00400  0001             TILE2_DEPTH20 = 340
00401  0001             TILE2_DEPTH21 = 357
00402  0001             
00403  0001             SPRITE_DELTA_OFFSET_X = 8               ; OFFSET FROM SPRITE COORDS TO DELTA CHAR COORDS
00404  0001             SPRITE_DELTA_OFFSET_Y = 14
00405  0001             
00406  0001             ENEMY_SPRITE_DELTA_OFFSET_X = 8
00407  0001             ENEMY_SPRITE_DELTA_OFFSET_Y = 14
00408  0001             
00409  0001             NUMBER_OF_SPRITES_DIV_4 = 3           ; THIS IS FOR MY PERSONAL VERSION, WHICH
00410  0001                        ; LOADS SPRITES AND CHARACTERS UNDER IO ROM
00411  0001             LEVEL_1_MAP = $E000                 ;ADDRESS OF LEVEL 1 TILES/CHARSETS
00412  0001             
00413  0001             
00414  0001             ;===============================================================================
00415  0001             ; GAME TIMERS
00416  0001             ;===============================================================================
00417  0001             CIA1_TIMA_LO = $DC04
00418  0001             CIA1_TIMA_HI = $DC05
00419  0001             CIA1_TIMB_LO = $DC06
00420  0001             CIA1_TIMB_HI = $DC07
00421  0001             
00422  0001             ;===============================================================================
00423  0001             ; ZERO PAGE LABELS
00424  0001             ;===============================================================================
00425  0001             
00426  0001             PARAM1     = $03                 ; THESE WILL BE USED TO PASS PARAMETERS TO ROUTINES
00427  0001             PARAM2     = $04                 ; WHEN YOU CAN'T USE REGISTERS OR OTHER REASONS
00428  0001             PARAM3     = $05
00429  0001             PARAM4     = $06                 ; ESSENTIALLY, THINK OF THESE AS EXTRA DATA REGISTERS
00430  0001             
00431  0001             PARAM5     = $07
00432  0001             
00433  0001             TIMER      = $08                  ; TIMERS - FAST AND SLOW, UPDATED EVERY FRAME
00434  0001             SLOW_TIMER = $09
00435  0001             
00436  0001             WPARAM1    = $0A                ; WORD LENGTH PARAMS. SAME AS ABOVE ONLY ROOM FOR 2
00437  0001             WPARAM2    = $0C                ; BYTES (OR AN ADDRESS)
00438  0001             WPARAM3    = $0E
00439  0001             
00440  0001             ;---------------------------- $11 - $16 AVAILABLE
00441  0001             
00442  0001             ZEROPAGE_POINTER_1 = $17
00443  0001             ZEROPAGE_POINTER_2 = $19
00444  0001             ZEROPAGE_POINTER_3 = $21
00445  0001             ZEROPAGE_POINTER_4 = $23
00446  0001             
00447  0001             CURRENT_SCREEN = $25       ; POINTER TO CURRENT FRONT SCREEN
00448  0001             CURRENT_BUFFER = $27       ; POINTER TO CURRENT BACK BUFFER
00449  0001             
00450  0001             SCROLL_COUNT_X = $29       ; CURRENT HARDWARE SCROLL VALUE
00451  0001             SCROLL_COUNT_Y = $2A
00452  0001             SCROLL_SPEED = $2B       ; SCROLL SPEED (NOT IMPLEMENTED YET)
00453  0001             SCROLL_DIRECTION = $2C       ; DIRECTION WE ARE SCROLLING IN
00454  0001             SCROLL_MOVING = $2D       ; ARE WE MOVING? (SET TO DIRECTION OF SCROLLING)
00455  0001                        ; THIS IS FOR RESETTING BACK TO START FRAMES
00456  0001             
00457  0001                        ; ALL DATA IS FOR THE TOP LEFT CORNER OF THE VISIBLE MAP AREA
00458  0001             MAP_POS_ADDRESS = $2E       ; (2 BYTES) POINTER TO CURRENT ADDRESS IN THE LEVEL MAP
00459  0001             MAP_X_POS  = $30       ; CURRENT MAP X POSITION (IN TILES)
00460  0001             MAP_Y_POS  = $31       ; CURRENT MAP Y POSITION (IN TILES)
00461  0001             MAP_X_DELTA = $32       ; MAP SUB TILE DELTA (IN CHARACTERS)
00462  0001             MAP_Y_DELTA = $33       ; MAP SUB TILE DELTA (IN CHARACTERS)
00463  0001             
00464  0001             ENMAP_X_POS = $34       ; CURRENT MAP X POSITION (IN TILES)
00465  0001             ENMAP_Y_POS = $35       ; CURRENT MAP Y POSITION (IN TILES)
00466  0001             ENMAP_X_DELTA = $36       ; MAP SUB TILE DELTA (IN CHARACTERS)
00467  0001             ENMAP_Y_DELTA = $37       ; MAP SUB TILE DELTA (IN CHARACTERS)
00468  0001             
00469  0001             
00470  0001             
00471  0001             ;===============================================================================
00472  0001             ; BASIC KICKSTART
00473  0001             ;===============================================================================
00474  0001             KICKSTART
00475  0001             ; SYS CALL TO START THE PROGRAM - 10 SYS (2064)
00476  0001             
00477  0001             ;*=$0801
00478  0001             
00479  0001             ;        BYTE $0E,$08,$0A,$00,$9E,$20,$28,$32,$30,$36,$34,$29,$00,$00,$00
00480  0001             
00481  0001             ;===============================================================================
00482  0001             ; START OF GAME PROJECT
00483  0001             ;===============================================================================
00484  0001             *=$0810
00485  0810             
00486  0810             PRG_START
00487  0810  A9 00                 LDA #0                          ; TURN OFF SPRITES
00488  0812  8D 15 D0              STA VIC_SPRITE_ENABLE
00489  0815             
00490  0815  AD 11 D0              LDA VIC_SCREEN_CONTROL          ; TURN SCREEN OFF WITH BIT 4
00491  0818  29 E0                 AND #%11100000                  ; MASK OUT BIT 4 - SCREEN ON/OFF
00492  081A  8D 11 D0              STA VIC_SCREEN_CONTROL          ; SAVE BACK - SETTING BIT 4 TO OFF
00493  081D             
00494  081D             ;===============================================================================
00495  081D             ; SETUP VIC BANK MEMORY
00496  081D             ;===============================================================================
00497  081D             
00498  081D                        ; TO SET THE VIC BANK WE HAVE TO CHANGE THE FIRST 2 BITS IN THE
00499  081D                        ; CIA 2 REGISTER. SO WE WANT TO BE CAREFUL AND ONLY CHANGE THE
00500  081D                        ; BITS WE NEED TO.
00501  081D             
00502  081D  AD 00 DD              LDA VIC_BANK            ; FETCH THE STATUS OF CIA 2 ($DD00)
00503  0820  29 FC                 AND #%11111100          ; MASK FOR BITS 2-8
00504  0822  09 02                 ORA #%00000010          ; THE FIRST 2 BITS ARE YOUR DESIRED VIC BANK VALUE
00505  0824                        ; IN THIS CASE BANK 1 ($4000 - $7FFF)
00506  0824  8D 00 DD              STA VIC_BANK
00507  0827                        
00508  0827             
00509  0827             ;===============================================================================
00510  0827             ; CHARACTER SET ENABLE: SCREEN MEMORY
00511  0827             ;===============================================================================
00512  0827                        ; WITHIN THE VIC BANK WE CAN SET WHERE WE WANT OUR SCREEN AND CHARACTER
00513  0827                        ; SET MEMORY TO BE USING THE VIC_MEMORY_CONTROL AT $D018
00514  0827                        ; IT IS IMPORTANT TO NOTE THAT THE VALUES GIVEN ARE RELATIVE TO THE START
00515  0827                        ; ADDRESS OF THE VIC BANK YOU ARE USING.
00516  0827                        
00517  0827  A9 02                 LDA #%00000010   ; BITS 1-3 (001) = CHARACTER MEMORY 2 : $0800 - $0FFF
00518  0829                        ; BITS 4-7 (000) = SCREEN MEMORY 0 : $0000 - $03FF
00519  0829             
00520  0829  8D 18 D0              STA VIC_MEMORY_CONTROL
00521  082C             
00522  082C                        ; BECAUSE THESE ARE RELATIVE TO THE VIC BANKS BASE ADDRESS (BANK 1 = $4000)
00523  082C                        ; THIS GIVES US A BASE SCREEN MEMORY ADDRESS OF $4000 AND A BASE
00524  082C                        ; CHARACTER SET MEMORY OF $4800
00525  082C                        ;
00526  082C                        ; SPRITE POINTERS ARE THE LAST 8 BYTES OF SCREEN MEMORY (25 * 40 = 1000 AND
00527  082C                        ; YET EACH SCREEN RESERVES 1024 BYTES). SO SPRITE POINTERS START AT
00528  082C                        ; $4000 + $3F8.
00529  082C             
00530  082C                        ; AFTER ALLOCTION OF VIC MEMORY FOR SCREEN, BACKBUFFER, SCOREBOARD, AND
00531  082C                        ; 2 CHARACTER SETS , ARRANGED TO ONE SOLID BLOCK OF MEM,
00532  082C                        ; SPRITE DATA STARTS AT $5C00 - GIVING THE INITIAL IMAGE A POINTER VALUE OF $70
00533  082C                        ; AND ALLOWING FOR UP TO 144 SPRITE IMAGES
00534  082C             
00535  082C             
00536  082C             ;===============================================================================
00537  082C             ; SYSTEM INITIALIZATION
00538  082C             ;===============================================================================
00539  082C             
00540  082C             SYSTEM_SETUP 
00541  082C             
00542  082C                        ; HERE IS WHERE WE COPY LEVEL 1 DATA FROM THE START SETUP TO UNDER
00543  082C                        ; $E000 SO WE CAN USE IT LATER WHEN THE GAME RESETS.
00544  082C                        ; A LITTLE BANK SWITCHING IS INVOLVED HERE.
00545  082C  78                    SEI
00546  082D             
00547  082D                        ; HERE YOU LOAD AND STORE THE PROCESSOR PORT ($0001), THEN USE
00548  082D                        ; IT TO TURN OFF LORAM (BASIC), HIRAM (KERNAL), CHAREN (CHARACTER ROM)
00549  082D                        ; THEN USE A ROUTINE TO COPY YOUR SPRITE AND CHARACTER MEM UNDER THERE
00550  082D                        ; BEFORE RESTORING THE ORIGINAL VALUE OF $0001 AND TURNING INTERRUPTS
00551  082D                        ; BACK ON.
00552  082D             
00553  082D  A5 01                 LDA PROC_PORT                   ; STORE RAM SETUP
00554  082F  85 03                 STA PARAM1
00555  0831             
00556  0831  A9 30                 LDA #%00110000                  ; SWITCH OUT BASIC, KERNAL, CHAREN, IO
00557  0833  85 01                 STA PROC_PORT
00558  0835             
00559  0835                        ; WHEN THE GAME STARTS, LEVEL 1 TILES AND CHARACTERS ARE STORED IN PLACE TO RUN,
00560  0835                        ; HOWEVER, WHEN THE GAME RESETS WE WILL NEED TO RESTORE THESE LEVELS INTACT.
00561  0835                        ; SO WE'RE SAVING THEM AWAY TO LOAD LATER UNDER THE KERNAL AT $E000-$EFFF (4K)
00562  0835                        ; TO DO THIS WE NEED TO DO SOME BANK SWITCHING, COPY DATA, THEN RESTORE AS
00563  0835                        ; WE MAY USE THE KERNAL LATER FOR SOME THINGS.
00564  0835             
00565  0835  A5 03                 LDA PARAM1                      ; RESTORE RAM SETUP
00566  0837  85 01                 STA PROC_PORT
00567  0839  58                    CLI
00568  083A             
00569  083A             ;===============================================================================
00570  083A             ; SCREEN SETUP
00571  083A             ;===============================================================================
00572  083A             
00573  083A             SCREEN_SETUP 
00574  083A  A9 00                 LDA #COLOR_BLACK
00575  083C  8D 21 D0              STA VIC_BACKGROUND_COLOR
00576  083F  A9 0C                 LDA #COLOR_GREY2
00577  0841  8D 22 D0              STA VIC_CHARSET_MULTICOLOR_1
00578  0844  A9 0B                 LDA #COLOR_GREY1
00579  0846  8D 23 D0              STA VIC_CHARSET_MULTICOLOR_2
00580  0849             
00581  0849             
00582  0849             
00583  0849  A9 00                 LDA #<SCREEN1_MEM
00584  084B  85 25                 STA CURRENT_SCREEN
00585  084D  A9 40                 LDA #>SCREEN1_MEM
00586  084F  85 26                 STA CURRENT_SCREEN + 1
00587  0851             
00588  0851             
00589  0851             
00590  0851  A9 00                 LDA #<SCREEN2_MEM
00591  0853  85 27                 STA CURRENT_BUFFER
00592  0855  A9 44                 LDA #>SCREEN2_MEM
00593  0857  85 28                 STA CURRENT_BUFFER + 1
00594  0859             
00595  0859             
00596  0859             ; LOAD IN HOTEL: CHARS, MAP, ATTRIBS & TILES
00597  0859             ; FROM OUR DISK IMAGE
00598  0859             
00599  0859  A2 00                 LDX #0
00600  085B  20 C5 0C              JSR LOADCHSETFROMDISK
00601  085E                        ;LDX #1
00602  085E                        ;JSR LOADCHSETFROMDISK
00603  085E                        ;LDX #2
00604  085E                        ;JSR LOADCHSETFROMDISK
00605  085E                        ;LDX #3
00606  085E                        ;JSR LOADCHSETFROMDISK
00607  085E                        
00608  085E                        ;JSR LOADHOTELTILESFROMDISK
00609  085E             
00610  085E                        ;JSR LOADHOTELMAP
00611  085E                        ;JSR LOADNEWTILES
00612  085E             
00613  085E  A2 03                 LDX #3                        ; (129,26=DEFAULT), 61
00614  0860  A0 02                 LDY #2                          ; , 27
00615  0862             
00616  0862  20 D1 21              JSR DRAWMAP                     ; DRAW THE LEVEL MAP (SCREEN1)
00617  0865                        ; AND INITIALIZE IT
00618  0865             
00619  0865  20 E9 20              JSR COPYTOBUFFER                ; COPY TO THE BACKBUFFER(SCREEN2)
00620  0868             
00621  0868             
00622  0868             ;*******************************************************************************
00623  0868             ;               TURN OFF 2ND SCREEN STATS DISPLAY (FOR NOW)
00624  0868             ;******************************************************************************'
00625  0868             
00626  0868                        ;LOADPOINTER ZEROPAGE_POINTER_1, CONSOLE_TEXT
00627  0868             
00628  0868             
00629  0868  A9 96                 LDA #<ADMIN_TEST_DISPLAY
00630  086A  85 17                 STA ZEROPAGE_POINTER_1
00631  086C  A9 3B                 LDA #>ADMIN_TEST_DISPLAY
00632  086E  85 18                 STA ZEROPAGE_POINTER_1 + 1
00633  0870             
00634  0870                        ;LOADPOINTER ZEROPAGE_POINTER_1, GAME_PANEL_DISPLAY
00635  0870             
00636  0870  A9 00                 LDA #0                          ; PARAM1 CONTAINS X SCREEN COORD (COLUMN)
00637  0872  85 03                 STA PARAM1
00638  0874  A9 13                 LDA #19                         ; PARAM2 CONTAINS Y SCREEN COORD (ROW)
00639  0876  85 04                 STA PARAM2
00640  0878  A9 01                 LDA #COLOR_WHITE                ; PARAM3 CONTAINS THE COLOR TO USE
00641  087A  85 05                 STA PARAM3
00642  087C  20 54 20              JSR DISPLAYTEXT                 ; THEN WE DISPLAY THE STATS PANEL
00643  087F                        
00644  087F  20 D7 0B              JSR WAITFRAME
00645  0882  20 C6 0A              JSR INITRASTERIRQ               ; SETUP RASTER INTERRUPTS
00646  0885  20 D7 0B              JSR WAITFRAME
00647  0888             
00648  0888                        
00649  0888  A9 1B                 LDA #%00011011                  ; DEFAULT (Y SCROLL = 3 BY DEFAULT)
00650  088A  8D 11 D0              STA VIC_SCREEN_CONTROL
00651  088D  A9 00                 LDA #COLOR_BLACK
00652  088F  8D 20 D0              STA VIC_BORDER_COLOR
00653  0892             
00654  0892             
00655  0892             
00656  0892             ;===============================================================================
00657  0892             ;  SPRITE SETUP
00658  0892             ;===============================================================================
00659  0892             
00660  0892             
00661  0892             SPRITE_SETUP 
00662  0892  A9 00                 LDA #0
00663  0894  8D 15 D0              STA VIC_SPRITE_ENABLE           ; TURN ALL SPRITES OFF
00664  0897  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; CLEAR ALL EXTENDED X BITS
00665  089A  8D 88 35              STA SPRITE_POS_X_EXTEND         ; IN REGISTERS AND DATA
00666  089D             
00667  089D  20 35 10              JSR PLAYERINIT
00668  08A0  20 60 18              JSR ENEMYSETUP
00669  08A3             
00670  08A3  A9 FF                 LDA #%11111111                  ; TURN ON SPRITES 0 1 AND 7
00671  08A5  8D 15 D0              STA VIC_SPRITE_ENABLE
00672  08A8             
00673  08A8             
00674  08A8             
00675  08A8             ;===============================================================================
00676  08A8             ;  MAIN LOOP
00677  08A8             ;===============================================================================
00678  08A8             MAINLOOP
00679  08A8  20 D7 0B              JSR WAITFRAME                   ; WAIT FOR THE VERTICAL BLANK PERIOD
00680  08AB  20 E6 0B              JSR UPDATETIMERS
00681  08AE  20 9F 10              JSR UPDATEPLAYER                 ; PLAYER ANIMATION, ETC.
00682  08B1  20 CF 24              JSR UPDATESCROLL
00683  08B4  20 87 18              JSR UPDATEENEMY                  ; ENEMY ANIMATION, ETC.
00684  08B7  20 88 38              JSR DISPLAYSPRITEINFONOW              ; DISPLAY SIMPLE DEBUG INFO
00685  08BA                        ;JSR ANIMATESTREETLIGHT
00686  08BA  4C A8 08              JMP MAINLOOP
00687  08BD             
00688  08BD             ;===============================================================================
00689  08BD             ; FILES IN GAME PROJECT
00690  08BD             ;===============================================================================
00691  08BD             `;============================================================================== 
00692  08BD             ; COLLISION ROUTINES
00693  08BD             ;===============================================================================
00694  08BD             ; PETER 'SIG' HEWETT
00695  08BD             ; - 2016,2017
00696  08BD             ;-------------------------------------------------------------------------------
00697  08BD             ; ROUTINES DEALING WITH COLLISIONS BETWEEN GAME OBJECTS
00698  08BD             ;
00699  08BD             ;===============================================================================
00700  08BD             ; SPRITE TO BACKGROUND CHARACTERS
00701  08BD             ;===============================================================================
00702  08BD             ; CHECKS TO SEE IF THE SPRITE IS COLLIDING WITH A BACKGROUND CHARACTER.
00703  08BD             ; MANY OF THESE CHECKS WILL BE 'FORWARD LOOKING' (ESPECIALLY IN MOVEMENT CHECKS)
00704  08BD             ; WE WILL BE LOOKING TO WHERE THE SPRITE WILL BE, NOT WHERE IT IS, AND THEN
00705  08BD             ; LETTING THE SPRITE HANDLING ROUTINES UPDATE THE POSITIONS AND DELTAS FOR US
00706  08BD             ; IF WE MOVE.
00707  08BD             ;
00708  08BD             ; THE ORIGINAL 'FRAMEWORK CODE' WORKED AGAINST A SINGLE SCREEN AND RETURNED A SIMPLE
00709  08BD             ; 1 FOR BLOCKED AND 0 FOR CLEAR. WE NEED A MUCH BETTER SYSTEM FOR THE GAME ENGINE
00710  08BD             ; THAT WILL HANDLE DOUBLE BUFFERED SCREENS AS WELL AS CALCULATING SCREEN SCROLLING.
00711  08BD             ; IT WILL ALSO NEED TO RETURN MORE INFORMATION DEALING WITH DIFFERENT TYPES OF BLOCKS
00712  08BD             ;
00713  08BD             ;
00714  08BD             ;===============================================================================
00715  08BD             ; CHECK MOVE LEFT
00716  08BD             ;-------------------------------------------------------------------------------
00717  08BD             ; CHECKS AHEAD TO SEE IF THIS SPRITE CAN LOVE LEFT, OF IT'S GOING TO BE STOPPED
00718  08BD             ; BY A BLOCKING CHARACTER
00719  08BD             ;
00720  08BD             ; X = SPRITE WE WANT TO CHECK FOR
00721  08BD             ;
00722  08BD             ; RETURNS A = 0 WE CAN MOVE OR A = 1 WE ARE BLOCKED
00723  08BD             ;
00724  08BD             ; MODIFIES A, Y, PARAM1, PARAM2
00725  08BD             ; X REGISTER IS LEFT INTACT
00726  08BD             ;-------------------------------------------------------------------------------
00727  08BD             
00728  08BD             CHECKMOVELEFT 
00729  08BD  BD 78 35              LDA SPRITE_CHAR_POS_X,X                 ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
00730  08C0  85 03                 STA PARAM1
00731  08C2  BD 99 35              LDA SPRITE_CHAR_POS_Y,X                 ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
00732  08C5  85 04                 STA PARAM2
00733  08C7             
00734  08C7  BD 70 35              LDA SPRITE_POS_X_DELTA,X                ; LOAD X POS DELTA
00735  08CA  38                    SEC
00736  08CB  E5 29                 SBC SCROLL_COUNT_X                      ; ADJUST THE DELTA FOR SCROLLING LEFT/RIGHT
00737  08CD  10 02                 BPL @NOADJX                             ; CHECK TO SEE IF DELTA WRAPS TO -1 ($FF)
00738  08CF             
00739  08CF  C6 03                 DEC PARAM1                              ; IF THE DELTA WRAPS, ADJUST THE X CHAR POSITION
00740  08D1             
00741  08D1             ; HERE WE ARE CHECKING THE SPRITE AS IT CONTACTS A TILE MOVING TO THE LEFT
00742  08D1             ; (GENERATING A COLLISION). WHEN A COLLISION OCCURS ("SPRITE IS FLUSH"),
00743  08D1             ; GO TO SUBROUTINE @CHECKLEFT.
00744  08D1             
00745  08D1             
00746  08D1             @NOADJX
00747  08D1  29 07                 AND #%0111                              ; MASK THE DELTA VALUE BACK TO A 0-7 VALUE
00748  08D3  C9 00                 CMP #0                                  ; CHECK X DELTA TO SEE IF THE SPRITE IS 'FLUSH'
00749  08D5  F0 03                 BEQ @CHECKLEFT                          ; IF IT IS, CONTINUE
00750  08D7  A9 00                 LDA #0                                  ; ELSE RETURN WITH A 'CLEAR' CODE
00751  08D9  60                    RTS
00752  08DA             
00753  08DA             @CHECKLEFT 
00754  08DA  BD 91 35              LDA SPRITE_POS_Y_DELTA,X                ; LOAD THE SPRITE DELTA Y POS
00755  08DD  38                    SEC                                     ; SUBTRACT THE CURRENT Y SCROLL
00756  08DE  E5 2A                 SBC SCROLL_COUNT_Y
00757  08E0  10 02                 BPL @NOADJY                             ; IF IT WRAPS, DECREMENT THE Y CHAR POSITION
00758  08E2             
00759  08E2  C6 04                 DEC PARAM2
00760  08E4             @NOADJY
00761  08E4  29 07                 AND #%0111                              ; MASK BACK TO A 0-7 VALUE
00762  08E6  F0 10                 BEQ @CHECKLEFT2                         ; IF ADJUSTED DELTA Y IS 0, WE ONLY NEED TO CHECK 2
00763  08E8                        ; CHARACTERS
00764  08E8             
00765  08E8                        ; IF NOT WE NEED TO CHECK 3 CHARACTERS
00766  08E8             
00767  08E8  A4 04                 LDY PARAM2                              ; LOAD ADJUSTED Y CHAR POSITION (SCREEN LINE)
00768  08EA  C8                    INY                                     ; INCREMENT BY ONE LINE
00769  08EB             
00770  08EB  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS           ; USE SCREEN_ROUTINES HELPER TO FETCH THE ADDRESS
00771  08EE             
00772  08EE  A4 03                 LDY PARAM1                              ; FETCH SPRITES X POSITION
00773  08F0  88                    DEY                                     ; SUB 1 CHARACTER (LEFT)
00774  08F1             
00775  08F1  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; FETCH THE CHARACTER FROM SCREEN MEMORY
00776  08F3             
00777  08F3  20 81 0A              JSR TESTBLOCKING                        ; TEST FOR A BLOCKING CHARACTER
00778  08F6  D0 1F                 BNE @BLOCKEDLEFT
00779  08F8                        
00780  08F8                        ; OTHERWISE CHECK THE OTHER 2 CHARACTERS
00781  08F8             @CHECKLEFT2 
00782  08F8  A4 04                 LDY PARAM2                              ; FETCH THE SPRITE Y CHAR POSITION
00783  08FA  88                    DEY                                     ; GO ONE LINE UP
00784  08FB  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS
00785  08FE             
00786  08FE  A4 03                 LDY PARAM1
00787  0900  88                    DEY                                     ; ONE CHAR LEFT
00788  0901             
00789  0901             
00790  0901  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
00791  0903  20 81 0A              JSR TESTBLOCKING
00792  0906  D0 0F                 BNE @BLOCKEDLEFT
00793  0908             
00794  0908  98                    TYA
00795  0909  18                    CLC
00796  090A  69 28                 ADC #40
00797  090C  A8                    TAY
00798  090D                        
00799  090D  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
00800  090F  20 81 0A              JSR TESTBLOCKING
00801  0912  D0 03                 BNE @BLOCKEDLEFT
00802  0914                        
00803  0914  A9 00                 LDA #0
00804  0916  60                    RTS
00805  0917                        
00806  0917             @BLOCKEDLEFT 
00807  0917  A9 01                 LDA #1
00808  0919  60                    RTS
00809  091A             
00810  091A             
00811  091A             
00812  091A             ;===============================================================================
00813  091A             ; CHECK MOVE RIGHT
00814  091A             ;-------------------------------------------------------------------------------
00815  091A             ; BASED ON THE PREVIOUS 'CANMOVERIGHT' ROUTINE. IT CHECKS AHEAD TO SEE IF THERE
00816  091A             ; ARE GOING TO BE BLOCKING CHARACTERS IN THE DIRECTION WE WANT TO MOVE.
00817  091A             ;
00818  091A             ; THIS VERSION CHECKS THE APPROPRIATE FRONT SCREEN AND RETURNS A CODE. 0 FOR
00819  091A             ; CLEAR OR 1-255 FOR
00820  091A             ; ANY SPECIAL ACTION THAT CAN OR MUST BE TAKEN.
00821  091A             ;
00822  091A             ; X = SPRITE TO CHECK AGAINST
00823  091A             ;
00824  091A             ; MODIFIES Y, PARAM1, PARAM2
00825  091A             ;
00826  091A             ; RETURNS A = BLOCKING CODE
00827  091A             ; X REGISTER IS LEFT INTACT
00828  091A             ;-------------------------------------------------------------------------------
00829  091A             
00830  091A             
00831  091A             CHECKMOVERIGHT 
00832  091A             
00833  091A  BD 78 35              LDA SPRITE_CHAR_POS_X,X         ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
00834  091D  85 03                 STA PARAM1
00835  091F  BD 99 35              LDA SPRITE_CHAR_POS_Y,X         ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
00836  0922  85 04                 STA PARAM2
00837  0924             
00838  0924  BD 70 35              LDA SPRITE_POS_X_DELTA,X        ; FETCH X DELTA
00839  0927  38                    SEC
00840  0928  E5 29                 SBC SCROLL_COUNT_X              ; SUBTRACT THE SCROLL COUNT
00841  092A  10 02                 BPL @NOADJX
00842  092C                        
00843  092C  C6 03                 DEC PARAM1                      ; INCREMENT PARAM1
00844  092E             
00845  092E             @NOADJX
00846  092E  29 07                 AND #%0111                      ; MASK BACK TO A RANGE OF 0-7 ; NO ADJUSTMENT IS NEEDED
00847  0930  C9 02                 CMP #2                          ; IS NEW DELTA = 0?
00848  0932  F0 03                 BEQ @CHECKRIGHT                 ; IF SO, WE CAN CHECK RIGHT
00849  0934  A9 00                 LDA #0                          ; OTHERWISE GIVE A CLEAR CODE AND CARRY ON
00850  0936  60                    RTS
00851  0937             
00852  0937             
00853  0937             @CHECKRIGHT 
00854  0937  BD 91 35              LDA SPRITE_POS_Y_DELTA,X        ; LOAD THE Y DELTA
00855  093A  38                    SEC
00856  093B  E5 2A                 SBC SCROLL_COUNT_Y              ; ADJUST BY THE CURRENT Y SCROLL VALUE
00857  093D  10 02                 BPL @NOADJY                     ; IF THE DELTA GOES BELOW 0 ADJUST Y POSITION
00858  093F             
00859  093F  C6 04                 DEC PARAM2
00860  0941             
00861  0941             @NOADJY
00862  0941  29 07                 AND #%0111                      ; MASK ADJUSTED DELTA VALUE BACK TO 0 - 7
00863  0943                        ; IF Y DELTA IS 0, WE ARE FLUSH ON THE Y AXIS, SO ONLY
00864  0943  F0 10                 BEQ @RIGHTCHECK2                ; CHECK 2 CHARACTERS
00865  0945                        ; OTHERWISE WE ARE OVERLAPPING, SO WE NEED TO CHECK 3
00866  0945  A4 04                 LDY PARAM2                      ; FETCH THE SPRITES Y CHARACTER POSITION
00867  0947  C8                    INY                             ; ADD 1 (ONE CHARACTER LINE DOWN)
00868  0948                        
00869  0948  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THAT SCREEN LINE
00870  094B             
00871  094B  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES X POSITION AND STORE IT IN Y
00872  094D  C8                    INY                             ; ADD 1 CHARACTER (RIGHT)
00873  094E  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE SCREEN CHARACTER
00874  0950  20 81 0A              JSR TESTBLOCKING                ; SEE IF IT'S A BLOCKING CHARACTER
00875  0953  D0 1F                 BNE @BLOCKEDRIGHT               ; RETURN IF IT IS
00876  0955             
00877  0955             @RIGHTCHECK2 ; CHECK THE 2 CHARACTERS TO THE RIGHT OF THE SPRITE
00878  0955  A4 04                 LDY PARAM2
00879  0957  88                    DEY                             ; SUBTRACT ONE (ONE CHARACTER DOWN)
00880  0958                        
00881  0958  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THAT LINE
00882  095B                        
00883  095B  A4 03                 LDY PARAM1                      ; LOAD THE ADJUSTED X CHARACTER POSITION IN Y
00884  095D  C8                    INY                             ; ADD ONE CHARACTER TO THE RIGHT
00885  095E             
00886  095E  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE CHARACTER
00887  0960  20 81 0A              JSR TESTBLOCKING                ; TEST THE CHARACTER FOR BLOCKING
00888  0963  D0 0F                 BNE @BLOCKEDRIGHT               ; EXIT AND RETURN THE CODE IF BLOCKING
00889  0965             
00890  0965  98                    TYA                             ; ADD #40 TO THE CURRENT X POSITION
00891  0966  18                    CLC                             ; THIS IS THE SAME AS GOING DOWN ONE BLOCK
00892  0967  69 28                 ADC #40
00893  0969  A8                    TAY
00894  096A  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; LOAD THE CHARACTER TO CHECKMOVEDOWN
00895  096C  20 81 0A              JSR TESTBLOCKING                ; TEST IT
00896  096F  D0 03                 BNE @BLOCKEDRIGHT               ; RETURN THE CODE IF BLOCKING
00897  0971             
00898  0971  A9 00                 LDA #0                          ; ELSE RETURN WITH A 'CLEAR' CODE
00899  0973  60                    RTS
00900  0974             
00901  0974             @BLOCKEDRIGHT 
00902  0974  A9 01                 LDA #1
00903  0976  60                    RTS
00904  0977                        
00905  0977             
00906  0977             
00907  0977             ;===============================================================================
00908  0977             ; CHECK MOVE DOWN
00909  0977             ;-------------------------------------------------------------------------------
00910  0977             ;
00911  0977             ; X = SPRITE WE WANT TO CHECK FOR
00912  0977             ;
00913  0977             ; RETURNS : A = 0 WE MOVE OR A = 1 WE ARE BLOCKED
00914  0977             ;
00915  0977             ; MODIFIES : Y,PARAM1, PARAM2
00916  0977             ;            X IS LEFT INTACT
00917  0977             ;-------------------------------------------------------------------------------
00918  0977             
00919  0977             CHECKMOVEDOWN 
00920  0977             
00921  0977  BD 78 35              LDA SPRITE_CHAR_POS_X,X                 ; FETCH THE SPRITES X CHARACTER COORD
00922  097A  85 03                 STA PARAM1                              ; PARAM1 WILL HOLD THE ADJUSTED Y COORD
00923  097C  BD 99 35              LDA SPRITE_CHAR_POS_Y,X                 ; FETCH THE SPRITES Y CHARACTER COORD
00924  097F  85 04                 STA PARAM2                              ; PARAM2 WILL HOLD THE ADJUSTED Y COORD
00925  0981             
00926  0981             
00927  0981                        ; ADJUST THE Y DELTA AND POS Y VALUES
00928  0981  BD 91 35              LDA SPRITE_POS_Y_DELTA,X                ; LOAD THE DELTA Y
00929  0984  38                    SEC
00930  0985  E5 2A                 SBC SCROLL_COUNT_Y                      ; SUBTRACT THE Y SCROLL COUNT
00931  0987  10 02                 BPL @NOADJUSTY                          ; IF IT'S LESS THAN 0, ADJUST Y POS
00932  0989             
00933  0989  C6 04                 DEC PARAM2
00934  098B             
00935  098B             
00936  098B             @NOADJUSTY 
00937  098B  29 07                 AND #%0111                              ; MASK BACK TO 0-7 VALUE
00938  098D                        ; IF ADJUSTED DELTA Y IS 0, WE ARE FLUSH
00939  098D  F0 03                 BEQ @DOWNCHECK                          ; AND DO A CHARACTER CHECK
00940  098F  A9 00                 LDA #0                                  ; ELSE RETURN A CLEAR CODE
00941  0991  60                    RTS
00942  0992                        
00943  0992             
00944  0992             @DOWNCHECK 
00945  0992  BD 70 35              LDA SPRITE_POS_X_DELTA,X                ; CHECK THE X DELTA, IF IT'S FLUSH (0) WE ONLY
00946  0995  38                    SEC
00947  0996  E5 29                 SBC SCROLL_COUNT_X
00948  0998  10 02                 BPL @NOADJX
00949  099A             
00950  099A  C6 03                 DEC PARAM1
00951  099C             
00952  099C             @NOADJX
00953  099C  29 07                 AND #%0111                              ; (MASK AT 0-7 PIXELS)
00954  099E  F0 10                 BEQ @DOWNCHECK2                         ; NEED TO CHECK 2 CHARACTERS
00955  09A0             
00956  09A0  A4 04                 LDY PARAM2                              ; LOAD THE ADJUSTED Y CHARACTER LINE
00957  09A2  C8                    INY                                     ; INCREMENT TO ONE LINE DOWN
00958  09A3  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS
00959  09A6                        ; LOAD SPRITE X CHAR POSITION
00960  09A6  A4 03                 LDY PARAM1
00961  09A8  C8                    INY                                     ; INC X POS (LEFT CHARACTER)
00962  09A9  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; FETCH THE CHARACTER
00963  09AB             
00964  09AB  20 81 0A              JSR TESTBLOCKING
00965  09AE  D0 12                 BNE @DOWNBLOCKED
00966  09B0             
00967  09B0             @DOWNCHECK2 
00968  09B0  A4 04                 LDY PARAM2                              ; LOAD SPRITE Y CHAR COORD
00969  09B2  C8                    INY                                     ; INCREMENT DOWN ONE LINE
00970  09B3  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS           ;SAVES DATA IN ZEROPPAGE_POINTER_1
00971  09B6                        
00972  09B6  A4 03                 LDY PARAM1
00973  09B8  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
00974  09BA             
00975  09BA  20 81 0A              JSR TESTBLOCKING
00976  09BD  D0 03                 BNE @DOWNBLOCKED
00977  09BF             
00978  09BF  A9 00                 LDA #0
00979  09C1  60                    RTS
00980  09C2             
00981  09C2             @DOWNBLOCKED 
00982  09C2  A9 01                 LDA #1
00983  09C4  60                    RTS
00984  09C5             
00985  09C5             
00986  09C5             ;===============================================================================
00987  09C5             ; CHECK MOVE UP
00988  09C5             ;-------------------------------------------------------------------------------
00989  09C5             ; CHECKS AHEAD TO SEE IF THIS SPRITE CAN MOVE UP, OR IF IT'S GOING TO BE STOPPED
00990  09C5             ; BY A BLOCKING CHARACTER
00991  09C5             ;
00992  09C5             ; X = SPRITE WE WANT TO CHECK FOR
00993  09C5             ;
00994  09C5             ; RETURNS A = 0 WE CAN MOVE OR A = 1 WE ARE BLOCKED
00995  09C5             ;
00996  09C5             ; MODIFIES Y,PARAM1,PARAM2
00997  09C5             ;-------------------------------------------------------------------------------
00998  09C5             
00999  09C5             CHECKMOVEUP 
01000  09C5  BD 78 35              LDA SPRITE_CHAR_POS_X,X                 ; LOAD SPRITES X CHARACTER POS
01001  09C8  85 03                 STA PARAM1                              ; ADJUSTED X CHAR POS WILL BE IN PARAM1
01002  09CA  BD 99 35              LDA SPRITE_CHAR_POS_Y,X                 ; ADJUSTED Y CHARACTER POS
01003  09CD  85 04                 STA PARAM2                              ; LOAD SPRITES Y CHARACTER POS
01004  09CF             
01005  09CF  BD 91 35              LDA SPRITE_POS_Y_DELTA,X                ; LOAD SPRITES Y DELTA
01006  09D2  38                    SEC                                     ; SUBTRACT Y SCROLL VALUE
01007  09D3  E5 2A                 SBC SCROLL_COUNT_Y
01008  09D5  10 02                 BPL @NOADJY                             ; IF IT WRAPS PAST 0 - ADJUST Y CHAR POS
01009  09D7             
01010  09D7  C6 04                 DEC PARAM2
01011  09D9             
01012  09D9             @NOADJY
01013  09D9  29 07                 AND #%0111                              ; MASK BACK TO A VALUE OF 0-7
01014  09DB  F0 03                 BEQ @CHECKUP                            ; IF IT'S 0 - WE ARE FLUSH AND DO A CHECK
01015  09DD  A9 00                 LDA #0                                  ; OTHERWISE RETURN WITH A 'CLEAR' CODE
01016  09DF  60                    RTS
01017  09E0             
01018  09E0             @CHECKUP
01019  09E0  BD 70 35              LDA SPRITE_POS_X_DELTA,X                ; LOAD THE SPRITE X DELTA VALUE
01020  09E3  38                    SEC
01021  09E4  E5 29                 SBC SCROLL_COUNT_X                      ; SUBTRACT CURRENT SCROLL X VALUE
01022  09E6  10 02                 BPL @NOADJX                             ; IF IT WRAPS PAST 0 - ADJUST THE X CHAR POS
01023  09E8             
01024  09E8  C6 03                 DEC PARAM1
01025  09EA             
01026  09EA             @NOADJX    
01027  09EA  29 07                 AND #%0111                              ; MASK BACK TO A 0-7 VALUE
01028  09EC  F0 11                 BEQ @CHECKUP2                           ; IF WE ARE NOT FLUSH WE NEED TO CHECK 2 CHARACTERS
01029  09EE             
01030  09EE  A4 04                 LDY PARAM2                              ; FETCH THE ADJUSTED SPRITE Y CHAR COORD
01031  09F0  88                    DEY                                     ; SUBTRACT 2 LINES (UP)
01032  09F1  88                    DEY
01033  09F2  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS
01034  09F5             
01035  09F5  A4 03                 LDY PARAM1                              ; LOAD ADJUSTED X CHARACTER POS
01036  09F7  C8                    INY                                     ; INC X BY 1 (ONE CHAR RIGHT)
01037  09F8  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
01038  09FA                        
01039  09FA             
01040  09FA  20 81 0A              JSR TESTBLOCKING
01041  09FD  D0 13                 BNE @UPBLOCKED
01042  09FF             
01043  09FF             
01044  09FF             @CHECKUP2
01045  09FF  A4 04                 LDY PARAM2                              ; LOAD THE ADJUSTED SPRITE CHAR Y POSITION
01046  0A01  88                    DEY                                     ; DECREMENT (GO UP) BY 2 LINES
01047  0A02  88                    DEY
01048  0A03  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS
01049  0A06             
01050  0A06  A4 03                 LDY PARAM1                              ; LOAD ADJUSTED X CHARACTER POSITION
01051  0A08             
01052  0A08  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
01053  0A0A  20 81 0A              JSR TESTBLOCKING
01054  0A0D  D0 03                 BNE @UPBLOCKED
01055  0A0F             
01056  0A0F  A9 00                 LDA #0
01057  0A11  60                    RTS
01058  0A12             
01059  0A12             @UPBLOCKED 
01060  0A12  A9 01                 LDA #1
01061  0A14  60                    RTS
01062  0A15             
01063  0A15             
01064  0A15             
01065  0A15             ;===============================================================================
01066  0A15             ; CHECK BLOCK UNDER
01067  0A15             ;-------------------------------------------------------------------------------
01068  0A15             ; CHECK THE BLOCK UNDER THE SPRITE FOR COLLISION (USEFULL FOR THINGS LIKE
01069  0A15             ; ROPES AND CHESTS)
01070  0A15             ;-------------------------------------------------------------------------------
01071  0A15             
01072  0A15             CHECKBLOCKUNDER 
01073  0A15  BD 78 35              LDA SPRITE_CHAR_POS_X,X         ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
01074  0A18  85 03                 STA PARAM1
01075  0A1A             
01076  0A1A  BD 99 35              LDA SPRITE_CHAR_POS_Y,X         ; SPRITE_STACK_Y
01077  0A1D  85 04                 STA PARAM2                      ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
01078  0A1F             
01079  0A1F  AD 70 35              LDA SPRITE_POS_X_DELTA          ; FETCH X DELTA
01080  0A22  38                    SEC
01081  0A23  E5 29                 SBC SCROLL_COUNT_X              ; SUBTRACT THE SCROLL COUNT
01082  0A25  18                    CLC
01083  0A26  69 03                 ADC #3
01084  0A28  10 02                 BPL @NOADJX                     ; IF IT'S 0 OR GREATER, DON'T ADJUST X POSITION
01085  0A2A  C6 03                 DEC PARAM1                      ; OTHERWISE SUBTRACT 1
01086  0A2C             
01087  0A2C             @NOADJX
01088  0A2C  29 07                 AND #%0111                      ; MASK DELTA BACK TO A VALUE BETWEEN 0-7
01089  0A2E  F0 00                 BEQ @ADJY                       ; WE ARE FLUSH ON THE X AXIS - DO CHECK ON Y
01090  0A30                        ; OTHERWISE ?? I COULD DO ANOTHER SET OF LOOKUPS
01091  0A30                        ; BASED ON 'NON FLUSH'
01092  0A30             
01093  0A30             
01094  0A30             @ADJY
01095  0A30  AD 91 35              LDA SPRITE_POS_Y_DELTA          ; FETCH THE Y DELTA
01096  0A33  38                    SEC
01097  0A34  E5 2A                 SBC SCROLL_COUNT_Y
01098  0A36  10 02                 BPL @NOADJY
01099  0A38  C6 04                 DEC PARAM2
01100  0A3A             
01101  0A3A             @NOADJY
01102  0A3A  29 07                 AND #%0111                      ; IF WE ARE FLUSH ON Y WE ONLY NEED TO CHECK 2 CHARACTERS
01103  0A3C  F0 17                 BEQ @UNDERCHECK2                ; OTHERWISE WE NEED TO CHECK 3
01104  0A3E             
01105  0A3E             @UNDERCHECK 
01106  0A3E             
01107  0A3E             ; PARAM2 - POINTS TO WHERE THE SCREEN MEMORY WILL BE GRABBING THE Y REGISTER AT.
01108  0A3E             ; SO FOR EXAMPLE: IF PARAM2 = 2 THEN THE SUBROUTINE FETCHPLAYFIELDLINEADDRESS
01109  0A3E             ; WILL BE THEN POINTING TO SCREEN2_LINE_OFFSET_TABLE_LO,Y WHICH USES THE TABLE EXACTLY AT
01110  0A3E             ; SCREEN2_LINE_OFFSET_TABLE_LO WHICH READS AS <BYTE SCREEN2_MEM + X, Y
01111  0A3E             ; THEREFORE IT TRANSLATE TO POINT TO BYTE <SCREEN2_MEM + 40 (SINCE THIS IS 2ND ON THE LIST.)
01112  0A3E             
01113  0A3E             ; THEN <SCREEN2_MEM + 40 WOULD BE SAVED IN ZERO_PAGE_POINTER_1 & ZERO_PAGE_POINTER_1 + 1
01114  0A3E             
01115  0A3E  A4 04                 LDY PARAM2                      ; FETCH THE ADJUSTED Y POSITION
01116  0A40  C8                    INY                             ; ADD ONE LINE (DOWN) - ; SPRITE_STACK_Y, Y
01117  0A41                        
01118  0A41  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THE SCREEN LINE
01119  0A44                        ; RETURNED IN ZEROPAGE_POINTER_1
01120  0A44  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES ADJUSTED X CHARACTER POSITION
01121  0A46             
01122  0A46  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE SCREEN CHARACTER
01123  0A48  8D C4 0A              STA ENEMYCOLCHAR
01124  0A4B  20 81 0A              JSR TESTBLOCKING
01125  0A4E  D0 2D                 BNE @BLOCKINGUNDER              ; EXIT IF ITS A BLOCKING CHAR (SHOULDN'T BE)
01126  0A50                        ; TO-DO EXIT IF IT'S A SPECIAL CHARACTER TO KEEP
01127  0A50                        ; OUR 'LAST TEST' INTACT
01128  0A50  AD C2 0A              LDA COLLIDER_ATTR
01129  0A53  D0 2B                 BNE @SPECIAL_UNDER               ; A SPECIAL BLOCK IS UNDER US - EXIT
01130  0A55             
01131  0A55             @UNDERCHECK2 
01132  0A55  A4 04                 LDY PARAM2                      ; FETCH THE ADJUSTED Y POSITION
01133  0A57  88                    DEY                             ; ONE LINE UP
01134  0A58  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THE SCREEN LINE
01135  0A5B                        ; RETURNED IN ZEROPAGE_POINTER_1
01136  0A5B  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES ADJUSTED X CHARACTER POSITION
01137  0A5D  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; SCREEN DATA AT SCREEN_LINE_OFFSET_TABLE_LO (SCREEN MEMORY)
01138  0A5F  8D C4 0A              STA ENEMYCOLCHAR
01139  0A62  20 81 0A              JSR TESTBLOCKING
01140  0A65  D0 16                 BNE @BLOCKINGUNDER
01141  0A67  AD C2 0A              LDA COLLIDER_ATTR
01142  0A6A  D0 14                 BNE @SPECIAL_UNDER
01143  0A6C             
01144  0A6C  98                    TYA
01145  0A6D  18                    CLC
01146  0A6E  69 28                 ADC #40
01147  0A70  A8                    TAY
01148  0A71  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
01149  0A73  D0 08                 BNE @BLOCKINGUNDER
01150  0A75  AD C2 0A              LDA COLLIDER_ATTR
01151  0A78  D0 06                 BNE @SPECIAL_UNDER
01152  0A7A  A9 00                 LDA #0
01153  0A7C  60                    RTS
01154  0A7D             @BLOCKINGUNDER 
01155  0A7D  A9 01                 LDA #1
01156  0A7F  60                    RTS
01157  0A80             @SPECIAL_UNDER ; RETURN THE 'SPECIAL - NOT 1 OR 2'
01158  0A80  60                    RTS
01159  0A81             
01160  0A81             ;===============================================================================
01161  0A81             ; TEST CHARACTER FOR BLOCKING
01162  0A81             ;===============================================================================
01163  0A81             ; ORIGINALLY WE HAD A SIMPLE CHECK FOR BLOCKING CHARACTERS > 128. USING CHARPAD
01164  0A81             ; WE CAN TEST FOR ATTRIBUTES WE ENCODE IN THE UPPER HALF BYTE OF THE COLOR INFO
01165  0A81             ; NOTE : IT SEEMS YOU CAN'T READ THIS BACK DIRECTLY FROM COLOR RAM, BUT WE CAN
01166  0A81             ;        LOOK IT UP EASILY ENOUGH GIVEN THE CHARACTER NUMBER.
01167  0A81             ;
01168  0A81             ; A = CHARACTER NUMBER WE'RE CHECKING AGAINST
01169  0A81             ; RETURNS: A = 0 OR 1 (CLEAR - BLOCKED) AND STORES THE COLLISON ATTRIBUTE
01170  0A81             ; SO WE CAN TEST AGAINST IT
01171  0A81             ;
01172  0A81             ; MODIFIES A
01173  0A81             ; RESTORES X, Y
01174  0A81             ;-------------------------------------------------------------------------------
01175  0A81             ; COLLIDER CODES
01176  0A81             ;-------------------------------------------------------------------------------
01177  0A81             COLL_CLEAR = $00
01178  0A81             COLL_FLOOR = $10
01179  0A81             COLL_STAIR = $20
01180  0A81             COLL_POLE  = $30
01181  0A81             COLL_WATER = $40
01182  0A81             COLL_DOOR  = $50
01183  0A81             COLL_COUCH = $80
01184  0A81                        
01185  0A81             
01186  0A81             TESTBLOCKING 
01187  0A81                        
01188  0A81  8D C2 0A              STA COLLIDER_ATTR       ; SAVE THE INFO PASSED TO US, WE NEED TO USE A
01189  0A84                        ;STA ENEMY_COLLIDER_ATTR
01190  0A84  8A                    TXA                     ; STORE X AND Y ON THE STACK
01191  0A85  48                    PHA                     ; THE ROUTINES WE GO BACK TO NEED THESE INTACT
01192  0A86  98                    TYA
01193  0A87  48                    PHA
01194  0A88             
01195  0A88  A9 00                 LDA #0
01196  0A8A  AE C2 0A              LDX COLLIDER_ATTR       ; LOAD THE CHARACTER NUMBER IN X
01197  0A8D             
01198  0A8D  AD 34 10              LDA MAPTWOLOADED
01199  0A90  D0 06                 BNE @MAP2COLLISFOUND
01200  0A92             
01201  0A92             
01202  0A92  BD 20 78              LDA ATTRIBUTE_MEM,X     ; FETCH THE ATTRIBUTE
01203  0A95  4C 9B 0A              JMP @SKIPMAP2COLLIS
01204  0A98             
01205  0A98             @MAP2COLLISFOUND 
01206  0A98  BD AA 80              LDA ATTRIBUTE2_MEM,X     ; FETCH THE ATTRIBUTE
01207  0A9B             
01208  0A9B             @SKIPMAP2COLLIS 
01209  0A9B  29 F0                 AND #%11110000          ; MASK THE COLOR INFO - LEAVING THE ATTRIBUTE
01210  0A9D  8D C2 0A              STA COLLIDER_ATTR       ; STORE IT SO THE REST OF THE PROGRAM CAN USE IT
01211  0AA0  F0 12                 BEQ @RETURNCLEAR        ; 0 IS ALWAYS CLEAR - SO RETURN
01212  0AA2  C9 30                 CMP #COLL_POLE
01213  0AA4  F0 0E                 BEQ @RETURNCLEAR        ; ROPES ($30) DON'T BLOCK
01214  0AA6  C9 40                 CMP #COLL_WATER
01215  0AA8  F0 0A                 BEQ @RETURNCLEAR
01216  0AAA  C9 80                 CMP #COLL_COUCH
01217  0AAC  F0 06                 BEQ @RETURNCLEAR
01218  0AAE  C9 50                 CMP #COLL_DOOR
01219  0AB0  F0 02                 BEQ @RETURNCLEAR
01220  0AB2  D0 07                 BNE @BLOCKING           ; BLOCKING CHARACTER  (COMMENT OUT TO PREVENT BLOCKING)
01221  0AB4             
01222  0AB4             
01223  0AB4             @RETURNCLEAR 
01224  0AB4  68                    PLA                     ; RESTORE X AND Y OFF THE STACK
01225  0AB5  A8                    TAY
01226  0AB6  68                    PLA
01227  0AB7  AA                    TAX
01228  0AB8             
01229  0AB8  A9 00                 LDA #0                  ; RETURN 0 - A CLEAR CODE
01230  0ABA  60                    RTS
01231  0ABB             
01232  0ABB             @BLOCKING
01233  0ABB                        ; ATM ONLY BASIC COLLIDE INFO - IF NOT 0, WE'RE BLOCKING
01234  0ABB  68                    PLA                     ; RESTORE X AND Y FROM THE STACK
01235  0ABC  A8                    TAY
01236  0ABD  68                    PLA
01237  0ABE  AA                    TAX
01238  0ABF             
01239  0ABF  A9 01                 LDA #1                  ; SET TO BLOCKING AND RETURN
01240  0AC1  60                    RTS
01241  0AC2             
01242  0AC2             COLLIDER_ATTR ; A PLACE TO STORE OUR ATTRIBUTE, AND READ IT LATER IF NEEDED
01243  0AC2  00                    BYTE 0
01244  0AC3             
01245  0AC3  00         TILE_DATA  BYTE 0
01246  0AC4  00         ENEMYCOLCHAR BYTE 0
01247  0AC5             
01248  0AC5  00         SPRITE_Y_ADJUST BYTE 0
01249  0AC6             
01250  0AC6             
01251  0AC6             ;===============================================================================
01252  0AC6             ; RASTER INTERRUPTS
01253  0AC6             ;===============================================================================
01254  0AC6             ; PETER 'SIG' HEWETT
01255  0AC6             ; - 2016
01256  0AC6             ; A CHAIN OF RASTER IRQ'S AND ROUTINES FOR INSTALLING/REMOVING THEM
01257  0AC6             ;-------------------------------------------------------------------------------
01258  0AC6             ;-------------------------------------------------------------------------------
01259  0AC6             ; INSTALL RASTER IRQ
01260  0AC6             ;-------------------------------------------------------------------------------
01261  0AC6             
01262  0AC6             INITRASTERIRQ 
01263  0AC6  78                    SEI                     ; STOP ALL INTERRUPTS
01264  0AC7  A5 01                 LDA PROC_PORT
01265  0AC9                        
01266  0AC9  A9 7F                 LDA #$7F                ; DISABLE CIA #1 GENERATING TIMER IRQS
01267  0ACB  8D 0D DC              STA INT_CONTROL         ; WHICH ARE USED BY THE SYSTEM TO FLASH CURSOR, ETC.
01268  0ACE             
01269  0ACE  A9 01                 LDA #$01                ; TELL THE VIC WE WANT TO GENERATE RASTER IRQS
01270  0AD0                        ; NOTE - BY DIRECTLY WRITING #$01 AND NOT SETTING BITS
01271  0AD0                        ; WE ARE ALSO TURNING OFF SPRITE/SPRITE SPRITE/BACKGROUND
01272  0AD0                        ; AND LIGHT PEN INTERRUPTS.. BUT THOSE ARE RATHER SHITE ANYWAYS
01273  0AD0                        ; AND WON'T BE MISSED
01274  0AD0             
01275  0AD0  8D 1A D0              STA VIC_INTERRUPT_CONTROL
01276  0AD3             
01277  0AD3  A9 32                 LDA #$32                ; NUMBER OF THE RASTERLINE WE WANT THE IRQ TO OCCUR AT
01278  0AD5  8D 12 D0              STA VIC_RASTER_LINE     ; WE USED THIS FOR WAITFRAME, REMEMBER? READING GIVES THE CURRENT
01279  0AD8                        ; RASTER LINE, WRITING SETS THE LINE FOR A RASTER INTERRUPT TO OCCUR
01280  0AD8             
01281  0AD8                        
01282  0AD8  AD 11 D0              LDA VIC_SCREEN_CONTROL  ; FETCH THE VIC_SCREEN_CONTROL
01283  0ADB  29 7F                 AND #%01111111          ; MASK THE SURROUNDING BITS
01284  0ADD  8D 11 D0              STA VIC_SCREEN_CONTROL
01285  0AE0                        ; SET THE IRQ VECTOR TO POINT TO OUR ROUTINE
01286  0AE0  A9 F2                 LDA #<IRQTOPSCREEN
01287  0AE2  8D 14 03              STA $0314
01288  0AE5  A9 0A                 LDA #>IRQTOPSCREEN
01289  0AE7  8D 15 03              STA $0315
01290  0AEA                        ; ACKNOWLEGE ANY PENDING CIA TIMER INTERRUPTS
01291  0AEA                        ; JUST TO BE 100% SAFE
01292  0AEA  AD 0D DC              LDA $DC0D
01293  0AED  AD 0D DD              LDA $DD0D
01294  0AF0             
01295  0AF0  58                    CLI                     ; TURN INTERRUPTS BACK ON
01296  0AF1  60                    RTS
01297  0AF2             
01298  0AF2             ;===============================================================================
01299  0AF2             ; IRQ - TOP SCREEN
01300  0AF2             ;===============================================================================
01301  0AF2             ; IRQ SET TO THE VERY TOP OF THE VISIBLE SCREEN (IN BORDER) GOOD FOR SCREEN
01302  0AF2             ; SETUP AND TIMERS
01303  0AF2             ;-------------------------------------------------------------------------------
01304  0AF2             
01305  0AF2             ; RASTER LINE 50
01306  0AF2             
01307  0AF2             
01308  0AF2             IRQTOPSCREEN 
01309  0AF2  78                    SEI                    ; ACKNOWLEDGE VIC IRQ
01310  0AF3  AD 19 D0              LDA $D019
01311  0AF6  8D 19 D0              STA $D019
01312  0AF9                        ; INSTALL GLITCH IRQ
01313  0AF9  A9 39                 LDA #<IRQGLITCHCATCHER
01314  0AFB  8D 14 03              STA $0314
01315  0AFE  A9 0B                 LDA #>IRQGLITCHCATCHER
01316  0B00  8D 15 03              STA $0315
01317  0B03                        
01318  0B03  A9 BF                 LDA #$BF
01319  0B05  8D 12 D0              STA $D012
01320  0B08             
01321  0B08             @START
01322  0B08  A5 26                 LDA CURRENT_SCREEN + 1          ; HI BYTE OF THE CURRENT SCREEN
01323  0B0A  C9 44                 CMP #>SCREEN2_MEM               ; COMPARE TO START OF SCREEN2
01324  0B0C  F0 08                 BEQ @SCREEN2
01325  0B0E             
01326  0B0E  A9 02                 LDA #%00000010                  ; SET VIC TO SCREEN0, CHARSET 1, 18
01327  0B10  8D 18 D0              STA VIC_MEMORY_CONTROL
01328  0B13             
01329  0B13  4C 1B 0B              JMP @SCROLL
01330  0B16             
01331  0B16             @SCREEN2
01332  0B16             ;        LDA MAPTWOLOADED
01333  0B16             ;        BNE @ALLEYSET
01334  0B16             
01335  0B16             
01336  0B16  A9 12                 LDA #18                  ; SET VIC TO SCREEN1, CHARSET 1, 18
01337  0B18  8D 18 D0              STA VIC_MEMORY_CONTROL
01338  0B1B             
01339  0B1B             ;@ALLEYSET
01340  0B1B             ;        LDA #30
01341  0B1B             ;        STA VIC_MEMORY_CONTROL
01342  0B1B             
01343  0B1B             @SCROLL
01344  0B1B                        ;JSR RIVERANIMATION2
01345  0B1B             ;        JSR WATERANIMATION
01346  0B1B             ;        JSR FLOATDOWN
01347  0B1B             
01348  0B1B             ;SCREEN HARDWARE SCROLL (VERT)
01349  0B1B  AD 11 D0              LDA VIC_SCREEN_CONTROL_Y        ; TAKE THE CURRENT VALUES
01350  0B1E  29 F8                 AND #%11111000                  ; MASK OUT THE SCROLL VALUES
01351  0B20  05 2A                 ORA SCROLL_COUNT_Y              ; OR IN THE SCROLL COUNT (BITS 0-2 - Y SCROLL VALUE)
01352  0B22  8D 11 D0              STA VIC_SCREEN_CONTROL_Y        ; SAVE THE UPDATED INFO IN THE REGISTERS
01353  0B25             
01354  0B25             ;SCREEN HARDWARE SCROLL (HORIZ)
01355  0B25  AD 16 D0              LDA VIC_SCREEN_CONTROL_X        ; TAKE THE CURRENT VALUES (SET AT IRQSCOREBOARD)
01356  0B28  29 F8                 AND #%11111000                  ; MASK OUT THE LOWER 4 BITS (SCREEN COLS AND SCROLL)
01357  0B2A  05 29                 ORA SCROLL_COUNT_X              ; OR IN THE SCROLL COUNT (BITS 0-2 - X SCROLL VALUE)
01358  0B2C  8D 16 D0              STA VIC_SCREEN_CONTROL_X        ; SAVE THE UPDATED INFO
01359  0B2F                        
01360  0B2F  20 AE 0E              JSR READJOYSTICK
01361  0B32  20 0F 0F              JSR JOYBUTTON
01362  0B35                        ;JSR ANIMATESTREETLIGHT
01363  0B35                        
01364  0B35  58                    CLI
01365  0B36                        ;JSR DETECTKEYPRESS
01366  0B36  4C 31 EA              JMP $EA31
01367  0B39             
01368  0B39             
01369  0B39             ;===============================================================================
01370  0B39             ; IRQ GLITCHCATCHER
01371  0B39             ;===============================================================================
01372  0B39             ; FORCE BADLINE, BLACK OUT CHARACTER GARBLE FROM SCROLL, AND ADJUST TIMING GLITCHES
01373  0B39             ;-------------------------------------------------------------------------------
01374  0B39             
01375  0B39             ; RASTER LINE 191
01376  0B39             
01377  0B39             
01378  0B39             IRQGLITCHCATCHER 
01379  0B39  78                    SEI
01380  0B3A                        ; ACKNOWLEDGE VIC IRQ
01381  0B3A  AD 19 D0              LDA $D019
01382  0B3D  8D 19 D0              STA $D019
01383  0B40                        ; INSTALL SCROLLER IRQ
01384  0B40  A9 98                 LDA #<IRQSCOREBOARD
01385  0B42  8D 14 03              STA $0314
01386  0B45  A9 0B                 LDA #>IRQSCOREBOARD
01387  0B47  8D 15 03              STA $0315
01388  0B4A                        
01389  0B4A                        ; NR OF RASTERLINE WE WANT THE NEXT IRQ TO OCCUR AT
01390  0B4A  A9 C7                 LDA #$C7                 ; SCOREBOARD APPEARS 8 RASTER LINES AFTER THE GLITCH CATCHER
01391  0B4C  8D 12 D0              STA $D012
01392  0B4F             
01393  0B4F  A5 2A                 LDA SCROLL_COUNT_Y
01394  0B51  F0 2D                 BEQ @FR_0
01395  0B53  C9 07                 CMP #7
01396  0B55  F0 28                 BEQ @FR_7
01397  0B57  C9 01                 CMP #1
01398  0B59  F0 17                 BEQ @FR_1
01399  0B5B  C9 02                 CMP #2
01400  0B5D  F0 13                 BEQ @FR_2
01401  0B5F  C9 03                 CMP #3
01402  0B61  F0 11                 BEQ @FR_3
01403  0B63  C9 04                 CMP #4
01404  0B65  F0 10                 BEQ @FR_4
01405  0B67  C9 05                 CMP #5
01406  0B69  F0 0D                 BEQ @FR_5
01407  0B6B  C9 06                 CMP #6
01408  0B6D  F0 0B                 BEQ @FR_6
01409  0B6F             
01410  0B6F  4C 80 0B              JMP @START
01411  0B72             
01412  0B72             @FR_1
01413  0B72             @FR_2
01414  0B72  EA                    NOP
01415  0B73  EA                    NOP
01416  0B74             @FR_3
01417  0B74  EA                    NOP
01418  0B75  EA                    NOP
01419  0B76  EA                    NOP
01420  0B77             @FR_4
01421  0B77  EA                    NOP
01422  0B78             @FR_5
01423  0B78  EA                    NOP
01424  0B79  EA                    NOP
01425  0B7A             @FR_6
01426  0B7A  EA                    NOP
01427  0B7B  EA                    NOP
01428  0B7C  EA                    NOP
01429  0B7D  EA                    NOP
01430  0B7E  EA                    NOP
01431  0B7F             @FR_7
01432  0B7F  EA                    NOP
01433  0B80             @FR_0
01434  0B80             
01435  0B80             @START
01436  0B80                        
01437  0B80  A9 66                 LDA #102                          ; SET VIC TO SCREEN 6, CHARSET 2
01438  0B82  8D 18 D0              STA VIC_MEMORY_CONTROL
01439  0B85  A9 57                 LDA #%01010111                          ; SET Y TO SCROLL 7 TO FORCE BADLINE TO EVERY FRAME
01440  0B87  8D 11 D0              STA VIC_SCREEN_CONTROL_Y                ; SET EXTENDED BACKGROUND MODE
01441  0B8A  A9 D0                 LDA #%11010000
01442  0B8C  8D 16 D0              STA VIC_SCREEN_CONTROL_X                ; X SCROLL TO 0 / MULTICOLOR ON / 38 COLS
01443  0B8F                        ; IF YOU SET MULTICOLOR AND EXTENDED BACKGROUND
01444  0B8F                        ; YOU GET AN ILLEGAL MODE THAT SETS EVERYTHING TO
01445  0B8F                        ; BLACK
01446  0B8F  A9 00                 LDA #COLOR_BLACK
01447  0B91  8D 21 D0              STA VIC_BACKGROUND_COLOR
01448  0B94  58                    CLI
01449  0B95  4C 31 EA              JMP $EA31
01450  0B98             
01451  0B98             ;===============================================================================
01452  0B98             ; RQ - BOTTOM SCREEN / SCOREBOARD
01453  0B98             ;===============================================================================
01454  0B98             ; IRQ AT THE TOP OF THE SCOREBOARD
01455  0B98             
01456  0B98             ; RASTER LINE 199
01457  0B98             
01458  0B98             IRQSCOREBOARD 
01459  0B98  78                    SEI                        ; ACKNOWLEDGE VIC IRQ
01460  0B99  AD 19 D0              LDA $D019
01461  0B9C  8D 19 D0              STA $D019
01462  0B9F             
01463  0B9F  A9 F2                 LDA #<IRQTOPSCREEN
01464  0BA1  8D 14 03              STA $0314
01465  0BA4  A9 0A                 LDA #>IRQTOPSCREEN
01466  0BA6                        ; INSTALL SCROLLER IRQ
01467  0BA6             
01468  0BA6             ;        LDA #<ANIMATIONROUTINE
01469  0BA6             ;        STA $0314
01470  0BA6             ;        LDA #>ANIMATIONROUTINE
01471  0BA6  8D 15 03              STA $0315
01472  0BA9                        
01473  0BA9             ; NR OF RASTERLINE WE WANT THE NEXT IRQ TO OCCUR AT
01474  0BA9  A9 10                 LDA #$10
01475  0BAB  8D 12 D0              STA $D012
01476  0BAE             
01477  0BAE  A9 10                 LDA #%00010000                          ; RESTORE TO Y SCROLL = 0
01478  0BB0  8D 11 D0              STA VIC_SCREEN_CONTROL_Y                ; BE AWARE THAT :
01479  0BB3                        ; BIT #0-2 = VERTICAL SCROLL
01480  0BB3                        ; BIT #3 = SCREEN HEIGHT (0 = 24 ROWS)
01481  0BB3                        ; BIT #4 = SCREEN ON/OFF
01482  0BB3                        ; BIT #5 = TEXT/BITMAP (0 = TEXT)
01483  0BB3                        ; BIT #6 = EXTENDED BACKGROUND ON/OFF
01484  0BB3                        ; BIT #7 = READ/WRITE CURRENT RASTER LINE BIT #8
01485  0BB3                        ; SO '3' IS THE DEFAULT VERT SCROLL LOCATION
01486  0BB3  A9 D0                 LDA #%11010000
01487  0BB5  8D 16 D0              STA VIC_SCREEN_CONTROL_X                ; SET SCREEN TO DEFAULT
01488  0BB8                        ; BIT #3 CONTROLS SCREEN WIDTH (0 = 38 COLS)
01489  0BB8                        ; BIT #4 CONTROLS MULTICOLOR (0 = OFF)
01490  0BB8             
01491  0BB8             
01492  0BB8                        ;JSR ENEMYRANDOMTIMER
01493  0BB8                        
01494  0BB8  58                    CLI
01495  0BB9  4C 31 EA              JMP $EA31
01496  0BBC             
01497  0BBC  60                    RTS
01498  0BBD             
01499  0BBD             ANIMATIONROUTINE 
01500  0BBD  78                    SEI                        ; ACKNOWLEDGE VIC IRQ
01501  0BBE  AD 19 D0              LDA $D019
01502  0BC1  8D 19 D0              STA $D019
01503  0BC4             
01504  0BC4             ;        LDX #129
01505  0BC4             ;        JSR WATERANIMATION
01506  0BC4                        
01507  0BC4                        ; INSTALL SCROLLER IRQ
01508  0BC4  A9 F2                 LDA #<IRQTOPSCREEN
01509  0BC6  8D 14 03              STA $0314
01510  0BC9  A9 0A                 LDA #>IRQTOPSCREEN
01511  0BCB  8D 15 03              STA $0315
01512  0BCE                        
01513  0BCE             ;                                 ; NR OF RASTERLINE WE WANT THE NEXT IRQ TO OCCUR AT
01514  0BCE             
01515  0BCE  A9 50                 LDA #80
01516  0BD0  8D 12 D0              STA $D012
01517  0BD3             
01518  0BD3             @END_ENEMYTIMER 
01519  0BD3  58                    CLI
01520  0BD4  4C 31 EA              JMP $EA31
01521  0BD7             ;===============================================================================
01522  0BD7             ; GAME CORE ROUTINES
01523  0BD7             ;===============================================================================
01524  0BD7             ; CORE ROUTINES FOR THE FRAMEWORK - PETER 'SIG' HEWETT
01525  0BD7             ; 2016
01526  0BD7             ;-------------------------------------------------------------------------------
01527  0BD7             ; WAIT FOR THE RASTER TO REACH LINE $F8 - IF IT'S ALEADY THERE, WAIT FOR
01528  0BD7             ; THE NEXT SCREEN BLANK. THIS PREVENTS MISTIMINGS IF THE CODE RUNS TOO FAST
01529  0BD7             
01530  0BD7             WAITFRAME
01531  0BD7  AD 12 D0              LDA VIC_RASTER_LINE         ; FETCH THE CURRENT RASTER LINE
01532  0BDA  C9 F8                 CMP #$F8                    ; WAIT HERE TILL L
01533  0BDC  F0 F9                 BEQ WAITFRAME
01534  0BDE                        
01535  0BDE             @WAITSTEP2 
01536  0BDE  AD 12 D0              LDA VIC_RASTER_LINE
01537  0BE1  C9 F8                 CMP #$F8
01538  0BE3  D0 F9                 BNE @WAITSTEP2
01539  0BE5  60                    RTS
01540  0BE6             
01541  0BE6             ;-------------------------------------------------------------------------------
01542  0BE6             ; UPDATE TIMERS
01543  0BE6             ;-------------------------------------------------------------------------------
01544  0BE6             ; 2 BASIC TIMERS - A FAST TIMER THAT IS UPDATED EVERY FRAME,
01545  0BE6             ; AND A SLOW_TIMER UPDATED EVERY 16 FRAMES
01546  0BE6             ;-------------------------------------------------------------------------------
01547  0BE6             
01548  0BE6             UPDATETIMERS 
01549  0BE6  E6 08                 INC TIMER                       ; INCREMENT TIMER BY 1
01550  0BE8  A5 08                 LDA TIMER
01551  0BEA  29 0F                 AND #$0F                        ; CHECK IF IT'S EQUAL TO 16
01552  0BEC  F0 01                 BEQ @UPDATESLOWTIMER            ; IF SO WE UPDATE SLOW_TIMER
01553  0BEE  60                    RTS
01554  0BEF             
01555  0BEF             @UPDATESLOWTIMER 
01556  0BEF  E6 09                 INC SLOW_TIMER                  ; INCREMENT SLOW TIMER
01557  0BF1  60                    RTS
01558  0BF2             
01559  0BF2             DETECTKEYPRESS 
01560  0BF2  A9 FE                 LDA #%11111110         ; PULL ROW 0 LOW (SPACE IS IN ROW 0, BIT 4)
01561  0BF4  8D 00 DC              STA $DC00
01562  0BF7  AD 01 DC              LDA $DC01              ; READ COLUMN
01563  0BFA  29 10                 AND #%00010000         ; BIT 4 = 0 WHEN SPACE IS PRESSED
01564  0BFC  D0 05                 BNE NO_KEY             ; IF BIT IS 1, NOT PRESSED
01565  0BFE             
01566  0BFE  A9 01                 LDA #1
01567  0C00  8D 20 D0              STA $D020              ; CHANGE BORDER COLOR IF SPACE IS PRESSED
01568  0C03             
01569  0C03             NO_KEY
01570  0C03  60                    RTS
01571  0C04             
01572  0C04             
01573  0C04             LOADCOLORS 
01574  0C04  A2 00                 LDX #0
01575  0C06             LOADCOLORSLOOP 
01576  0C06                        ;LDA COLOR_DATA, X
01577  0C06  BD AA 80              LDA ATTRIBUTE2_MEM,X
01578  0C09  9D 00 D8              STA $D800,X  ; WRITE TO COLOR RAM
01579  0C0C  E8                    INX
01580  0C0D  EC E8 03              CPX $03E8    ; 1000 BYTES
01581  0C10  D0 F4                 BNE LOADCOLORSLOOP
01582  0C12  60                    RTS
01583  0C13             
01584  0C13             LOADSCREEN 
01585  0C13  A2 00                 LDX #0
01586  0C15             LOADSCREENLOOP 
01587  0C15                        ;LDA SCREEN_DATA, X
01588  0C15  BD 19 79              LDA TILE_MEM,X
01589  0C18  9D 00 04              STA $0400,X  ; WRITE TO SCREEN RAM
01590  0C1B  E8                    INX
01591  0C1C  EC E8 03              CPX $03E8    ; 1000 BYTES (40X25 SCREEN)
01592  0C1F  D0 F4                 BNE LOADSCREENLOOP
01593  0C21  60                    RTS
01594  0C22             
01595  0C22             ; LOAD IN OUR CHARACTER SETS:
01596  0C22             
01597  0C22             ; = 0: HOTEL
01598  0C22             ; = 1: ALLEYWAY
01599  0C22             LOADALLEYMAP 
01600  0C22  A2 00                 LDX #0                      ; INITIALIZE PAGE COUNTER TO 0
01601  0C24  A0 00                 LDY #0                      ; INITIALIZE BYTE COUNTER WITHIN PAGE TO 0
01602  0C26             
01603  0C26             
01604  0C26             ; = 0 - HOTEL MAP
01605  0C26             ; = 1 - ALLEYWAY MAP
01606  0C26             
01607  0C26             ;        LDA MAPTWOLOADED
01608  0C26             ;        BNE @LOADALLEYMAP2          ;  = 1: LOAD ALLEYWAY MAP
01609  0C26             
01610  0C26             ;        LDA #<MAP_CHAR_MEM
01611  0C26             ;        STA ZEROPAGE_POINTER_4
01612  0C26             ;        LDA #>MAP_CHAR_MEM
01613  0C26             ;        STA ZEROPAGE_POINTER_4 + 1
01614  0C26             ;        JMP @SKIPALLEYMAP
01615  0C26             
01616  0C26             @LOADALLEYMAP2 
01617  0C26  A9 19                 LDA #<MAP2_CHAR_MEM
01618  0C28  85 23                 STA ZEROPAGE_POINTER_4
01619  0C2A  A9 7C                 LDA #>MAP2_CHAR_MEM
01620  0C2C  85 24                 STA ZEROPAGE_POINTER_4 + 1
01621  0C2E             
01622  0C2E             ; MAP2_CHAR_MEM: AT $7C29 (31785), 41, 124
01623  0C2E             
01624  0C2E             @SKIPALLEYMAP2 
01625  0C2E  A9 00                 LDA #0
01626  0C30  85 19                 STA ZEROPAGE_POINTER_2       ; INITIALIZE LOW BYTE OF THE POINTER (START ADDRESS LOW BYTE)
01627  0C32  A9 7C                 LDA #124
01628  0C34  85 1A                 STA ZEROPAGE_POINTER_2 + 1   ; INITIALIZE HIGH BYTE OF THE POINTER (START ADDRESS HIGH BYTE)
01629  0C36             
01630  0C36             COPY_LOOPFORALLEY 
01631  0C36  B1 23                 LDA (ZEROPAGE_POINTER_4),Y         ; LOAD BYTE FROM MAP2_CHAR_MEM
01632  0C38  91 19                 STA (ZEROPAGE_POINTER_2),Y  ; STORE IT IN THE ADDRESS POINTED BY ZEROPAGE_POINTER_2 + Y
01633  0C3A  C8                    INY                          ; INCREMENT Y (MOVE TO THE NEXT BYTE)
01634  0C3B             
01635  0C3B  D0 09                 BNE CONTINUE_COPYALLEY            ; IF Y IS NOT ZERO, CONTINUE COPYING
01636  0C3D             
01637  0C3D  E6 1A                 INC ZEROPAGE_POINTER_2 + 1   ; IF Y IS ZERO, INCREMENT THE HIGH BYTE OF THE POINTER
01638  0C3F  E6 24                 INC ZEROPAGE_POINTER_4 + 1
01639  0C41  E8                    INX                          ; INCREMENT X (PAGE COUNTER)
01640  0C42             
01641  0C42  E0 08                 CPX #8                     ; CHECK IF 7 FULL PAGES (1792 BYTES) HAVE BEEN COPIED
01642  0C44  F0 03                 BEQ LAST_PARTALLEY                ; IF SO, HANDLE THE REMAINING 240 BYTES
01643  0C46             
01644  0C46             CONTINUE_COPYALLEY 
01645  0C46  4C 36 0C              JMP COPY_LOOPFORALLEY                ; JUMP BACK TO CONTINUE COPYING
01646  0C49             
01647  0C49             LAST_PARTALLEY 
01648  0C49  A9 00                 LDA #0                       ; RESET Y TO 0 FOR THE LAST PART
01649  0C4B  A0 00                 LDY #0                       ; RESET Y TO 0 FOR BYTE COPY (COPY THE REMAINING 240 BYTES)
01650  0C4D                        
01651  0C4D                        ; COPY THE REMAINING 240 BYTES
01652  0C4D                        ; NOTE: WE ARE ALREADY AT $4800 + 1792 BYTES, SO COPY THE LAST 240 BYTES
01653  0C4D  E0 09                 CPX #9                     ; ENSURE WE'RE BEYOND THE 7 FULL PAGES
01654  0C4F  90 03                 BCC DONE2                     ; IF DONE COPYING 2032 BYTES, WE EXIT
01655  0C51             
01656  0C51                        ; WE COPY THE LAST 240 BYTES
01657  0C51                        ; WE CAN NOW JUMP BACK INTO COPYING THE FINAL 240 BYTES.
01658  0C51  4C 36 0C              JMP COPY_LOOPFORALLEY              ; CONTINUE COPYING FROM THE LAST REMAINING BYTES
01659  0C54                        
01660  0C54             DONE2
01661  0C54  60                    RTS
01662  0C55             
01663  0C55             
01664  0C55             LOADHOTELMAP 
01665  0C55  A2 00                 LDX #0                      ; INITIALIZE PAGE COUNTER TO 0
01666  0C57  A0 00                 LDY #0                      ; INITIALIZE BYTE COUNTER WITHIN PAGE TO 0
01667  0C59             
01668  0C59             
01669  0C59             ; = 0 - HOTEL MAP
01670  0C59             ; = 1 - ALLEYWAY MAP
01671  0C59             
01672  0C59  A9 75                 LDA #<MAP_CHAR_MEM
01673  0C5B  85 23                 STA ZEROPAGE_POINTER_4
01674  0C5D  A9 3C                 LDA #>MAP_CHAR_MEM
01675  0C5F  85 24                 STA ZEROPAGE_POINTER_4 + 1
01676  0C61  4C 64 0C              JMP @SKIPALLEYMAP
01677  0C64             
01678  0C64             ; 0, $48
01679  0C64             
01680  0C64             @SKIPALLEYMAP 
01681  0C64  A9 00                 LDA #0
01682  0C66  85 19                 STA ZEROPAGE_POINTER_2       ; INITIALIZE LOW BYTE OF THE POINTER (START ADDRESS LOW BYTE)
01683  0C68  A9 7C                 LDA #124
01684  0C6A  85 1A                 STA ZEROPAGE_POINTER_2 + 1   ; INITIALIZE HIGH BYTE OF THE POINTER (START ADDRESS HIGH BYTE)
01685  0C6C             
01686  0C6C             COPY_LOOPSET2 
01687  0C6C  B1 23                 LDA (ZEROPAGE_POINTER_4),Y         ; LOAD BYTE FROM MAP2_CHAR_MEM
01688  0C6E  91 19                 STA (ZEROPAGE_POINTER_2),Y  ; STORE IT IN THE ADDRESS POINTED BY ZEROPAGE_POINTER_2 + Y
01689  0C70  C8                    INY                          ; INCREMENT Y (MOVE TO THE NEXT BYTE)
01690  0C71             
01691  0C71  D0 09                 BNE CONTINUE_COPY2            ; IF Y IS NOT ZERO, CONTINUE COPYING
01692  0C73             
01693  0C73  E6 1A                 INC ZEROPAGE_POINTER_2 + 1   ; IF Y IS ZERO, INCREMENT THE HIGH BYTE OF THE POINTER
01694  0C75  E6 24                 INC ZEROPAGE_POINTER_4 + 1
01695  0C77  E8                    INX                          ; INCREMENT X (PAGE COUNTER)
01696  0C78             
01697  0C78  E0 07                 CPX #$07                     ; CHECK IF 7 FULL PAGES (1792 BYTES) HAVE BEEN COPIED
01698  0C7A  F0 03                 BEQ LAST_PART2                ; IF SO, HANDLE THE REMAINING 240 BYTES
01699  0C7C             
01700  0C7C             CONTINUE_COPY2 
01701  0C7C  4C 6C 0C              JMP COPY_LOOPSET2                ; JUMP BACK TO CONTINUE COPYING
01702  0C7F             
01703  0C7F             LAST_PART2 
01704  0C7F  A9 00                 LDA #0                       ; RESET Y TO 0 FOR THE LAST PART
01705  0C81  A0 00                 LDY #0                       ; RESET Y TO 0 FOR BYTE COPY (COPY THE REMAINING 240 BYTES)
01706  0C83                        
01707  0C83                        ; COPY THE REMAINING 240 BYTES
01708  0C83                        ; NOTE: WE ARE ALREADY AT $4800 + 1792 BYTES, SO COPY THE LAST 240 BYTES
01709  0C83  E0 09                 CPX #$09                     ; ENSURE WE'RE BEYOND THE 7 FULL PAGES
01710  0C85  90 03                 BCC DONE                     ; IF DONE COPYING 2032 BYTES, WE EXIT
01711  0C87             
01712  0C87                        ; WE COPY THE LAST 240 BYTES
01713  0C87                        ; WE CAN NOW JUMP BACK INTO COPYING THE FINAL 240 BYTES.
01714  0C87  4C 6C 0C              JMP COPY_LOOPSET2              ; CONTINUE COPYING FROM THE LAST REMAINING BYTES
01715  0C8A                        
01716  0C8A             DONE
01717  0C8A  60                    RTS                          ; RETURN FROM SUBROUTINE                       ; RETURN FROM SUBROUTINE
01718  0C8B             
01719  0C8B             
01720  0C8B             LOADNEWTILES 
01721  0C8B  A2 00                 LDX #0
01722  0C8D                        
01723  0C8D             ; SET UP ZERO-PAGE POINTER
01724  0C8D  A9 19                 LDA #<TILE_MEM
01725  0C8F  85 19                 STA ZEROPAGE_POINTER_2
01726  0C91  A9 79                 LDA #>TILE_MEM
01727  0C93  85 1A                 STA ZEROPAGE_POINTER_2 + 1
01728  0C95             
01729  0C95             ; COPY 512 BYTES FROM TILESDATA TO ZERO-PAGE ($20 - $220)
01730  0C95             
01731  0C95             COPY_OUTER_LOOP 
01732  0C95  A0 00                 LDY #0
01733  0C97             
01734  0C97             
01735  0C97             LOAD_TILES 
01736  0C97  B1 19                 LDA (ZEROPAGE_POINTER_2),Y
01737  0C99  99 20 00              STA $20,Y
01738  0C9C  C8                    INY
01739  0C9D  C0 10                 CPY #$10        ; 16 BYTES PER INNER LOOP (32 * 16 BYTES = 512 TOTAL)
01740  0C9F  D0 F6                 BNE LOAD_TILES
01741  0CA1  E6 1A                 INC ZEROPAGE_POINTER_2 + 1
01742  0CA3  C0 10                 CPY #$10        ; IF 256 BYTES HAVE BEEN COPIED (16 * 16), BREAK
01743  0CA5  D0 EE                 BNE COPY_OUTER_LOOP
01744  0CA7  60                    RTS
01745  0CA8             
01746  0CA8             LOADALLEYTILES 
01747  0CA8  A2 00                 LDX #0
01748  0CAA                        
01749  0CAA             ; SET UP ZERO-PAGE POINTER
01750  0CAA  A9 A1                 LDA #<TILE2_MEM
01751  0CAC  85 19                 STA ZEROPAGE_POINTER_2
01752  0CAE  A9 81                 LDA #>TILE2_MEM
01753  0CB0  85 1A                 STA ZEROPAGE_POINTER_2 + 1
01754  0CB2             
01755  0CB2             ; COPY 512 BYTES FROM TILESDATA TO ZERO-PAGE ($20 - $220)
01756  0CB2             
01757  0CB2             COPY_ALLEY_TILES 
01758  0CB2  A0 00                 LDY #0
01759  0CB4             
01760  0CB4             
01761  0CB4             LOAD_ALLEYTILES 
01762  0CB4  B1 19                 LDA (ZEROPAGE_POINTER_2),Y
01763  0CB6  99 20 00              STA 32,Y
01764  0CB9  C8                    INY
01765  0CBA  C0 16                 CPY #22        ; 16 BYTES PER INNER LOOP (32 * 16 BYTES = 512 TOTAL)
01766  0CBC  D0 D9                 BNE LOAD_TILES
01767  0CBE  E6 1A                 INC ZEROPAGE_POINTER_2 + 1
01768  0CC0  C0 16                 CPY #22        ; IF 256 BYTES HAVE BEEN COPIED (16 * 16), BREAK
01769  0CC2  D0 EE                 BNE COPY_ALLEY_TILES
01770  0CC4  60                    RTS
01771  0CC5             
01772  0CC5             ; TOMORROW 4/24/25: HOMEWORK
01773  0CC5             
01774  0CC5             ; INSTEAD OF REFERENCING THE TABLES IN MAIN.ASM
01775  0CC5             ; WE WE NOW ACCESS THE MEMORY ADDRESSES!
01776  0CC5             
01777  0CC5             ; SET UP ATTRIBUTE = $5600
01778  0CC5             ; SET UP MAP_MEM = $8000
01779  0CC5             ; SET UP TILE_MEM = $9000
01780  0CC5             
01781  0CC5             LOADCHSETFROMDISK 
01782  0CC5  BD A3 0D              LDA LOAD_ADDRESS_TABLE_LO,X
01783  0CC8  8D BD 0D              STA ADDRLO
01784  0CCB  BD A8 0D              LDA LOAD_ADDRESS_TABLE_HI,X
01785  0CCE  8D BE 0D              STA ADDRHI
01786  0CD1             
01787  0CD1  BD B8 0D              LDA FILE_LENGTH_TABLE,X
01788  0CD4  8D A0 0D              STA FLENGTH
01789  0CD7             
01790  0CD7  BD AD 0D              LDA FILENAME_TABLE_LO,X    ; READ FILENAME(X)
01791  0CDA  8D A1 0D              STA FILELO
01792  0CDD             
01793  0CDD  BD B2 0D              LDA FILENAME_TABLE_HI,X    ; READ FILENAME(X)
01794  0CE0  8D A2 0D              STA FILEHI
01795  0CE3             
01796  0CE3  BD A0 0D              LDA FLENGTH,X
01797  0CE6  AE A1 0D              LDX FILELO
01798  0CE9  AC A2 0D              LDY FILEHI
01799  0CEC  20 BD FF              JSR $FFBD           ; SETNAM
01800  0CEF             
01801  0CEF  A9 00                 LDA #$00            ; LOGICAL FILE NUMBER
01802  0CF1  A2 08                 LDX #$08            ; DEVICE 8 (TYPICAL FOR DISK DRIVE)
01803  0CF3  A0 00                 LDY #$00            ; SECONDARY ADDRESS (USED FOR LOADING)
01804  0CF5  20 BA FF              JSR $FFBA           ; SETLFS
01805  0CF8             
01806  0CF8  A9 00                 LDA #$00
01807  0CFA  AE BD 0D              LDX ADDRLO
01808  0CFD  AC BE 0D              LDY ADDRHI
01809  0D00             
01810  0D00  20 D5 FF              JSR $FFD5           ; LOAD (KERNAL)
01811  0D03  B0 4C                 BCS FILE_NOT_FOUND
01812  0D05             
01813  0D05             ;        LDA #3
01814  0D05             ;        STA HOTELCHARS
01815  0D05             
01816  0D05  A9 07                 LDA #7
01817  0D07  8D 20 D0              STA 53280
01818  0D0A  60                    RTS
01819  0D0B             
01820  0D0B             LOADCHSETFROMDISK2 
01821  0D0B  BD A3 0D              LDA LOAD_ADDRESS_TABLE_LO,X
01822  0D0E  8D BD 0D              STA ADDRLO
01823  0D11  BD A8 0D              LDA LOAD_ADDRESS_TABLE_HI,X
01824  0D14  8D BE 0D              STA ADDRHI
01825  0D17             
01826  0D17  BD B8 0D              LDA FILE_LENGTH_TABLE,X
01827  0D1A  8D A0 0D              STA FLENGTH
01828  0D1D             
01829  0D1D  BD AD 0D              LDA FILENAME_TABLE_LO,X    ; READ FILENAME(X)
01830  0D20  8D A1 0D              STA FILELO
01831  0D23             
01832  0D23  BD B2 0D              LDA FILENAME_TABLE_HI,X    ; READ FILENAME(X)
01833  0D26  8D A2 0D              STA FILEHI
01834  0D29             
01835  0D29  BD A0 0D              LDA FLENGTH,X
01836  0D2C  AE A1 0D              LDX FILELO
01837  0D2F  AC A2 0D              LDY FILEHI
01838  0D32  20 BD FF              JSR $FFBD           ; SETNAM
01839  0D35             
01840  0D35  A9 00                 LDA #$00            ; LOGICAL FILE NUMBER
01841  0D37  A2 08                 LDX #$08            ; DEVICE 8 (TYPICAL FOR DISK DRIVE)
01842  0D39  A0 00                 LDY #$00            ; SECONDARY ADDRESS (USED FOR LOADING)
01843  0D3B  20 BA FF              JSR $FFBA           ; SETLFS
01844  0D3E             
01845  0D3E  A9 00                 LDA #$00
01846  0D40  AE BD 0D              LDX ADDRLO
01847  0D43  AC BE 0D              LDY ADDRHI
01848  0D46             
01849  0D46  20 D5 FF              JSR $FFD5           ; LOAD (KERNAL)
01850  0D49  B0 06                 BCS FILE_NOT_FOUND
01851  0D4B             
01852  0D4B  A9 07                 LDA #7
01853  0D4D  8D 20 D0              STA 53280
01854  0D50  60                    RTS
01855  0D51             
01856  0D51             FILE_NOT_FOUND 
01857  0D51  A9 02                 LDA #2
01858  0D53  8D 3C D2              STA 53820
01859  0D56  60                    RTS
01860  0D57             
01861  0D57  48 4F 54   FILENAME1  BYTE "HOTELCHARS.BIN"
01862  0D65  48 4F 54   FILENAME2  BYTE "HOTEL4MAP.BIN"
01863  0D72  48 4F 54   FILENAME3  BYTE "HOTEL1ATTRIB.BIN"
01864  0D82  48 4F 54   FILENAME4  BYTE "HOTEL4TILES.BIN"
01865  0D91  41 4C 4C   FILENAME5  BYTE "ALLEY4CHARS.BIN"
01866  0DA0             
01867  0DA0  00         FLENGTH    BYTE 0
01868  0DA1  00         FILELO     BYTE 0
01869  0DA2  00         FILEHI     BYTE 0
01870  0DA3             
01871  0DA3  02 80 20   LOAD_ADDRESS_TABLE_LO BYTE <CHARLOAD,<MAP_MEM,<ATTRIBUTE_MEM,<TILE_MEM,<CHARLOAD
01872  0DA8  48 77 78   LOAD_ADDRESS_TABLE_HI BYTE >CHARLOAD,>MAP_MEM,>ATTRIBUTE_MEM,>TILE_MEM,>CHARLOAD
01873  0DAD             
01874  0DAD             ;FOUR DIFFERENT BYTES TO SELECT THE FILENAME TO LOAD
01875  0DAD  57 65 72   FILENAME_TABLE_LO BYTE <FILENAME1,<FILENAME2,<FILENAME3,<FILENAME4,<FILENAME5
01876  0DB2  0D 0D 0D   FILENAME_TABLE_HI BYTE >FILENAME1,>FILENAME2,>FILENAME3,>FILENAME4,>FILENAME5
01877  0DB7             
01878  0DB7             CHARLOAD   = $4802
01879  0DB7             ALLEYMAP   = $4802
01880  0DB7             TILESLOAD  = $8000
01881  0DB7  00         HOTELCHARS BYTE 0
01882  0DB8  0E 0D 10   FILE_LENGTH_TABLE BYTE 14,13,16,15,15
01883  0DBD             
01884  0DBD  00         ADDRLO     BYTE 0
01885  0DBE  00         ADDRHI     BYTE 0
01886  0DBF             
01887  0DBF             CLEARCHSETMEMORY 
01888  0DBF  A9 00                 LDA #<$4800
01889  0DC1  85 19                 STA ZEROPAGE_POINTER_2
01890  0DC3  A9 48                 LDA #>$4800
01891  0DC5  85 1A                 STA ZEROPAGE_POINTER_2 + 1
01892  0DC7             
01893  0DC7             ; COPY 512 BYTES FROM TILESDATA TO ZERO-PAGE ($20 - $220)
01894  0DC7             
01895  0DC7             CLEAR_CHSETDATA 
01896  0DC7  A2 08                 LDX #8
01897  0DC9  A0 00                 LDY #0
01898  0DCB             
01899  0DCB             CLEARING
01900  0DCB  A9 00                 LDA #0
01901  0DCD  91 19                 STA (ZEROPAGE_POINTER_2),Y
01902  0DCF  C8                    INY
01903  0DD0  D0 F9                 BNE CLEARING
01904  0DD2  A5 1A                 LDA ZEROPAGE_POINTER_2 + 1
01905  0DD4  E6 1A                 INC ZEROPAGE_POINTER_2 + 1
01906  0DD6  65 19                 ADC ZEROPAGE_POINTER_2
01907  0DD8  85 19                 STA ZEROPAGE_POINTER_2
01908  0DDA             ;        LDA ZEROPAGE_POINTER_2 + 1
01909  0DDA             ;        STA ZEROPAGE_POINTER_2 + 1
01910  0DDA  CA                    DEX        ; IF 256 BYTES HAVE BEEN COPIED (16 * 16), BREAK
01911  0DDB  E0 02                 CPX #2
01912  0DDD  D0 E8                 BNE CLEAR_CHSETDATA
01913  0DDF  60                    RTS
01914  0DE0             
01915  0DE0             ; ANIMATE A TILE
01916  0DE0             
01917  0DE0             ANIMATETILES 
01918  0DE0  A2 00                 LDX #0                      ; INITIALIZE PAGE COUNTER TO 0
01919  0DE2  A0 00                 LDY #0                      ; INITIALIZE BYTE COUNTER WITHIN PAGE TO 0
01920  0DE4             
01921  0DE4             
01922  0DE4             ; = 0 - HOTEL MAP
01923  0DE4             ; = 1 - ALLEYWAY MAP
01924  0DE4             
01925  0DE4             @LOADMAPANIMATE 
01926  0DE4  A9 19                 LDA #<MAP2_CHAR_MEM
01927  0DE6  85 23                 STA ZEROPAGE_POINTER_4
01928  0DE8  A9 7C                 LDA #>MAP2_CHAR_MEM
01929  0DEA  85 24                 STA ZEROPAGE_POINTER_4 + 1
01930  0DEC             
01931  0DEC             
01932  0DEC  A9 00                 LDA #0
01933  0DEE  85 19                 STA ZEROPAGE_POINTER_2       ; INITIALIZE LOW BYTE OF THE POINTER (START ADDRESS LOW BYTE)
01934  0DF0  A9 48                 LDA #$48
01935  0DF2  85 1A                 STA ZEROPAGE_POINTER_2 + 1   ; INITIALIZE HIGH BYTE OF THE POINTER (START ADDRESS HIGH BYTE)
01936  0DF4             
01937  0DF4             COPY_LOOPANIMATE 
01938  0DF4  B1 23                 LDA (ZEROPAGE_POINTER_4),Y         ; LOAD BYTE FROM MAP2_CHAR_MEM
01939  0DF6  91 19                 STA (ZEROPAGE_POINTER_2),Y  ; STORE IT IN THE ADDRESS POINTED BY ZEROPAGE_POINTER_2 + Y
01940  0DF8  C8                    INY                          ; INCREMENT Y (MOVE TO THE NEXT BYTE)
01941  0DF9             
01942  0DF9  D0 09                 BNE CONTINUE_COPYANIM            ; IF Y IS NOT ZERO, CONTINUE COPYING
01943  0DFB             
01944  0DFB  E6 1A                 INC ZEROPAGE_POINTER_2 + 1   ; IF Y IS ZERO, INCREMENT THE HIGH BYTE OF THE POINTER
01945  0DFD  E6 24                 INC ZEROPAGE_POINTER_4 + 1
01946  0DFF  E8                    INX                          ; INCREMENT X (PAGE COUNTER)
01947  0E00             
01948  0E00  E0 08                 CPX #$08                     ; CHECK IF 7 FULL PAGES (1792 BYTES) HAVE BEEN COPIED
01949  0E02  F0 03                 BEQ LAST_PARTOFANIM                ; IF SO, HANDLE THE REMAINING 240 BYTES
01950  0E04             
01951  0E04             CONTINUE_COPYANIM 
01952  0E04  4C F4 0D              JMP COPY_LOOPANIMATE                ; JUMP BACK TO CONTINUE COPYING
01953  0E07             
01954  0E07             LAST_PARTOFANIM 
01955  0E07  A9 00                 LDA #0                       ; RESET Y TO 0 FOR THE LAST PART
01956  0E09  A0 00                 LDY #0                       ; RESET Y TO 0 FOR BYTE COPY (COPY THE REMAINING 240 BYTES)
01957  0E0B                        
01958  0E0B                        ; COPY THE REMAINING 240 BYTES
01959  0E0B                        ; NOTE: WE ARE ALREADY AT $4800 + 1792 BYTES, SO COPY THE LAST 240 BYTES
01960  0E0B  E0 09                 CPX #$09                     ; ENSURE WE'RE BEYOND THE 7 FULL PAGES
01961  0E0D  90 03                 BCC DONEANIM                     ; IF DONE COPYING 2032 BYTES, WE EXIT
01962  0E0F             
01963  0E0F                        ; WE COPY THE LAST 240 BYTES
01964  0E0F                        ; WE CAN NOW JUMP BACK INTO COPYING THE FINAL 240 BYTES.
01965  0E0F  4C F4 0D              JMP COPY_LOOPANIMATE              ; CONTINUE COPYING FROM THE LAST REMAINING BYTES
01966  0E12                        
01967  0E12             DONEANIM
01968  0E12  60                    RTS
01969  0E13             
01970  0E13             ANIMATESTREETLIGHT 
01971  0E13  A0 00                 LDY #0
01972  0E15  A9 19                 LDA #<MAP2_CHAR_MEM
01973  0E17  85 23                 STA ZEROPAGE_POINTER_4
01974  0E19  A9 7C                 LDA #>MAP2_CHAR_MEM
01975  0E1B  85 24                 STA ZEROPAGE_POINTER_4 + 1
01976  0E1D             
01977  0E1D  A9 D9                 LDA #217
01978  0E1F  85 19                 STA ZEROPAGE_POINTER_2       ; INITIALIZE LOW BYTE OF THE POINTER (START ADDRESS LOW BYTE)
01979  0E21  A9 48                 LDA #72
01980  0E23  85 1A                 STA ZEROPAGE_POINTER_2 + 1   ; INITIALIZE HIGH BYTE OF THE POINTER (START ADDRESS HIGH BYTE)
01981  0E25             
01982  0E25             COPY_LIGHTS 
01983  0E25  A9 D9                 LDA #217                     ; LOAD BYTE FROM MAP2_CHAR_MEM
01984  0E27  91 23                 STA (ZEROPAGE_POINTER_4),Y  ; STORE IT IN THE ADDRESS POINTED BY ZEROPAGE_POINTER_2 + Y
01985  0E29  C8                    INY                          ; INCREMENT Y (MOVE TO THE NEXT BYTE)
01986  0E2A  C0 08                 CPY #8
01987  0E2C  D0 F7                 BNE COPY_LIGHTS            ; IF Y IS NOT ZERO, CONTINUE COPYING
01988  0E2E  60                    RTS
01989  0E2F             
01990  0E2F             ;===============================================================================
01991  0E2F             ; ANIMATION TIMER
01992  0E2F             ;===============================================================================
01993  0E2F             ANIMSCREENCONTROL 
01994  0E2F  A5 CB                 LDA $CB
01995  0E31  C9 3C                 CMP #60
01996  0E33  D0 0D                 BNE @EXIT
01997  0E35  18                    CLC
01998  0E36  69 01                 ADC #1
01999  0E38  AD 32 10              LDA ANIMLEVEL
02000  0E3B  8D 32 10              STA ANIMLEVEL
02001  0E3E  8D 20 D0              STA 53280
02002  0E41  60                    RTS
02003  0E42             
02004  0E42             @EXIT
02005  0E42  60                    RTS
02006  0E43             
02007  0E43             WHICHKEY
02008  0E43  A5 CB                 LDA $CB
02009  0E45  C9 3C                 CMP #60
02010  0E47  D0 05                 BNE @EXITKEY
02011  0E49  A9 02                 LDA #2
02012  0E4B  8D 20 D0              STA 53280
02013  0E4E             
02014  0E4E             @EXITKEY
02015  0E4E  60                    RTS
02016  0E4F             
02017  0E4F             ;===============================================================================
02018  0E4F             ; TILE DISPLAY (FUTURE)
02019  0E4F             ;===============================================================================
02020  0E4F             PLOTATILE
02021  0E4F  A2 46                 LDX #70                        ; (129,26=DEFAULT), 61
02022  0E51  A0 14                 LDY #20                          ; , 27
02023  0E53             
02024  0E53  20 9F 22              JSR TILEMAP                     ; DRAW THE LEVEL MAP (SCREEN1)
02025  0E56                        ; AND INITIALIZE IT
02026  0E56             
02027  0E56  20 E9 20              JSR COPYTOBUFFER                ; COPY TO THE BACKBUFFER(SCREEN2)
02028  0E59  60                    RTS
02029  0E5A             
02030  0E5A             ;===============================================================================
02031  0E5A             ; SCORE PANEL DISPLAY
02032  0E5A             ;===============================================================================
02033  0E5A             SCOREBOARD 
02034  0E5A  85 06                 STA PARAM4                                      ; GAMESCORE DATA
02035  0E5C  20 DD 1F              JSR GETLINEADDRESS
02036  0E5F             
02037  0E5F  BD 6D 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X                ; FETCH LINE ADDRESS FOR COLOR
02038  0E62  85 21                 STA ZEROPAGE_POINTER_3
02039  0E64  BD 86 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
02040  0E67  85 22                 STA ZEROPAGE_POINTER_3 + 1
02041  0E69             
02042  0E69             ;===============================================================================
02043  0E69             ; GAMESCORE COUNTER 0-9 + CARRY BIT (INTO HIGH NYBBLE)
02044  0E69             ;===============================================================================
02045  0E69  F8                    SED
02046  0E6A  18                    CLC
02047  0E6B  AD 2D 10              LDA GAMESCORE                                   ; INCREASE SCORE
02048  0E6E  69 01                 ADC #1                                          ; 01,00
02049  0E70  8D 2D 10              STA GAMESCORE
02050  0E73  AD 2E 10              LDA GAMESCORE+1
02051  0E76  69 00                 ADC #0                                          ;00, 00
02052  0E78  8D 2E 10              STA GAMESCORE+1
02053  0E7B  AD 2F 10              LDA GAMESCORE+2
02054  0E7E  69 00                 ADC #0
02055  0E80  8D 2F 10              STA GAMESCORE+2
02056  0E83  D8                    CLD
02057  0E84  20 88 0E              JSR DISPLAY
02058  0E87  60                    RTS
02059  0E88             
02060  0E88             DISPLAY
02061  0E88  A0 0C                 LDY #12          ;SCREEN OFFSET
02062  0E8A  A2 00                 LDX #0          ; SCORE BYTE INDEX
02063  0E8C             SLOOP
02064  0E8C  BD 2D 10              LDA GAMESCORE,X
02065  0E8F  48                    PHA
02066  0E90  29 0F                 AND #$0F        ; COUNT BETWEEN 0-9
02067  0E92  20 A3 0E              JSR PLOTDIGIT
02068  0E95             
02069  0E95  68                    PLA
02070  0E96  4A                    LSR A
02071  0E97  4A                    LSR A
02072  0E98  4A                    LSR A
02073  0E99  4A                    LSR A
02074  0E9A  20 A3 0E              JSR PLOTDIGIT
02075  0E9D  E8                    INX
02076  0E9E  E0 03                 CPX #3
02077  0EA0  D0 EA                 BNE SLOOP
02078  0EA2  60                    RTS
02079  0EA3             
02080  0EA3             PLOTDIGIT
02081  0EA3  18                    CLC
02082  0EA4  69 30                 ADC #48                                      ; WRITE '0' ZERO ON SCREEN
02083  0EA6  91 17                 STA (ZEROPAGE_POINTER_1),Y                   ; WRITE THE CHARACTER CODE
02084  0EA8  A9 03                 LDA #COLOR_CYAN                              ; SET THE COLOR TO BLUE
02085  0EAA  91 21                 STA (ZEROPAGE_POINTER_3),Y                   ; WRITE THE COLOR TO COLOR RAM
02086  0EAC  88                    DEY
02087  0EAD  60                    RTS
02088  0EAE             
02089  0EAE             
02090  0EAE             ;-------------------------------------------------------------------------------
02091  0EAE             ;  READ JOY 2
02092  0EAE             ;-------------------------------------------------------------------------------
02093  0EAE             ; TRYING THIS A DIFFERENT WAY THIS TIME.  RATHER THAN HITTING THE JOYSTICK
02094  0EAE             ; REGISTERS THEN
02095  0EAE             ; DOING SOMETHING EVERY TIME - THE RESULTS WILL BE STORED IN JOY_X AND JOY_Y
02096  0EAE             ; WITH VALUES -1 TO 1 , WITH 0 MEANING 'NO INPUT'
02097  0EAE             ; - I SHOULD BE ABLE TO JUST ADD THIS TO A
02098  0EAE             ; SPRITE FOR A
02099  0EAE             ; SIMPLE MOVE, WHILE STILL BEING ABLE TO DO AN EASY CHECK FOR MORE COMPLICATED
02100  0EAE             ; MOVEMENT LATER ON
02101  0EAE             ;-------------------------------------------------------------------------------
02102  0EAE             
02103  0EAE             
02104  0EAE             READJOYSTICK 
02105  0EAE  A9 00                 LDA #$00                        ; RESET JOY X AND Y VARIABLES
02106  0EB0  8D 67 3C              STA JOY_X
02107  0EB3  8D 68 3C              STA JOY_Y
02108  0EB6  8D 69 3C              STA NE_DIR
02109  0EB9             @TESTUP    ; TEST FOR UP PRESSED
02110  0EB9  AD 18 10              LDA CHECKUP                     ; MASK FOR BIT 0
02111  0EBC  2C 00 DC              BIT JOY_2                       ; TEST BIT 0 FOR PRESS
02112  0EBF  D0 08                 BNE @TESTDOWN
02113  0EC1  A9 FF                 LDA #$FF                        ; SET JOY_Y TO -1 ($FF)
02114  0EC3  8D 68 3C              STA JOY_Y
02115  0EC6  4C D7 0E              JMP @TESTLEFT                   ; CAN'T BE UP AND DOWN
02116  0EC9             
02117  0EC9             @TESTDOWN  ; TEST FOR DOWN
02118  0EC9  AD 19 10              LDA CHECKDOWN                   ; MASK FOR BIT 1
02119  0ECC  2C 00 DC              BIT JOY_2
02120  0ECF  D0 06                 BNE @TESTLEFT
02121  0ED1  A9 01                 LDA #$01                        ; SET JOY_Y TO 1 ($01)
02122  0ED3  8D 68 3C              STA JOY_Y
02123  0ED6  60                    RTS
02124  0ED7             @TESTLEFT  ; TEST FOR LEFT
02125  0ED7  AD 1A 10              LDA CHECKLEFT                   ; MASK FOR BIT 2
02126  0EDA  2C 00 DC              BIT JOY_2
02127  0EDD  D0 06                 BNE @TESTRIGHT
02128  0EDF  A9 FF                 LDA #$FF
02129  0EE1  8D 67 3C              STA JOY_X
02130  0EE4  60                    RTS                             ; CAN'T BE LEFT AND RIGHT - NO MORE TESTS
02131  0EE5             
02132  0EE5             @TESTRIGHT ; TEST FOR RIGHT
02133  0EE5  AD 1B 10              LDA CHECKRIGHT                  ; MASK FOR BIT 3
02134  0EE8  2C 00 DC              BIT JOY_2
02135  0EEB  D0 06                 BNE @CHECKUPLEFT
02136  0EED  A9 01                 LDA #$01
02137  0EEF  8D 67 3C              STA JOY_X
02138  0EF2  60                    RTS
02139  0EF3             
02140  0EF3             @CHECKUPLEFT ; CHECK ZERO = BUTTON PRESSED
02141  0EF3  A9 10                 LDA #%00010000
02142  0EF5  2C 00 DC              BIT JOY_2                       ; CHECK ZERO = BUTTON PRESSED
02143  0EF8  D0 06                 BNE @TESTDOWNRIGHT              ; CONTINUE OTHER CHECKS
02144  0EFA             
02145  0EFA             @TESTUPLEFT 
02146  0EFA  A9 01                 LDA #1
02147  0EFC  8D 69 3C              STA NE_DIR
02148  0EFF  60                    RTS
02149  0F00             
02150  0F00             @TESTDOWNRIGHT ; TEST FOR RIGHT
02151  0F00  AD 1C 10              LDA CHECKDOWNRIGHT              ; MASK FOR BIT 3
02152  0F03  2C 00 DC              BIT JOY_2
02153  0F06  D0 06                 BNE @DONE
02154  0F08  A9 02                 LDA #$02
02155  0F0A  8D 69 3C              STA NE_DIR
02156  0F0D  60                    RTS
02157  0F0E             
02158  0F0E             @DONE      
02159  0F0E  60                    RTS
02160  0F0F             
02161  0F0F             
02162  0F0F             ;-------------------------------------------------------------------------------
02163  0F0F             ; JOYSTICK BUTTON PRESSED
02164  0F0F             ;-------------------------------------------------------------------------------
02165  0F0F             ; NOTIFIES THE STATE OF THE FIRE BUTTON ON JOYSTICK 2.
02166  0F0F             ; BUTTON_ACTION IS SET TO ONE ON A SINGLE PRESS
02167  0F0F             ; (THAT IS WHEN THE BUTTON IS RELEASED)
02168  0F0F             ; BUTTON_PRESSED IS SET TO 1 WHILE THE BUTTON IS HELD DOWN.
02169  0F0F             ; SO EITHER A LONG PRESS, OR A SINGLE PRESS CAN BE ACCOUNTED FOR.
02170  0F0F             ; TODO I MIGHT PUT A 'PRESS COUNTER' IN HERE TO TEST HOW LONG THE BUTTON IS
02171  0F0F             ; DOWN FOR..
02172  0F0F             ;-------------------------------------------------------------------------------
02173  0F0F             
02174  0F0F             
02175  0F0F             JOYBUTTON
02176  0F0F             
02177  0F0F  A9 01                 LDA #1                                  ; CHECKS FOR A PREVIOUS BUTTON ACTION
02178  0F11  CD 6C 3C              CMP BUTTON_ACTION                       ; AND CLEARS IT IF SET
02179  0F14  D0 05                 BNE @BUTTONTEST
02180  0F16             
02181  0F16  A9 00                 LDA #0
02182  0F18  8D 6C 3C              STA BUTTON_ACTION
02183  0F1B             
02184  0F1B             @BUTTONTEST 
02185  0F1B  A9 10                 LDA #$10                                ; TEST BIT #4 IN JOY_2 REGISTER
02186  0F1D  2C 00 DC              BIT JOY_2
02187  0F20  D0 06                 BNE @BUTTONNOTPRESSED
02188  0F22                        
02189  0F22  A9 01                 LDA #1                                  ; IF IT'S PRESSED - SAVE THE RESULT
02190  0F24  8D 6B 3C              STA BUTTON_PRESSED                      ; AND RETURN - WE WANT A SINGLE PRESS
02191  0F27  60                    RTS                                     ; SO WE NEED TO WAIT FOR THE RELEASE
02192  0F28             
02193  0F28             @BUTTONNOTPRESSED 
02194  0F28             
02195  0F28  AD 6B 3C              LDA BUTTON_PRESSED                      ; AND CHECK TO SEE IF IT WAS PRESSED FIRST
02196  0F2B  D0 01                 BNE @BUTTONACTION                       ; IF IT WAS WE GO AND SET BUTTON_ACTION
02197  0F2D  60                    RTS
02198  0F2E             
02199  0F2E             @BUTTONACTION 
02200  0F2E  A9 00                 LDA #0
02201  0F30  8D 6B 3C              STA BUTTON_PRESSED
02202  0F33  A9 01                 LDA #1
02203  0F35  8D 6C 3C              STA BUTTON_ACTION
02204  0F38             
02205  0F38  60                    RTS
02206  0F39             
02207  0F39             
02208  0F39             
02209  0F39             ;-------------------------------------------------------------------------------
02210  0F39             ; COPY CHARACTER SET
02211  0F39             ;-------------------------------------------------------------------------------
02212  0F39             ; COPY THE CUSTOM CHARACTER SET INTO THE VIC MEMORY BANK (2048 BYTES)
02213  0F39             ; ZEROPAGE_POINTER_1 = SOURCE
02214  0F39             ; ZEROPAGE_POINTER_2 = DEST
02215  0F39             ;
02216  0F39             ; RETURNS A,X,Y AND PARAM2 INTACT
02217  0F39             ;-------------------------------------------------------------------------------
02218  0F39             
02219  0F39             
02220  0F39             
02221  0F39             COPYCHARS
02222  0F39                        
02223  0F39             
02224  0F39             
02225  0F39  48                    PHA
02226  0F3A  8A                    TXA
02227  0F3B  48                    PHA
02228  0F3C  98                    TYA
02229  0F3D  48                    PHA
02230  0F3E             
02231  0F3E  A2 00                 LDX #$00                                ; CLEAR X, Y, A AND PARAM2
02232  0F40  A0 00                 LDY #$00
02233  0F42  A9 00                 LDA #$00
02234  0F44  85 04                 STA PARAM2
02235  0F46             @NEXTLINE
02236  0F46             
02237  0F46             ; CHAR_MEM = ZEROPAGE_POINTER_1
02238  0F46             ; LEVEL_1_CHARS = ZEROPAGE_POINTER_2
02239  0F46             
02240  0F46  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; COPY FROM SOURCE TO TARGET
02241  0F48  91 19                 STA (ZEROPAGE_POINTER_2),Y
02242  0F4A             
02243  0F4A  E8                    INX                                     ; INCREMENT X / Y
02244  0F4B  C8                    INY
02245  0F4C  E0 08                 CPX #$08                                ; TEST FOR NEXT CHARACTER BLOCK (8 BYTES)
02246  0F4E  D0 F6                 BNE @NEXTLINE                           ; COPY NEXT LINE
02247  0F50  C0 00                 CPY #$00                                ; TEST FOR EDGE OF PAGE (256 WRAPS BACK TO 0)
02248  0F52  D0 04                 BNE @PAGEBOUNDRYNOTREACHED
02249  0F54             
02250  0F54  E6 18                 INC ZEROPAGE_POINTER_1 + 1              ; IF REACHED 256 BYTES, INCREMENT HIGH BYTE
02251  0F56  E6 1A                 INC ZEROPAGE_POINTER_2 + 1              ; OF SOURCE AND TARGET
02252  0F58             
02253  0F58             @PAGEBOUNDRYNOTREACHED 
02254  0F58  E6 04                 INC PARAM2                              ; ONLY COPY 254 CHARACTERS (TO KEEP IRQ VECTORS INTACT)
02255  0F5A  A5 04                 LDA PARAM2                              ; IF COPYING TO F000-FFFF BLOCK
02256  0F5C  C9 FF                 CMP #255
02257  0F5E  F0 05                 BEQ @COPYCHARACTERSDONE
02258  0F60  A2 00                 LDX #$00
02259  0F62  4C 46 0F              JMP @NEXTLINE
02260  0F65             
02261  0F65             @COPYCHARACTERSDONE 
02262  0F65             
02263  0F65             
02264  0F65             
02265  0F65  68                    PLA
02266  0F66  A8                    TAY
02267  0F67  68                    PLA
02268  0F68  AA                    TAX
02269  0F69  68                    PLA
02270  0F6A             
02271  0F6A  60                    RTS
02272  0F6B             
02273  0F6B             
02274  0F6B             ; Y=210 - STONE WALL SCROLLS
02275  0F6B             ; Y=186 - BOTTOM OF WATER TILE (TOP PART)
02276  0F6B             ; Y=194 (CURRENT)
02277  0F6B             
02278  0F6B             ;===============================================================================
02279  0F6B             ; WATER ANIMATION FRAMES
02280  0F6B             ;===============================================================================
02281  0F6B             WATERANIMATION 
02282  0F6B  AD 21 10              LDA RIVER_ANIM3_LO
02283  0F6E  85 21                 STA ZEROPAGE_POINTER_3
02284  0F70  AD 22 10              LDA RIVER_ANIM3_HI
02285  0F73  85 22                 STA ZEROPAGE_POINTER_3 + 1
02286  0F75             
02287  0F75             @CONTANIM
02288  0F75  A0 00                 LDY #0
02289  0F77  A2 00                 LDX #0
02290  0F79             
02291  0F79             ; STILL LOOPING THE ANIMATION
02292  0F79             @SHIFTPIXELSRIGHT 
02293  0F79             ; GET ALL 8 BITS (128,64,32,16,8,4,2,1)
02294  0F79             
02295  0F79             @STORE2
02296  0F79  B9 58 4C              LDA CHRADR3,Y
02297  0F7C  4A                    LSR A
02298  0F7D  90 03                 BCC @STORE5
02299  0F7F  18                    CLC
02300  0F80  69 80                 ADC #128                 ; SHIFT PIXELS DOWN
02301  0F82             ;;
02302  0F82             @STORE5
02303  0F82  91 21                 STA (ZEROPAGE_POINTER_3),Y
02304  0F84  C8                    INY
02305  0F85             
02306  0F85             ; THIS COMPARISON CHECKS FOR THE TILE WIDTH + (ALL 4 TILES)
02307  0F85             ; IN A 4X4 MATRIX. BECAUSE 4 X 4 = 16
02308  0F85  C0 30                 CPY #48                         ;58
02309  0F87  90 F0                 BCC @SHIFTPIXELSRIGHT
02310  0F89  60                    RTS
02311  0F8A             
02312  0F8A             READCHARSETADDRESS 
02313  0F8A             @SCREEN1
02314  0F8A             ;        LDA MAPSCREEN1_CHSET_OFFSET_TABLE_LO,Y  ; USE Y TO LOOKUP THE ADDRESS AND SAVE IT IN
02315  0F8A  85 23                 STA ZEROPAGE_POINTER_4                  ; ZEROPAGE_POINTER_1
02316  0F8C             ;        LDA MAPSCREEN1_CHSET_OFFSET_TABLE_HI,Y
02317  0F8C  85 24                 STA ZEROPAGE_POINTER_4 + 1
02318  0F8E  60                    RTS
02319  0F8F             
02320  0F8F             RIVERANIMATION 
02321  0F8F  18                    CLC
02322  0F90  AD 5F 18              LDA WATERSPEED                           ; INCREASE SCORE
02323  0F93  69 01                 ADC #1                                   ; 01,00
02324  0F95  8D 5F 18              STA WATERSPEED
02325  0F98                        
02326  0F98  AD 5F 18              LDA WATERSPEED
02327  0F9B  C9 28                 CMP #40
02328  0F9D  90 4D                 BCC @EXITLOOP
02329  0F9F             
02330  0F9F  A5 26                 LDA CURRENT_SCREEN + 1          ; HI BYTE OF THE CURRENT SCREEN
02331  0FA1  C9 44                 CMP #>SCREEN2_MEM               ; COMPARE TO START OF SCREEN2
02332  0FA3  F0 0D                 BEQ @SCREEN2_SCENE1
02333  0FA5             
02334  0FA5  A9 66                 LDA #102                  ; SET VIC TO SCREEN0, CHARSET 1
02335  0FA7  8D 18 D0              STA VIC_MEMORY_CONTROL
02336  0FAA  A9 05                 LDA #5
02337  0FAC  8D 20 D0              STA 53280
02338  0FAF  4C BC 0F              JMP @SCROLLWATER1
02339  0FB2             
02340  0FB2             @SCREEN2_SCENE1 
02341  0FB2  A9 02                 LDA #2                  ; SET VIC TO SCREEN1, CHARSET 1
02342  0FB4  8D 18 D0              STA VIC_MEMORY_CONTROL
02343  0FB7  A9 03                 LDA #3
02344  0FB9  8D 20 D0              STA 53280
02345  0FBC             
02346  0FBC             @SCROLLWATER1 
02347  0FBC  AD 5F 18              LDA WATERSPEED
02348  0FBF  C9 50                 CMP #80
02349  0FC1  90 29                 BCC @EXITLOOP
02350  0FC3             
02351  0FC3  A5 26                 LDA CURRENT_SCREEN + 1          ; HI BYTE OF THE CURRENT SCREEN
02352  0FC5  C9 44                 CMP #>SCREEN2_MEM               ; COMPARE TO START OF SCREEN2
02353  0FC7  F0 0D                 BEQ @SCREEN2_SCENE2
02354  0FC9             
02355  0FC9  A9 66                 LDA #102
02356  0FCB  8D 18 D0              STA VIC_MEMORY_CONTROL
02357  0FCE  A9 02                 LDA #2
02358  0FD0  8D 20 D0              STA 53280
02359  0FD3  4C E0 0F              JMP @SCROLLWATER2
02360  0FD6             
02361  0FD6             @SCREEN2_SCENE2 
02362  0FD6  A9 66                 LDA #102                 ; SET VIC TO SCREEN1, CHARSET 1
02363  0FD8  8D 18 D0              STA VIC_MEMORY_CONTROL
02364  0FDB  A9 07                 LDA #7
02365  0FDD  8D 20 D0              STA 53280
02366  0FE0             
02367  0FE0             @SCROLLWATER2 
02368  0FE0  AD 5F 18              LDA WATERSPEED
02369  0FE3  C9 78                 CMP #120
02370  0FE5  90 05                 BCC @EXITLOOP
02371  0FE7             
02372  0FE7  A9 00                 LDA #0
02373  0FE9  8D 5F 18              STA WATERSPEED
02374  0FEC             
02375  0FEC             @EXITLOOP
02376  0FEC  60                    RTS
02377  0FED             
02378  0FED             RIVERANIMATION2 
02379  0FED  18                    CLC
02380  0FEE  AD 5F 18              LDA WATERSPEED                 ; INCREASE SCORE
02381  0FF1  69 01                 ADC #1                         ; 01,00
02382  0FF3  8D 5F 18              STA WATERSPEED
02383  0FF6                        
02384  0FF6  AD 5F 18              LDA WATERSPEED
02385  0FF9  C9 1E                 CMP #30
02386  0FFB  90 18                 BCC @EXITLOOP
02387  0FFD             
02388  0FFD  A9 14                 LDA #20                         ; 20 = $5000 - PARKOUR REDO CHSETNEW1.BIN"
02389  0FFF  8D 18 D0              STA VIC_MEMORY_CONTROL
02390  1002                        
02391  1002  AD 5F 18              LDA WATERSPEED
02392  1005  C9 46                 CMP #70
02393  1007  90 0C                 BCC @EXITLOOP
02394  1009             
02395  1009  AD 5F 18              LDA WATERSPEED
02396  100C  C9 6E                 CMP #110
02397  100E  90 05                 BCC @EXITLOOP
02398  1010             
02399  1010  A9 00                 LDA #0
02400  1012  8D 5F 18              STA WATERSPEED
02401  1015             
02402  1015             @EXITLOOP
02403  1015  60                    RTS
02404  1016             
02405  1016             
02406  1016             ;MAPSCREEN1_CHSET_OFFSET_TABLE_LO
02407  1016             ;        BYTE <MAP_CHAR_MEM
02408  1016             ;        BYTE <MAP_CHAR_MEM + 8
02409  1016             ;        BYTE <MAP_CHAR_MEM + 16
02410  1016             ;        BYTE <MAP_CHAR_MEM + 24
02411  1016             ;        BYTE <MAP_CHAR_MEM + 32
02412  1016             ;        BYTE <MAP_CHAR_MEM + 40
02413  1016             ;        BYTE <MAP_CHAR_MEM + 48
02414  1016             ;        BYTE <MAP_CHAR_MEM + 56
02415  1016             ;        BYTE <MAP_CHAR_MEM + 64
02416  1016             ;        BYTE <MAP_CHAR_MEM + 72
02417  1016             ;        BYTE <MAP_CHAR_MEM + 80
02418  1016             ;        BYTE <MAP_CHAR_MEM + 88
02419  1016             ;        BYTE <MAP_CHAR_MEM + 96
02420  1016             ;        BYTE <MAP_CHAR_MEM + 104
02421  1016             ;        BYTE <MAP_CHAR_MEM + 112
02422  1016             ;        BYTE <MAP_CHAR_MEM + 120
02423  1016             ;        BYTE <MAP_CHAR_MEM + 128
02424  1016             ;        BYTE <MAP_CHAR_MEM + 136
02425  1016             ;        BYTE <MAP_CHAR_MEM + 144
02426  1016             ;        BYTE <MAP_CHAR_MEM + 152
02427  1016             ;        BYTE <MAP_CHAR_MEM + 160
02428  1016             ;        BYTE <MAP_CHAR_MEM + 168
02429  1016             ;        BYTE <MAP_CHAR_MEM + 176
02430  1016             ;        BYTE <MAP_CHAR_MEM + 184
02431  1016             ;        BYTE <MAP_CHAR_MEM + 192
02432  1016             ;        BYTE <MAP_CHAR_MEM + 200
02433  1016             ;        BYTE <MAP_CHAR_MEM + 208
02434  1016             ;        BYTE <MAP_CHAR_MEM + 216
02435  1016             ;        BYTE <MAP_CHAR_MEM + 224
02436  1016             ;        BYTE <MAP_CHAR_MEM + 232
02437  1016             ;        BYTE <MAP_CHAR_MEM + 240
02438  1016             ;        BYTE <MAP_CHAR_MEM + 248
02439  1016             ;        BYTE <MAP_CHAR_MEM + 256
02440  1016             ;        BYTE <MAP_CHAR_MEM + 264
02441  1016             ;        BYTE <MAP_CHAR_MEM + 272
02442  1016             ;        BYTE <MAP_CHAR_MEM + 280
02443  1016             ;        BYTE <MAP_CHAR_MEM + 288
02444  1016             ;        BYTE <MAP_CHAR_MEM + 296
02445  1016             ;        BYTE <MAP_CHAR_MEM + 304
02446  1016             ;        BYTE <MAP_CHAR_MEM + 312
02447  1016             ;        BYTE <MAP_CHAR_MEM + 320        ;40
02448  1016             ;        BYTE <MAP_CHAR_MEM + 328
02449  1016             ;        BYTE <MAP_CHAR_MEM + 336
02450  1016             ;        BYTE <MAP_CHAR_MEM + 344
02451  1016             ;        BYTE <MAP_CHAR_MEM + 352
02452  1016             ;        BYTE <MAP_CHAR_MEM + 360
02453  1016             ;        BYTE <MAP_CHAR_MEM + 368
02454  1016             ;        BYTE <MAP_CHAR_MEM + 376
02455  1016             ;        BYTE <MAP_CHAR_MEM + 384
02456  1016             ;        BYTE <MAP_CHAR_MEM + 392
02457  1016             ;        BYTE <MAP_CHAR_MEM + 400        ;50
02458  1016             ;        BYTE <MAP_CHAR_MEM + 408
02459  1016             ;        BYTE <MAP_CHAR_MEM + 416
02460  1016             ;        BYTE <MAP_CHAR_MEM + 424
02461  1016             ;        BYTE <MAP_CHAR_MEM + 432
02462  1016             ;        BYTE <MAP_CHAR_MEM + 440
02463  1016             ;        BYTE <MAP_CHAR_MEM + 448
02464  1016             ;        BYTE <MAP_CHAR_MEM + 456
02465  1016             ;        BYTE <MAP_CHAR_MEM + 464
02466  1016             ;        BYTE <MAP_CHAR_MEM + 472
02467  1016             ;        BYTE <MAP_CHAR_MEM + 480
02468  1016             ;        BYTE <MAP_CHAR_MEM + 488
02469  1016             ;        BYTE <MAP_CHAR_MEM + 496
02470  1016             ;        BYTE <MAP_CHAR_MEM + 504
02471  1016             ;        BYTE <MAP_CHAR_MEM + 512
02472  1016             ;        BYTE <MAP_CHAR_MEM + 520
02473  1016             ;        BYTE <MAP_CHAR_MEM + 528
02474  1016             ;        BYTE <MAP_CHAR_MEM + 536
02475  1016             ;        BYTE <MAP_CHAR_MEM + 544
02476  1016             ;        BYTE <MAP_CHAR_MEM + 552
02477  1016             ;        BYTE <MAP_CHAR_MEM + 560        ;70
02478  1016             ;        BYTE <MAP_CHAR_MEM + 568
02479  1016             ;        BYTE <MAP_CHAR_MEM + 576
02480  1016             ;        BYTE <MAP_CHAR_MEM + 584
02481  1016             ;        BYTE <MAP_CHAR_MEM + 592
02482  1016             ;        BYTE <MAP_CHAR_MEM + 600
02483  1016             ;        BYTE <MAP_CHAR_MEM + 608
02484  1016             ;        BYTE <MAP_CHAR_MEM + 616
02485  1016             ;        BYTE <MAP_CHAR_MEM + 624
02486  1016             ;        BYTE <MAP_CHAR_MEM + 632
02487  1016             ;        BYTE <MAP_CHAR_MEM + 640
02488  1016             ;        BYTE <MAP_CHAR_MEM + 648
02489  1016             ;        BYTE <MAP_CHAR_MEM + 656
02490  1016             ;        BYTE <MAP_CHAR_MEM + 664
02491  1016             ;        BYTE <MAP_CHAR_MEM + 672
02492  1016             ;        BYTE <MAP_CHAR_MEM + 680
02493  1016             ;        BYTE <MAP_CHAR_MEM + 688
02494  1016             ;        BYTE <MAP_CHAR_MEM + 696
02495  1016             ;        BYTE <MAP_CHAR_MEM + 704
02496  1016             ;        BYTE <MAP_CHAR_MEM + 712
02497  1016             ;        BYTE <MAP_CHAR_MEM + 720        ;90
02498  1016             ;        BYTE <MAP_CHAR_MEM + 728
02499  1016             ;        BYTE <MAP_CHAR_MEM + 736
02500  1016             ;        BYTE <MAP_CHAR_MEM + 744
02501  1016             ;        BYTE <MAP_CHAR_MEM + 752
02502  1016             ;        BYTE <MAP_CHAR_MEM + 760
02503  1016             ;        BYTE <MAP_CHAR_MEM + 768
02504  1016             ;        BYTE <MAP_CHAR_MEM + 776
02505  1016             ;        BYTE <MAP_CHAR_MEM + 784
02506  1016             ;        BYTE <MAP_CHAR_MEM + 792
02507  1016             ;        BYTE <MAP_CHAR_MEM + 800        ;100
02508  1016             ;        BYTE <MAP_CHAR_MEM + 808
02509  1016             ;        BYTE <MAP_CHAR_MEM + 816
02510  1016             ;        BYTE <MAP_CHAR_MEM + 824
02511  1016             ;        BYTE <MAP_CHAR_MEM + 832
02512  1016             ;        BYTE <MAP_CHAR_MEM + 840
02513  1016             ;        BYTE <MAP_CHAR_MEM + 848
02514  1016             ;        BYTE <MAP_CHAR_MEM + 856
02515  1016             ;        BYTE <MAP_CHAR_MEM + 864
02516  1016             ;        BYTE <MAP_CHAR_MEM + 872
02517  1016             ;        BYTE <MAP_CHAR_MEM + 880        ;110
02518  1016             ;        BYTE <MAP_CHAR_MEM + 888
02519  1016             ;        BYTE <MAP_CHAR_MEM + 896
02520  1016             ;        BYTE <MAP_CHAR_MEM + 904
02521  1016             ;        BYTE <MAP_CHAR_MEM + 912
02522  1016             ;        BYTE <MAP_CHAR_MEM + 920
02523  1016             ;        BYTE <MAP_CHAR_MEM + 928
02524  1016             ;        BYTE <MAP_CHAR_MEM + 936
02525  1016             ;        BYTE <MAP_CHAR_MEM + 944
02526  1016             ;        BYTE <MAP_CHAR_MEM + 952
02527  1016             ;        BYTE <MAP_CHAR_MEM + 960        ;120
02528  1016             ;        BYTE <MAP_CHAR_MEM + 968
02529  1016             ;        BYTE <MAP_CHAR_MEM + 976
02530  1016             ;        BYTE <MAP_CHAR_MEM + 984
02531  1016             ;        BYTE <MAP_CHAR_MEM + 992
02532  1016             ;        BYTE <MAP_CHAR_MEM + 1000
02533  1016             ;        BYTE <MAP_CHAR_MEM + 1008
02534  1016             ;        BYTE <MAP_CHAR_MEM + 1016
02535  1016             ;        BYTE <MAP_CHAR_MEM + 1024
02536  1016             ;        BYTE <MAP_CHAR_MEM + 1032
02537  1016             ;        BYTE <MAP_CHAR_MEM + 1040       ;130
02538  1016             ;        BYTE <MAP_CHAR_MEM + 1048
02539  1016             ;        BYTE <MAP_CHAR_MEM + 1056
02540  1016             ;        BYTE <MAP_CHAR_MEM + 1064
02541  1016             ;        BYTE <MAP_CHAR_MEM + 1072
02542  1016             ;        BYTE <MAP_CHAR_MEM + 1080
02543  1016             ;        BYTE <MAP_CHAR_MEM + 1088
02544  1016             ;        BYTE <MAP_CHAR_MEM + 1096
02545  1016             ;        BYTE <MAP_CHAR_MEM + 1104
02546  1016             ;        BYTE <MAP_CHAR_MEM + 1112
02547  1016             ;        BYTE <MAP_CHAR_MEM + 1120       ;140
02548  1016             ;        BYTE <MAP_CHAR_MEM + 1128
02549  1016             ;        BYTE <MAP_CHAR_MEM + 1136
02550  1016             ;        BYTE <MAP_CHAR_MEM + 1144
02551  1016             ;        BYTE <MAP_CHAR_MEM + 1152
02552  1016             ;        BYTE <MAP_CHAR_MEM + 1160
02553  1016             ;        BYTE <MAP_CHAR_MEM + 1168
02554  1016             ;        BYTE <MAP_CHAR_MEM + 1176
02555  1016             ;        BYTE <MAP_CHAR_MEM + 1184
02556  1016             ;        BYTE <MAP_CHAR_MEM + 1192
02557  1016             ;        BYTE <MAP_CHAR_MEM + 1200       ;150
02558  1016             ;        BYTE <MAP_CHAR_MEM + 1208
02559  1016             ;        BYTE <MAP_CHAR_MEM + 1216
02560  1016             ;        BYTE <MAP_CHAR_MEM + 1224
02561  1016             ;        BYTE <MAP_CHAR_MEM + 1232
02562  1016             ;        BYTE <MAP_CHAR_MEM + 1240
02563  1016             ;        BYTE <MAP_CHAR_MEM + 1248
02564  1016             ;        BYTE <MAP_CHAR_MEM + 1256
02565  1016             ;        BYTE <MAP_CHAR_MEM + 1264
02566  1016             ;        BYTE <MAP_CHAR_MEM + 1272
02567  1016             ;        BYTE <MAP_CHAR_MEM + 1280       ;160
02568  1016             ;        BYTE <MAP_CHAR_MEM + 1288
02569  1016             ;        BYTE <MAP_CHAR_MEM + 1296
02570  1016             ;        BYTE <MAP_CHAR_MEM + 1304
02571  1016             ;        BYTE <MAP_CHAR_MEM + 1312
02572  1016             ;        BYTE <MAP_CHAR_MEM + 1320
02573  1016             ;        BYTE <MAP_CHAR_MEM + 1328
02574  1016             ;        BYTE <MAP_CHAR_MEM + 1336
02575  1016             ;        BYTE <MAP_CHAR_MEM + 1344
02576  1016             ;        BYTE <MAP_CHAR_MEM + 1352
02577  1016             ;        BYTE <MAP_CHAR_MEM + 1360       ;170
02578  1016             ;        BYTE <MAP_CHAR_MEM + 1368
02579  1016             ;        BYTE <MAP_CHAR_MEM + 1376
02580  1016             ;        BYTE <MAP_CHAR_MEM + 1384
02581  1016             ;        BYTE <MAP_CHAR_MEM + 1392
02582  1016             ;        BYTE <MAP_CHAR_MEM + 1400
02583  1016             ;        BYTE <MAP_CHAR_MEM + 1408
02584  1016             ;        BYTE <MAP_CHAR_MEM + 1416
02585  1016             ;        BYTE <MAP_CHAR_MEM + 1424
02586  1016             ;        BYTE <MAP_CHAR_MEM + 1432
02587  1016             ;        BYTE <MAP_CHAR_MEM + 1440       ;180
02588  1016             ;        BYTE <MAP_CHAR_MEM + 1448
02589  1016             ;        BYTE <MAP_CHAR_MEM + 1456
02590  1016             ;        BYTE <MAP_CHAR_MEM + 1464
02591  1016             ;        BYTE <MAP_CHAR_MEM + 1472
02592  1016             ;        BYTE <MAP_CHAR_MEM + 1480
02593  1016             ;        BYTE <MAP_CHAR_MEM + 1488
02594  1016             ;        BYTE <MAP_CHAR_MEM + 1496
02595  1016             ;        BYTE <MAP_CHAR_MEM + 1504
02596  1016             ;        BYTE <MAP_CHAR_MEM + 1512
02597  1016             ;        BYTE <MAP_CHAR_MEM + 1520       ;190
02598  1016             ;        BYTE <MAP_CHAR_MEM + 1528
02599  1016             ;        BYTE <MAP_CHAR_MEM + 1536
02600  1016             ;        BYTE <MAP_CHAR_MEM + 1544
02601  1016             ;        BYTE <MAP_CHAR_MEM + 1552
02602  1016             ;        BYTE <MAP_CHAR_MEM + 1560
02603  1016             ;        BYTE <MAP_CHAR_MEM + 1568
02604  1016             ;        BYTE <MAP_CHAR_MEM + 1576
02605  1016             ;        BYTE <MAP_CHAR_MEM + 1584
02606  1016             ;        BYTE <MAP_CHAR_MEM + 1592
02607  1016             ;        BYTE <MAP_CHAR_MEM + 1600       ;200
02608  1016             ;        BYTE <MAP_CHAR_MEM + 1608
02609  1016             ;        BYTE <MAP_CHAR_MEM + 1616
02610  1016             ;        BYTE <MAP_CHAR_MEM + 1624
02611  1016             ;        BYTE <MAP_CHAR_MEM + 1632
02612  1016             ;        BYTE <MAP_CHAR_MEM + 1640
02613  1016             ;        BYTE <MAP_CHAR_MEM + 1648
02614  1016             ;        BYTE <MAP_CHAR_MEM + 1656
02615  1016             ;        BYTE <MAP_CHAR_MEM + 1664
02616  1016             ;        BYTE <MAP_CHAR_MEM + 1672
02617  1016             ;        BYTE <MAP_CHAR_MEM + 1680       ;210
02618  1016             ;        BYTE <MAP_CHAR_MEM + 1688
02619  1016             ;        BYTE <MAP_CHAR_MEM + 1696
02620  1016             ;        BYTE <MAP_CHAR_MEM + 1704
02621  1016             ;        BYTE <MAP_CHAR_MEM + 1712
02622  1016             ;        BYTE <MAP_CHAR_MEM + 1720
02623  1016             ;        BYTE <MAP_CHAR_MEM + 1728
02624  1016             ;        BYTE <MAP_CHAR_MEM + 1736
02625  1016             ;        BYTE <MAP_CHAR_MEM + 1744
02626  1016             ;        BYTE <MAP_CHAR_MEM + 1752
02627  1016             ;        BYTE <MAP_CHAR_MEM + 1760       ;220
02628  1016             ;        BYTE <MAP_CHAR_MEM + 1768
02629  1016             ;        BYTE <MAP_CHAR_MEM + 1776
02630  1016             ;        BYTE <MAP_CHAR_MEM + 1784
02631  1016             ;        BYTE <MAP_CHAR_MEM + 1792
02632  1016             ;        BYTE <MAP_CHAR_MEM + 1800
02633  1016             ;        BYTE <MAP_CHAR_MEM + 1808       ;226
02634  1016             ;        BYTE <MAP_CHAR_MEM + 1816
02635  1016             ;        BYTE <MAP_CHAR_MEM + 1824
02636  1016             ;        BYTE <MAP_CHAR_MEM + 1832
02637  1016             ;        BYTE <MAP_CHAR_MEM + 1840       ;230, 20312
02638  1016             ;        BYTE <MAP_CHAR_MEM + 1848
02639  1016             ;        BYTE <MAP_CHAR_MEM + 1856
02640  1016             ;        BYTE <MAP_CHAR_MEM + 1864
02641  1016             ;        BYTE <MAP_CHAR_MEM + 1872
02642  1016             ;        BYTE <MAP_CHAR_MEM + 1880       ;235
02643  1016             
02644  1016             ;MAPSCREEN1_CHSET_OFFSET_TABLE_HI
02645  1016             ;        BYTE >MAP_CHAR_MEM
02646  1016             ;        BYTE >MAP_CHAR_MEM + 8
02647  1016             ;        BYTE >MAP_CHAR_MEM + 16
02648  1016             ;        BYTE >MAP_CHAR_MEM + 24
02649  1016             ;        BYTE >MAP_CHAR_MEM + 32
02650  1016             ;        BYTE >MAP_CHAR_MEM + 40
02651  1016             ;        BYTE >MAP_CHAR_MEM + 48
02652  1016             ;        BYTE >MAP_CHAR_MEM + 56
02653  1016             ;        BYTE >MAP_CHAR_MEM + 64
02654  1016             ;        BYTE >MAP_CHAR_MEM + 72
02655  1016             ;        BYTE >MAP_CHAR_MEM + 80
02656  1016             ;        BYTE >MAP_CHAR_MEM + 88
02657  1016             ;        BYTE >MAP_CHAR_MEM + 96
02658  1016             ;        BYTE >MAP_CHAR_MEM + 104
02659  1016             ;        BYTE >MAP_CHAR_MEM + 112
02660  1016             ;        BYTE >MAP_CHAR_MEM + 120
02661  1016             ;        BYTE >MAP_CHAR_MEM + 128
02662  1016             ;        BYTE >MAP_CHAR_MEM + 136
02663  1016             ;        BYTE >MAP_CHAR_MEM + 144
02664  1016             ;        BYTE >MAP_CHAR_MEM + 152
02665  1016             ;        BYTE >MAP_CHAR_MEM + 160
02666  1016             ;        BYTE >MAP_CHAR_MEM + 168
02667  1016             ;        BYTE >MAP_CHAR_MEM + 176
02668  1016             ;        BYTE >MAP_CHAR_MEM + 184
02669  1016             ;        BYTE >MAP_CHAR_MEM + 192
02670  1016             ;        BYTE >MAP_CHAR_MEM + 200
02671  1016             ;        BYTE >MAP_CHAR_MEM + 208
02672  1016             ;        BYTE >MAP_CHAR_MEM + 216
02673  1016             ;        BYTE >MAP_CHAR_MEM + 224
02674  1016             ;        BYTE >MAP_CHAR_MEM + 232
02675  1016             ;        BYTE >MAP_CHAR_MEM + 240
02676  1016             ;        BYTE >MAP_CHAR_MEM + 248
02677  1016             ;        BYTE >MAP_CHAR_MEM + 256
02678  1016             ;        BYTE >MAP_CHAR_MEM + 264
02679  1016             ;        BYTE >MAP_CHAR_MEM + 272
02680  1016             ;        BYTE >MAP_CHAR_MEM + 280
02681  1016             ;        BYTE >MAP_CHAR_MEM + 288
02682  1016             ;        BYTE >MAP_CHAR_MEM + 296
02683  1016             ;        BYTE >MAP_CHAR_MEM + 304
02684  1016             ;        BYTE >MAP_CHAR_MEM + 312
02685  1016             ;        BYTE >MAP_CHAR_MEM + 320
02686  1016             ;        BYTE >MAP_CHAR_MEM + 328
02687  1016             ;        BYTE >MAP_CHAR_MEM + 336
02688  1016             ;        BYTE >MAP_CHAR_MEM + 344
02689  1016             ;        BYTE >MAP_CHAR_MEM + 352
02690  1016             ;        BYTE >MAP_CHAR_MEM + 360
02691  1016             ;        BYTE >MAP_CHAR_MEM + 368
02692  1016             ;        BYTE >MAP_CHAR_MEM + 376
02693  1016             ;        BYTE >MAP_CHAR_MEM + 384
02694  1016             ;        BYTE >MAP_CHAR_MEM + 392
02695  1016             ;        BYTE >MAP_CHAR_MEM + 400
02696  1016             ;        BYTE >MAP_CHAR_MEM + 408
02697  1016             ;        BYTE >MAP_CHAR_MEM + 416
02698  1016             ;        BYTE >MAP_CHAR_MEM + 424
02699  1016             ;        BYTE >MAP_CHAR_MEM + 432
02700  1016             ;        BYTE >MAP_CHAR_MEM + 440
02701  1016             ;        BYTE >MAP_CHAR_MEM + 448
02702  1016             ;        BYTE >MAP_CHAR_MEM + 456
02703  1016             ;        BYTE >MAP_CHAR_MEM + 464
02704  1016             ;        BYTE >MAP_CHAR_MEM + 472
02705  1016             ;        BYTE >MAP_CHAR_MEM + 480
02706  1016             ;        BYTE >MAP_CHAR_MEM + 488
02707  1016             ;        BYTE >MAP_CHAR_MEM + 496
02708  1016             ;        BYTE >MAP_CHAR_MEM + 504
02709  1016             ;        BYTE >MAP_CHAR_MEM + 512
02710  1016             ;        BYTE >MAP_CHAR_MEM + 520
02711  1016             ;        BYTE >MAP_CHAR_MEM + 528
02712  1016             ;        BYTE >MAP_CHAR_MEM + 536
02713  1016             ;        BYTE >MAP_CHAR_MEM + 544
02714  1016             ;        BYTE >MAP_CHAR_MEM + 552
02715  1016             ;        BYTE >MAP_CHAR_MEM + 560
02716  1016             ;        BYTE >MAP_CHAR_MEM + 568
02717  1016             ;        BYTE >MAP_CHAR_MEM + 576
02718  1016             ;        BYTE >MAP_CHAR_MEM + 584
02719  1016             ;        BYTE >MAP_CHAR_MEM + 592
02720  1016             ;        BYTE >MAP_CHAR_MEM + 600
02721  1016             ;        BYTE >MAP_CHAR_MEM + 608
02722  1016             ;        BYTE >MAP_CHAR_MEM + 616
02723  1016             ;        BYTE >MAP_CHAR_MEM + 624
02724  1016             ;        BYTE >MAP_CHAR_MEM + 632
02725  1016             ;        BYTE >MAP_CHAR_MEM + 640
02726  1016             ;        BYTE >MAP_CHAR_MEM + 648
02727  1016             ;        BYTE >MAP_CHAR_MEM + 656
02728  1016             ;        BYTE >MAP_CHAR_MEM + 664
02729  1016             ;        BYTE >MAP_CHAR_MEM + 672
02730  1016             ;        BYTE >MAP_CHAR_MEM + 680
02731  1016             ;        BYTE >MAP_CHAR_MEM + 688
02732  1016             ;        BYTE >MAP_CHAR_MEM + 696
02733  1016             ;        BYTE >MAP_CHAR_MEM + 704
02734  1016             ;        BYTE >MAP_CHAR_MEM + 712
02735  1016             ;        BYTE >MAP_CHAR_MEM + 720
02736  1016             ;        BYTE >MAP_CHAR_MEM + 728
02737  1016             ;        BYTE >MAP_CHAR_MEM + 736
02738  1016             ;        BYTE >MAP_CHAR_MEM + 744
02739  1016             ;        BYTE >MAP_CHAR_MEM + 752
02740  1016             ;        BYTE >MAP_CHAR_MEM + 760
02741  1016             ;        BYTE >MAP_CHAR_MEM + 768
02742  1016             ;        BYTE >MAP_CHAR_MEM + 776
02743  1016             ;        BYTE >MAP_CHAR_MEM + 784
02744  1016             ;        BYTE >MAP_CHAR_MEM + 792
02745  1016             ;        BYTE >MAP_CHAR_MEM + 800
02746  1016             ;        BYTE >MAP_CHAR_MEM + 808
02747  1016             ;        BYTE >MAP_CHAR_MEM + 816
02748  1016             ;        BYTE >MAP_CHAR_MEM + 824
02749  1016             ;        BYTE >MAP_CHAR_MEM + 832
02750  1016             ;        BYTE >MAP_CHAR_MEM + 840
02751  1016             ;        BYTE >MAP_CHAR_MEM + 848
02752  1016             ;        BYTE >MAP_CHAR_MEM + 856
02753  1016             ;        BYTE >MAP_CHAR_MEM + 864
02754  1016             ;        BYTE >MAP_CHAR_MEM + 872
02755  1016             ;        BYTE >MAP_CHAR_MEM + 880
02756  1016             ;        BYTE >MAP_CHAR_MEM + 888
02757  1016             ;        BYTE >MAP_CHAR_MEM + 896
02758  1016             ;        BYTE >MAP_CHAR_MEM + 904
02759  1016             ;        BYTE >MAP_CHAR_MEM + 912
02760  1016             ;        BYTE >MAP_CHAR_MEM + 920
02761  1016             ;        BYTE >MAP_CHAR_MEM + 928
02762  1016             ;        BYTE >MAP_CHAR_MEM + 936
02763  1016             ;        BYTE >MAP_CHAR_MEM + 944
02764  1016             ;        BYTE >MAP_CHAR_MEM + 952
02765  1016             ;        BYTE >MAP_CHAR_MEM + 960
02766  1016             ;        BYTE >MAP_CHAR_MEM + 968
02767  1016             ;        BYTE >MAP_CHAR_MEM + 976
02768  1016             ;        BYTE >MAP_CHAR_MEM + 984
02769  1016             ;        BYTE >MAP_CHAR_MEM + 992
02770  1016             ;        BYTE >MAP_CHAR_MEM + 1000
02771  1016             ;        BYTE >MAP_CHAR_MEM + 1008
02772  1016             ;        BYTE >MAP_CHAR_MEM + 1016
02773  1016             ;        BYTE >MAP_CHAR_MEM + 1024
02774  1016             ;        BYTE >MAP_CHAR_MEM + 1032
02775  1016             ;        BYTE >MAP_CHAR_MEM + 1040
02776  1016             ;        BYTE >MAP_CHAR_MEM + 1048
02777  1016             ;        BYTE >MAP_CHAR_MEM + 1056
02778  1016             ;        BYTE >MAP_CHAR_MEM + 1064
02779  1016             ;        BYTE >MAP_CHAR_MEM + 1072
02780  1016             ;        BYTE >MAP_CHAR_MEM + 1080
02781  1016             ;        BYTE >MAP_CHAR_MEM + 1088
02782  1016             ;        BYTE >MAP_CHAR_MEM + 1096
02783  1016             ;        BYTE >MAP_CHAR_MEM + 1104
02784  1016             ;        BYTE >MAP_CHAR_MEM + 1112
02785  1016             ;        BYTE >MAP_CHAR_MEM + 1120
02786  1016             ;        BYTE >MAP_CHAR_MEM + 1128
02787  1016             ;        BYTE >MAP_CHAR_MEM + 1136
02788  1016             ;        BYTE >MAP_CHAR_MEM + 1144
02789  1016             ;        BYTE >MAP_CHAR_MEM + 1152
02790  1016             ;        BYTE >MAP_CHAR_MEM + 1160
02791  1016             ;        BYTE >MAP_CHAR_MEM + 1168
02792  1016             ;        BYTE >MAP_CHAR_MEM + 1176
02793  1016             ;        BYTE >MAP_CHAR_MEM + 1184
02794  1016             ;        BYTE >MAP_CHAR_MEM + 1192
02795  1016             ;        BYTE >MAP_CHAR_MEM + 1200
02796  1016             ;        BYTE >MAP_CHAR_MEM + 1208
02797  1016             ;        BYTE >MAP_CHAR_MEM + 1216
02798  1016             ;        BYTE >MAP_CHAR_MEM + 1224
02799  1016             ;        BYTE >MAP_CHAR_MEM + 1232
02800  1016             ;        BYTE >MAP_CHAR_MEM + 1240
02801  1016             ;        BYTE >MAP_CHAR_MEM + 1248
02802  1016             ;        BYTE >MAP_CHAR_MEM + 1256
02803  1016             ;        BYTE >MAP_CHAR_MEM + 1264
02804  1016             ;        BYTE >MAP_CHAR_MEM + 1272
02805  1016             ;        BYTE >MAP_CHAR_MEM + 1280
02806  1016             ;        BYTE >MAP_CHAR_MEM + 1288
02807  1016             ;        BYTE >MAP_CHAR_MEM + 1296
02808  1016             ;        BYTE >MAP_CHAR_MEM + 1304
02809  1016             ;        BYTE >MAP_CHAR_MEM + 1312
02810  1016             ;        BYTE >MAP_CHAR_MEM + 1320
02811  1016             ;        BYTE >MAP_CHAR_MEM + 1328
02812  1016             ;        BYTE >MAP_CHAR_MEM + 1336
02813  1016             ;        BYTE >MAP_CHAR_MEM + 1344
02814  1016             ;        BYTE >MAP_CHAR_MEM + 1352
02815  1016             ;        BYTE >MAP_CHAR_MEM + 1360
02816  1016             ;        BYTE >MAP_CHAR_MEM + 1368
02817  1016             ;        BYTE >MAP_CHAR_MEM + 1376
02818  1016             ;        BYTE >MAP_CHAR_MEM + 1384
02819  1016             ;        BYTE >MAP_CHAR_MEM + 1392
02820  1016             ;        BYTE >MAP_CHAR_MEM + 1400
02821  1016             ;        BYTE >MAP_CHAR_MEM + 1408
02822  1016             ;        BYTE >MAP_CHAR_MEM + 1416
02823  1016             ;        BYTE >MAP_CHAR_MEM + 1424
02824  1016             ;        BYTE >MAP_CHAR_MEM + 1432
02825  1016             ;        BYTE >MAP_CHAR_MEM + 1440
02826  1016             ;        BYTE >MAP_CHAR_MEM + 1448
02827  1016             ;        BYTE >MAP_CHAR_MEM + 1456
02828  1016             ;        BYTE >MAP_CHAR_MEM + 1464
02829  1016             ;        BYTE >MAP_CHAR_MEM + 1472
02830  1016             ;        BYTE >MAP_CHAR_MEM + 1480
02831  1016             ;        BYTE >MAP_CHAR_MEM + 1488
02832  1016             ;        BYTE >MAP_CHAR_MEM + 1496
02833  1016             ;        BYTE >MAP_CHAR_MEM + 1504
02834  1016             ;        BYTE >MAP_CHAR_MEM + 1512
02835  1016             ;        BYTE >MAP_CHAR_MEM + 1520
02836  1016             ;        BYTE >MAP_CHAR_MEM + 1528
02837  1016             ;        BYTE >MAP_CHAR_MEM + 1536
02838  1016             ;        BYTE >MAP_CHAR_MEM + 1544
02839  1016             ;        BYTE >MAP_CHAR_MEM + 1552
02840  1016             ;        BYTE >MAP_CHAR_MEM + 1560
02841  1016             ;        BYTE >MAP_CHAR_MEM + 1568
02842  1016             ;        BYTE >MAP_CHAR_MEM + 1576
02843  1016             ;        BYTE >MAP_CHAR_MEM + 1584
02844  1016             ;        BYTE >MAP_CHAR_MEM + 1592
02845  1016             ;        BYTE >MAP_CHAR_MEM + 1600
02846  1016             ;        BYTE >MAP_CHAR_MEM + 1608
02847  1016             ;        BYTE >MAP_CHAR_MEM + 1616
02848  1016             ;        BYTE >MAP_CHAR_MEM + 1624
02849  1016             ;        BYTE >MAP_CHAR_MEM + 1632
02850  1016             ;        BYTE >MAP_CHAR_MEM + 1640
02851  1016             ;        BYTE >MAP_CHAR_MEM + 1648
02852  1016             ;        BYTE >MAP_CHAR_MEM + 1656
02853  1016             ;        BYTE >MAP_CHAR_MEM + 1664
02854  1016             ;        BYTE >MAP_CHAR_MEM + 1672
02855  1016             ;        BYTE >MAP_CHAR_MEM + 1680
02856  1016             ;        BYTE >MAP_CHAR_MEM + 1688
02857  1016             ;        BYTE >MAP_CHAR_MEM + 1696
02858  1016             ;        BYTE >MAP_CHAR_MEM + 1704
02859  1016             ;        BYTE >MAP_CHAR_MEM + 1712
02860  1016             ;        BYTE >MAP_CHAR_MEM + 1720
02861  1016             ;        BYTE >MAP_CHAR_MEM + 1728
02862  1016             ;        BYTE >MAP_CHAR_MEM + 1736
02863  1016             ;        BYTE >MAP_CHAR_MEM + 1744
02864  1016             ;        BYTE >MAP_CHAR_MEM + 1752
02865  1016             ;        BYTE >MAP_CHAR_MEM + 1760
02866  1016             ;        BYTE >MAP_CHAR_MEM + 1768
02867  1016             ;        BYTE >MAP_CHAR_MEM + 1776
02868  1016             ;        BYTE >MAP_CHAR_MEM + 1784
02869  1016             ;        BYTE >MAP_CHAR_MEM + 1792
02870  1016             ;        BYTE >MAP_CHAR_MEM + 1800
02871  1016             ;        BYTE >MAP_CHAR_MEM + 1808
02872  1016             ;        BYTE >MAP_CHAR_MEM + 1816
02873  1016             ;        BYTE >MAP_CHAR_MEM + 1824
02874  1016             ;        BYTE >MAP_CHAR_MEM + 1832
02875  1016             ;        BYTE >MAP_CHAR_MEM + 1840
02876  1016             ;        BYTE >MAP_CHAR_MEM + 1848
02877  1016             ;        BYTE >MAP_CHAR_MEM + 1856
02878  1016             ;        BYTE >MAP_CHAR_MEM + 1864
02879  1016             ;        BYTE >MAP_CHAR_MEM + 1872
02880  1016             ;        BYTE >MAP_CHAR_MEM + 1880       ;245
02881  1016             
02882  1016             ;MAPSCREEN2_CHSET_OFFSET_TABLE_LO
02883  1016             ;        BYTE <MAP_CHAR_MEM
02884  1016             ;        BYTE <MAP_CHAR_MEM + 100
02885  1016             ;        BYTE <MAP_CHAR_MEM + 200
02886  1016             ;        BYTE <MAP_CHAR_MEM + 300
02887  1016             ;        BYTE <MAP_CHAR_MEM + 400
02888  1016             ;        BYTE <MAP_CHAR_MEM + 500
02889  1016             ;        BYTE <MAP_CHAR_MEM + 600
02890  1016             ;        BYTE <MAP_CHAR_MEM + 700
02891  1016             ;        BYTE <MAP_CHAR_MEM + 800
02892  1016             ;        BYTE <MAP_CHAR_MEM + 900
02893  1016             ;        BYTE <MAP_CHAR_MEM + 1000
02894  1016             ;        BYTE <MAP_CHAR_MEM + 1100
02895  1016             ;        BYTE <MAP_CHAR_MEM + 1200
02896  1016             ;        BYTE <MAP_CHAR_MEM + 1300
02897  1016             ;        BYTE <MAP_CHAR_MEM + 1400
02898  1016             ;        BYTE <MAP_CHAR_MEM + 1500
02899  1016             ;        BYTE <MAP_CHAR_MEM + 1600
02900  1016             ;        BYTE <MAP_CHAR_MEM + 1700
02901  1016             ;        BYTE <MAP_CHAR_MEM + 1800
02902  1016             ;        BYTE <MAP_CHAR_MEM + 1900
02903  1016             ;        BYTE <MAP_CHAR_MEM + 2000
02904  1016             ;        BYTE <MAP_CHAR_MEM + 2100
02905  1016             ;        BYTE <MAP_CHAR_MEM + 2200
02906  1016             ;        BYTE <MAP_CHAR_MEM + 2300
02907  1016             ;        BYTE <MAP_CHAR_MEM + 2400
02908  1016             ;        BYTE <MAP_CHAR_MEM + 2500
02909  1016             ;        BYTE <MAP_CHAR_MEM + 2600
02910  1016             ;        BYTE <MAP_CHAR_MEM + 2700
02911  1016             ;        BYTE <MAP_CHAR_MEM + 2800
02912  1016             ;        BYTE <MAP_CHAR_MEM + 2900
02913  1016             ;        BYTE <MAP_CHAR_MEM + 3000
02914  1016             ;        BYTE <MAP_CHAR_MEM + 3100
02915  1016             ;        BYTE <MAP_CHAR_MEM + 3200
02916  1016             
02917  1016             ;MAPSCREEN2_CHSET_OFFSET_TABLE_HI
02918  1016             ;        BYTE >MAP_CHAR_MEM
02919  1016             ;        BYTE >MAP_CHAR_MEM + 100
02920  1016             ;        BYTE >MAP_CHAR_MEM + 200
02921  1016             ;        BYTE >MAP_CHAR_MEM + 300
02922  1016             ;        BYTE >MAP_CHAR_MEM + 400
02923  1016             ;        BYTE >MAP_CHAR_MEM + 500
02924  1016             ;        BYTE >MAP_CHAR_MEM + 600
02925  1016             ;        BYTE >MAP_CHAR_MEM + 700
02926  1016             ;        BYTE >MAP_CHAR_MEM + 800
02927  1016             ;        BYTE >MAP_CHAR_MEM + 900
02928  1016             ;        BYTE >MAP_CHAR_MEM + 1000
02929  1016             ;        BYTE >MAP_CHAR_MEM + 1100
02930  1016             ;        BYTE >MAP_CHAR_MEM + 1200
02931  1016             ;        BYTE >MAP_CHAR_MEM + 1300
02932  1016             ;        BYTE >MAP_CHAR_MEM + 1400
02933  1016             ;        BYTE >MAP_CHAR_MEM + 1500
02934  1016             ;        BYTE >MAP_CHAR_MEM + 1600
02935  1016             ;        BYTE >MAP_CHAR_MEM + 1700
02936  1016             ;        BYTE >MAP_CHAR_MEM + 1800
02937  1016             ;        BYTE >MAP_CHAR_MEM + 1900
02938  1016             ;        BYTE >MAP_CHAR_MEM + 2000
02939  1016             ;        BYTE >MAP_CHAR_MEM + 2100
02940  1016             ;        BYTE >MAP_CHAR_MEM + 2200
02941  1016             ;        BYTE >MAP_CHAR_MEM + 2300
02942  1016             ;        BYTE >MAP_CHAR_MEM + 2400
02943  1016             ;        BYTE >MAP_CHAR_MEM + 2500
02944  1016             ;        BYTE >MAP_CHAR_MEM + 2600
02945  1016             ;        BYTE >MAP_CHAR_MEM + 2700
02946  1016             ;        BYTE >MAP_CHAR_MEM + 2800
02947  1016             ;        BYTE >MAP_CHAR_MEM + 2900
02948  1016             ;        BYTE >MAP_CHAR_MEM + 3000
02949  1016             ;        BYTE >MAP_CHAR_MEM + 3100
02950  1016                        
02951  1016             ATTRIB_ADDRESS 
02952  1016  20 78                 WORD ATTRIBUTE_MEM
02953  1018             
02954  1018             CHECKUP
02955  1018  01                    BYTE %0000001
02956  1019             CHECKDOWN
02957  1019  02                    BYTE %0000010
02958  101A             
02959  101A             CHECKLEFT
02960  101A  04                    BYTE %0000100
02961  101B             
02962  101B             CHECKRIGHT 
02963  101B  08                    BYTE %0001000
02964  101C             
02965  101C             CHECKDOWNRIGHT 
02966  101C  0A                    BYTE %0001010
02967  101D             
02968  101D             RIVER_ANIM1_LO 
02969  101D  18                    BYTE <CHRADR1
02970  101E             RIVER_ANIM1_HI 
02971  101E  4E                    BYTE >CHRADR1
02972  101F             
02973  101F             RIVER_ANIM2_LO 
02974  101F  C8                    BYTE <CHRADR2
02975  1020             RIVER_ANIM2_HI 
02976  1020  4A                    BYTE >CHRADR2
02977  1021             
02978  1021             RIVER_ANIM3_LO 
02979  1021  58                    BYTE <CHRADR3
02980  1022             RIVER_ANIM3_HI 
02981  1022  4C                    BYTE >CHRADR3
02982  1023             
02983  1023             RIVER_ANIM4_LO 
02984  1023  58                    BYTE <CHRADR4
02985  1024             RIVER_ANIM4_HI 
02986  1024  4F                    BYTE >CHRADR4
02987  1025             
02988  1025  18 4E      ZP1        WORD CHRADR1
02989  1027  C8 4A      ZP2        WORD CHRADR2
02990  1029  58 4C      ZP3        WORD CHRADR3
02991  102B  58 4F      ZP4        WORD CHRADR4
02992  102D             
02993  102D             GAMESCORE
02994  102D  00 00 00              BYTE 0,0,0,0,0
02995  1032             
02996  1032             ANIMLEVEL
02997  1032  00                    BYTE 0
02998  1033             
02999  1033  00         WATERSPEED BYTE 0
03000  1034             
03001  1034  00         MAPTWOLOADED BYTE 0
03002  1035             
03003  1035             ; CHARS.BIN
03004  1035             
03005  1035             ;MAPS_CHAR_MEM
03006  1035             
03007  1035             ;;CHARSET_DATA
03008  1035             
03009  1035             ;        BYTE $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
03010  1035             ;        BYTE $00,$FC,$FC,$FC,$FC,$FC,$FC,$00,$00,$7F,$7F,$7F,$7F,$7F,$7F,$00
03011  1035             ;        BYTE $00,$1F,$1F,$1F,$1F,$1F,$1F,$00,$AA,$82,$92,$86,$92,$86,$82,$AA
03012  1035             ;        BYTE $CF,$33,$FC,$33,$CF,$FC,$F3,$00,$08,$38,$38,$38,$28,$28,$08,$08
03013  1035             ;        BYTE $00,$FE,$F8,$F8,$E0,$E0,$83,$83,$08,$08,$08,$08,$C8,$C8,$C8,$C8
03014  1035             ;        BYTE $02,$CE,$38,$F8,$20,$E0,$83,$83,$C8,$C8,$C8,$C8,$C8,$C8,$C8,$C8
03015  1035             ;        BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$BF,$BF,$BF,$BF,$BF,$BF,$BF,$BF
03016  1035             ;        BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$00,$BF,$BF,$BF,$BF,$BF,$BF,$BF,$00
03017  1035             ;        BYTE $FE,$FE,$F8,$F8,$E0,$E0,$80,$83,$02,$FE,$F8,$F8,$E0,$E0,$80,$80
03018  1035             ;        BYTE $0F,$0F,$3F,$3F,$FF,$FF,$FF,$FF,$FE,$FE,$F8,$F8,$E0,$E0,$83,$83
03019  1035             ;        BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$8F,$B3,$BC,$B3,$8F,$BC,$B3,$80
03020  1035             ;        BYTE $8F,$B3,$BC,$B3,$8F,$BC,$B3,$00,$FE,$FE,$F8,$F8,$E0,$E0,$83,$83
03021  1035             ;        BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$55,$AA,$55,$00,$00,$00,$00,$00
03022  1035             ;        BYTE $AA,$02,$A8,$00,$20,$20,$80,$80,$02,$02,$08,$08,$20,$20,$80,$80
03023  1035             ;        BYTE $02,$02,$08,$08,$20,$20,$8A,$8A,$00,$00,$00,$00,$00,$00,$AA,$AA
03024  1035             ;        BYTE $00,$33,$FC,$30,$C2,$F2,$F8,$08,$00,$83,$BC,$33,$CF,$FC,$F3,$00
03025  1035             ;        BYTE $A2,$AF,$A2,$80,$8F,$8F,$8F,$8F,$AA,$FF,$AA,$0A,$FE,$FF,$FF,$FF
03026  1035             ;        BYTE $AA,$FE,$A8,$00,$23,$23,$8F,$8F,$80,$80,$8F,$8F,$8F,$8F,$8F,$8F
03027  1035             ;        BYTE $02,$22,$08,$08,$23,$23,$8F,$8F,$00,$00,$3F,$3F,$3F,$3F,$3F,$3F
03028  1035             ;        BYTE $3F,$3F,$FF,$FF,$00,$00,$AA,$AA,$3F,$3F,$3F,$3F,$00,$00,$AA,$AA
03029  1035             ;        BYTE $CC,$33,$FC,$30,$F0,$C0,$C3,$00,$C8,$C8,$C8,$C8,$C8,$C8,$C8,$08
03030  1035             ;        BYTE $0F,$03,$FC,$33,$CF,$FC,$F3,$00,$C8,$C8,$C8,$C8,$C8,$C8,$C8,$C8
03031  1035             ;        BYTE $FF,$FE,$FE,$F8,$F8,$E0,$E3,$83,$8F,$0F,$3F,$3F,$FF,$FF,$FF,$FF
03032  1035             ;        BYTE $8F,$0F,$3F,$FF,$FF,$FF,$FF,$FF,$55,$AA,$A5,$AF,$BF,$BF,$80,$80
03033  1035             ;        BYTE $55,$AA,$55,$FF,$FF,$FF,$00,$00,$55,$AA,$5A,$FE,$FE,$FE,$02,$02
03034  1035             ;        BYTE $BF,$80,$80,$80,$80,$80,$80,$AA,$FE,$C2,$32,$32,$0E,$0E,$02,$AA
03035  1035             ;        BYTE $FF,$C3,$CC,$CC,$F0,$F0,$C0,$EA,$FE,$02,$02,$02,$02,$02,$02,$AA
03036  1035             ;        BYTE $BF,$80,$80,$80,$80,$80,$AA,$BF,$FE,$02,$02,$02,$02,$02,$AA,$FE
03037  1035             ;        BYTE $FF,$C0,$C0,$C0,$C0,$C0,$EA,$FF,$80,$80,$80,$90,$A5,$AA,$AA,$00
03038  1035             ;        BYTE $03,$03,$02,$02,$02,$AA,$AA,$00,$C0,$C0,$40,$40,$40,$AA,$AA,$00
03039  1035             ;        BYTE $02,$02,$02,$0A,$2A,$AA,$AA,$00,$55,$AA,$A5,$AF,$BF,$BF,$80,$80
03040  1035             ;        BYTE $55,$AA,$55,$FF,$FF,$FF,$00,$00,$56,$AA,$6A,$FE,$FE,$FE,$02,$02
03041  1035             ;        BYTE $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
03042  1035             ;        BYTE $02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$AA,$AA
03043  1035             ;        BYTE $00,$00,$00,$00,$00,$00,$AA,$AA,$02,$02,$02,$02,$02,$02,$AA,$AA
03044  1035             ;        BYTE $02,$02,$02,$02,$02,$02,$02,$2A,$AA,$00,$00,$00,$00,$00,$00,$00
03045  1035             ;        BYTE $AA,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$00,$00,$00,$00,$02,$02,$02,$03
03046  1035             ;        BYTE $A0,$80,$80,$80,$00,$00,$00,$00,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E
03047  1035             ;        BYTE $08,$08,$20,$20,$20,$80,$AA,$AA,$2E,$2E,$2E,$2E,$2E,$2E,$AA,$AA
03048  1035             ;        BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$00
03049  1035             ;        BYTE $CA,$C8,$E3,$2F,$2F,$8F,$BF,$80,$AA,$2A,$2A,$02,$F2,$F2,$F2,$02
03050  1035             ;        BYTE $CE,$32,$F2,$38,$CB,$CB,$E0,$E0,$0F,$33,$FC,$33,$CF,$FC,$F3,$00
03051  1035             ;        BYTE $C2,$32,$F2,$F2,$32,$C2,$F2,$02,$CF,$33,$FC,$FC,$32,$C2,$F2,$08
03052  1035             ;        BYTE $C8,$C8,$E0,$2C,$20,$8C,$B0,$80,$CA,$C8,$E0,$23,$2F,$8C,$B3,$80
03053  1035             ;        BYTE $AA,$2A,$EA,$32,$C2,$F2,$F2,$02,$CE,$32,$F2,$38,$CB,$C8,$E3,$20
03054  1035             ;        BYTE $C2,$32,$F2,$32,$C2,$F2,$F2,$02,$00,$00,$00,$00,$02,$02,$02,$08
03055  1035             ;        BYTE $2F,$8F,$BF,$BF,$BF,$BF,$BF,$BF,$F2,$F2,$F2,$F2,$F2,$F2,$F2,$F2
03056  1035             ;        BYTE $08,$08,$20,$2C,$2C,$8C,$BC,$BC,$F2,$F2,$F8,$C8,$CB,$E3,$23,$2F
03057  1035             ;        BYTE $FF,$FC,$FC,$FE,$F2,$F2,$F8,$C8,$8F,$8F,$BF,$3F,$3F,$FF,$FF,$FF
03058  1035             ;        BYTE $FF,$FF,$FF,$FF,$FF,$FC,$FC,$FE,$C8,$E3,$23,$2F,$8F,$8F,$BF,$3F
03059  1035             ;        BYTE $3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$33,$FC,$33,$CF,$FC,$F3,$00
03060  1035             ;        BYTE $00,$C8,$C8,$C8,$C8,$C8,$C8,$08,$AA,$FF,$AA,$00,$FF,$FF,$FF,$FF
03061  1035             ;        BYTE $88,$C8,$88,$08,$C8,$C8,$C8,$C8,$00,$00,$FC,$FC,$FC,$FC,$FC,$FC
03062  1035             ;        BYTE $00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$08,$08,$C8,$C8,$C8,$C8,$C8,$C8
03063  1035             ;        BYTE $FC,$FC,$FC,$FC,$00,$00,$A8,$A8,$FF,$FF,$FF,$FF,$00,$00,$AA,$AA
03064  1035             ;        BYTE $3F,$3F,$3F,$3F,$00,$00,$2A,$2A,$C8,$C8,$C8,$C8,$08,$08,$80,$80
03065  1035             ;        BYTE $00,$33,$FC,$33,$C2,$FA,$F9,$09,$00,$33,$FC,$33,$AA,$55,$55,$00
03066  1035             ;        BYTE $AA,$FF,$AA,$00,$00,$00,$00,$00,$25,$24,$27,$27,$27,$24,$80,$83
03067  1035             ;        BYTE $00,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$FC,$FF,$FF,$FF,$FF,$FC,$00
03068  1035             ;        BYTE $AA,$BB,$BF,$B8,$B8,$3B,$3B,$38,$FF,$C0,$2A,$3F,$FF,$3F,$EA,$00
03069  1035             ;        BYTE $FF,$00,$AA,$FF,$FF,$FF,$AA,$00,$38,$3B,$3B,$3B,$3B,$38,$3A,$00
03070  1035             ;        BYTE $00,$FF,$FF,$FF,$FF,$00,$AA,$00,$00,$CC,$3F,$CC,$AA,$55,$55,$00
03071  1035             ;        BYTE $00,$CC,$3F,$CC,$83,$AF,$6F,$60,$00,$CC,$3F,$CC,$F3,$3F,$CF,$00
03072  1035             ;        BYTE $00,$3F,$FF,$FF,$FF,$FF,$3F,$00,$58,$18,$D8,$D8,$D8,$18,$42,$02
03073  1035             ;        BYTE $FF,$03,$A8,$FC,$FF,$FC,$AB,$00,$AA,$EE,$EE,$2E,$2A,$EC,$EC,$2C
03074  1035             ;        BYTE $2C,$EC,$EC,$EC,$EC,$2C,$AC,$00,$CF,$33,$FC,$33,$C2,$FA,$F9,$09
03075  1035             ;        BYTE $CF,$33,$FC,$33,$AA,$55,$55,$00,$25,$24,$27,$27,$27,$24,$81,$80
03076  1035             ;        BYTE $00,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$FC,$FF,$FF,$FF,$FF,$FC,$00
03077  1035             ;        BYTE $AA,$BB,$BB,$B8,$AA,$3B,$3B,$38,$FF,$C0,$2A,$BF,$FF,$BF,$EA,$00
03078  1035             ;        BYTE $FF,$00,$AA,$FF,$FF,$FF,$AA,$00,$38,$3B,$3B,$3B,$3B,$38,$3A,$00
03079  1035             ;        BYTE $00,$FF,$FF,$FF,$FF,$00,$AA,$00,$CF,$33,$FC,$33,$A3,$6B,$6B,$18
03080  1035             ;        BYTE $00,$0F,$3F,$3F,$3F,$3F,$0F,$00,$08,$C8,$F8,$F8,$F8,$F8,$CE,$02
03081  1035             ;        BYTE $FF,$00,$A8,$FE,$FF,$FE,$A8,$00,$A8,$B8,$B8,$B8,$A8,$20,$2C,$2C
03082  1035             ;        BYTE $2C,$EC,$EC,$EC,$EC,$2C,$A0,$00,$00,$33,$F0,$C3,$CF,$CC,$33,$00
03083  1035             ;        BYTE $0A,$0A,$02,$08,$02,$08,$02,$0A,$AF,$AF,$AF,$AF,$AF,$AF,$AF,$AF
03084  1035             ;        BYTE $A5,$A5,$A5,$A5,$A5,$A5,$A5,$A5,$00,$00,$00,$00,$00,$00,$00,$00
03085  1035             ;        BYTE $0A,$0A,$02,$08,$02,$08,$02,$00,$AF,$AF,$AF,$AF,$AF,$AF,$AF,$00
03086  1035             ;        BYTE $A5,$A5,$A5,$A5,$A5,$A5,$A5,$00,$0F,$33,$3C,$33,$0F,$3C,$33,$00
03087  1035             ;        BYTE $A5,$A5,$A5,$A5,$A5,$A5,$A5,$A5,$0A,$0A,$02,$08,$02,$08,$00,$00
03088  1035             ;        BYTE $AF,$AF,$AF,$AF,$AF,$AF,$00,$00,$A5,$A5,$A5,$A5,$A5,$A5,$00,$00
03089  1035             ;        BYTE $00,$00,$00,$00,$00,$03,$0F,$3F,$00,$00,$00,$00,$00,$00,$00,$00
03090  1035             ;        BYTE $15,$00,$0A,$0A,$20,$23,$23,$00,$00,$08,$08,$08,$20,$23,$23,$00
03091  1035             ;        BYTE $55,$FF,$54,$00,$00,$00,$03,$03,$0C,$0C,$30,$30,$C0,$C0,$00,$AA
03092  1035             ;        BYTE $00,$00,$00,$00,$00,$00,$FF,$AA,$55,$AA,$AA,$AA,$AA,$AA,$AA,$00
03093  1035             ;        BYTE $55,$AA,$A0,$83,$8F,$8C,$8C,$00,$55,$AA,$02,$F0,$FC,$0C,$0C,$00
03094  1035             ;        BYTE $00,$00,$00,$FF,$FF,$FF,$00,$00,$AF,$FF,$EB,$FF,$AF,$FF,$FF,$FF
03095  1035             ;        BYTE $AF,$FF,$EB,$FF,$AF,$FF,$EB,$FF,$AF,$FF,$EB,$FF,$AF,$FF,$00,$00
03096  1035             ;        BYTE $CC,$30,$FC,$30,$CC,$FC,$F0,$00,$25,$20,$23,$23,$23,$20,$2A,$00
03097  1035             ;        BYTE $55,$02,$F2,$32,$F2,$02,$AA,$00,$AC,$FC,$E8,$FC,$AC,$FC,$E8,$FC
03098  1035             ;        BYTE $AC,$FC,$E8,$FC,$AC,$FC,$00,$00,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$00
03099  1035             ;        BYTE $7F,$7F,$7F,$7F,$7F,$7F,$7F,$00,$55,$AA,$80,$82,$88,$88,$88,$88
03100  1035             ;        BYTE $55,$AA,$00,$AA,$00,$FF,$FF,$FF,$55,$AA,$02,$82,$22,$22,$22,$22
03101  1035             ;        BYTE $88,$88,$88,$88,$82,$80,$AA,$00,$FF,$FF,$FF,$00,$AA,$00,$AA,$00
03102  1035             ;        BYTE $22,$22,$22,$22,$82,$02,$AA,$00,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$00
03103  1035             ;        BYTE $3D,$3D,$3D,$3D,$3D,$3D,$3D,$00,$F3,$CC,$3F,$CC,$F3,$3F,$CF,$00
03104  1035             ;        BYTE $15,$2A,$2F,$2C,$2F,$2F,$2A,$00,$54,$A8,$F8,$F8,$38,$F8,$A8,$00
03105  1035             ;        BYTE $54,$08,$C8,$08,$C8,$08,$A8,$00,$55,$AA,$AA,$AA,$AA,$95,$90,$90
03106  1035             ;        BYTE $55,$AA,$AA,$AA,$AA,$55,$01,$01,$54,$A8,$A8,$A8,$A8,$A8,$A8,$A8
03107  1035             ;        BYTE $90,$90,$95,$9F,$9F,$95,$AA,$00,$01,$01,$55,$7D,$7D,$55,$AA,$00
03108  1035             ;        BYTE $A8,$A8,$A8,$A8,$A8,$A8,$A8,$00,$54,$A8,$A8,$A8,$A8,$A8,$A8,$00
03109  1035             ;        BYTE $00,$00,$00,$F0,$F0,$F0,$00,$00,$A3,$F3,$E3,$F3,$A3,$F3,$E3,$F3
03110  1035             ;        BYTE $A0,$F0,$E0,$F0,$A0,$F0,$E0,$F0,$A3,$F3,$E3,$F3,$A3,$F3,$00,$00
03111  1035             ;        BYTE $A0,$F0,$E0,$F0,$A0,$F0,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00
03112  1035             ;        BYTE $00,$00,$00,$00,$03,$0F,$3F,$FF,$03,$0F,$3F,$FF,$FF,$FF,$FF,$FF
03113  1035             ;        BYTE $55,$00,$C8,$08,$20,$20,$20,$00,$55,$00,$CA,$0A,$A0,$A3,$A3,$00
03114  1035             ;        BYTE $00,$CA,$CA,$0A,$A0,$A3,$A3,$00,$00,$C8,$C8,$08,$20,$23,$23,$00
03115  1035             ;        BYTE $00,$88,$88,$08,$20,$20,$23,$03,$00,$4A,$4A,$4A,$C0,$C2,$F2,$30
03116  1035             ;        BYTE $00,$C8,$C8,$08,$20,$20,$20,$00,$00,$00,$00,$03,$03,$03,$03,$03
03117  1035             ;        BYTE $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$3F,$3F
03118  1035             ;        BYTE $03,$03,$03,$03,$03,$57,$FF,$FF,$30,$30,$30,$30,$30,$75,$FF,$FF
03119  1035             ;        BYTE $03,$03,$03,$03,$03,$57,$FF,$FF,$00,$00,$00,$00,$00,$55,$FF,$FF
03120  1035             ;        BYTE $00,$00,$00,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$D5,$FF,$FF
03121  1035             ;        BYTE $00,$00,$00,$00,$00,$50,$FC,$FC,$C0,$C0,$C0,$C0,$C0,$D5,$FF,$FF
03122  1035             ;        BYTE $0C,$0C,$0C,$0C,$0C,$5D,$FF,$FF,$03,$03,$03,$03,$03,$03,$03,$03
03123  1035             ;        BYTE $80,$80,$80,$80,$80,$80,$80,$80,$AA,$FF,$AA,$00,$00,$40,$41,$75
03124  1035             ;        BYTE $FF,$FF,$FF,$32,$0A,$02,$02,$02,$FF,$FF,$FF,$8C,$A0,$40,$40,$40
03125  1035             ;        BYTE $02,$02,$02,$02,$02,$02,$AF,$BF,$40,$40,$40,$40,$40,$40,$F2,$FE
03126  1035             ;        BYTE $00,$00,$00,$00,$00,$40,$41,$45,$00,$00,$00,$00,$00,$00,$50,$54
03127  1035             ;        BYTE $3F,$3F,$0F,$00,$00,$00,$00,$00,$FF,$FF,$FF,$32,$0A,$02,$02,$02
03128  1035             ;        BYTE $FF,$FF,$FF,$8C,$A0,$40,$40,$40,$FC,$FC,$F0,$00,$00,$00,$00,$00
03129  1035             ;        BYTE $02,$02,$02,$02,$02,$02,$AF,$BF,$40,$40,$40,$40,$40,$40,$FA,$FE
03130  1035             ;        BYTE $C0,$30,$F0,$30,$C0,$F0,$F0,$00,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$00
03131  1035             ;        BYTE $FE,$3E,$02,$02,$02,$02,$02,$02,$FC,$F0,$00,$00,$00,$00,$00,$00
03132  1035             ;        BYTE $02,$02,$02,$02,$0A,$2A,$AA,$55,$00,$00,$00,$00,$80,$A0,$A8,$54
03133  1035             ;        BYTE $FC,$FC,$FC,$FC,$10,$00,$00,$00
03134  1035             
03135  1035             ;; CHARSATTRIBS.BIN
03136  1035             ;;COLOR_DATA
03137  1035             ;ATTRIBUTES_MEM
03138  1035             
03139  1035             ;        BYTE $03,$0A,$0A,$0A,$0A,$3E,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E
03140  1035             ;        BYTE $0E,$0E,$0E,$0E,$1E,$0A,$0A,$0A,$0E,$0B,$0A,$0A,$0A,$0A,$0A,$0A
03141  1035             ;        BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E,$1C
03142  1035             ;        BYTE $1C,$1C,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$08,$0C,$0C,$08,$0C,$0C,$0C
03143  1035             ;        BYTE $0B,$0E,$0E,$0E,$0C,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$0A
03144  1035             ;        BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E,$0E
03145  1035             ;        BYTE $0E,$0E,$0E,$0E,$0E,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
03146  1035             ;        BYTE $0A,$0A,$0A,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$0A,$0A,$0D,$0D
03147  1035             ;        BYTE $0D,$0D,$0D,$0A,$0A,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0A,$0C,$0C
03148  1035             ;        BYTE $0C,$0C,$0C,$0A,$0E,$09,$0E,$09,$0E,$09,$0E,$0A,$09,$0E,$09,$0E
03149  1035             ;        BYTE $0E,$0C,$0C,$0C,$0E,$0E,$0E,$0A,$0E,$0E,$0A,$0A,$0A,$0A,$0A,$0E
03150  1035             ;        BYTE $0E,$0A,$0A,$0A,$0A,$0A,$0B,$0A,$0A,$0B,$0A,$0A,$0A,$0A,$0F,$0F
03151  1035             ;        BYTE $0E,$0A,$0A,$0A,$0A,$0D,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$1E,$0E,$0E
03152  1035             ;        BYTE $0C,$0C,$0C,$0C,$0B,$0B,$0C,$0A,$0D,$8A,$8A,$8E,$8E,$0E,$8A,$0A
03153  1035             ;        BYTE $0A,$0E,$0E,$0C,$0C,$0A,$0E,$0E,$0E,$0E,$0C,$0C,$0A,$0A,$0A,$0A
03154  1035             ;        BYTE $0A,$0A,$0A,$0A,$0E,$0C,$0B,$0B,$0B
03155  1035             
03156  1035             ;; TILES.BIN
03157  1035             ;;TILES_DATA
03158  1035             ;TILES_MEM
03159  1035             
03160  1035             ;        BYTE $00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
03161  1035             ;        BYTE $02,$03,$04,$05,$06,$06,$05,$07,$06,$05,$08,$09,$05,$0A,$06,$0B
03162  1035             ;        BYTE $0C,$0D,$0E,$05,$0C,$0F,$05,$10,$0E,$05,$11,$12,$05,$13,$12,$14
03163  1035             ;        BYTE $06,$15,$06,$05,$06,$16,$05,$17,$0E,$05,$11,$12,$05,$13,$12,$18
03164  1035             ;        BYTE $19,$19,$19,$05,$01,$01,$05,$1A,$01,$05,$1B,$01,$05,$1C,$1D,$1D
03165  1035             ;        BYTE $1E,$1F,$06,$05,$20,$21,$05,$22,$23,$05,$24,$25,$05,$1C,$26,$27
03166  1035             ;        BYTE $28,$06,$06,$29,$2A,$06,$06,$29,$18,$18,$18,$2B,$18,$18,$18,$2B
03167  1035             ;        BYTE $2C,$2D,$18,$18,$2E,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14
03168  1035             ;        BYTE $2F,$30,$30,$31,$32,$33,$34,$35,$36,$37,$38,$37,$39,$3A,$3B,$3C
03169  1035             ;        BYTE $3D,$3E,$3E,$3F,$40,$41,$41,$42,$41,$41,$40,$42,$43,$43,$44,$45
03170  1035             ;        BYTE $3D,$3E,$3E,$3F,$40,$46,$47,$48,$49,$4A,$40,$4B,$4C,$43,$44,$4D
03171  1035             ;        BYTE $4E,$4F,$50,$51,$06,$52,$53,$54,$55,$16,$06,$54,$56,$15,$06,$54
03172  1035             ;        BYTE $06,$06,$57,$58,$06,$59,$06,$5A,$5B,$5C,$18,$5D,$5E,$0D,$18,$5D
03173  1035             ;        BYTE $18,$18,$18,$5F,$18,$18,$60,$61,$14,$62,$63,$18,$14,$5F,$64,$18
03174  1035             ;        BYTE $18,$18,$18,$2B,$18,$18,$18,$2B,$14,$14,$14,$2B,$14,$14,$14,$2B
03175  1035             ;        BYTE $65,$65,$65,$66,$67,$67,$67,$68,$69,$6A,$25,$6B,$6C,$6D,$6E,$6F
03176  1035             ;        BYTE $65,$70,$71,$71,$72,$73,$74,$75,$76,$77,$78,$78,$79,$7A,$7A,$7A
03177  1035             ;        BYTE $7B,$7B,$7C,$7D,$7E,$74,$7F,$72,$78,$78,$80,$81,$7A,$7A,$7A,$82
03178  1035             ;        BYTE $06,$83,$84,$84,$06,$85,$86,$87,$88,$89,$8A,$8A,$8B,$8C,$8C,$8C
03179  1035             ;        BYTE $84,$84,$8D,$06,$8E,$86,$8F,$06,$8A,$8A,$90,$91,$8C,$8C,$8C,$92
03180  1035             ;        BYTE $93,$65,$65,$65,$67,$67,$67,$67,$6A,$25,$6A,$25,$6D,$6E,$6D,$6E
03181  1035             ;        BYTE $94,$95,$96,$97,$98,$99,$9A,$97,$94,$95,$96,$40,$98,$99,$9A,$40
03182  1035             ;        BYTE $94,$95,$96,$9B,$98,$99,$9A,$9B,$94,$95,$9C,$40,$9D,$9E,$9F,$A0
03183  1035             ;        BYTE $94,$95,$96,$9B,$98,$99,$9A,$9B,$94,$95,$96,$9B,$98,$99,$9A,$9B
03184  1035             ;        BYTE $94,$95,$96,$A1,$98,$99,$9A,$A1,$94,$95,$96,$A1,$98,$99,$9A,$40
03185  1035             ;        BYTE $94,$95,$96,$A2,$98,$99,$9A,$A3,$94,$95,$96,$A2,$98,$99,$9A,$A3
03186  1035             ;        BYTE $94,$95,$96,$A4,$98,$99,$9A,$A5,$94,$95,$96,$A6,$98,$99,$9A,$40
03187  1035             ;        BYTE $A7,$A8,$A9,$A7,$AA,$AA,$AA,$AA,$AB,$AB,$AC,$AC,$AD,$AD,$AD,$AD
03188  1035             ;        BYTE $06,$AE,$AF,$B0,$06,$AA,$AA,$AA,$0C,$B1,$AC,$AC,$0C,$B2,$AD,$AD
03189  1035             ;        BYTE $B3,$B3,$B3,$B4,$06,$06,$06,$06,$B5,$B6,$B6,$B7,$B8,$B9,$B9,$BA
03190  1035             ;        BYTE $BB,$BC,$BC,$BC,$BD,$BD,$BD,$BD,$BD,$BD,$BE,$BF,$BD,$BD,$AF,$C0
03191  1035             ;        BYTE $B3,$B3,$B3,$B4,$06,$06,$06,$06,$C1,$C2,$C3,$06,$C4,$C5,$C6,$06
03192  1035             ;        BYTE $AF,$B0,$C7,$06,$AA,$AA,$AA,$C8,$AC,$AC,$C9,$CA,$AD,$AD,$CB,$CC
03193  1035             ;        BYTE $18,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14,$CD,$CD,$CD,$CD
03194  1035             ;        BYTE $18,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14
03195  1035             ;        BYTE $06,$06,$06,$06,$06,$06,$06,$06,$40,$CE,$CF,$18,$CF,$18,$18,$18
03196  1035             ;        BYTE $06,$06,$06,$06,$06,$06,$06,$06,$18,$18,$18,$18,$18,$18,$18,$18
03197  1035             ;        BYTE $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$D3,$D2,$D3,$D2,$D2,$D3,$D2,$D3
03198  1035             ;        BYTE $D0,$D1,$D0,$D1,$D2,$D4,$D5,$D6,$D6,$D2,$D6,$D2,$D6,$D2,$D6,$D2
03199  1035             ;        BYTE $A1,$A1,$A1,$A1,$40,$D7,$40,$D8,$D9,$DA,$97,$97,$DB,$DC,$DD,$DD
03200  1035             ;        BYTE $A1,$A1,$A1,$A1,$D8,$40,$DE,$40,$97,$97,$DF,$E0,$DD,$DD,$E1,$E2
03201  1035             ;        BYTE $A1,$E3,$E4,$A1,$D8,$E3,$E4,$40,$97,$E3,$E4,$97,$D8,$E3,$E4,$A1
03202  1035             ;        BYTE $65,$65,$65,$65,$72,$E5,$72,$72,$40,$E6,$E7,$40,$44,$E8,$E9,$44
03203  1035             ;        BYTE $A1,$A1,$A1,$A1,$01,$EA,$EB,$40,$EC,$ED,$EE,$EF,$44,$F0,$F1,$44
03204  1035             ;        BYTE $06,$06,$06,$F2,$06,$06,$06,$F2,$06,$06,$06,$F2,$06,$06,$06,$F2
03205  1035             ;        BYTE $F3,$B4,$4F,$4F,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
03206  1035             ;        BYTE $00,$F4,$F5,$00,$40,$F6,$F7,$40,$00,$F8,$F8,$40,$00,$00,$00,$00
03207  1035             ;        BYTE $19,$19,$19,$19,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
03208  1035             
03209  1035             ;; MAP.BIN
03210  1035             ;;MAP_DATA
03211  1035             ;MAPS_MEM
03212  1035             
03213  1035             ;        BYTE $00,$2E,$15,$29,$00,$2E,$29,$00,$2E,$00,$29,$00,$2E,$29,$15,$29
03214  1035             ;        BYTE $26,$25,$19,$29,$25,$26,$25,$25,$26,$25,$29,$25,$26,$29,$15,$29
03215  1035             ;        BYTE $28,$2B,$18,$29,$00,$00,$00,$28,$2B,$27,$29,$28,$2B,$29,$15,$29
03216  1035             ;        BYTE $08,$08,$1A,$08,$08,$2F,$04,$08,$08,$08,$08,$08,$08,$08,$1A,$08
03217  1035             ;        BYTE $2D,$2D,$17,$2D,$0B,$01,$2D,$1E,$1D,$1F,$2D,$2D,$2D,$2D,$17,$2D
03218  1035             ;        BYTE $24,$24,$16,$0C,$03,$06,$24,$1C,$1B,$20,$23,$12,$13,$23,$16,$23
03219  1035             ;        BYTE $22,$22,$0D,$02,$07,$0E,$22,$22,$22,$22,$22,$22,$22,$22,$22,$22
03220  1035             ;        BYTE $14,$14,$05,$14,$14,$0F,$0F,$2A,$10,$11,$2A,$0F,$14,$14,$14,$14
03221  1035             ;        BYTE $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
03222  1035             ;        BYTE $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
03223  1035             
03224  1035             ;===============================================================================
03225  1035             ; PLAYER SETUP
03226  1035             ;===============================================================================
03227  1035             ;2W THE PLAYER SPRITE HERE CAN MOVE AROUND THE SCREEN ON TOP OF THE TILES
03228  1035             ; AND WHEN THE EDGE IS REACHED, THE SCREEN SCROLLS IN THAT DIRECTION.
03229  1035             ;===============================================================================
03230  1035             
03231  1035             
03232  1035             PLAYERINIT 
03233  1035             
03234  1035             ;-----------------------------------------------------------------------
03235  1035             ; PLAYER HAS A STRANGE SETUP AS IT'S ALWAYS GOING TO BE USING
03236  1035             ; SPRITES 0 AND 1
03237  1035             ; AS WELL AS ALWAYS BEING 'ACTIVE' (USED)
03238  1035             ;-----------------------------------------------------------------------
03239  1035             
03240  1035  A9 00                 LDA #COLOR_BLACK
03241  1037  8D 21 D0              STA VIC_BACKGROUND_COLOR
03242  103A             
03243  103A  A9 FF                 LDA #%11111111                          ; TURN ON MULTICOLOR FOR SPRITES 0 AND 1
03244  103C  8D 1C D0              STA VIC_SPRITE_MULTICOLOR               ; ALSO TURN ALL OTHERS TO SINGLE COLOR
03245  103F             
03246  103F  A9 00                 LDA #COLOR_BLACK
03247  1041  8D 25 D0              STA VIC_SPRITE_MULTICOLOR_1             ; SET SPRITE SHARED MULTICOLOR 1 TO BROWN
03248  1044  A9 0A                 LDA #COLOR_LTRED
03249  1046  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2             ; SET SPRITE SHARED MULTICOLOR 2 TO 'PINK'
03250  1049             
03251  1049  A9 07                 LDA #COLOR_YELLOW
03252  104B  8D 27 D0              STA VIC_SPRITE_COLOR                    ; SET SPRITE 0 COLOR TO YELLOW
03253  104E  A9 06                 LDA #COLOR_BLUE
03254  1050  8D 28 D0              STA VIC_SPRITE_COLOR + 1                ; SET SPRITE 1 COLOR TO ORANGE (BKGROUND SPRITE)
03255  1053             
03256  1053             ;------------------------------------------------------------------------------
03257  1053             ; WE NOW USE A SYSTEM THAT TRACKS THE SPRITE POSITION IN CHARACTER COORDS ON
03258  1053             ; THE SCREEN, SO TO AVOID COSTLY CALCULATIONS EVERY FRAME, WE SET THE SPRITE
03259  1053             ; TO A CHARACTER BORDER INTIALLY AND TRACK ALL MOVEMENT FROM THERE. THAT WAY
03260  1053             ; WE NEED ONLY DO THIS SET OF CALCULATIONS ONCE IN THE LIFETIME OF THE PLAYER.
03261  1053             ;
03262  1053             ; TO INITALLY PLACE THE SPRITE, WE USE 'SPRITETOCHARPOS'
03263  1053             ;------------------------------------------------------------------------------
03264  1053             ; SPRITE X POSITION
03265  1053  A9 16                 LDA #22
03266  1055  85 03                 STA PARAM1                      ; CHAR X POS = 19
03267  1057             
03268  1057  A2 00                 LDX #0
03269  1059  BD 57 35              LDA SPRITE_STACK,X              ; 10,12,10,12,0,0,0,0
03270  105C  85 04                 STA PARAM2                      ; CHAR Y POS = 10
03271  105E  20 C0 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
03272  1061             
03273  1061  A2 01                 LDX #1                          ; SPRITE NUMBER 1
03274  1063  BD 57 35              LDA SPRITE_STACK,X              ; 10,12,10,12,0,0,0,0
03275  1066  85 04                 STA PARAM2
03276  1068  20 C0 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
03277  106B             
03278  106B             ; SPRITE 2 AND 3: ENEMY
03279  106B  A9 01                 LDA #1
03280  106D  85 03                 STA PARAM1                      ; CHAR X POS = 19
03281  106F             
03282  106F  A2 02                 LDX #2
03283  1071  BD 57 35              LDA SPRITE_STACK,X              ; 10,12,10,12,0,0,0,0
03284  1074  85 04                 STA PARAM2                      ; CHAR Y POS = 10
03285  1076  20 C0 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
03286  1079             
03287  1079  A2 03                 LDX #3                          ; SPRITE NUMBER 1
03288  107B  BD 57 35              LDA SPRITE_STACK,X              ; 10,12,10,12,0,0,0,0
03289  107E  85 04                 STA PARAM2
03290  1080  20 C0 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
03291  1083             
03292  1083  A9 01                 LDA #1
03293  1085  85 03                 STA PARAM1                      ; CHAR X POS = 19
03294  1087             
03295  1087  A2 05                 LDX #5
03296  1089  BD 57 35              LDA SPRITE_STACK,X              ; 10,12,10,12,0,0,0,0
03297  108C  85 04                 STA PARAM2                      ; CHAR Y POS = 10
03298  108E  20 C0 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
03299  1091             
03300  1091             ;-------------------------------------------------------------------------------
03301  1091             ; SET SPRITE IMAGES.  THE SPRITES FROM THE MLP SPELUNKER DEMO USED 2 SPRITES
03302  1091             ; OVERLAPPED SO THEY COULD USE AN EXTRA COLOR.  SO OUR MAIN PLAYER SPRITE
03303  1091             ; USES 2 SPRITES (0 AND 1).  THE FIRST WALKING FRAME IMAGE 1, AND IT'S
03304  1091             ; BACKGROUND SPRITE IS IMAGE 8.  WE USE THE SETSPRITEIMAGE SUBROUTINE AS IT
03305  1091             ; WILL UPDATE THE POINTERS FOR BOTH SCREEN1 AND SCREEN2 FOR US.
03306  1091             ;-------------------------------------------------------------------------------
03307  1091             
03308  1091  A9 00                 LDA #PLAYER_STATE_IDLE          ; SET INITIAL STATE (IDLE)
03309  1093  20 D1 11              JSR CHANGEPLAYERSTATE
03310  1096             
03311  1096  A9 01                 LDA #1
03312  1098  8D 60 35              STA SPRITE_IS_ACTIVE            ; SET SPRITE 0 TO ACTIVE
03313  109B  8D 61 35              STA SPRITE_IS_ACTIVE + 1        ; SET SPRITE 1 TO ACTIVE
03314  109E  60                    RTS
03315  109F             
03316  109F             
03317  109F             
03318  109F             ;===============================================================================
03319  109F             ; UPDATE PLAYER
03320  109F             ;-------------------------------------------------------------------------------
03321  109F             ; UPDATE THE PLAYER. JOYSTICK CONTROLS ARE UPDATED VIA INTERRUPT SO WE READ THE
03322  109F             ; VALUES FROM JOY_X AND JOY_Y
03323  109F             ;-------------------------------------------------------------------------------
03324  109F             
03325  109F             
03326  109F             
03327  109F             PLAYER_RIGHT_CAP = MAP_RIGHT_LIMIT       ; SPRITE MOVEMENT CAPS
03328  109F             PLAYER_LEFT_CAP = $09                    ; MOVE THE SPRITE, WE SCROLL THE SCREEN
03329  109F             PLAYER_UP_CAP = $04
03330  109F             PLAYER_DOWN_CAP = MAP_DOWN_LIMIT
03331  109F             
03332  109F             
03333  109F             UPDATEPLAYER ; ONLY UPDATE THE PLAYER IF IT'S ACTIVE
03334  109F  AD 60 35              LDA SPRITE_IS_ACTIVE             ; CHECK AGAINST SPRITE #0 - IS IT ACTIVE?
03335  10A2  D0 01                 BNE @UPDATE
03336  10A4  60                    RTS
03337  10A5             @UPDATE    
03338  10A5  A2 00                 LDX #0
03339  10A7  20 56 34              JSR ANIMATESPRITE
03340  10AA  20 E7 11              JSR UPDATEPLAYERSTATE            ;JUMP (PLAYER_STATE_JUMPTABLE)
03341  10AD  60                    RTS
03342  10AE             
03343  10AE             
03344  10AE             
03345  10AE             ;===============================================================================
03346  10AE             ; JOYSTICK TESTING
03347  10AE             ; MOVING: DIRECTION THE CHARACTER IS MOVING IN
03348  10AE             ; SCROLL: CHECK IF THE SCREEN HAS STOPPED SCROLLING
03349  10AE             
03350  10AE             ; JOYSTICKREADY = 0 - THE SCREEN HAS STOPPED SCROLLING
03351  10AE             ; JOYSTICKREADY = 1 - THE SCREEN IS NOW SCROLLING
03352  10AE             ;===============================================================================
03353  10AE             
03354  10AE             
03355  10AE             JOYSTICKREADY 
03356  10AE  A5 2D                 LDA SCROLL_MOVING             ; IF MOVING IS 'STOPPED' WE CAN TEST JOYSTICK
03357  10B0  F0 05                 BEQ @JOYREADY
03358  10B2                        
03359  10B2             ; SCREEN IS STILL SCROLLING           ; IF IT'S MOVING BUT DIRECTION IS STOPPED, WE'RE 'FIXING'
03360  10B2  A5 2C                 LDA SCROLL_DIRECTION          ; > 0 THEN STOP THE CHARACTER DIRECTION MOVEMENT
03361  10B4  D0 01                 BNE @JOYREADY
03362  10B6             
03363  10B6             ; THE SCREEN HAS STOPPED SCROLLING
03364  10B6  60                    RTS
03365  10B7             
03366  10B7             ; THE SCREEN IS NOW SCROLLING
03367  10B7             @JOYREADY
03368  10B7  A9 00                 LDA #SCROLL_STOP                ; RESET SCROLL DIRECTION - IF IT NEEDS TO SCROLL
03369  10B9  85 2C                 STA SCROLL_DIRECTION            ; IT WILL BE UPDATED
03370  10BB             
03371  10BB  A9 00                 LDA #0                          ; SEND CODE FOR JOYSTICK READY
03372  10BD  60                    RTS
03373  10BE             
03374  10BE             
03375  10BE             
03376  10BE             ;===============================================================================
03377  10BE             ; PLAYER WALKS TO THE RIGHT
03378  10BE             ;===============================================================================
03379  10BE             
03380  10BE             
03381  10BE             MOVEPLAYERRIGHT 
03382  10BE  A9 00                 LDA #0
03383  10C0  8D 43 32              STA SCROLL_FIX_SKIP
03384  10C3  18                    CLC                             ; CLEAR CARRY FLAG BECAUSE I'M PARANOID
03385  10C4             ;===============================================================================
03386  10C4             ; SPRITE HAS NOT REACHED THE RIGHT EDGE SCREEN YET.
03387  10C4             ; SO WE CAN KEEP MOVING THE SPRITE PLAYER TO THE RIGHT.
03388  10C4             ;===============================================================================
03389  10C4  BD 78 35              LDA SPRITE_CHAR_POS_X,X         ; LOAD THE SPRITE CHAR X POSITION
03390  10C7  C9 11                 CMP #PLAYER_RIGHT_CAP           ; CHECK AGAINST THE RIGHT EDGE OF THE SCREEN
03391  10C9  90 25                 BCC @RIGHTMOVE                  ; IF X CHAR POS < CAP - MOVE THE SPRITE, ELSE SCROLL
03392  10CB             
03393  10CB             ;===============================================================================
03394  10CB             ; SPRITE IS AT THE RIGHT EDGE AND THE SCREEN IS SCROLLING,
03395  10CB             ; SO WE CHECK THE
03396  10CB             ; MAP_Y_POS AND MAP_Y_DELTA VARIABLES
03397  10CB             ;===============================================================================
03398  10CB  A5 30                 LDA MAP_X_POS                   ; LOAD THE CURRENT MAP X POSITION
03399  10CD  C9 15                 CMP #21                         ; MAP = 64 TILES WIDE, SCREEN = 10 TILES WIDE
03400  10CF  D0 0E                 BNE @SCROLLRIGHT
03401  10D1  A5 32                 LDA MAP_X_DELTA                 ; EACH TILE IS 4 CHARACTERS WIDE (0-3)
03402  10D3  C9 00                 CMP #0                          ; IF WE HIT THIS LIMIT WE DON'T SCROLL (OR MOVE)
03403  10D5  D0 08                 BNE @SCROLLRIGHT
03404  10D7                        ;AT THIS POINT WE WILL REVERT TO MOVE
03405  10D7  A9 01                 LDA #1
03406  10D9  8D 43 32              STA SCROLL_FIX_SKIP
03407  10DC  4C F0 10              JMP @RIGHTMOVE
03408  10DF             
03409  10DF             ;===============================================================================
03410  10DF             ; CHECK IF SPRITE HIT ANYTHING WHILE MOVING TO THE RIGHT
03411  10DF             ;===============================================================================
03412  10DF             @SCROLLRIGHT 
03413  10DF  A2 00                 LDX #0
03414  10E1  20 1A 09              JSR CHECKMOVERIGHT              ; COLLISION CHECK AGAINST CHARACTERS
03415  10E4  F0 01                 BEQ @SCROLL                     ; TODO - RETURN THE COLLISION CODE HERE
03416  10E6  60                    RTS
03417  10E7             
03418  10E7             ;===============================================================================
03419  10E7             ; SPRITE DIDN'T HIT ANYTHING SO WE CAN SCROLL THE SCREEN TO THE RIGHT
03420  10E7             ;===============================================================================
03421  10E7             @SCROLL
03422  10E7  A9 01                 LDA #SCROLL_RIGHT               ; SET THE DIRECTION FOR SCROLL AND POST
03423  10E9  85 2C                 STA SCROLL_DIRECTION            ; AND POST SCROLL CHECKS
03424  10EB  85 2D                 STA SCROLL_MOVING
03425  10ED  A9 00                 LDA #0                          ; LOAD 'CLEAR CODE'
03426  10EF  60                    RTS                             ; TODO - ENSURE COLLISION CODE IS RETURNED
03427  10F0             
03428  10F0             ;===============================================================================
03429  10F0             ; SPRITE IS NOT AT THE RIGHT SCREEN EDGE YET.
03430  10F0             ; SO WE CHECK FOR ANY COLLISION WHILE MOVING RIGHT. IF NO COLLISION EXISTS,
03431  10F0             ; WE CAN THEN MOVE THE SPRITE TO THE RIGHT.
03432  10F0             ;===============================================================================
03433  10F0                        
03434  10F0             @RIGHTMOVE 
03435  10F0  A2 00                 LDX #0
03436  10F2  20 1A 09              JSR CHECKMOVERIGHT              ; CHECK AHEAD FOR CHARACTER COLLISION
03437  10F5  D0 0C                 BNE @RIGHTDONE
03438  10F7             
03439  10F7             ;        JSR ENEMYCOLLISION
03440  10F7             @MOVERIGHT 
03441  10F7  A2 00                 LDX #0
03442  10F9  20 EF 33              JSR MOVESPRITERIGHT             ; MOVE SPRITES ONE PIXEL RIGHT
03443  10FC  A2 01                 LDX #1
03444  10FE  20 EF 33              JSR MOVESPRITERIGHT
03445  1101             
03446  1101  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
03447  1103             @RIGHTDONE 
03448  1103  60                    RTS
03449  1104             
03450  1104             
03451  1104             
03452  1104             ;===============================================================================
03453  1104             ; PLAYER WALKS TO THE LEFT
03454  1104             ;===============================================================================
03455  1104             
03456  1104             
03457  1104             MOVEPLAYERLEFT 
03458  1104  A9 00                 LDA #0                          ; MAKE SURE SCROLL 'FIX' IS ON
03459  1106  8D 43 32              STA SCROLL_FIX_SKIP
03460  1109             
03461  1109  BD 78 35              LDA SPRITE_CHAR_POS_X,X           ; CHECK FOR LEFT SIDE MOVEMENT CAP
03462  110C  C9 09                 CMP #PLAYER_LEFT_CAP
03463  110E  B0 1F                 BCS @LEFTMOVE                   ; IF BELOW CAP, WE MOVE THE SPRITE
03464  1110                        ; OTHERWISE WE PREPARE TO SCROLL
03465  1110             
03466  1110             ;===============================================================================
03467  1110             ; IS SPRITE AT THE LEFT EDGE OF THE MAP? (MAP_X_POS)
03468  1110             
03469  1110             ; SPRITE IS AT THE LEFT SCREEN EDGE AND THE SCREEN IS SCROLLING,
03470  1110             ; SO WE CHECK THE
03471  1110             ; MAP_Y_POS AND MAP_Y_DELTA VARIABLES
03472  1110             ;===============================================================================
03473  1110                        ; CHECK FOR EDGE OF MAP FOR SCROLLING
03474  1110  A5 30                 LDA MAP_X_POS                   ; CHECK FOR MAP POS X = 0
03475  1112  D0 0A                 BNE @SCROLLLEFT
03476  1114  A5 32                 LDA MAP_X_DELTA                 ; CHECK FOR MAP DELTA = 0
03477  1116  D0 06                 BNE @SCROLLLEFT
03478  1118                        ; WE'RE AT THE MAPS LEFT EDGE
03479  1118                        ; SO WE REVERT TO SPRITE MOVEMENT ONCE MORE
03480  1118             ;===============================================================================
03481  1118             ; SINCE SPRITE_POS_X,X > 0 WE MOVE THE SPRITE AND NOT THE SCREEN.
03482  1118             ;===============================================================================
03483  1118             
03484  1118             ;        LDA #1
03485  1118             ;        STA SCROLL_FIX_SKIP
03486  1118  BD 68 35              LDA SPRITE_POS_X,X              ; CHECK FOR SPRITE POS > 0 (NOT SPRITE CHAR POS)
03487  111B  10 12                 BPL @LEFTMOVE                   ; SO WE COULD WALK TO THE EDGE OF SCREEN
03488  111D  60                    RTS
03489  111E             
03490  111E             @SCROLLLEFT 
03491  111E                        ;--------------------------------------- SCROLL SCREEN FOR LEFT MOVE
03492  111E  A2 00                 LDX #0
03493  1120  20 BD 08              JSR CHECKMOVELEFT               ; CHECK FOR CHARACTER COLLISION TO THE LEFT
03494  1123  F0 01                 BEQ @SCROLL
03495  1125  60                    RTS                             ; TODO - RETURN COLLISION CODE
03496  1126             
03497  1126             ;===============================================================================
03498  1126             ; SCREEN IS SCROLLING TO THE LEFT
03499  1126             ;===============================================================================
03500  1126             
03501  1126             @SCROLL
03502  1126  A9 02                 LDA #SCROLL_LEFT
03503  1128  85 2C                 STA SCROLL_DIRECTION
03504  112A  85 2D                 STA SCROLL_MOVING
03505  112C  A9 00                 LDA #0                          ; RETURN 'CLEAR CODE'
03506  112E  60                    RTS
03507  112F                        ;---------------------------------------- MOVE THE PLAYER LEFT ONE PIXEL
03508  112F             
03509  112F             ;===============================================================================
03510  112F             ; BEFORE WE CAN MOVE THE SPRITE, WE NEED TO CHECK IF HE COLLIDED INTO A TILE
03511  112F             ;===============================================================================
03512  112F             @LEFTMOVE
03513  112F  A2 00                 LDX #0                          ; CHECK AT THE HEAD OF OUR SPRITE'S BODY
03514  1131  20 BD 08              JSR CHECKMOVELEFT               ; CHECK FOR COLLISIONS WITH CHARACTERS
03515  1134  D0 0C                 BNE @LEFTDONE                   ; TODO RETURN COLLISION CODE
03516  1136             
03517  1136             ;===============================================================================
03518  1136             ; SPRITE IS MOVING TO THE LEFT (SCREEN HAS STOPPED SCROLLING HERE)
03519  1136             ;===============================================================================
03520  1136             @MOVELEFT  
03521  1136             ;        JSR ENEMYCOLLISION
03522  1136  A2 00                 LDX #0
03523  1138  20 BD 33              JSR MOVESPRITELEFT
03524  113B  A2 01                 LDX #1
03525  113D  20 BD 33              JSR MOVESPRITELEFT
03526  1140             
03527  1140  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
03528  1142             @LEFTDONE
03529  1142  60                    RTS
03530  1143             
03531  1143             
03532  1143             
03533  1143             ;===============================================================================
03534  1143             ; PLAYER MOVES DOWN THE SCREEN
03535  1143             ;===============================================================================
03536  1143             
03537  1143             
03538  1143             MOVEPLAYERDOWN 
03539  1143             
03540  1143             ;===============================================================================
03541  1143             ; SPRITE HAS NOT REACHED THE SCREEN BOTTOM.
03542  1143             ; SO WE CAN KEEP MOVING THE SPRITE PLAYER DOWNWARD.
03543  1143             ;===============================================================================
03544  1143  18                    CLC
03545  1144  BD 99 35              LDA SPRITE_CHAR_POS_Y,X
03546  1147  C9 0A                 CMP #PLAYER_DOWN_CAP
03547  1149  90 1E                 BCC @DOWNMOVE
03548  114B             
03549  114B             ;===============================================================================
03550  114B             ; SPRITE IS NOW BELOW THE BOTTOM EDGE SO WE CHECK THE
03551  114B             ; MAP_Y_POS AND MAP_Y_DELTA VARIABLES
03552  114B             ;===============================================================================
03553  114B             
03554  114B  A5 31                 LDA MAP_Y_POS
03555  114D  C9 31                 CMP #49                         ; CHECK FOR BOTTOM OF MAP
03556  114F  D0 07                 BNE @DOWNSCROLL
03557  1151  A5 33                 LDA MAP_Y_DELTA
03558  1153  C9 02                 CMP #02
03559  1155  90 01                 BCC @DOWNSCROLL
03560  1157  60                    RTS
03561  1158             
03562  1158             ;===============================================================================
03563  1158             ; CHECK IF SPRITE HIT ANYTHING WHILE MOVING DOWN
03564  1158             ;===============================================================================
03565  1158             @DOWNSCROLL 
03566  1158  A2 01                 LDX #1                          ; CHECK SPRITE #0
03567  115A  20 77 09              JSR CHECKMOVEDOWN               ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
03568  115D  F0 01                 BEQ @SCROLL                     ; WE ARE NOT BLOCKED = 0
03569  115F  60                    RTS                             ; RETURN WITH CONTENTS OF COLLISON ROUTINE
03570  1160             
03571  1160             ;===============================================================================
03572  1160             ; SPRITE DIDN'T HIT ANYTHING SO WE CAN SCROLL THE SCREEN DOWNWARD
03573  1160             ;===============================================================================
03574  1160             
03575  1160             @SCROLL
03576  1160             ;        LDA SCROLL_COUNT_Y
03577  1160             ;        STA 53286
03578  1160             
03579  1160  A9 04                 LDA #SCROLL_DOWN
03580  1162  85 2C                 STA SCROLL_DIRECTION
03581  1164  85 2D                 STA SCROLL_MOVING
03582  1166  A9 00                 LDA #0                          ; RETURN A CLEAR COLLISION CODE
03583  1168  60                    RTS
03584  1169             
03585  1169             ; SETTING LDX #1 WILL NOT ALLOW THE SINGLE ONE BUTTON PRESSED JUMP
03586  1169             ; THIS IS BECAUSE THE COLLISION DETECTION LOOKS AT THE SPRITE'S HEAD
03587  1169             ; AND NOT HIS FEET. SO THE SPRITE'S HEAD WON'T DETECT ANYTHING SO HE
03588  1169             ; WON'T JUMP.
03589  1169             
03590  1169             ;===============================================================================
03591  1169             ; SPRITE IS NOT AT THE SCREEN BOTTOM EDGE YET.
03592  1169             ; SO WE CHECK FOR ANY COLLISION WHILE MOVING DOWN. IF NO COLLISION EXISTS,
03593  1169             ; WE CAN THEN MOVE THE SPRITE DOWNWARD.
03594  1169             ;===============================================================================
03595  1169             @DOWNMOVE
03596  1169  A2 00                 LDX #0                          ; CHECK SPRITE'S LEG AREA
03597  116B  20 77 09              JSR CHECKMOVEDOWN               ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
03598  116E  D0 0C                 BNE @DOWNDONE                   ; RETUN WITH CONTENTS OF COLLISION CODE
03599  1170             
03600  1170  A2 00                 LDX #0
03601  1172  20 36 34              JSR MOVESPRITEDOWN              ; = 0 SO WE CAN MOVE THE SPRITE DOWN
03602  1175  A2 01                 LDX #1
03603  1177  20 36 34              JSR MOVESPRITEDOWN
03604  117A  A9 00                 LDA #0                          ; RETURN WITH CLEAR CODE
03605  117C             @DOWNDONE
03606  117C  60                    RTS
03607  117D             
03608  117D             
03609  117D             
03610  117D             ;===============================================================================
03611  117D             ; PLAYER MOVES UP THE SCREEN
03612  117D             ;===============================================================================
03613  117D             
03614  117D             
03615  117D             MOVEPLAYERUP 
03616  117D  38                    SEC
03617  117E  BD 99 35              LDA SPRITE_CHAR_POS_Y,X
03618  1181  C9 04                 CMP #PLAYER_UP_CAP
03619  1183  B0 1B                 BCS @UPMOVE
03620  1185             
03621  1185  A5 31                 LDA MAP_Y_POS
03622  1187  D0 08                 BNE @UPSCROLL
03623  1189  18                    CLC
03624  118A  A5 33                 LDA MAP_Y_DELTA
03625  118C  C9 01                 CMP #1
03626  118E  B0 01                 BCS @UPSCROLL
03627  1190  60                    RTS
03628  1191             
03629  1191             @UPSCROLL
03630  1191  A2 00                 LDX #0
03631  1193  20 C5 09              JSR CHECKMOVEUP
03632  1196  F0 01                 BEQ @SCROLL
03633  1198  60                    RTS
03634  1199             
03635  1199             @SCROLL
03636  1199  A9 03                 LDA #SCROLL_UP
03637  119B  85 2C                 STA SCROLL_DIRECTION
03638  119D  85 2D                 STA SCROLL_MOVING
03639  119F  60                    RTS
03640  11A0             
03641  11A0             @UPMOVE
03642  11A0  A2 00                 LDX #0                                  ; CHECK SPRITE 0 (HEAD/BODY)
03643  11A2  20 C5 09              JSR CHECKMOVEUP
03644  11A5  D0 0B                 BNE @UPDONE
03645  11A7                        
03646  11A7  20 1B 34              JSR MOVESPRITEUP                        ; MOVE SPRITE 0(HEAD - TOP)
03647  11AA  A2 01                 LDX #1
03648  11AC  20 1B 34              JSR MOVESPRITEUP                        ; MOVE SPRITE 1 (BODY - BOTTOM)
03649  11AF  A9 00                 LDA #0
03650  11B1  60                    RTS
03651  11B2             @UPDONE
03652  11B2  A9 01                 LDA #1
03653  11B4  60                    RTS
03654  11B5             
03655  11B5             
03656  11B5             
03657  11B5             ;===============================================================================
03658  11B5             ; PLAYER STATES
03659  11B5             ;===============================================================================
03660  11B5             ; PLAYER STATES ARE INCREMENTED BY 2 AS THEY ARE INDEXES TO LOOK UP THE ADDRESS
03661  11B5             ; OF THE STATE
03662  11B5             ; CODE ON THE PLAYER_STATE_JUMPTABLE.  AN ADDRESS IS 2 BYTES (1 WORD) EGRO THE
03663  11B5             ; INDEX MUST INCREASE
03664  11B5             ; BY 2 BYTES.
03665  11B5             ;-------------------------------------------------------------------------------
03666  11B5             PLAYER_STATE_IDLE = 0     ; STANDING STILL - AWAITING INPUT
03667  11B5             PLAYER_STATE_WALK_RIGHT = 2     ; WALKING RIGHT
03668  11B5             PLAYER_STATE_WALK_LEFT = 4     ; WALKING LEFT
03669  11B5             PLAYER_STATE_PUNCH_RIGHT = 6    ; PUNCH RIGHT
03670  11B5             PLAYER_STATE_PUNCH_LEFT = 8    ; PUNCH LEFT
03671  11B5             PLAYER_STATE_SHOOT_RIGHT = 10    ; PUNCH RIGHT
03672  11B5             PLAYER_STATE_SHOOT_LEFT = 12   ; PUNCH LEFT
03673  11B5             PLAYER_STATE_KICK_RIGHT = 14    ; KICK RIGHT
03674  11B5             PLAYER_STATE_KICK_LEFT = 16    ; KICK LEFT
03675  11B5             PLAYER_STATE_POLE = 18    ; CLIMBING POLE
03676  11B5             PLAYER_STATE_SWIM_R = 20    ; SWIM RIGHT
03677  11B5             PLAYER_STATE_SWIM_L = 22    ; SWIM LEFT
03678  11B5             PLAYER_STATE_FLOATING = 24    ; FLOATING
03679  11B5             PLAYER_STATE_JUMP = 26    ; JUMPING
03680  11B5             
03681  11B5             PLAYER_SUBSTATE_ENTER = 0     ; WE HAVE JUST ENTERED THIS STATE
03682  11B5             PLAYER_SUBSTATE_RUNNING = 1     ; THIS STATE IS RUNNING NORMALLY
03683  11B5             
03684  11B5             ;===============================================================================
03685  11B5             ; PLAYER STATE JUMPTABLE
03686  11B5             ;===============================================================================
03687  11B5             PLAYER_STATE_JUMPTABLE 
03688  11B5  30 12                 WORD PLAYERSTATEIDLE
03689  11B7  AE 13                 WORD PLAYERSTATEWALKRIGHT
03690  11B9  2D 14                 WORD PLAYERSTATEWALKLEFT
03691  11BB  88 14                 WORD PLAYERSTATEPUNCHRIGHT
03692  11BD  CB 14                 WORD PLAYERSTATEPUNCHLEFT
03693  11BF  0F 15                 WORD PLAYERSTATESHOOTRIGHT
03694  11C1  52 15                 WORD PLAYERSTATESHOOTLEFT
03695  11C3  8C 15                 WORD PLAYERSTATEKICKRIGHT
03696  11C5  AF 15                 WORD PLAYERSTATEKICKLEFT
03697  11C7  D2 15                 WORD PLAYERSTATEPOLE
03698  11C9  AB 16                 WORD PLAYERSTATESWIMR
03699  11CB  EB 16                 WORD PLAYERSTATESWIML
03700  11CD  2B 17                 WORD PLAYERSTATEFLOATING
03701  11CF  BE 17                 WORD PLAYERSTATEJUMP
03702  11D1             ;===============================================================================
03703  11D1             ; CHANGE PLAYER STATE
03704  11D1             ;===============================================================================
03705  11D1             ; CHANGE A PLAYERS STATE
03706  11D1             ;
03707  11D1             ; A = STATE TO CHANGE TO
03708  11D1             ;
03709  11D1             ; MODIFIES A,X,ZEROPAGE_POINTER_1
03710  11D1             
03711  11D1             ;C64 BRAIN NOTES: PLAYER STATES RECORDED (ANIMATION, IDLE, RUNNING, ETC.).
03712  11D1             ; DATA IS SAVED TO PLAYER_SUBSTATE
03713  11D1             ;-------------------------------------------------------------------------------
03714  11D1             
03715  11D1             CHANGEPLAYERSTATE 
03716  11D1  AA                    TAX                                             ; TRANSFER A TO X
03717  11D2  8E 50 18              STX PLAYER_STATE                                ; STORE THE NEW PLAYER STATE
03718  11D5  A9 00                 LDA #PLAYER_SUBSTATE_ENTER                      ; SET SUBSTATE TO ENTER
03719  11D7  8D 51 18              STA PLAYER_SUBSTATE
03720  11DA             
03721  11DA             ;        LDA #1
03722  11DA             ;        STA SPRITE_ANIM_PLAY
03723  11DA             
03724  11DA  BD B5 11              LDA PLAYER_STATE_JUMPTABLE,X                    ; LOOKUP STATE TO CHANGE TO
03725  11DD  85 17                 STA ZEROPAGE_POINTER_1                          ; AND STORE IT IN ZEROPAGE_POINTER_1
03726  11DF             
03727  11DF  BD B6 11              LDA PLAYER_STATE_JUMPTABLE + 1,X
03728  11E2  85 18                 STA ZEROPAGE_POINTER_1 + 1
03729  11E4             
03730  11E4  6C 17 00              JMP (ZEROPAGE_POINTER_1)                        ; JUMP TO STATE (TO SETUP)
03731  11E7                        ; NOTE: THIS IS NOT A JSR.
03732  11E7                        ; THE STATE WILL ACT AS AN EXTENSION OF
03733  11E7                        ; THIS ROUTINE THEN RETURN.
03734  11E7             
03735  11E7             ;===============================================================================
03736  11E7             ; UPDATE PLAYER STATE
03737  11E7             ;-------------------------------------------------------------------------------
03738  11E7             ; UPDATE THE PLAYER BASED ON THEIR STATE
03739  11E7             ;-------------------------------------------------------------------------------
03740  11E7             
03741  11E7             UPDATEPLAYERSTATE 
03742  11E7  AE 50 18              LDX PLAYER_STATE                        ; LOAD PLAYER STATE
03743  11EA  BD B5 11              LDA PLAYER_STATE_JUMPTABLE,X            ; FETCH THE STATE ADDRESS FROM THE JUMP TABLE
03744  11ED  85 17                 STA ZEROPAGE_POINTER_1                  ; STORE IT IN ZEROPAGE_POINTER_1
03745  11EF  BD B6 11              LDA PLAYER_STATE_JUMPTABLE +1,X
03746  11F2  85 18                 STA ZEROPAGE_POINTER_1 + 1
03747  11F4  6C 17 00              JMP (ZEROPAGE_POINTER_1)                ; JUMP TO THE RIGHT STATE (NOTE - NOT A JSR)
03748  11F7  60                    RTS
03749  11F8             
03750  11F8             
03751  11F8             ;===============================================================================
03752  11F8             ; APPLY GRAVITY
03753  11F8             ;===============================================================================
03754  11F8             ; APPLY GRAVITY TO THE PLAYER - THIS SYSTEM WILL BE TOTALLY REWRITTEN AT SOME
03755  11F8             ; POINT TO APPLY A PROPER GRAVITY TO A PLAYER OR ANY OTHER SPRITE..
03756  11F8             ; BUT FOR NOW IT'S JUST SUPER BASIC
03757  11F8             ;
03758  11F8             ; A RETURNS 0 IF WE MOVED DOWN AND A COLLISION CODE IF WE DIDN'T
03759  11F8             ;-------------------------------------------------------------------------------
03760  11F8             
03761  11F8             
03762  11F8             ;===============================================================================
03763  11F8             ; CHECK IF FLOOR IS FOUND WHILE FALLING
03764  11F8             ;===============================================================================
03765  11F8             APPLYGRAVITY 
03766  11F8             ;===============================================================================
03767  11F8             ; CHECK IF FLOOR WAS FOUND WHILE FALLING
03768  11F8             ;===============================================================================
03769  11F8             @SPRITEFALLCHECK 
03770  11F8  A2 01                 LDX #1                                  ; CHECK AT SPRITE'S FEET
03771  11FA  20 15 0A              JSR CHECKBLOCKUNDER
03772  11FD  AD C2 0A              LDA COLLIDER_ATTR
03773  1200  C9 10                 CMP #COLL_FLOOR                         ; DOES FLOOR EXIST UNDER US?
03774  1202  F0 0B                 BEQ @PLAYERNOTFALLING
03775  1204             
03776  1204             ;===============================================================================
03777  1204             ; NO FLOOR EXISTS: CAN SCROLL FREELY
03778  1204             ;===============================================================================
03779  1204             @FALLING
03780  1204  A2 00                 LDX #0
03781  1206  20 43 11              JSR MOVEPLAYERDOWN
03782  1209  A2 01                 LDX #1
03783  120B  20 43 11              JSR MOVEPLAYERDOWN
03784  120E  60                    RTS
03785  120F             
03786  120F             ;===============================================================================
03787  120F             ; FLOOR WAS FOUND: STOP SCREEN FROM MOVING
03788  120F             ;===============================================================================
03789  120F             @PLAYERNOTFALLING; 
03790  120F             
03791  120F  20 CD 1A              JSR RESETENEMYTOPLAYERVERTICAL
03792  1212  A9 00                 LDA #0
03793  1214  8D 52 18              STA PLAYER_JUMP_POS
03794  1217  60                    RTS
03795  1218             
03796  1218             
03797  1218             
03798  1218             STARTHOTELMAP 
03799  1218  A9 00                 LDA #0
03800  121A  8D 34 10              STA MAPTWOLOADED
03801  121D             
03802  121D                        ;JSR LOADCHSETFROMDISK
03803  121D             
03804  121D  20 55 0C              JSR LOADHOTELMAP
03805  1220  20 8B 0C              JSR LOADNEWTILES
03806  1223             
03807  1223  A9 05                 LDA #5
03808  1225  8D 20 D0              STA 53280
03809  1228             
03810  1228  A2 00                 LDX #0                        ; (129,26=DEFAULT), 61
03811  122A  A0 00                 LDY #0                          ; , 27
03812  122C  20 D1 21              JSR DRAWMAP
03813  122F  60                    RTS
03814  1230             
03815  1230             ;===============================================================================
03816  1230             ; PLAYER STATE IDLE
03817  1230             ;===============================================================================
03818  1230             
03819  1230             PLAYERSTATEIDLE 
03820  1230             ;===============================================================================
03821  1230             ; SET IDLE SPRITE
03822  1230             ;===============================================================================
03823  1230  A9 01                 LDA #1
03824  1232  8D C1 35              STA SPRITE_ANIM_PLAY                    ; PAUSE OUR ANIMATION
03825  1235             
03826  1235  AD 51 18              LDA PLAYER_SUBSTATE                     ; FIRST RUN PLAYER_SUBSTATE=0
03827  1238  D0 13                 BNE @RUNNING                            ; SET IN CHANGEPLAYERSTATE
03828  123A             
03829  123A             ; THIS IS EXECUTED EVERY TIME SINCE PLAYER_SUBSTATE STARTS AT ZERO.
03830  123A  A2 00                 LDX #0                                  ; LOAD SPRITE NUMBER (0) IN X
03831  123C  A9 18                 LDA #<ANIM_PLAYER_IDLE                  ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
03832  123E  85 17                 STA ZEROPAGE_POINTER_1                  ; BYTE %00000111
03833  1240  A9 36                 LDA #>ANIM_PLAYER_IDLE
03834  1242  85 18                 STA ZEROPAGE_POINTER_1 + 1
03835  1244             
03836  1244  20 FD 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
03837  1247  A5 01                 LDA PLAYER_SUBSTATE_RUNNING             ; PLAYER_SUBSTATE_RUNNING=1
03838  1249  8D 51 18              STA PLAYER_SUBSTATE                     ; NOW PLAYER_STATE=1, SO WE CAN EXIT
03839  124C  60                    RTS
03840  124D                        
03841  124D             ;===============================================================================
03842  124D             ; GET JOYSTICK TEST
03843  124D             ;===============================================================================
03844  124D             @RUNNING
03845  124D  20 AE 10              JSR JOYSTICKREADY                       ; LDA SCROLL_MOVING, LDA SCROLL_DIRECTION
03846  1250             ;        JSR DISPLAYNEWSPRITE
03847  1250  20 90 13              JSR DETECTSPRITE
03848  1253                        
03849  1253             ;===============================================================================
03850  1253             ; CHECK IF SPRITE IS ON GROUND (COLL_FLOOR)
03851  1253             ;===============================================================================
03852  1253             ; NOTE: LDX #0 - CHECKS THE SPRITE HEAD AREA (SPRITE 0)
03853  1253             ;       LDX #1 = CHECKS THE SPRITE LEGS AREA (SPRITE 1)
03854  1253             
03855  1253             ; SCREEN HAS STOPPED SCROLLING
03856  1253             
03857  1253             
03858  1253             ; THE @CHKWATER SKIP IS NECESSARY TO PREVENT THE SPRITE FROM
03859  1253             ; JUMPING WHILE IN THE AIR.
03860  1253             
03861  1253             ;===============================================================================
03862  1253             ; SPRITE IS CLIMBING A POLE OR STANDING ABOVE IT
03863  1253             ;===============================================================================
03864  1253             @GOLADDER
03865  1253  A2 01                 LDX #1
03866  1255  20 15 0A              JSR CHECKBLOCKUNDER
03867  1258  C9 30                 CMP #COLL_POLE                          ; CHECK FOR POLE UNDER PLAYER
03868  125A  D0 05                 BNE @CHECKFLOOR
03869  125C             
03870  125C             ; SPRITE IS CLIMBING A LADDER/POLE
03871  125C  A9 12                 LDA #PLAYER_STATE_POLE
03872  125E  4C D1 11              JMP CHANGEPLAYERSTATE
03873  1261             
03874  1261             @CHECKFLOOR 
03875  1261  A2 01                 LDX #1                                  ; CHECK AT SPRITE'S FEET
03876  1263  20 15 0A              JSR CHECKBLOCKUNDER
03877  1266  C9 10                 CMP #COLL_FLOOR
03878  1268  D0 3B                 BNE @CHECKWATER                         ; SPRITE IS NOT ON THE FLOOR
03879  126A             
03880  126A             ;===============================================================================
03881  126A             ; CHECK IF FLOOR IS IS BELOW PLAYER SPRITE
03882  126A             ;-------------------------------------------------------------------------------
03883  126A             ; WHEN THIS IS TURNED ON, THE PLAYER CAN'T JUMP STRAIGHT
03884  126A             ; UP WHEN THE JOYSTICK IS NOT MOVING LEFT/RIGHT.
03885  126A             ;===============================================================================
03886  126A             ; IF CEILING IS ABOVE PLAYER, CAN'T JUMP UP
03887  126A  A2 01                 LDX #1
03888  126C  20 15 0A              JSR CHECKBLOCKUNDER
03889  126F  C9 10                 CMP #COLL_FLOOR                       ; CHECK FOR POLE UNDER PLAYER
03890  1271  D0 18                 BNE @RESETVERTPOS
03891  1273             
03892  1273  A9 00                 LDA #0
03893  1275  8D 52 18              STA PLAYER_JUMP_POS
03894  1278             
03895  1278             ;        LDX #0
03896  1278             ;        JSR CHECKMOVEUP                     ; CHECK TILE UNDER TOP SPRITE (SPRITE)
03897  1278             ;        BEQ @RESETVERTPOS
03898  1278  60                    RTS
03899  1279             
03900  1279             @DOORENTRANCE 
03901  1279  A9 00                 LDA #0
03902  127B  8D 34 10              STA MAPTWOLOADED
03903  127E             
03904  127E  20 18 12              JSR STARTHOTELMAP
03905  1281  60                    RTS
03906  1282             
03907  1282             @FOUNDCOUCH 
03908  1282  A9 01                 LDA #1
03909  1284  8D 34 10              STA MAPTWOLOADED
03910  1287  20 99 13              JSR STARTALLEYMAP
03911  128A  60                    RTS
03912  128B             
03913  128B             ; SPRITE IS ON THE FLOOR, RESET ENEMY TO SAME Y POSITION AS PLAYER
03914  128B             ; BUT OFF THE SCREEN FOR NOW.
03915  128B             
03916  128B             @RESETVERTPOS 
03917  128B  20 CD 1A              JSR RESETENEMYTOPLAYERVERTICAL
03918  128E             
03919  128E             ;===============================================================================
03920  128E             ; SPRITE HAS NOT YET LANDED ON THE FLOOR: STILL FALLING
03921  128E             ;===============================================================================
03922  128E             @GOFLOOR
03923  128E             ;        LDX #1                                  ; CHECK AT SPRITE'S FEET AREA
03924  128E             ;        JSR CHECKBLOCKUNDER
03925  128E             ;        CMP #COLL_FLOOR                         ; DOES FLOOR EXIST UNDER US?
03926  128E             ;        BNE @STILLFALLING                       ; NO, PLAYER KEEPS FALLING
03927  128E             
03928  128E  A9 00                 LDA #0
03929  1290  8D 52 18              STA PLAYER_JUMP_POS
03930  1293             
03931  1293  A2 00                 LDX #0
03932  1295  20 15 0A              JSR CHECKBLOCKUNDER
03933  1298  C9 80                 CMP #COLL_COUCH
03934  129A  F0 E6                 BEQ @FOUNDCOUCH
03935  129C             
03936  129C  A2 00                 LDX #0
03937  129E  20 15 0A              JSR CHECKBLOCKUNDER
03938  12A1  C9 50                 CMP #COLL_DOOR
03939  12A3  F0 2E                 BEQ @ENTERHOTELDOOR
03940  12A5             
03941  12A5             ;===============================================================================
03942  12A5             ; CHECK FOR SPRITE FLOATING IN THE WATER
03943  12A5             ;===============================================================================
03944  12A5             @CHECKWATER 
03945  12A5  A2 01                 LDX #1                          ; CHECK AT THE SPRITE'S FEET
03946  12A7  20 15 0A              JSR CHECKBLOCKUNDER             ; FIRST CHECK WE ARE ON A POLE
03947  12AA  C9 40                 CMP #COLL_WATER
03948  12AC  D0 2E                 BNE @CHECKDIAGONALS
03949  12AE             
03950  12AE             ; PLAYER IS ON THE WATER, RESET ENEMY TO SAME Y POSITION AS PLAYER
03951  12AE             ; BUT KEEP ENEMY OFF THE SCREEN DURING THIS TIME.
03952  12AE             
03953  12AE  A9 00                 LDA #0
03954  12B0  A2 02                 LDX #2
03955  12B2  9D 68 35              STA SPRITE_POS_X,X
03956  12B5  A2 03                 LDX #3
03957  12B7  9D 68 35              STA SPRITE_POS_X,X
03958  12BA             
03959  12BA  A2 00                 LDX #0
03960  12BC  BD 89 35              LDA SPRITE_POS_Y,X              ; FIND PLAYER SPRITE Y (HEAD) POS
03961  12BF  A2 02                 LDX #2
03962  12C1  9D 89 35              STA SPRITE_POS_Y,X              ; SET ENEMY HEAD(Y) TO PLAYER Y
03963  12C4  A2 01                 LDX #1
03964  12C6  BD 89 35              LDA SPRITE_POS_Y,X              ; FIND PLAYER SPRITE Y (BODY) POS
03965  12C9  A2 03                 LDX #3
03966  12CB  9D 89 35              STA SPRITE_POS_Y,X              ; SET ENEMY BODY(Y) TO PLAYER Y
03967  12CE             
03968  12CE             ;SPRITE IS FLOATING IN THE RIVER
03969  12CE  A9 18                 LDA #PLAYER_STATE_FLOATING
03970  12D0  4C D1 11              JMP CHANGEPLAYERSTATE
03971  12D3             
03972  12D3             @ENTERHOTELDOOR 
03973  12D3  A9 00                 LDA #0
03974  12D5  8D 34 10              STA MAPTWOLOADED
03975  12D8  20 18 12              JSR STARTHOTELMAP
03976  12DB  60                    RTS
03977  12DC             
03978  12DC             ;===============================================================================
03979  12DC             ; CHECK IF SPRITE IS PUNCHING RIGHT
03980  12DC             ;===============================================================================
03981  12DC             ;===============================================================================
03982  12DC             ; FLOOR WAS FOUND! COLL_FLOOR = 10
03983  12DC             ; SPRITE IS STANDING ON A FLOOR HERE SO WE CAN TEST THE FIRE BUTTON
03984  12DC             ;-------------------------------------------------------------------------------
03985  12DC             ; BUTTON HAS BEEN PRESSED SO SPRITE CAN JUMP
03986  12DC             ;===============================================================================
03987  12DC             @CHECKDIAGONALS 
03988  12DC             
03989  12DC             ; PREVENTS SPRITE FROM JUMPING UP WHEN A FLOOR IS ABOVE HIM
03990  12DC  A2 00                 LDX #0
03991  12DE  20 15 0A              JSR CHECKBLOCKUNDER
03992  12E1  C9 10                 CMP #COLL_FLOOR                          ; CHECK FOR POLE UNDER PLAYER
03993  12E3  D0 17                 BNE @PLAYERISFALLING
03994  12E5             
03995  12E5             ;===============================================================================
03996  12E5             ; CHECK FOR XBOX CONTROLLER BUTTON PRESS
03997  12E5             ;===============================================================================
03998  12E5  A9 10                 LDA #%00010000                          ; MASK FOR BIT 0
03999  12E7  2C 00 DC              BIT JOY_2                               ; JUMPING (BUTTON PRESSED)
04000  12EA  F0 13                 BEQ @BUTPRESS                           ; CONTINUE OTHER CHECK
04001  12EC             
04002  12EC  AD 4E 18              LDA CHECKUPRIGHT
04003  12EF  2C 00 DC              BIT JOY_2                               ; PUNCH RIGHT
04004  12F2  F0 2D                 BEQ @PRESSUPRIGHT
04005  12F4             
04006  12F4             ;===============================================================================
04007  12F4             ; CHECK IF SPRITE IS PUNCHING LEFT
04008  12F4             ;===============================================================================
04009  12F4  AD 4F 18              LDA CHECKUPLEFT                         ; MASK FOR BIT 0
04010  12F7  2C 00 DC              BIT JOY_2                               ; JUMPING (BUTTON PRESSED)
04011  12FA  F0 2A                 BEQ @PRESSUPLEFT                        ; PUNCH LEFT
04012  12FC             
04013  12FC             ;===============================================================================
04014  12FC             ; CHECK IF SPRITE IS A LITTLE BELOW THE FLOOR
04015  12FC             ; NOTE: MAKES SPRITE IDLE UP/DOWN WHEN ON SOLID SURFACE
04016  12FC             ;===============================================================================
04017  12FC             ;        LDA SPRITE_CHAR_POS_Y
04018  12FC             ;        CMP #PLAYER_DOWN_CAP - 1                ; = 13: - 1 = 12
04019  12FC             ;        BCC @MOVESPRITEUP
04020  12FC             @PLAYERISFALLING 
04021  12FC  4C 07 13              JMP @STILLFALLING
04022  12FF             ;===============================================================================
04023  12FF             ; CHECK FOR BUTTON PRESS AND PUSHING UP
04024  12FF             ;===============================================================================
04025  12FF             @BUTPRESS
04026  12FF             ;        LDX #0
04027  12FF             ;        JSR CHECKMOVEUP                     ; CHECK TILE UNDER TOP SPRITE (SPRITE)
04028  12FF             ;        BNE @END
04029  12FF             
04030  12FF             
04031  12FF             @PLAYERCANJUMP 
04032  12FF  A9 1A                 LDA #PLAYER_STATE_JUMP                ; GO TO JUMP STATE
04033  1301  4C D1 11              JMP CHANGEPLAYERSTATE
04034  1304             
04035  1304             ;===============================================================================
04036  1304             ; @HORIZCHECK: SKIPS OVER GRAVITY CHECK SINCE SPRITE IS ON THE FLOOR
04037  1304             ;===============================================================================
04038  1304  4C 0A 13              JMP @HORIZCHECK                       ; PLAYER HAS LANDED ON TILE (CAN'T FALL)
04039  1307             
04040  1307             ;===============================================================================
04041  1307             ; SPRITE HAS NOT LANDED ON A FLOOR, SO STILL FALLING
04042  1307             ;===============================================================================
04043  1307             @STILLFALLING 
04044  1307  20 F8 11              JSR APPLYGRAVITY
04045  130A             
04046  130A             ;===============================================================================
04047  130A             ; CHECK THE VERTICAL MOVEMENT
04048  130A             ;===============================================================================
04049  130A             ; IS SPRITE MOVING TO THE LEFT OR RIGHT WHILE IN THE AIR?
04050  130A             ;===============================================================================
04051  130A             @HORIZCHECK 
04052  130A  AD 67 3C              LDA JOY_X                               ; HORIZONTAL MOVEMENT
04053  130D  F0 0C                 BEQ @VERTCHECK                          ; CHECK ZERO - HO HORIZONTAL INPUT
04054  130F  30 05                 BMI @LEFT                               ; NEGATIVE = LEFT
04055  1311                        
04056  1311             ;===============================================================================
04057  1311             ; SPRITE HAS MOVED TO THE RIGHT
04058  1311             ;===============================================================================
04059  1311             @RIGHT
04060  1311  A9 02                 LDA #PLAYER_STATE_WALK_RIGHT            ; GO TO WALK STATE RIGHT
04061  1313  4C D1 11              JMP CHANGEPLAYERSTATE
04062  1316             
04063  1316             ;===============================================================================
04064  1316             ; SPRITE HAS MOVED TO THE LEFT
04065  1316             ;===============================================================================
04066  1316             @LEFT
04067  1316  A9 04                 LDA #PLAYER_STATE_WALK_LEFT             ; GO TO WALK STATE LEFT
04068  1318  4C D1 11              JMP CHANGEPLAYERSTATE
04069  131B             
04070  131B             @VERTCHECK 
04071  131B             ;===============================================================================
04072  131B             ; CHECK IF JOYSTICK IS MOVING UP OR DOWN
04073  131B             ;===============================================================================
04074  131B  AD 68 3C              LDA JOY_Y                               ; CHECK VERTICAL JOYSTICK INPUT
04075  131E  F0 0B                 BEQ @END                                ; ZERO MEANS NO INPUT
04076  1320  60                    RTS
04077  1321             
04078  1321             ;===============================================================================
04079  1321             ; SUBROUTINE FOR: SPRITE PUNCHING RIGHT
04080  1321             ;===============================================================================
04081  1321             @PRESSUPRIGHT 
04082  1321             ;        LDA #PLAYER_STATE_PUNCH_RIGHT            ; GO TO JUMP STATE
04083  1321             ;        JMP CHANGEPLAYERSTATE
04084  1321             
04085  1321             ; WHEN A WEAPON IS FOUND, THE SUBROUTINE BELOW CAN BE USED (LATER)
04086  1321             
04087  1321  A9 0A                 LDA #PLAYER_STATE_SHOOT_RIGHT            ; GO TO JUMP STATE
04088  1323  4C D1 11              JMP CHANGEPLAYERSTATE
04089  1326             ;===============================================================================
04090  1326             ; SUBROUTINE FOR: SPRITE PUNCHING LEFT
04091  1326             ;===============================================================================
04092  1326             @PRESSUPLEFT 
04093  1326             ;        LDA #PLAYER_STATE_PUNCH_LEFT            ; GO TO JUMP STATE
04094  1326             ;        JMP CHANGEPLAYERSTATE
04095  1326             
04096  1326             ; WHEN A WEAPON IS FOUND, THE SUBROUTINE BELOW CAN BE USED (LATER)
04097  1326             
04098  1326  A9 0C                 LDA #PLAYER_STATE_SHOOT_LEFT            ; GO TO JUMP STATE
04099  1328  4C D1 11              JMP CHANGEPLAYERSTATE
04100  132B             
04101  132B             @END
04102  132B  A9 00                 LDA #PLAYER_STATE_IDLE            ; GO TO WALK STATE RIGHT
04103  132D  4C D1 11              JMP CHANGEPLAYERSTATE
04104  1330             
04105  1330             IDLE_VAR
04106  1330  00                    BYTE $00
04107  1331             
04108  1331             
04109  1331             ;===============================================================================
04110  1331             ; PLAYER TO ENEMY COLLIS
04111  1331             ;-------------------------------------------------------------------------------
04112  1331             ; CHECK IF PLAYER RUN INTO AN ENEMY
04113  1331             ;===============================================================================
04114  1331             PLAYERTOENEMYCOLLIS 
04115  1331  A9 00                 LDA #0
04116  1333  8D DE 35              STA ENEMY_HIT
04117  1336  A2 03                 LDX #3
04118  1338  A0 01                 LDY #1
04119  133A  BD 68 35              LDA SPRITE_POS_X,X
04120  133D  D9 68 35              CMP SPRITE_POS_X,Y
04121  1340  B0 0F                 BCS @NOENEMYCOLLIS
04122  1342  18                    CLC
04123  1343  6D DD 35              ADC ENEMY_DISTANCE
04124  1346  D9 68 35              CMP SPRITE_POS_X,Y
04125  1349  D0 06                 BNE @NOENEMYCOLLIS
04126  134B             
04127  134B  A9 01                 LDA #1
04128  134D  8D DE 35              STA ENEMY_HIT
04129  1350  60                    RTS
04130  1351             @NOENEMYCOLLIS 
04131  1351  A9 00                 LDA #0
04132  1353  8D DE 35              STA ENEMY_HIT
04133  1356  60                    RTS
04134  1357             
04135  1357             DISPLAYNEWSPRITE 
04136  1357             ; SPRITE 4 DISPLAY
04137  1357  A2 04                 LDX #4                                  ; POINT TO SPRITE 4
04138  1359  A9 83                 LDA #<ANIM_ENEMY_BULLET                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04139  135B  85 17                 STA ZEROPAGE_POINTER_1
04140  135D  A9 36                 LDA #>ANIM_ENEMY_BULLET
04141  135F  85 18                 STA ZEROPAGE_POINTER_1 + 1
04142  1361  20 FD 34              JSR INITSPRITEANIM
04143  1364             
04144  1364             @RUNNING2
04145  1364  A9 6E                 LDA #110
04146  1366  8D 08 D0              STA 53256                               ; POSITION SPRITE 4 (X)
04147  1369  A9 78                 LDA #120
04148  136B  8D 09 D0              STA 53257                               ; POSITION SPRITE 4 (Y)
04149  136E  A9 09                 LDA #COLOR_BROWN
04150  1370  8D 2B D0              STA 53291
04151  1373             
04152  1373             ; SPRITE 5 DISPLAY
04153  1373  A2 05                 LDX #5                                  ; POINT TO SPRITE 5
04154  1375  A9 83                 LDA #<ANIM_ENEMY_BULLET                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04155  1377  85 17                 STA ZEROPAGE_POINTER_1
04156  1379  A9 36                 LDA #>ANIM_ENEMY_BULLET
04157  137B  85 18                 STA ZEROPAGE_POINTER_1 + 1
04158  137D  20 FD 34              JSR INITSPRITEANIM
04159  1380             
04160  1380  A9 6E                 LDA #110
04161  1382  8D 0A D0              STA 53258
04162  1385  A9 87                 LDA #135
04163  1387  8D 0B D0              STA 53259
04164  138A  A9 06                 LDA #COLOR_BLUE
04165  138C  8D 2C D0              STA 53292
04166  138F  60                    RTS
04167  1390             
04168  1390             ; SPRITE 6 DISPLAY
04169  1390             ;        LDX #6                                  ; POINT TO SPRITE 6
04170  1390             ;        LDA #<ANIM_NPC3                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04171  1390             ;        STA ZEROPAGE_POINTER_1
04172  1390             ;        LDA #>ANIM_NPC3
04173  1390             ;        STA ZEROPAGE_POINTER_1 + 1
04174  1390             ;        JSR INITSPRITEANIM
04175  1390             
04176  1390             ;        LDA #100
04177  1390             ;        STA 53260
04178  1390             ;        LDA #120
04179  1390             ;        STA 53261
04180  1390             ;        LDA #COLOR_VIOLET
04181  1390             ;        STA 53293
04182  1390             ;        RTS
04183  1390             
04184  1390             ; SPRITE 6 DISPLAY
04185  1390             ;        LDX #7                                  ; POINT TO SPRITE 7
04186  1390             ;        LDA #<ANIM_NPC4                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04187  1390             ;        STA ZEROPAGE_POINTER_1
04188  1390             ;        LDA #>ANIM_NPC4
04189  1390             ;        STA ZEROPAGE_POINTER_1 + 1
04190  1390             ;        JSR INITSPRITEANIM
04191  1390             
04192  1390             ;        LDA #100
04193  1390             ;        STA 53262
04194  1390             ;        LDA #135
04195  1390             ;        STA 53263
04196  1390             ;        LDA #COLOR_BROWN
04197  1390             ;        STA 53294
04198  1390             ;        RTS
04199  1390             
04200  1390             DETECTSPRITE 
04201  1390  AD 1E D0              LDA $D01E ;READ HARDWARE SPRITE/SPRITE COLLISION
04202  1393  4A                    LSR       ; (LSR A FOR TASM USERS) COLLISION FOR SPRITE 1
04203  1394  4A                    LSR
04204  1395  90 01                 BCC @SPRITEHIT
04205  1397  60                    RTS       ;NO COLLISION
04206  1398             @SPRITEHIT 
04207  1398                        ;INC $D020
04208  1398  60                    RTS
04209  1399             
04210  1399             ;===============================================================================
04211  1399             ; PLAYER STATE WALK RIGHT
04212  1399             ;===============================================================================
04213  1399             
04214  1399             STARTALLEYMAP 
04215  1399  A9 01                 LDA #1
04216  139B  8D 34 10              STA MAPTWOLOADED
04217  139E                        
04218  139E             ;        LDA #6
04219  139E             ;        STA 53280
04220  139E             
04221  139E  20 BF 0D              JSR CLEARCHSETMEMORY
04222  13A1             
04223  13A1  A2 04                 LDX #4
04224  13A3  20 C5 0C              JSR LOADCHSETFROMDISK
04225  13A6             
04226  13A6                        ;JSR LOADCHSETFROMDISK2
04227  13A6                        ;JSR LOADALLEYTILES
04228  13A6                        ;JSR LOADALLEYMAP
04229  13A6             
04230  13A6  A2 00                 LDX #0                        ; (129,26=DEFAULT), 61
04231  13A8  A0 02                 LDY #2                          ; , 27
04232  13AA  20 9F 22              JSR TILEMAP
04233  13AD  60                    RTS
04234  13AE             
04235  13AE             
04236  13AE             PLAYERSTATEWALKRIGHT 
04237  13AE  AD 51 18              LDA PLAYER_SUBSTATE
04238  13B1  D0 13                 BNE @RUNNING
04239  13B3             
04240  13B3  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04241  13B5  A9 1C                 LDA #<ANIM_PLAYER_WALK_R                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04242  13B7  85 17                 STA ZEROPAGE_POINTER_1
04243  13B9  A9 36                 LDA #>ANIM_PLAYER_WALK_R
04244  13BB  85 18                 STA ZEROPAGE_POINTER_1 + 1
04245  13BD             
04246  13BD  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04247  13C0  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04248  13C2  8D 51 18              STA PLAYER_SUBSTATE
04249  13C5  60                    RTS
04250  13C6             
04251  13C6             ;===============================================================================
04252  13C6             ; GET JOYSTICK TEST
04253  13C6             ;===============================================================================
04254  13C6             @RUNNING
04255  13C6  20 AE 10              JSR JOYSTICKREADY                       ; THE SCREEN IS NOW SCROLLING
04256  13C9             
04257  13C9             ;===============================================================================
04258  13C9             ; CHECK IF SPRITE HAS LANDED ON THE FLOOR
04259  13C9             ;===============================================================================
04260  13C9             
04261  13C9             ; SCREEN HAS STOPPED SCROLLING
04262  13C9             @INPUT
04263  13C9             
04264  13C9             ;===============================================================================
04265  13C9             ; NO FLOOR EXISTS YET. SPRITE KEEPS FALLING
04266  13C9             ;===============================================================================
04267  13C9  20 F8 11              JSR APPLYGRAVITY                ; APPLY GRAVITY - IF WE ARE NOT FALLING
04268  13CC             
04269  13CC             ;===============================================================================
04270  13CC             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04271  13CC             ;===============================================================================
04272  13CC             @JOYCHECK
04273  13CC  AD 67 3C              LDA JOY_X
04274  13CF  F0 51                 BEQ @EXITRIGHTIDLE                  ; SCREEN SCROLLS TO RIGHT
04275  13D1             
04276  13D1             ;===============================================================================
04277  13D1             ; SPRITE IS MOVING TO THE RIGHT
04278  13D1             ; SO WE TEST FOR A JUMP HERE (FIRE BUTTON)
04279  13D1             ; THIS ALLOWS THE SPRITE TO RUN AND JUMP AT THE SAME TIME.
04280  13D1             ;===============================================================================
04281  13D1             @RIGHT     
04282  13D1  AD 52 18              LDA PLAYER_JUMP_POS
04283  13D4  C9 0E                 CMP #14
04284  13D6  B0 19                 BCS @MOVERIGHT
04285  13D8             
04286  13D8             ;===============================================================================
04287  13D8             ; SPRITE CAN JUMP WHILE RUNNING TO THE RIGHT
04288  13D8             ;===============================================================================
04289  13D8             ; COLL_COUCH
04290  13D8  A2 00                 LDX #0
04291  13DA  20 15 0A              JSR CHECKBLOCKUNDER
04292  13DD  C9 80                 CMP #COLL_COUCH
04293  13DF  F0 1E                 BEQ @FOUNDCOUCH
04294  13E1             
04295  13E1  A2 00                 LDX #0
04296  13E3  20 15 0A              JSR CHECKBLOCKUNDER
04297  13E6  C9 50                 CMP #COLL_DOOR
04298  13E8  F0 29                 BEQ @DOORENTRANCE
04299  13EA             
04300  13EA  A9 10                 LDA #%00010000                  ; MASK FOR BIT 0
04301  13EC  2C 00 DC              BIT JOY_2                       ; CHECK ZERO = BUTTON PRESSED
04302  13EF  F0 36                 BEQ @JUMPING                    ; PLAYER CAN JUMP LEFT
04303  13F1             
04304  13F1             @MOVERIGHT 
04305  13F1  A2 00                 LDX #0
04306  13F3  20 BE 10              JSR MOVEPLAYERRIGHT             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
04307  13F6  A2 01                 LDX #1
04308  13F8  20 BE 10              JSR MOVEPLAYERRIGHT             ; USE TWICE FOR DOUBLE SPEED
04309  13FB  20 90 13              JSR DETECTSPRITE
04310  13FE  60                    RTS
04311  13FF             
04312  13FF             @FOUNDCOUCH 
04313  13FF  A9 01                 LDA #1
04314  1401  8D 34 10              STA MAPTWOLOADED
04315  1404  20 99 13              JSR STARTALLEYMAP
04316  1407  60                    RTS
04317  1408                        
04318  1408             @SKIPRIGHTGRAVITY 
04319  1408  60                    RTS
04320  1409             
04321  1409             @BUTPRESS
04322  1409  A9 01                 LDA #1
04323  140B  8D 67 3C              STA JOY_X
04324  140E  A9 1A                 LDA #PLAYER_STATE_JUMP            ; GO TO WALK STATE RIGHT
04325  1410  4C D1 11              JMP CHANGEPLAYERSTATE
04326  1413             
04327  1413             @DOORENTRANCE 
04328  1413  A9 00                 LDA #0
04329  1415  8D 34 10              STA MAPTWOLOADED
04330  1418  20 18 12              JSR STARTHOTELMAP
04331  141B  60                    RTS
04332  141C             
04333  141C             ;===============================================================================
04334  141C             ; CHECK SCROLL SCREEN MOVE RIGHT
04335  141C             ;===============================================================================
04336  141C             @EXITRIGHT 
04337  141C  A9 01                 LDA #SCROLL_RIGHT
04338  141E  85 2D                 STA SCROLL_MOVING
04339  1420  85 2C                 STA SCROLL_DIRECTION
04340  1422             
04341  1422             @EXITRIGHTIDLE 
04342  1422  A9 00                 LDA #PLAYER_STATE_IDLE
04343  1424  4C D1 11              JMP CHANGEPLAYERSTATE
04344  1427             
04345  1427             @JUMPING
04346  1427  A9 1A                 LDA #PLAYER_STATE_JUMP
04347  1429  4C D1 11              JMP CHANGEPLAYERSTATE
04348  142C             @SCROLLRIGHT 
04349  142C  60                    RTS
04350  142D             
04351  142D             
04352  142D             
04353  142D             ;===============================================================================
04354  142D             ; PLAYER STATE WALK LEFT
04355  142D             ;===============================================================================
04356  142D             
04357  142D             PLAYERSTATEWALKLEFT 
04358  142D  AD 51 18              LDA PLAYER_SUBSTATE
04359  1430  D0 13                 BNE @RUNNING
04360  1432             
04361  1432  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04362  1434  A9 21                 LDA #<ANIM_PLAYER_WALK_L                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04363  1436  85 17                 STA ZEROPAGE_POINTER_1
04364  1438  A9 36                 LDA #>ANIM_PLAYER_WALK_L
04365  143A  85 18                 STA ZEROPAGE_POINTER_1 + 1
04366  143C             
04367  143C             ;===============================================================================
04368  143C             ; IDLE ANIMATION: SPRITE RUNNING IN POSITION
04369  143C             ;===============================================================================
04370  143C  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04371  143F  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04372  1441  8D 51 18              STA PLAYER_SUBSTATE
04373  1444  60                    RTS
04374  1445             
04375  1445             ;===============================================================================
04376  1445             ; GET JOYSTICK TEST
04377  1445             ;===============================================================================
04378  1445             @RUNNING
04379  1445  20 AE 10              JSR JOYSTICKREADY                       ; SCREEN IS NOW SCROLLING (READS UPDATESCROLL)
04380  1448             
04381  1448             ;===============================================================================
04382  1448             ; CHECK IF SPRITE HAS LANDED ON THE FLOOR
04383  1448             ;===============================================================================
04384  1448             
04385  1448             ; SCREEN HAS STOPPED SCROLLING
04386  1448             
04387  1448             @INPUT
04388  1448             
04389  1448             ;===============================================================================
04390  1448             ; NO FLOOR EXISTS YET. SPRITE KEEPS FALLING
04391  1448             ;===============================================================================
04392  1448  20 F8 11              JSR APPLYGRAVITY                ; APPLY GRAVITY - IF WE ARE NOT FALLING
04393  144B             
04394  144B             ;===============================================================================
04395  144B             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04396  144B             ;===============================================================================
04397  144B             @JOYCHECK
04398  144B  AD 67 3C              LDA JOY_X
04399  144E  F0 27                 BEQ @EXITLEFT                       ; SCREEN SCROLLS TO LEFT
04400  1450             
04401  1450             ;===============================================================================
04402  1450             ; SPRITE IS MOVING TO THE LEFT
04403  1450             ;===============================================================================
04404  1450  AD 52 18              LDA PLAYER_JUMP_POS
04405  1453  C9 0E                 CMP #14
04406  1455  B0 07                 BCS @MOVELEFT
04407  1457             
04408  1457  A9 10                 LDA #%00010000                  ; MASK FOR BIT 0
04409  1459  2C 00 DC              BIT JOY_2                       ; CHECK ZERO = BUTTON PRESSED
04410  145C  F0 24                 BEQ @JUMPING                    ; PLAYER CAN JUMP LEFT
04411  145E             
04412  145E             @MOVELEFT
04413  145E  A2 00                 LDX #0
04414  1460  20 04 11              JSR MOVEPLAYERLEFT              ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
04415  1463  A2 01                 LDX #1
04416  1465  20 04 11              JSR MOVEPLAYERLEFT              ; USE TWICE FOR DOUBLE SPEED
04417  1468  20 90 13              JSR DETECTSPRITE
04418  146B  60                    RTS
04419  146C             
04420  146C             @SKIPLEFTGRAVITY 
04421  146C  60                    RTS
04422  146D             
04423  146D             @BUTPRESS
04424  146D  A9 FF                 LDA #255
04425  146F  8D 67 3C              STA JOY_X
04426  1472  A9 1A                 LDA #PLAYER_STATE_JUMP            ; GO TO WALK STATE RIGHT
04427  1474  4C D1 11              JMP CHANGEPLAYERSTATE
04428  1477             
04429  1477             ;===============================================================================
04430  1477             ; CHECK SCROLL SCREEN MOVE LEFT
04431  1477             ;===============================================================================
04432  1477             @EXITLEFT
04433  1477  A9 02                 LDA #SCROLL_LEFT
04434  1479  85 2D                 STA SCROLL_MOVING
04435  147B  85 2C                 STA SCROLL_DIRECTION
04436  147D             
04437  147D  A9 00                 LDA #PLAYER_STATE_IDLE
04438  147F  4C D1 11              JMP CHANGEPLAYERSTATE
04439  1482             
04440  1482             @JUMPING
04441  1482  A9 1A                 LDA #PLAYER_STATE_JUMP
04442  1484  4C D1 11              JMP CHANGEPLAYERSTATE
04443  1487             @SCROLLLEFT 
04444  1487  60                    RTS
04445  1488             
04446  1488             
04447  1488             
04448  1488             ;===============================================================================
04449  1488             ; STATE PUNCH RIGHT
04450  1488             ;-------------------------------------------------------------------------------
04451  1488             
04452  1488             ; IMPORTANT: CHECKS WHEN THE PLAYER CAN MOVE LEFT OR RIGHT. NO OTHER STATE OR
04453  1488             ; SUBROUTINE DOES THIS.
04454  1488             
04455  1488             ; THE PLAYER IS STANDING STILL AND WAITING INPUT.
04456  1488             ; POSSIBLE OPTIMIZATIONS WE ARE DOUBLECHECKING CHECKBLOCKUNDER AND CHECKDOWN,
04457  1488             ; WE CAN CHECK ONCE AND STORE THOSE IN A TEMP VARIABLE AND LOOK THEM UP IF NEEDED.
04458  1488             ;===============================================================================
04459  1488             
04460  1488             PLAYERSTATEPUNCHRIGHT 
04461  1488  AD 51 18              LDA PLAYER_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
04462  148B  D0 13                 BNE @RUNNING
04463  148D             
04464  148D             ;===============================================================================
04465  148D             ; BEGIN PUNNCHING RIGHT ANIMATION
04466  148D             ;===============================================================================
04467  148D  A2 00                 LDX #0
04468  148F  A9 33                 LDA #<ANIM_PLAYER_PUNCH_R               ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
04469  1491  85 17                 STA ZEROPAGE_POINTER_1
04470  1493  A9 36                 LDA #>ANIM_PLAYER_PUNCH_R
04471  1495  85 18                 STA ZEROPAGE_POINTER_1 + 1
04472  1497             
04473  1497  20 FD 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
04474  149A  A5 01                 LDA PLAYER_SUBSTATE_RUNNING             ; SET THE SUBSTATE TO RUNNING
04475  149C  8D 51 18              STA PLAYER_SUBSTATE
04476  149F  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
04477  14A0             @RUNNING   
04478  14A0  20 AE 10              JSR JOYSTICKREADY
04479  14A3  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT, WE RETURN
04480  14A5  60                    RTS
04481  14A6             
04482  14A6             ;===============================================================================
04483  14A6             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04484  14A6             ;===============================================================================
04485  14A6             @INPUT
04486  14A6  20 31 13              JSR PLAYERTOENEMYCOLLIS
04487  14A9  AD DE 35              LDA ENEMY_HIT
04488  14AC  F0 06                 BEQ @MISSEDRIGHTPUNCH
04489  14AE  20 55 1D              JSR ENEMYSTATERIGHTDEAD
04490  14B1  20 CD 1A              JSR RESETENEMYTOPLAYERVERTICAL
04491  14B4             ;        LDA #0
04492  14B4             ;        STA ENEMY_HIT
04493  14B4             
04494  14B4             @MISSEDRIGHTPUNCH 
04495  14B4  A9 0D                 LDA #13
04496  14B6  8D 52 18              STA PLAYER_JUMP_POS
04497  14B9             
04498  14B9  AD 67 3C              LDA JOY_X
04499  14BC  F0 03                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
04500  14BE  30 01                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
04501  14C0  60                    RTS
04502  14C1             
04503  14C1             @IDLE
04504  14C1  A9 00                 LDA #0
04505  14C3  8D C1 35              STA SPRITE_ANIM_PLAY            ; PAUSE OUR ANIMATION
04506  14C6             
04507  14C6  A9 00                 LDA #PLAYER_STATE_IDLE
04508  14C8  4C D1 11              JMP CHANGEPLAYERSTATE
04509  14CB             
04510  14CB             
04511  14CB             
04512  14CB             ;===============================================================================
04513  14CB             ; STATE PUNCH RIGHT
04514  14CB             ;===============================================================================
04515  14CB             
04516  14CB             PLAYERSTATEPUNCHLEFT 
04517  14CB  AD 51 18              LDA PLAYER_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
04518  14CE  D0 13                 BNE @RUNNING
04519  14D0             
04520  14D0  A2 00                 LDX #0
04521  14D2  A9 37                 LDA #<ANIM_PLAYER_PUNCH_L               ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
04522  14D4  85 17                 STA ZEROPAGE_POINTER_1
04523  14D6  A9 36                 LDA #>ANIM_PLAYER_PUNCH_L
04524  14D8  85 18                 STA ZEROPAGE_POINTER_1 + 1
04525  14DA             
04526  14DA  20 FD 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
04527  14DD  A5 01                 LDA PLAYER_SUBSTATE_RUNNING             ; SET THE SUBSTATE TO RUNNING
04528  14DF  8D 51 18              STA PLAYER_SUBSTATE
04529  14E2  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
04530  14E3             
04531  14E3             @RUNNING
04532  14E3  A9 01                 LDA #1
04533  14E5  8D C1 35              STA SPRITE_ANIM_PLAY
04534  14E8             
04535  14E8  20 AE 10              JSR JOYSTICKREADY
04536  14EB  F0 01                 BEQ @INPUT
04537  14ED  60                    RTS
04538  14EE             
04539  14EE             ;===============================================================================
04540  14EE             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04541  14EE             ;===============================================================================
04542  14EE             @INPUT
04543  14EE  20 31 13              JSR PLAYERTOENEMYCOLLIS
04544  14F1  AD DE 35              LDA ENEMY_HIT
04545  14F4  F0 06                 BEQ @MISSEDLEFTPUNCH
04546  14F6             
04547  14F6             ;        LDA #ENEMY_STATE_LEFT_DEAD
04548  14F6             ;        JSR CHANGEENEMYSTATE
04549  14F6             ;        JSR CHANGEENEMYSTAGE
04550  14F6  20 76 1D              JSR ENEMYSTATELEFTDEAD
04551  14F9  20 CD 1A              JSR RESETENEMYTOPLAYERVERTICAL
04552  14FC             ;        LDA #0
04553  14FC             ;        STA ENEMY_HIT
04554  14FC             
04555  14FC             @MISSEDLEFTPUNCH 
04556  14FC  AD 67 3C              LDA JOY_X
04557  14FF  F0 08                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
04558  1501  30 06                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
04559  1503  A9 00                 LDA #PLAYER_STATE_IDLE
04560  1505  4C D1 11              JMP CHANGEPLAYERSTATE
04561  1508  60                    RTS
04562  1509             
04563  1509             @IDLE
04564  1509  60                    RTS
04565  150A             ;        LDA #0
04566  150A             ;        STA SPRITE_ANIM_PLAY
04567  150A             ;        RTS
04568  150A  A9 00                 LDA #PLAYER_STATE_IDLE
04569  150C  4C D1 11              JMP CHANGEPLAYERSTATE
04570  150F             
04571  150F             
04572  150F             ;===============================================================================
04573  150F             ; PLAYER STATE SHOOT RIGHT
04574  150F             ;-------------------------------------------------------------------------------
04575  150F             
04576  150F             PLAYERSTATESHOOTRIGHT 
04577  150F  AD 51 18              LDA PLAYER_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
04578  1512  D0 13                 BNE @RUNNING
04579  1514             
04580  1514             ;===============================================================================
04581  1514             ; BEGIN PUNNCHING RIGHT ANIMATION
04582  1514             ;===============================================================================
04583  1514  A2 00                 LDX #0
04584  1516  A9 3B                 LDA #<ANIM_PLAYER_SHOOT_RIGHT          ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
04585  1518  85 17                 STA ZEROPAGE_POINTER_1
04586  151A  A9 36                 LDA #>ANIM_PLAYER_SHOOT_RIGHT
04587  151C  85 18                 STA ZEROPAGE_POINTER_1 + 1
04588  151E             
04589  151E  20 FD 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
04590  1521  A5 01                 LDA PLAYER_SUBSTATE_RUNNING             ; SET THE SUBSTATE TO RUNNING
04591  1523  8D 51 18              STA PLAYER_SUBSTATE
04592  1526  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
04593  1527             @RUNNING   
04594  1527  20 AE 10              JSR JOYSTICKREADY
04595  152A  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT, WE RETURN
04596  152C  60                    RTS
04597  152D             
04598  152D             ;===============================================================================
04599  152D             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04600  152D             ;===============================================================================
04601  152D             @INPUT
04602  152D  20 31 13              JSR PLAYERTOENEMYCOLLIS
04603  1530  AD DE 35              LDA ENEMY_HIT
04604  1533  F0 06                 BEQ @MISSEDRIGHTSHOT
04605  1535             
04606  1535  20 55 1D              JSR ENEMYSTATERIGHTDEAD
04607  1538  20 CD 1A              JSR RESETENEMYTOPLAYERVERTICAL
04608  153B             
04609  153B             @MISSEDRIGHTSHOT 
04610  153B  A9 0D                 LDA #13
04611  153D  8D 52 18              STA PLAYER_JUMP_POS
04612  1540             
04613  1540  AD 67 3C              LDA JOY_X
04614  1543  F0 03                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
04615  1545  30 01                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
04616  1547  60                    RTS
04617  1548             
04618  1548             @IDLE
04619  1548  A9 00                 LDA #0
04620  154A  8D C1 35              STA SPRITE_ANIM_PLAY            ; PAUSE OUR ANIMATION
04621  154D             
04622  154D  A9 00                 LDA #PLAYER_STATE_IDLE
04623  154F  4C D1 11              JMP CHANGEPLAYERSTATE
04624  1552             
04625  1552             
04626  1552             
04627  1552             ;===============================================================================
04628  1552             ; PLAYER STATE SHOOT LEFT
04629  1552             ;-------------------------------------------------------------------------------
04630  1552             
04631  1552             PLAYERSTATESHOOTLEFT 
04632  1552  AD 51 18              LDA PLAYER_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
04633  1555  D0 13                 BNE @RUNNING
04634  1557             
04635  1557             ;===============================================================================
04636  1557             ; BEGIN PUNNCHING RIGHT ANIMATION
04637  1557             ;===============================================================================
04638  1557  A2 00                 LDX #0
04639  1559  A9 3F                 LDA #<ANIM_PLAYER_SHOOT_LEFT            ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
04640  155B  85 17                 STA ZEROPAGE_POINTER_1
04641  155D  A9 36                 LDA #>ANIM_PLAYER_SHOOT_LEFT
04642  155F  85 18                 STA ZEROPAGE_POINTER_1 + 1
04643  1561             
04644  1561  20 FD 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
04645  1564  A5 01                 LDA PLAYER_SUBSTATE_RUNNING             ; SET THE SUBSTATE TO RUNNING
04646  1566  8D 51 18              STA PLAYER_SUBSTATE
04647  1569  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
04648  156A             @RUNNING   
04649  156A  20 AE 10              JSR JOYSTICKREADY
04650  156D  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT, WE RETURN
04651  156F  60                    RTS
04652  1570             
04653  1570             ;===============================================================================
04654  1570             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04655  1570             ;===============================================================================
04656  1570             @INPUT
04657  1570  20 31 13              JSR PLAYERTOENEMYCOLLIS
04658  1573  AD DE 35              LDA ENEMY_HIT
04659  1576  F0 06                 BEQ @MISSEDLEFTSHOT
04660  1578             
04661  1578  20 55 1D              JSR ENEMYSTATERIGHTDEAD
04662  157B  20 CD 1A              JSR RESETENEMYTOPLAYERVERTICAL
04663  157E             
04664  157E             @MISSEDLEFTSHOT 
04665  157E  AD 67 3C              LDA JOY_X
04666  1581  F0 08                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
04667  1583  30 06                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
04668  1585  A9 00                 LDA #PLAYER_STATE_IDLE
04669  1587  4C D1 11              JMP CHANGEPLAYERSTATE
04670  158A  60                    RTS
04671  158B             
04672  158B             @IDLE
04673  158B  60                    RTS
04674  158C             
04675  158C             
04676  158C             
04677  158C             ;===============================================================================
04678  158C             ;  STATE KICK RIGHT
04679  158C             ;===============================================================================
04680  158C             
04681  158C             PLAYERSTATEKICKRIGHT 
04682  158C  AD 51 18              LDA PLAYER_SUBSTATE                     ; TEST FOR FIRST RUN
04683  158F  D0 13                 BNE @RUNNING
04684  1591             
04685  1591             ;===============================================================================
04686  1591             ; BEGIN KICKING RIGHT ANIMATION
04687  1591             ;===============================================================================
04688  1591  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04689  1593  A9 43                 LDA #<ANIM_PLAYER_KICK_R                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04690  1595  85 17                 STA ZEROPAGE_POINTER_1
04691  1597  A9 36                 LDA #>ANIM_PLAYER_KICK_R
04692  1599  85 18                 STA ZEROPAGE_POINTER_1 + 1
04693  159B             
04694  159B  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04695  159E  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04696  15A0  8D 51 18              STA PLAYER_SUBSTATE
04697  15A3  60                    RTS                                     ; STATE CHANGE GOES INTO EFFECT NEXT FRAME
04698  15A4             
04699  15A4             ;===============================================================================
04700  15A4             ; GET JOYSTICK TEST
04701  15A4             ;===============================================================================
04702  15A4             @RUNNING
04703  15A4  20 AE 10              JSR JOYSTICKREADY
04704  15A7  F0 01                 BEQ @IDLE                              ; NOT READY FOR INPUT
04705  15A9  60                    RTS
04706  15AA             
04707  15AA             @IDLE
04708  15AA  A9 00                 LDA #PLAYER_STATE_IDLE
04709  15AC  4C D1 11              JMP CHANGEPLAYERSTATE
04710  15AF                        ;-----------------------------------------------------------------------
04711  15AF             
04712  15AF             
04713  15AF             ;===============================================================================
04714  15AF             ;  STATE KICK LEFT
04715  15AF             ;-------------------------------------------------------------------------------
04716  15AF             ;  PLAYER STATE FOR CLIMBING STAIRS
04717  15AF             ;-------------------------------------------------------------------------------
04718  15AF             
04719  15AF             PLAYERSTATEKICKLEFT 
04720  15AF  AD 51 18              LDA PLAYER_SUBSTATE                     ; TEST FOR FIRST RUN
04721  15B2  D0 13                 BNE @RUNNING
04722  15B4             
04723  15B4             ;===============================================================================
04724  15B4             ; BEGIN KICKING LEFT ANIMATION
04725  15B4             ;===============================================================================
04726  15B4  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04727  15B6  A9 47                 LDA #<ANIM_PLAYER_KICK_L                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04728  15B8  85 17                 STA ZEROPAGE_POINTER_1
04729  15BA  A9 36                 LDA #>ANIM_PLAYER_KICK_L
04730  15BC  85 18                 STA ZEROPAGE_POINTER_1 + 1
04731  15BE             
04732  15BE  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04733  15C1  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04734  15C3  8D 51 18              STA PLAYER_SUBSTATE
04735  15C6  60                    RTS                                     ; STATE CHANGE GOES INTO EFFECT NEXT FRAME
04736  15C7             
04737  15C7             ;===============================================================================
04738  15C7             ; GET JOYSTICK TEST
04739  15C7             ;===============================================================================
04740  15C7             @RUNNING
04741  15C7  20 AE 10              JSR JOYSTICKREADY
04742  15CA  F0 01                 BEQ @IDLE                              ; NOT READY FOR INPUT
04743  15CC  60                    RTS
04744  15CD             
04745  15CD             @IDLE
04746  15CD  A9 00                 LDA #PLAYER_STATE_IDLE
04747  15CF  4C D1 11              JMP CHANGEPLAYERSTATE
04748  15D2             
04749  15D2             ;===============================================================================
04750  15D2             ;  PLAYER STATE POLE
04751  15D2             ;  SUBROUTINE IS ONLY CALLED IF "COLL_POLE" IS FOUND
04752  15D2             ;===============================================================================
04753  15D2             
04754  15D2             PLAYERSTATEPOLE 
04755  15D2  AD 51 18              LDA PLAYER_SUBSTATE                     ; TEST FOR FIRST RUN
04756  15D5  D0 13                 BNE @RUNNING
04757  15D7             
04758  15D7             ;===============================================================================
04759  15D7             ; SET CLIMBING SPRITE
04760  15D7             ;===============================================================================
04761  15D7  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04762  15D9  A9 29                 LDA #<ANIM_CLIMB_POLE                   ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04763  15DB  85 17                 STA ZEROPAGE_POINTER_1
04764  15DD  A9 36                 LDA #>ANIM_CLIMB_POLE
04765  15DF  85 18                 STA ZEROPAGE_POINTER_1 + 1
04766  15E1             
04767  15E1  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04768  15E4  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04769  15E6  8D 51 18              STA PLAYER_SUBSTATE
04770  15E9  60                    RTS                                     ; CHANGE TAKES EFFECT NEXT FRAME
04771  15EA             
04772  15EA             ;===============================================================================
04773  15EA             ; GET JOYSTICK TEST
04774  15EA             ;===============================================================================
04775  15EA             @RUNNING
04776  15EA  20 AE 10              JSR JOYSTICKREADY
04777  15ED             
04778  15ED             ;===============================================================================
04779  15ED             ; CHECK IF SPRITE IS ON THE POLE
04780  15ED             ;===============================================================================
04781  15ED             @INPUT
04782  15ED  A9 00                 LDA #0
04783  15EF  8D 52 18              STA PLAYER_JUMP_POS
04784  15F2             
04785  15F2  A9 01                 LDA #1
04786  15F4  8D C1 35              STA SPRITE_ANIM_PLAY                    ; START OUR ANIMATION
04787  15F7             
04788  15F7  A5 07                 LDA COLOR_YELLOW
04789  15F9  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2
04790  15FC             
04791  15FC             ;===============================================================================
04792  15FC             ; SPRITE IS ON THE POLE
04793  15FC             ;===============================================================================
04794  15FC             ; IS SPRITE MOVING TO THE LEFT OR RIGHT?
04795  15FC             ;*******************************************************************************
04796  15FC  A2 00                 LDX #0
04797  15FE  20 15 0A              JSR CHECKBLOCKUNDER
04798  1601  C9 30                 CMP #COLL_POLE                          ; CHECK FOR POLE UNDER PLAYER
04799  1603  F0 07                 BEQ @JOYCHKONPOLE
04800  1605             
04801  1605  A9 10                 LDA #%00010000                          ; MASK FOR BIT 0
04802  1607  2C 00 DC              BIT JOY_2                               ; CHECK ZERO = JUMPING (BUTTON PRESSED)
04803  160A  F0 45                 BEQ @BUTPRESS                           ; CONTINUE OTHER CHECK
04804  160C             
04805  160C             @JOYCHKONPOLE 
04806  160C  AD 67 3C              LDA JOY_X
04807  160F  F0 61                 BEQ @CHECKJOYSTICK                      ; JOYSTICK NOT MOVING LEFT/RIGHT
04808  1611  30 03                 BMI @LEFT
04809  1613  10 2A                 BPL @RIGHT
04810  1615  60                    RTS
04811  1616             
04812  1616             ;===============================================================================
04813  1616             ; CHECK FOR TILE COLLISION GOING LEFT
04814  1616             ;===============================================================================
04815  1616             @LEFT
04816  1616  A2 01                 LDX #1
04817  1618  20 BD 08              JSR CHECKMOVELEFT
04818  161B  F0 2F                 BEQ @GOLEFT                             ; NOT BLOCKED, LEFT ROUTINE
04819  161D  60                    RTS
04820  161E             
04821  161E             ;===============================================================================
04822  161E             ; POLE WAS FOUND: MOVE SPRITE UP
04823  161E             ;===============================================================================
04824  161E             @EXITPOLECLIMB 
04825  161E  A2 00                 LDX #0
04826  1620  20 15 0A              JSR CHECKBLOCKUNDER
04827  1623  C9 50                 CMP #COLL_DOOR
04828  1625  F0 0F                 BEQ @DOORENTRANCE
04829  1627             
04830  1627  A2 00                 LDX #0
04831  1629  20 7D 11              JSR MOVEPLAYERUP
04832  162C  A2 01                 LDX #1
04833  162E  20 7D 11              JSR MOVEPLAYERUP
04834  1631             
04835  1631             ;===============================================================================
04836  1631             ; SPRITE HAS FALLEN OFF THE POLE
04837  1631             ;===============================================================================
04838  1631             @NOPOLEFOUND 
04839  1631  A9 00                 LDA #PLAYER_STATE_IDLE
04840  1633  4C D1 11              JMP CHANGEPLAYERSTATE
04841  1636             
04842  1636             @DOORENTRANCE 
04843  1636  A9 00                 LDA #0
04844  1638  8D 34 10              STA MAPTWOLOADED
04845  163B  20 18 12              JSR STARTHOTELMAP
04846  163E  60                    RTS
04847  163F             
04848  163F             ;===============================================================================
04849  163F             ; CHECK IF SPRITE CAN MOVE TO THE RIGHT
04850  163F             ;===============================================================================
04851  163F             @RIGHT
04852  163F  A2 01                 LDX #1
04853  1641  20 1A 09              JSR CHECKMOVERIGHT
04854  1644  F0 01                 BEQ @GORIGHT                            ; NOT BLOCKED, RIGHT ROUTINE
04855  1646  60                    RTS
04856  1647             
04857  1647             ;===============================================================================
04858  1647             ; CALL SPRITE WALKING RIGHT SUBROUTINE
04859  1647             ;===============================================================================
04860  1647             @GORIGHT
04861  1647  A9 02                 LDA #PLAYER_STATE_WALK_RIGHT
04862  1649  4C D1 11              JMP CHANGEPLAYERSTATE
04863  164C             
04864  164C             ;===============================================================================
04865  164C             ; CALL SPRITE WALKING LEFT SUBROUTINE
04866  164C             ;===============================================================================
04867  164C             @GOLEFT
04868  164C  A9 04                 LDA #PLAYER_STATE_WALK_LEFT
04869  164E  4C D1 11              JMP CHANGEPLAYERSTATE
04870  1651             
04871  1651             @BUTPRESS
04872  1651  A9 1A                 LDA #PLAYER_STATE_JUMP
04873  1653  4C D1 11              JMP CHANGEPLAYERSTATE
04874  1656             
04875  1656             ;===============================================================================
04876  1656             ; IF DELTA=4 PLAYER HAS PASSED THROUGH A TILE
04877  1656             ;===============================================================================
04878  1656             @VERTCHECK 
04879  1656  A2 01                 LDX #1
04880  1658  BD 70 35              LDA SPRITE_POS_X_DELTA,X
04881  165B  C9 04                 CMP #4                                  ; THEY PASS THROUGH IF DELTA IS 4
04882  165D  F0 13                 BEQ @CHECKJOYSTICK                      ; WE HAVE PASSED COMPLETELY THROUGH THE TILE
04883  165F  90 06                 BCC @DELTAFINISHED                      ; IF LESS THAN 4, SHIFT RIGHT ONE PIXEL
04884  1661             
04885  1661  20 04 11              JSR MOVEPLAYERLEFT                      ; NOT EQUAL, NOT LESS, MUST BE MORE - SHIFT LEFT ONE
04886  1664  4C 72 16              JMP @CHECKJOYSTICK
04887  1667             
04888  1667             ;===============================================================================
04889  1667             ; SPRITE IS MOVING TO THE RIGHT
04890  1667             ;===============================================================================
04891  1667             @DELTAFINISHED 
04892  1667  A2 00                 LDX #0
04893  1669  20 BE 10              JSR MOVEPLAYERRIGHT
04894  166C  A2 01                 LDX #1
04895  166E  20 BE 10              JSR MOVEPLAYERRIGHT
04896  1671  60                    RTS
04897  1672             
04898  1672             ;===============================================================================
04899  1672             ; CHECK IF JOYSTICK IS IDLE OR MOVING UP OR DOWN
04900  1672             ;===============================================================================
04901  1672             @CHECKJOYSTICK 
04902  1672  AD 68 3C              LDA JOY_Y                               ; JOYSTICK NOT MOVING UP/DOWN
04903  1675  F0 2E                 BEQ @END
04904  1677  30 03                 BMI @UP
04905  1679  10 17                 BPL @DOWN
04906  167B  60                    RTS
04907  167C             
04908  167C             ;===============================================================================
04909  167C             ; SPRITE IS MOVING UP
04910  167C             ;===============================================================================
04911  167C             @UP
04912  167C  A2 00                 LDX #0
04913  167E  20 15 0A              JSR CHECKBLOCKUNDER
04914  1681  C9 30                 CMP #COLL_POLE                          ; CHECK FOR POLE UNDER PLAYER
04915  1683  D0 0C                 BNE @POLENOTABOVE
04916  1685             
04917  1685  A2 00                 LDX #0
04918  1687  20 7D 11              JSR MOVEPLAYERUP
04919  168A  A2 01                 LDX #1
04920  168C  20 7D 11              JSR MOVEPLAYERUP
04921  168F  A9 00                 LDA #0
04922  1691             
04923  1691             @POLENOTABOVE 
04924  1691  60                    RTS
04925  1692             
04926  1692             ;===============================================================================
04927  1692             ; SPRITE IS MOVING DOWN
04928  1692             ;===============================================================================
04929  1692             @DOWN
04930  1692             ;        LDX #1
04931  1692             ;        JSR CHECKBLOCKUNDER
04932  1692             ;        CMP #COLL_POLE                          ; CHECK FOR POLE UNDER PLAYER
04933  1692             ;        BNE @POLENOTBELOW
04934  1692             
04935  1692  A2 00                 LDX #0
04936  1694  20 43 11              JSR MOVEPLAYERDOWN
04937  1697  A2 01                 LDX #1
04938  1699  20 43 11              JSR MOVEPLAYERDOWN
04939  169C             
04940  169C             @POLENOTBELOW 
04941  169C  60                    RTS
04942  169D             
04943  169D             ;===============================================================================
04944  169D             ; IF DELTA=4 PLAYER HAS PASSED THROUGH A TILE
04945  169D             ;===============================================================================
04946  169D             @ENDCLIMB
04947  169D  AD 70 35              LDA SPRITE_POS_X_DELTA          ; CHECK IF SPRITE IS PASSING
04948  16A0  C9 04                 CMP #4                          ; COMPLETELY THROUGH THE TILE
04949  16A2  F0 01                 BEQ @END                        ; YES, THEY PASSED THROUGH
04950  16A4  60                    RTS
04951  16A5             
04952  16A5             @END
04953  16A5  A9 00                 LDA #0
04954  16A7  8D C1 35              STA SPRITE_ANIM_PLAY            ; PAUSE OUR ANIMATION
04955  16AA  60                    RTS
04956  16AB             
04957  16AB             
04958  16AB             ;===============================================================================
04959  16AB             ; PLAYER STATE SWIM RIGHT
04960  16AB             ;-------------------------------------------------------------------------------
04961  16AB             
04962  16AB             PLAYERSTATESWIMR 
04963  16AB  AD 51 18              LDA PLAYER_SUBSTATE
04964  16AE  D0 13                 BNE @RUNNING
04965  16B0             
04966  16B0  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04967  16B2  A9 4C                 LDA #<ANIM_PLAYER_SWIM_R                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04968  16B4  85 17                 STA ZEROPAGE_POINTER_1
04969  16B6  A9 36                 LDA #>ANIM_PLAYER_SWIM_R
04970  16B8  85 18                 STA ZEROPAGE_POINTER_1 + 1
04971  16BA             
04972  16BA  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04973  16BD  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04974  16BF  8D 51 18              STA PLAYER_SUBSTATE
04975  16C2  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
04976  16C3                        ;-----------------------------------------------------------------------------
04977  16C3             @RUNNING
04978  16C3  A9 01                 LDA #1
04979  16C5  8D C1 35              STA SPRITE_ANIM_PLAY                    ; BEGIN OUR ANIMATION WHEN SET TO ONE
04980  16C8             
04981  16C8  20 AE 10              JSR JOYSTICKREADY
04982  16CB             
04983  16CB             @INPUT
04984  16CB  AD 67 3C              LDA JOY_X
04985  16CE  F0 15                 BEQ @IDLE
04986  16D0  10 03                 BPL @RIGHT
04987  16D2  4C E5 16              JMP @IDLE
04988  16D5             
04989  16D5             @RIGHT
04990  16D5  A2 00                 LDX #0
04991  16D7  20 BE 10              JSR MOVEPLAYERRIGHT             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
04992  16DA  A2 01                 LDX #1
04993  16DC  20 BE 10              JSR MOVEPLAYERRIGHT
04994  16DF  60                    RTS
04995  16E0             
04996  16E0  A9 00                 LDA #PLAYER_STATE_IDLE
04997  16E2  4C D1 11              JMP CHANGEPLAYERSTATE
04998  16E5             
04999  16E5             @IDLE
05000  16E5  A9 00                 LDA #PLAYER_STATE_IDLE
05001  16E7  4C D1 11              JMP CHANGEPLAYERSTATE
05002  16EA             
05003  16EA             @DONEJOY
05004  16EA  60                    RTS
05005  16EB             
05006  16EB             
05007  16EB             ;===============================================================================
05008  16EB             ; PLAYER STATE SWIM LEFT
05009  16EB             ;===============================================================================
05010  16EB             
05011  16EB             PLAYERSTATESWIML 
05012  16EB  AD 51 18              LDA PLAYER_SUBSTATE
05013  16EE  D0 13                 BNE @RUNNING
05014  16F0             
05015  16F0  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
05016  16F2  A9 50                 LDA #<ANIM_PLAYER_SWIM_L                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
05017  16F4  85 17                 STA ZEROPAGE_POINTER_1
05018  16F6  A9 36                 LDA #>ANIM_PLAYER_SWIM_L
05019  16F8  85 18                 STA ZEROPAGE_POINTER_1 + 1
05020  16FA             
05021  16FA  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
05022  16FD  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
05023  16FF  8D 51 18              STA PLAYER_SUBSTATE
05024  1702  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
05025  1703                        ;-----------------------------------------------------------------------
05026  1703             @RUNNING
05027  1703  A9 01                 LDA #1
05028  1705  8D C1 35              STA SPRITE_ANIM_PLAY                    ; BEGIN OUR ANIMATION WHEN SET TO ONE
05029  1708             
05030  1708  20 AE 10              JSR JOYSTICKREADY
05031  170B             
05032  170B             @INPUT
05033  170B  AD 67 3C              LDA JOY_X
05034  170E  F0 15                 BEQ @IDLE
05035  1710  30 03                 BMI @LEFT
05036  1712  4C 25 17              JMP @IDLE
05037  1715             
05038  1715             @LEFT
05039  1715  A2 00                 LDX #0
05040  1717  20 04 11              JSR MOVEPLAYERLEFT             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
05041  171A  A2 01                 LDX #1
05042  171C  20 04 11              JSR MOVEPLAYERLEFT
05043  171F  60                    RTS
05044  1720             
05045  1720  A9 00                 LDA #PLAYER_STATE_IDLE
05046  1722  4C D1 11              JMP CHANGEPLAYERSTATE
05047  1725             
05048  1725             @IDLE
05049  1725  A9 00                 LDA #PLAYER_STATE_IDLE
05050  1727  4C D1 11              JMP CHANGEPLAYERSTATE
05051  172A             
05052  172A             @DONEJOY
05053  172A  60                    RTS
05054  172B             
05055  172B             
05056  172B             ;===============================================================================
05057  172B             ;  PLAYER STATE FLOATING
05058  172B             ;===============================================================================
05059  172B             
05060  172B             PLAYERSTATEFLOATING 
05061  172B  A9 01                 LDA #1
05062  172D  8D C1 35              STA SPRITE_ANIM_PLAY            ; PAUSE OUR ANIMATION
05063  1730             
05064  1730  20 AE 10              JSR JOYSTICKREADY
05065  1733             
05066  1733             ;===============================================================================
05067  1733             ; IN WATER: LEFT/RIGHT MOVEMENT
05068  1733             ;===============================================================================
05069  1733             @INPUT
05070  1733  AD 67 3C              LDA JOY_X
05071  1736  30 0E                 BMI @LEFTWATERMOVE
05072  1738  D0 11                 BNE @RIGHTWATERMOVE
05073  173A             
05074  173A             ;===============================================================================
05075  173A             ; IN WATER: UP/DOWN MOVEMENT
05076  173A             ;===============================================================================
05077  173A  AD 68 3C              LDA JOY_Y
05078  173D  F0 11                 BEQ @CHECKWATERCOLLIS           ; NO INPUT, GO TO FLOATING ROUTINE
05079  173F  30 24                 BMI @CHECKWATERUP               ; JOYSTICK GOING UP
05080  1741  10 55                 BPL @DOWN                       ; JOYSTICK GOING DOWN
05081  1743  4C 81 17              JMP @CHANGESPRITECOLOR
05082  1746             
05083  1746             @LEFTWATERMOVE 
05084  1746  A9 16                 LDA #PLAYER_STATE_SWIM_L
05085  1748  4C D1 11              JMP CHANGEPLAYERSTATE
05086  174B             
05087  174B             @RIGHTWATERMOVE 
05088  174B  A9 14                 LDA #PLAYER_STATE_SWIM_R
05089  174D  4C D1 11              JMP CHANGEPLAYERSTATE
05090  1750             
05091  1750             ;===============================================================================
05092  1750             ; IN WATER: SPRITE RISES TO SURFACE
05093  1750             ;===============================================================================
05094  1750             @CHECKWATERCOLLIS 
05095  1750  A2 00                 LDX #0                                  ; CHECK AT SPRITE'S HEAD
05096  1752  20 15 0A              JSR CHECKBLOCKUNDER                     ; CHECK UNDER THE SPRITE'S FEET
05097  1755  C9 30                 CMP #COLL_POLE                          ; DOES POLE EXIST HERE?
05098  1757  F0 3E                 BEQ @POLEFOUND                            ; POLE/LADDER WAS FOUND
05099  1759             
05100  1759  A2 00                 LDX #0                                  ; CHECK AT SPRITE'S HEAD
05101  175B  20 15 0A              JSR CHECKBLOCKUNDER                     ; CHECK UNDER THE SPRITE'S FEET
05102  175E  C9 40                 CMP #COLL_WATER                         ; WATER TILE WAS FOUND
05103  1760  D0 52                 BNE @END                                ; SPRITE NO LONGER IN WATER
05104  1762  4C 87 17              JMP @GOINGUP                            ; OTHERWISE MOVE HIM UP
05105  1765             
05106  1765             ;===============================================================================
05107  1765             ; IN WATER: CAN ONLY MOVE DOWN WHEN IN WATER
05108  1765             ;===============================================================================
05109  1765             @CHECKWATERUP 
05110  1765  A2 01                 LDX #1
05111  1767  20 C5 09              JSR CHECKMOVEUP                     ; CHECK FEET OF SPRITE
05112  176A  C9 00                 CMP #0                              ; IS SPRITE OUT OF THE WATER?
05113  176C  F0 13                 BEQ @CHANGESPRITECOLOR
05114  176E             
05115  176E  A2 01                 LDX #1
05116  1770  20 C5 09              JSR CHECKMOVEUP                     ; CHECK TILE UNDER TOP SPRITE (SPRITE)
05117  1773  C9 40                 CMP #COLL_WATER                     ; DOES POLE EXIST HERE?
05118  1775  F0 10                 BEQ @GOINGUP                        ; NO POLE FOUND, EXIT ROUTINE
05119  1777             
05120  1777  A2 01                 LDX #1
05121  1779  20 C5 09              JSR CHECKMOVEUP                     ; CHECK FEET OF SPRITE
05122  177C  C9 00                 CMP #0                              ; IS SPRITE OUT OF THE WATER?
05123  177E  D0 07                 BNE @GOINGUP
05124  1780  60                    RTS
05125  1781             
05126  1781             ; SPRITE HAS LEFT THE WATER
05127  1781             @CHANGESPRITECOLOR 
05128  1781  A9 06                 LDA #COLOR_BLUE
05129  1783  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2         ; TURN SPRITE BLUE UNDER WATER
05130  1786             
05131  1786             @EXITFLOATING 
05132  1786  60                    RTS
05133  1787             
05134  1787             @GOINGUP
05135  1787  A9 06                 LDA #COLOR_BLUE
05136  1789  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2
05137  178C             
05138  178C  A2 00                 LDX #0
05139  178E  20 7D 11              JSR MOVEPLAYERUP             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
05140  1791  A2 01                 LDX #1
05141  1793  20 7D 11              JSR MOVEPLAYERUP             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
05142  1796  60                    RTS
05143  1797             
05144  1797             @POLEFOUND 
05145  1797  60                    RTS
05146  1798             
05147  1798             ;===============================================================================
05148  1798             ; IN WATER: CAN ONLY MOVE DOWN WHEN IN WATER
05149  1798             ;===============================================================================
05150  1798             @DOWN
05151  1798  A2 01                 LDX #1
05152  179A  20 15 0A              JSR CHECKBLOCKUNDER                     ; CHECK TILE UNDER TOP SPRITE (SPRITE)
05153  179D  C9 40                 CMP #COLL_WATER                         ; DOES POLE EXIST HERE?
05154  179F  F0 03                 BEQ @GOINGDOWN
05155  17A1  4C B4 17              JMP @END
05156  17A4             
05157  17A4             @GOINGDOWN 
05158  17A4  A9 06                 LDA #6
05159  17A6  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2            ; TURN SPRITE BLUE UNDER WATER
05160  17A9             
05161  17A9  A2 00                 LDX #0
05162  17AB  20 43 11              JSR MOVEPLAYERDOWN             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
05163  17AE  A2 01                 LDX #1
05164  17B0  20 43 11              JSR MOVEPLAYERDOWN
05165  17B3  60                    RTS
05166  17B4             @END
05167  17B4  A9 0A                 LDA #COLOR_LTRED
05168  17B6  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2
05169  17B9  A9 00                 LDA #PLAYER_STATE_IDLE
05170  17BB  4C D1 11              JMP CHANGEPLAYERSTATE
05171  17BE             
05172  17BE             
05173  17BE             
05174  17BE             ;===============================================================================
05175  17BE             ; PLAYER STATE JUMP
05176  17BE             ;===============================================================================
05177  17BE             
05178  17BE             PLAYERSTATEJUMP 
05179  17BE             
05180  17BE             ; IF PLAYER IS NOT JUMPING (EXECUTING "PLAYERSTATEJUMP"), THEN
05181  17BE             ; THE APPLYGRAVITY ROUTINE STILL WORKS TO BRING THE SPRITE BACK DOWN.
05182  17BE             ;===============================================================================
05183  17BE             ; CHECK IF SPACE ABOVE SPRITE IS OPEN
05184  17BE             ;===============================================================================
05185  17BE             @JUMPING   
05186  17BE             
05187  17BE                        ;JSR LOADCHSETFROMDISK
05188  17BE                        ;JSR LOADFILEINMEMORY
05189  17BE             
05190  17BE             ;        CLC
05191  17BE             ;        ADC #200
05192  17BE             ;        STA GAMESCORE
05193  17BE             
05194  17BE             ;        LDA #20                          ; SET VIC TO SCREEN 6, CHARSET 2
05195  17BE             ;        STA VIC_MEMORY_CONTROL
05196  17BE             
05197  17BE                        ;JSR UPDATETIMERS
05198  17BE             ;        CLC
05199  17BE             ;        LDA GAMESCORE                                   ; INCREASE SCORE
05200  17BE             ;        ADC #1                                          ; 01,00
05201  17BE             ;        STA GAMESCORE
05202  17BE             
05203  17BE  A2 00                 LDX #0
05204  17C0  20 C5 09              JSR CHECKMOVEUP                 ; CHECK FOR TILE ABOVE OUR SPRITE
05205  17C3  F0 0A                 BEQ @CONTJUMP                   ; TILE EXISTS, EXIT SUBROUTINE
05206  17C5             
05207  17C5             
05208  17C5  A9 00                 LDA #0
05209  17C7  8D 52 18              STA PLAYER_JUMP_POS
05210  17CA             
05211  17CA  A9 00                 LDA #PLAYER_STATE_IDLE
05212  17CC  4C D1 11              JMP CHANGEPLAYERSTATE
05213  17CF             
05214  17CF             ;===============================================================================
05215  17CF             ; CHECK IF POLE IS ABOVE SPRITE
05216  17CF             ;===============================================================================
05217  17CF             @CONTJUMP
05218  17CF  20 AE 10              JSR JOYSTICKREADY
05219  17D2             
05220  17D2             ;===============================================================================
05221  17D2             ; CHECK IF FLOOR IS IS BELOW PLAYER SPRITE
05222  17D2             ;-------------------------------------------------------------------------------
05223  17D2             ; THIS IS USED TO PREVENT PLAYER SPRITE FROM JUMPING UP THROUGH
05224  17D2             ; WALLS WHEN ON LADDER OR THE FLOOR.
05225  17D2             ;===============================================================================
05226  17D2  A2 00                 LDX #0
05227  17D4  20 15 0A              JSR CHECKBLOCKUNDER
05228  17D7  AD C2 0A              LDA COLLIDER_ATTR
05229  17DA  C9 10                 CMP #COLL_FLOOR                 ; DOES FLOOR EXIST UNDER US?
05230  17DC  D0 16                 BNE @CHECKJOYJUMPING
05231  17DE             
05232  17DE  A2 01                 LDX #1
05233  17E0  20 15 0A              JSR CHECKBLOCKUNDER
05234  17E3  AD C2 0A              LDA COLLIDER_ATTR
05235  17E6  C9 10                 CMP #COLL_FLOOR                 ; DOES FLOOR EXIST UNDER US?
05236  17E8  F0 0A                 BEQ @CHECKJOYJUMPING
05237  17EA             
05238  17EA  A9 00                 LDA #0
05239  17EC  8D 52 18              STA PLAYER_JUMP_POS
05240  17EF  A9 00                 LDA #PLAYER_STATE_IDLE
05241  17F1  4C D1 11              JMP CHANGEPLAYERSTATE
05242  17F4             
05243  17F4             ;===============================================================================
05244  17F4             ; NO FLOOR IS ABOVE PLAYER SPRITE: SO HE CAN JUMP
05245  17F4             ;===============================================================================
05246  17F4             @CHECKJOYJUMPING 
05247  17F4  AD 67 3C              LDA JOY_X
05248  17F7  F0 21                 BEQ @MOVEUP
05249  17F9  30 12                 BMI @LEFTJUMP                   ; CHECK FOR JOYSTICK TO LEFT = 255
05250  17FB  10 03                 BPL @RIGHTJUMP                  ; CHECK FOR JOYSTICK TO RIGHT = 1
05251  17FD  4C 1A 18              JMP @MOVEUP
05252  1800             
05253  1800             ;===============================================================================
05254  1800             ; CHECK FOR JUMP TO THE RIGHT
05255  1800             ;===============================================================================
05256  1800             @RIGHTJUMP 
05257  1800  A2 00                 LDX #0
05258  1802  20 BE 10              JSR MOVEPLAYERRIGHT
05259  1805  A2 01                 LDX #1
05260  1807  20 BE 10              JSR MOVEPLAYERRIGHT
05261  180A  4C 1A 18              JMP @MOVEUP
05262  180D             
05263  180D             ;===============================================================================
05264  180D             ; CHECK FOR JUMP TO THE LEFT
05265  180D             ;===============================================================================
05266  180D             @LEFTJUMP
05267  180D  A2 00                 LDX #0
05268  180F  20 04 11              JSR MOVEPLAYERLEFT
05269  1812  A2 01                 LDX #1
05270  1814  20 04 11              JSR MOVEPLAYERLEFT
05271  1817  4C 1A 18              JMP @MOVEUP
05272  181A             
05273  181A             ;===============================================================================
05274  181A             ; CAN JUMP UP IF NOTHING IS ABOVE THE SPRITE
05275  181A             ;===============================================================================
05276  181A             ;===============================================================================
05277  181A             ; IF NO FLOOR IS FOUND, SPRITE WILL FALL AT START
05278  181A             ;===============================================================================
05279  181A             @MOVEUP
05280  181A             ;        LDX #1
05281  181A             ;        JSR CHECKBLOCKUNDER
05282  181A             ;        LDA COLLIDER_ATTR
05283  181A             ;        CMP #COLL_FLOOR                 ; DOES FLOOR EXIST UNDER US?
05284  181A             ;        BNE @SPRITEFALLS
05285  181A             
05286  181A  A2 00                 LDX #0
05287  181C  20 7D 11              JSR MOVEPLAYERUP
05288  181F             
05289  181F             ;===============================================================================
05290  181F             ; SPRITE JUMPS UP IF < 12
05291  181F             ;===============================================================================
05292  181F  A2 01                 LDX #1
05293  1821  20 C5 09              JSR CHECKMOVEUP                 ; CHECK TILE UNDER TOP SPRITE (SPRITE)
05294  1824  D0 27                 BNE @CANTMOVEUP                ; BLOCKED, CAN'T MOVE PLAYER UP
05295  1826             
05296  1826  AD 52 18              LDA PLAYER_JUMP_POS             ; FOR PLAYER_JUMP_TABLE,X TO READ UNTIL
05297  1829  C9 0C                 CMP #12                         ; IT FINDS A "0" VALUE. 28 BYTES
05298  182B  B0 03                 BCS @SPRITEFALLS                ; SPRITE IS FALLING ONLY
05299  182D  4C 3C 18              JMP @MOVESPRITEUP
05300  1830             
05301  1830             ;===============================================================================
05302  1830             ; SPRITE FALLS DOWN IF < 22
05303  1830             ;===============================================================================
05304  1830             @SPRITEFALLS 
05305  1830  AD 52 18              LDA PLAYER_JUMP_POS             ; FOR PLAYER_JUMP_TABLE,X TO READ UNTIL
05306  1833  C9 16                 CMP #22                         ; IT FINDS A "0" VALUE. 28 BYTES
05307  1835  90 05                 BCC @MOVESPRITEUP               ; SPRITE IS FALLING ONLY
05308  1837             
05309  1837             ;===============================================================================
05310  1837             ; FLOOR IS FOUND UNDER SPRITE: CLEAR PLAYER_JUMP_POS, APPLY GRAVITY
05311  1837             ;===============================================================================
05312  1837             @RESETJUMP 
05313  1837  A9 00                 LDA #PLAYER_STATE_IDLE
05314  1839  4C D1 11              JMP CHANGEPLAYERSTATE
05315  183C             
05316  183C             ;===============================================================================
05317  183C             ; SPRITE IS NOT BLOCKED AND CAN FREELY JUMP UP
05318  183C             ;===============================================================================
05319  183C             @MOVESPRITEUP 
05320  183C  18                    CLC
05321  183D  69 01                 ADC #1
05322  183F  8D 52 18              STA PLAYER_JUMP_POS             ; COUNTER TO TRACK TABLE LOOP
05323  1842             
05324  1842  A2 00                 LDX #0
05325  1844  20 7D 11              JSR MOVEPLAYERUP
05326  1847  A2 01                 LDX #1
05327  1849  20 7D 11              JSR MOVEPLAYERUP
05328  184C  60                    RTS
05329  184D             
05330  184D             @CANTMOVEUP 
05331  184D  60                    RTS
05332  184E             
05333  184E             
05334  184E             
05335  184E             CHECKUPRIGHT 
05336  184E  09                    BYTE %0001001
05337  184F             
05338  184F             CHECKUPLEFT 
05339  184F  05                    BYTE %0000101
05340  1850             
05341  1850             PLAYER_STATE 
05342  1850  00                    BYTE 0
05343  1851             PLAYER_SUBSTATE 
05344  1851  00                    BYTE 0
05345  1852             
05346  1852             PLAYER_JUMP_POS 
05347  1852  00                    BYTE 0
05348  1853             
05349  1853             PLAYER_JUMP_TABLE 
05350  1853  08 07 05              BYTE 8,7,5,3,2,1,1,1,0,0
05351  185D             
05352  185D  00         PLAYER_TIMER BYTE 0
05353  185E  00         PLAYER_SPEED BYTE 0
05354  185F             
05355  185F  00         WATERSPEED BYTE 0
05356  1860             ;===============================================================================
05357  1860             ; PLAYER.ASM  - PLAYER LOGIC
05358  1860             ; PETER 'SIG' HEWETT - RETROROMICON 2017; PLAYER.ASM  - PLAYER LOGIC
05359  1860             ;===============================================================================
05360  1860             ;
05361  1860             ; HANDLING PLAYER AND PLAYER CONTROL LOGIC
05362  1860             ;-------------------------------------------------------------------------------
05363  1860             ; SET SPRITE COLORS/MULITCOLORS
05364  1860             ;-------------------------------------------------------------------------------
05365  1860             
05366  1860             ENEMYSETUP 
05367  1860  A9 FF                 LDA #%11111111                          ; TURN ON MULTICOLOR FOR SPRITES 0 AND 1
05368  1862  8D 1C D0              STA VIC_SPRITE_MULTICOLOR               ; ALSO TURN ALL OTHERS TO SINGLE COLOR
05369  1865             
05370  1865  A9 00                 LDA #COLOR_BLACK
05371  1867  8D 25 D0              STA VIC_SPRITE_MULTICOLOR_1             ; SET SPRITE SHARED MULTICOLOR 1 TO BROWN
05372  186A  A9 0A                 LDA #COLOR_LTRED
05373  186C  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2             ; SET SPRITE SHARED MULTICOLOR 2 TO 'PINK'
05374  186F             
05375  186F  A9 05                 LDA #COLOR_GREEN
05376  1871  8D 29 D0              STA VIC_SPRITE_COLOR + 2                ; SET SPRITE 0 COLOR TO YELLOW
05377  1874  A9 06                 LDA #COLOR_BLUE
05378  1876  8D 2A D0              STA VIC_SPRITE_COLOR + 3                ; SET SPRITE 1 ORANGE (BKGROUND SPRITE)
05379  1879             
05380  1879             
05381  1879  A9 01                 LDA #1
05382  187B  9D 60 35              STA SPRITE_IS_ACTIVE,X
05383  187E  E8                    INX
05384  187F  9D 60 35              STA SPRITE_IS_ACTIVE,X
05385  1882             
05386  1882             ;------------------------------------------------------------------------------
05387  1882             ; WE NOW USE A SYSTEM THAT TRACKS THE SPRITE POSITION IN CHARACTER COORDS ON
05388  1882             ; THE SCREEN, SO TO AVOID COSTLY CALCULATIONS EVERY FRAME, WE SET THE SPRITE
05389  1882             ; TO A CHARACTER BORDER INTIALLY AND TRACK ALL MOVEMENT FROM THERE. THAT WAY
05390  1882             ; WE NEED ONLY DO THIS SET OF CALCULATIONS ONCE IN THE LIFETIME OF THE PLAYER.
05391  1882             ;
05392  1882             ; TO INITALLY PLACE THE SPRITE, WE USE 'SPRITETOCHARPOS'
05393  1882             ;------------------------------------------------------------------------------
05394  1882             ; SET SPRITE IMAGES.  THE SPRITES FROM THE MLP SPELUNKER DEMO USED 2 SPRITES
05395  1882             ; OVERLAPPED SO THEY COULD USE AN EXTRA COLOR.  SO OUR MAIN PLAYER SPRITE
05396  1882             ; USES 2 SPRITES (0 AND 1).  THE FIRST WALKING FRAME IMAGE 1, AND IT'S
05397  1882             ; BACKGROUND SPRITE IS IMAGE 8.  WE USE THE SETSPRITEIMAGE SUBROUTINE AS IT
05398  1882             ; WILL UPDATE THE POINTERS FOR BOTH SCREEN1 AND SCREEN2 FOR US.
05399  1882             ;---------------------------------------------------------------------------
05400  1882  A9 00                 LDA #0
05401  1884  8D 80 35              STA SPRITE_DELTA_TRIM_X
05402  1887             
05403  1887             
05404  1887             
05405  1887             ;===============================================================================
05406  1887             ; UPDATE PLAYER
05407  1887             ;-------------------------------------------------------------------------------
05408  1887             ; UPDATE THE PLAYER. JOYSTICK CONTROLS ARE UPDATED VIA INTERRUPT SO WE READ THE
05409  1887             ; VALUES FROM JOY_X AND JOY_Y
05410  1887             ;-------------------------------------------------------------------------------
05411  1887             
05412  1887             
05413  1887             ENEMY_RIGHT_CAP = 50                      ; SPRITE MOVEMENT CAPS - AT THIS POINT WE DON'T
05414  1887             ENEMY_LEFT_CAP = $03                      ; MOVE THE SPRITE, WE SCROLL THE SCREEN
05415  1887             ENEMY_UP_CAP = $04
05416  1887             ENEMY_DOWN_CAP = $0F
05417  1887             
05418  1887             UPDATEENEMY 
05419  1887                        ; ONLY UPDATE THE PLAYER IF IT'S ACTIVE
05420  1887  AD 60 35              LDA SPRITE_IS_ACTIVE              ; CHECK AGAINST SPRITE #0 - IS IT ACTIVE?
05421  188A  D0 01                 BNE @UPDATE
05422  188C  60                    RTS
05423  188D             @UPDATE
05424  188D  A2 02                 LDX #2
05425  188F  20 56 34              JSR ANIMATESPRITE                 ; DISPLAY ANIMATION TO SCREEN
05426  1892  20 AF 1A              JSR UPDATEENEMYSTATE              ; UPDATE PLAYER BY STATE
05427  1895  60                    RTS
05428  1896             
05429  1896             
05430  1896             
05431  1896             ;===============================================================================
05432  1896             ; JOYSTICK / PLAYER MOVE
05433  1896             ;===============================================================================
05434  1896             ; THE OLD SYSTEM OF JOYSTICK MOVEMENT WAS GOING TO BECOME VERY UNWEILDY VERY FAST
05435  1896             ; AND NOT BE VERY
05436  1896             ; GOOD FOR EXPANDING WHAT THE PLAYER CAN DO. I'M TRYING A NEW SYSTEM WHERE THE
05437  1896             ; ROUTINES ARE BROKEN
05438  1896             ; DOWN AND INPUT IS CHECKED IN INDIVIDUAL STATES FOR WHAT THE PLAYER CAN DO AT
05439  1896             ; ANY GIVEN TIME.
05440  1896             ; THE MOVEMENT ROUTINES WILL THEN BE BROKEN DOWN AND CALLED AS NEEDED BY THE
05441  1896             ; STATES.
05442  1896             ; SINCE THE OLD SYSTEM DIDN'T ACTUALLY READ THE JOYSTICK OR SCROLL THE SCREEN
05443  1896             ; (IT READ / SET
05444  1896             ; VARIABLES BY ROUTINES THAT DO) - THIS SHOULD BE FAIRLY WORKABLE.
05445  1896             ;-------------------------------------------------------------------------------
05446  1896             
05447  1896             ;===============================================================================
05448  1896             ; JOYSTICK READY
05449  1896             ;-------------------------------------------------------------------------------
05450  1896             ; THERE ARE TIMES ATM WHEN WE HAVE TO IGNORE JOYSTICK INPUT SO THE SCROLLING CAN
05451  1896             ; 'CATCH UP' AFTER
05452  1896             ; MOVEMENT STOPS. USUALLY FOR A COUPLE OF FRAMES.
05453  1896             ;
05454  1896             ; RETURNS A :  0 = READY   1 = NOT READY
05455  1896             ;
05456  1896             ; MODIFIES A
05457  1896             ;-------------------------------------------------------------------------------
05458  1896             ;===============================================================================
05459  1896             ; MOVE ENEMY RIGHT
05460  1896             ;===============================================================================
05461  1896             ; MOVE THE PLAYER ONE PIXEL TO THE RIGHT IF POSSIBLE, TAKING INTO ACCOUNT
05462  1896             ; SCROLLING, MAP LIMITS
05463  1896             ; AND COLLISION DETECTION AGAINST THE SCREEN
05464  1896             ;
05465  1896             ; RETURNS A: ANY BLOCKING OR SPECIAL CHARACTER TO THE RIGHT, OR 0 IF CLEAR
05466  1896             ;
05467  1896             ;-------------------------------------------------------------------------------
05468  1896             
05469  1896             MOVEENEMYRIGHT 
05470  1896  A9 01                 LDA #1
05471  1898  8D 98 1F              STA PLAYER_DIRECTION
05472  189B  A9 00                 LDA #0
05473  189D  8D 43 32              STA SCROLL_FIX_SKIP
05474  18A0                        ;------------------------------------------ CHECK RIGHT MOVEMENT CAP
05475  18A0             
05476  18A0  A2 02                 LDX #2
05477  18A2  BD 68 35              LDA SPRITE_POS_X,X         ; LOAD THE SPRITE CHAR X POSITION
05478  18A5  A0 01                 LDY #1
05479  18A7  18                    CLC
05480  18A8  6D DD 35              ADC ENEMY_DISTANCE
05481  18AB  A0 01                 LDY #1
05482  18AD  D9 68 35              CMP SPRITE_POS_X,Y     ; CHECK AGAINST THE RIGHT EDGE OF THE SCREEN
05483  18B0  90 18                 BCC @RIGHTMOVE                  ; SPRITE X IS < 35
05484  18B2             
05485  18B2             @CONTRIGHTCHECK 
05486  18B2  A5 30                 LDA MAP_X_POS                   ; LOAD THE CURRENT MAP X POSITION
05487  18B4  C9 64                 CMP #100                         ; MAP = 64 TILES WIDE, SCREEN = 10 TILES WIDE
05488  18B6  D0 0C                 BNE @VERIFYRIGHTPOSITION
05489  18B8  A5 32                 LDA MAP_X_DELTA                 ; EACH TILE IS 4 CHARACTERS WIDE (0-3)
05490  18BA  C9 01                 CMP #1                          ; IF WE HIT THIS LIMIT WE DON'T SCROLL (OR MOVE)
05491  18BC  D0 06                 BNE @VERIFYRIGHTPOSITION
05492  18BE                        ;AT THIS POINT WE WILL REVERT TO MOVE
05493  18BE  A9 01                 LDA #1
05494  18C0  8D 43 32              STA SCROLL_FIX_SKIP
05495  18C3  60                    RTS
05496  18C4             
05497  18C4             @VERIFYRIGHTPOSITION 
05498  18C4  A9 01                 LDA #1                          ; 1 HERE WOULD SET HIM IN MIDDLE
05499  18C6  8D D9 35              STA ACTIVETIMER                 ; BECAUSE 53264 BIT IS SET
05500  18C9  60                    RTS
05501  18CA             
05502  18CA             ;===============================================================================
05503  18CA             ; IF ENEMY TOUCHES A POLE BELOW FEET THEN ENEMY SPRITE
05504  18CA             ; CANNOT MOVE RIGHT ONTO THE LADDER.
05505  18CA             ;===============================================================================
05506  18CA             @RIGHTMOVE 
05507  18CA  A2 02                 LDX #2
05508  18CC  20 15 0A              JSR CHECKBLOCKUNDER        ;WORKS GOOD
05509  18CF  AD C2 0A              LDA COLLIDER_ATTR
05510  18D2  C9 30                 CMP #COLL_POLE
05511  18D4  F0 28                 BEQ @ENEMYMOVESDOWNPOLE
05512  18D6             
05513  18D6             ;===============================================================================
05514  18D6             ; IF ENEMY WAS HIT, SPRITE DOESN'T MOVE RIGHT
05515  18D6             ;===============================================================================
05516  18D6  AD DE 35              LDA ENEMY_HIT
05517  18D9  D0 15                 BNE @RIGHTENEMYISDOWN
05518  18DB             
05519  18DB             ;; HOW FAR WILL SPRITE MOVE WITHIN TIMER?
05520  18DB  20 F6 1B              JSR ENEMYFIRERIGHTTIMER
05521  18DE             
05522  18DE             ;; DON'T MOVE ENEMY TO RIGHT UNTIL FIRE_RIGHT=0
05523  18DE  AD 94 1F              LDA FIRE_RIGHT
05524  18E1  D0 1A                 BNE @RIGHTDONE
05525  18E3             
05526  18E3  A2 02                 LDX #2
05527  18E5  20 EF 33              JSR MOVESPRITERIGHT             ; MOVE SPRITES ONE PIXEL RIGHT
05528  18E8  A2 03                 LDX #3
05529  18EA  20 EF 33              JSR MOVESPRITERIGHT
05530  18ED             
05531  18ED  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
05532  18EF  60                    RTS
05533  18F0             
05534  18F0             @RIGHTENEMYISDOWN 
05535  18F0  A9 00                 LDA #0
05536  18F2  A2 02                 LDX #2
05537  18F4  9D 68 35              STA SPRITE_POS_X,X
05538  18F7  A2 03                 LDX #3
05539  18F9  9D 68 35              STA SPRITE_POS_X,X
05540  18FC  60                    RTS
05541  18FD             
05542  18FD             @RIGHTDONE 
05543  18FD  60                    RTS
05544  18FE             
05545  18FE             @ENEMYMOVESDOWNPOLE 
05546  18FE  60                    RTS
05547  18FF             
05548  18FF             
05549  18FF             
05550  18FF             ;===============================================================================
05551  18FF             ; MOVE ENEMY LEFT
05552  18FF             ;===============================================================================
05553  18FF             ; MOVE THE PLAYER ONE PIXEL TO THE LEFT IF POSSIBLE, TAKING INTO ACCOUNT
05554  18FF             ; SCROLLING, MAP LIMITS
05555  18FF             ; AND COLLISION DETECTION AGAINST THE SCREEN
05556  18FF             ;
05557  18FF             ; RETURNS A: ANY BLOCKING OR SPECIAL CHARACTER TO THE RIGHT, OR 0 IF CLEAR
05558  18FF             ;-------------------------------------------------------------------------------
05559  18FF             
05560  18FF             MOVEENEMYLEFT 
05561  18FF  A9 02                 LDA #2
05562  1901  8D 98 1F              STA PLAYER_DIRECTION
05563  1904  A9 00                 LDA #0                          ; MAKE SURE SCROLL 'FIX' IS ON
05564  1906  8D 43 32              STA SCROLL_FIX_SKIP
05565  1909             
05566  1909             ;================================================================
05567  1909             ; READ ENEMY SPRITE(HEAD) - SBC #20
05568  1909             ; IF ENEMY SPRITE(HEAD) > PLAYER(1) GOTO @LEFTMOVE
05569  1909             
05570  1909             ; SO IF THE ENEMY SPRITE IS STANDING BEYOND THE PLAYER SPRITE
05571  1909             ; THEN MOVE THE ENEMY TO THE LEFT TOWARD THE PLAYER.
05572  1909             
05573  1909             ; IF SPRITE_POS_X,(2) > SPRITE_POS_X,Y(1)
05574  1909             
05575  1909  A2 02                 LDX #2
05576  190B  BD 68 35              LDA SPRITE_POS_X,X         ; LOAD THE SPRITE CHAR X POSITION
05577  190E  A0 01                 LDY #1
05578  1910  38                    SEC
05579  1911  ED DD 35              SBC ENEMY_DISTANCE
05580  1914  A0 01                 LDY #1
05581  1916  D9 68 35              CMP SPRITE_POS_X,Y     ; CHECK AGAINST THE RIGHT EDGE OF THE SCREEN
05582  1919  B0 0F                 BCS @LEFTMOVE                  ; SPRITE X IS < 35
05583  191B             
05584  191B             @CONTLEFTCHECK 
05585  191B  A5 30                 LDA MAP_X_POS                   ; CHECK FOR MAP POS X = 0
05586  191D  D0 05                 BNE @VERIFYLEFTPOSITION
05587  191F  A5 32                 LDA MAP_X_DELTA                 ; CHECK FOR MAP DELTA = 0
05588  1921  D0 01                 BNE @VERIFYLEFTPOSITION
05589  1923  60                    RTS
05590  1924             
05591  1924             ; SPRITE IS NOW AT THE FAR LEFT HAND CORNER
05592  1924             @VERIFYLEFTPOSITION 
05593  1924  A9 01                 LDA #1
05594  1926  8D D9 35              STA ACTIVETIMER
05595  1929  60                    RTS
05596  192A             
05597  192A             ;===============================================================================
05598  192A             ; IF ENEMY TOUCHES A POLE BELOW FEET THEN ENEMY SPRITE
05599  192A             ; CANNOT MOVE LEFT ONTO THE LADDER.
05600  192A             ;===============================================================================
05601  192A             @LEFTMOVE  
05602  192A  A2 02                 LDX #2
05603  192C  20 15 0A              JSR CHECKBLOCKUNDER             ;WORKS GOOD
05604  192F  AD C2 0A              LDA COLLIDER_ATTR
05605  1932  C9 30                 CMP #COLL_POLE
05606  1934  F0 2D                 BEQ @MOVEDOWNPOLE
05607  1936             
05608  1936             ;===============================================================================
05609  1936             ; IF ENEMY WAS HIT, SPRITE DOESN'T MOVE LEFT
05610  1936             ;===============================================================================
05611  1936  AD DE 35              LDA ENEMY_HIT
05612  1939  D0 15                 BNE @LEFTENEMYISDOWN
05613  193B  20 F6 1B              JSR ENEMYFIRERIGHTTIMER
05614  193E             
05615  193E  AD 95 1F              LDA FIRE_LEFT
05616  1941  D0 1F                 BNE @LEFTDONE
05617  1943             
05618  1943  A2 02                 LDX #2
05619  1945  20 BD 33              JSR MOVESPRITELEFT
05620  1948  A2 03                 LDX #3
05621  194A  20 BD 33              JSR MOVESPRITELEFT
05622  194D             
05623  194D  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
05624  194F  60                    RTS
05625  1950             
05626  1950             @LEFTENEMYISDOWN 
05627  1950  A9 32                 LDA #50
05628  1952  A2 02                 LDX #2
05629  1954  9D 68 35              STA SPRITE_POS_X,X
05630  1957  A2 03                 LDX #3
05631  1959  9D 68 35              STA SPRITE_POS_X,X
05632  195C  A9 00                 LDA #0
05633  195E  8D 1E D0              STA 53278
05634  1961  60                    RTS
05635  1962             
05636  1962             ; SPRITE HIT A TILE (OTHER THAN THE FLOOR)
05637  1962             @LEFTDONE
05638  1962  60                    RTS
05639  1963             
05640  1963             @MOVEDOWNPOLE 
05641  1963  60                    RTS
05642  1964             
05643  1964             
05644  1964             ;===============================================================================
05645  1964             ; MOVE ENEMY DOWN
05646  1964             ;===============================================================================
05647  1964             ; MOVE THE PLAYER ONE PIXEL DOWN IF POSSIBLE, TAKING INTO ACCOUNT SCROLLING,
05648  1964             ; MAP LIMITS AND COLLISION DETECTION AGAINST THE SCREEN
05649  1964             ;
05650  1964             ; RETURNS A: ANY BLOCKING OR SPECIAL CHARACTER BELOW, OR 0 IF CLEAR
05651  1964             ;
05652  1964             ; MODIFIES X
05653  1964             ;-------------------------------------------------------------------------------
05654  1964             
05655  1964             MOVEENEMYDOWN 
05656  1964  BD 99 35              LDA SPRITE_CHAR_POS_Y,X
05657  1967  C9 0F                 CMP #ENEMY_DOWN_CAP
05658  1969  90 2A                 BCC @DOWNMOVE
05659  196B             
05660  196B  A5 35                 LDA ENMAP_Y_POS
05661  196D  C9 1B                 CMP #$1B
05662  196F  D0 07                 BNE @DOWNSCROLL
05663  1971  A5 37                 LDA ENMAP_Y_DELTA
05664  1973  C9 02                 CMP #02
05665  1975  90 01                 BCC @DOWNSCROLL
05666  1977  60                    RTS
05667  1978             
05668  1978             @DOWNSCROLL 
05669  1978  A2 02                 LDX #2                          ; CHECK SPRITE #2
05670  197A  20 51 37              JSR ENEMYCHECKMOVEDOWN          ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
05671  197D  F0 01                 BEQ @SCROLL
05672  197F  60                    RTS                             ; RETURN WITH CONTENTS OF COLLISON ROUTINE
05673  1980             
05674  1980             @SCROLL
05675  1980  A5 37                 LDA ENMAP_Y_DELTA                 ; INCREMENT THE MAP_Y_DELTA
05676  1982  18                    CLC
05677  1983  69 01                 ADC #1
05678  1985  29 03                 AND #%0011                      ; MASK TO A VALUE BETWEEN 0-3
05679  1987  85 37                 STA ENMAP_Y_DELTA
05680  1989             
05681  1989  C9 00                 CMP #0                          ; CHECK FOR CROSSOVER TO A NEW TILE
05682  198B  F0 01                 BEQ @NEWTILE
05683  198D  60                    RTS
05684  198E             @NEWTILE
05685  198E  A5 31                 LDA MAP_Y_POS
05686  1990  85 35                 STA ENMAP_Y_POS
05687  1992  E6 35                 INC ENMAP_Y_POS                   ; INCREMENT MAP Y POS ON A NEW TILE
05688  1994  60                    RTS
05689  1995             
05690  1995             @DOWNMOVE
05691  1995  A9 01                 LDA #1
05692  1997  8D 8F 1F              STA ENEMYDOWNCAP
05693  199A  A2 02                 LDX #2                          ; CHECK SPRITE #2
05694  199C  20 51 37              JSR ENEMYCHECKMOVEDOWN          ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
05695  199F  D0 0C                 BNE @DOWNDONE                   ; RETUN WITH CONTENTS OF COLLISION CODE
05696  19A1             
05697  19A1  A2 02                 LDX #2                          ; = 0 SO WE CAN MOVE THE SPRITE DOWN
05698  19A3  20 36 34              JSR MOVESPRITEDOWN
05699  19A6  A2 03                 LDX #3
05700  19A8  20 36 34              JSR MOVESPRITEDOWN
05701  19AB  A9 00                 LDA #0                          ; RETURN WITH CLEAR CODE
05702  19AD             @DOWNDONE
05703  19AD  60                    RTS
05704  19AE             
05705  19AE             @MOVEDOWNPOLE 
05706  19AE  60                    RTS
05707  19AF  A9 06                 LDA #ENEMY_STATE_WALK_D
05708  19B1  20 80 1A              JSR CHANGEENEMYSTATE
05709  19B4  20 F1 1C              JSR ENEMYSTATEWALKDOWN
05710  19B7  60                    RTS
05711  19B8             
05712  19B8             
05713  19B8             
05714  19B8             ;===============================================================================
05715  19B8             ; MOVE PLAYER RIGHT
05716  19B8             ;===============================================================================
05717  19B8             ; MOVE THE PLAYER ONE PIXEL UP IF POSSIBLE, TAKING INTO ACCOUNT SCROLLING,
05718  19B8             ; MAP LIMITS AND COLLISION DETECTION AGAINST THE SCREEN
05719  19B8             ;
05720  19B8             ; RETURNS A: ANY BLOCKING OR SPECIAL CHARACTER BELOW, OR 0 IF CLEAR
05721  19B8             ;-------------------------------------------------------------------------------
05722  19B8             
05723  19B8             MOVEENEMYUP 
05724  19B8  38                    SEC
05725  19B9  AD 10 36              LDA ENEMY_SPRITE_CHAR_POS_Y
05726  19BC  C9 04                 CMP #ENEMY_UP_CAP
05727  19BE  B0 1B                 BCS @UPMOVE
05728  19C0             
05729  19C0  A5 31                 LDA MAP_Y_POS
05730  19C2  D0 08                 BNE @UPSCROLL
05731  19C4  18                    CLC
05732  19C5  A5 33                 LDA MAP_Y_DELTA
05733  19C7  C9 01                 CMP #1
05734  19C9  B0 01                 BCS @UPSCROLL
05735  19CB  60                    RTS
05736  19CC             
05737  19CC             @UPSCROLL
05738  19CC  A2 02                 LDX #2
05739  19CE  20 9D 37              JSR ENEMYCHECKMOVEUP
05740  19D1  F0 01                 BEQ @SCROLL
05741  19D3  60                    RTS
05742  19D4             
05743  19D4             @SCROLL
05744  19D4  A9 03                 LDA #SCROLL_UP
05745  19D6  85 2C                 STA SCROLL_DIRECTION
05746  19D8  85 2D                 STA SCROLL_MOVING
05747  19DA  60                    RTS
05748  19DB             
05749  19DB             @UPMOVE
05750  19DB  A2 02                 LDX #2
05751  19DD  20 9D 37              JSR ENEMYCHECKMOVEUP
05752  19E0  D0 0A                 BNE @UPDONE
05753  19E2             
05754  19E2  A2 02                 LDX #2
05755  19E4  20 1B 34              JSR MOVESPRITEUP
05756  19E7  A2 03                 LDX #3
05757  19E9  20 1B 34              JSR MOVESPRITEUP
05758  19EC             @UPDONE
05759  19EC  60                    RTS
05760  19ED             
05761  19ED             
05762  19ED             
05763  19ED             
05764  19ED             MOVEBULLETRIGHT 
05765  19ED  A2 02                 LDX #2
05766  19EF  A0 05                 LDY #5
05767  19F1  BD 89 35              LDA SPRITE_POS_Y,X         ; GET ENEMY'S Y POSITION
05768  19F4  99 68 35              STA SPRITE_POS_X,Y         ; SAVE IN BULLET Y POSITION
05769  19F7             
05770  19F7  A2 05                 LDX #5
05771  19F9  BD 68 35              LDA SPRITE_POS_X,X         ; LOAD THE BULLET'S X POSITION
05772  19FC  A0 01                 LDY #1
05773  19FE             ;        CLC
05774  19FE             ;        ADC ENEMY_DISTANCE
05775  19FE  C9 32                 CMP #50     ; CHECK AGAINST THE RIGHT EDGE OF THE SCREEN
05776  1A00  90 0B                 BCC @MOVEBULLETRIGHT                  ; SPRITE X IS < 35
05777  1A02             
05778  1A02             ; BULLET HAS TRAVELED ACROSS THE SCREEN
05779  1A02  A2 05                 LDX #5
05780  1A04  A0 02                 LDY #2
05781  1A06  B9 68 35              LDA SPRITE_POS_X,Y         ; GET ENEMY SPRITE'S X POSITION
05782  1A09  9D 68 35              STA SPRITE_POS_X,X         ; SAVE IN BULLET X LOCATION
05783  1A0C  60                    RTS
05784  1A0D             
05785  1A0D             ;===============================================================================
05786  1A0D             ; IF ENEMY TOUCHES A POLE BELOW FEET THEN ENEMY SPRITE
05787  1A0D             ; CANNOT MOVE RIGHT ONTO THE LADDER.
05788  1A0D             ;===============================================================================
05789  1A0D             @MOVEBULLETRIGHT 
05790  1A0D             
05791  1A0D             ;===============================================================================
05792  1A0D             ; IF ENEMY WAS HIT, SPRITE DOESN'T MOVE RIGHT
05793  1A0D             ;===============================================================================
05794  1A0D  A2 05                 LDX #5
05795  1A0F  20 EF 33              JSR MOVESPRITERIGHT             ; MOVE SPRITES ONE PIXEL RIGHT
05796  1A12             
05797  1A12  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
05798  1A14  60                    RTS
05799  1A15             
05800  1A15             
05801  1A15             
05802  1A15             
05803  1A15             MOVEBULLETLEFT 
05804  1A15  A2 02                 LDX #2
05805  1A17  A0 04                 LDY #4
05806  1A19  BD 89 35              LDA SPRITE_POS_Y,X         ; GET ENEMY'S Y POSITION
05807  1A1C  99 68 35              STA SPRITE_POS_X,Y         ; SAVE IN BULLET Y POSITION
05808  1A1F             
05809  1A1F  A2 04                 LDX #4
05810  1A21  BD 68 35              LDA SPRITE_POS_X,X         ; LOAD THE BULLET'S X POSITION
05811  1A24  A0 01                 LDY #1
05812  1A26             ;        CLC
05813  1A26             ;        ADC ENEMY_DISTANCE
05814  1A26  C9 01                 CMP #1     ; CHECK AGAINST THE RIGHT EDGE OF THE SCREEN
05815  1A28  B0 0B                 BCS @MOVEBULLETLEFT                  ; SPRITE X IS < 35
05816  1A2A             
05817  1A2A             ; BULLET HAS TRAVELED ACROSS THE SCREEN
05818  1A2A  A2 04                 LDX #4
05819  1A2C  A0 02                 LDY #2
05820  1A2E  B9 68 35              LDA SPRITE_POS_X,Y         ; GET ENEMY SPRITE'S X POSITION
05821  1A31  9D 68 35              STA SPRITE_POS_X,X         ; SAVE IN BULLET X LOCATION
05822  1A34  60                    RTS
05823  1A35             
05824  1A35             ;===============================================================================
05825  1A35             ; IF ENEMY TOUCHES A POLE BELOW FEET THEN ENEMY SPRITE
05826  1A35             ; CANNOT MOVE RIGHT ONTO THE LADDER.
05827  1A35             ;===============================================================================
05828  1A35             @MOVEBULLETLEFT 
05829  1A35             ;===============================================================================
05830  1A35             ; IF ENEMY WAS HIT, SPRITE DOESN'T MOVE RIGHT
05831  1A35             ;===============================================================================
05832  1A35  A2 05                 LDX #5
05833  1A37  20 BD 33              JSR MOVESPRITELEFT             ; MOVE SPRITES ONE PIXEL RIGHT
05834  1A3A             
05835  1A3A  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
05836  1A3C  60                    RTS
05837  1A3D             
05838  1A3D             
05839  1A3D             
05840  1A3D             ;===============================================================================
05841  1A3D             ; DISABLE SPRITE
05842  1A3D             ;===============================================================================
05843  1A3D             DISABLEENEMYSPRITE 
05844  1A3D  AD 1B D0              LDA $D01B               ; 53275
05845  1A40  29 20                 AND #32
05846  1A42  8D 1B D0              STA $D01B
05847  1A45  60                    RTS
05848  1A46             
05849  1A46             ;-------------------------------------------------------------------------------
05850  1A46             ;===============================================================================
05851  1A46             ; ENEMY STATES
05852  1A46             ;===============================================================================
05853  1A46             ; PLAYER STATES ARE INCREMENTED BY 2 AS THEY ARE INDEXES TO LOOK UP THE ADDRESS
05854  1A46             ; OF THE STATE CODE ON THE PLAYER_STATE_JUMPTABLE.
05855  1A46             ; AN ADDRESS IS 2 BYTES (1 WORD) EGRO THE INDEX MUST INCREASE BY 2 BYTES.
05856  1A46             ;-------------------------------------------------------------------------------
05857  1A46             ENEMY_STATE_IDLE = 0     ; STANDING STILL - AWAITING INPUT
05858  1A46             ENEMY_STATE_WALK_R = 2     ; WALKING RIGHT
05859  1A46             ENEMY_STATE_WALK_L = 4     ; WALKING LEFT
05860  1A46             ENEMY_STATE_WALK_D = 6     ; WALKING DOWN
05861  1A46             ENEMY_STATE_ROPE = 8    ; CLIMB ROPE
05862  1A46             ENEMY_STATE_JUMP = 10    ; JUMPING
05863  1A46             ENEMY_STATE_PUNCH_R = 12    ; PUNCH RIGHT
05864  1A46             ENEMY_STATE_PUNCH_L = 14    ; PUNCH LEFT
05865  1A46             ENEMY_STATE_KICK_R = 16    ; KICK RIGHT
05866  1A46             ENEMY_STATE_KICK_L = 18    ; KICK LEFT
05867  1A46             ENEMY_STATE_ATTACK_RIGHT = 20  ; ATTACK RIGHT
05868  1A46             ENEMY_STATE_ATTACK_LEFT = 22   ; ATTACK RIGHT
05869  1A46             ENEMY_STATE_RIGHT_DEAD = 24    ; RIGHT ENEMY DEAD
05870  1A46             ENEMY_STATE_LEFT_DEAD =  26    ; LEFT ENEMY DEAD
05871  1A46             ENEMY_STATE_FIRING_RIGHT =  28 ; ENEMY FIRING TO RIGHT
05872  1A46             ENEMY_STATE_FIRING_LEFT =  30  ; ENEMY FIRING TO LEFT
05873  1A46             
05874  1A46             ENEMY_SUBSTATE_ENTER = 0     ; WE HAVE JUST ENTERED THIS STATE
05875  1A46             ENEMY_SUBSTATE_RUNNING = 1     ; THIS STATE IS RUNNING NORMALLY
05876  1A46             ENEMY_SUBSTAGE_RUNNING = 1
05877  1A46             
05878  1A46             ENEMY_STATE_JUMPTABLE 
05879  1A46  D8 1B                 WORD ENEMYSTATEIDLE
05880  1A48  9C 1B                 WORD ENEMYSTATEWALKR
05881  1A4A  73 1C                 WORD ENEMYSTATEWALKL
05882  1A4C  F1 1C                 WORD ENEMYSTATEWALKDOWN
05883  1A4E  F9 1D                 WORD ENEMYSTATEROPE
05884  1A50  60 1E                 WORD ENEMYSTATEJUMP
05885  1A52  97 1D                 WORD ENEMYSTATEPUNCHR
05886  1A54  C9 1D                 WORD ENEMYSTATEPUNCHL
05887  1A56  F2 1E                 WORD ENEMYSTATEKICKR
05888  1A58  1D 1F                 WORD ENEMYSTATEKICKL
05889  1A5A  19 1D                 WORD ENEMYSTATEATTACKRIGHT
05890  1A5C  37 1D                 WORD ENEMYSTATEATTACKLEFT
05891  1A5E  55 1D                 WORD ENEMYSTATERIGHTDEAD
05892  1A60  76 1D                 WORD ENEMYSTATELEFTDEAD
05893  1A62  9B 1C                 WORD ENEMYSTATEFIRINGRIGHT
05894  1A64  C7 1C                 WORD ENEMYSTATEFIRINGLEFT
05895  1A66             
05896  1A66             ENEMY_SUBSTAGE_JUMPTABLE 
05897  1A66  D8 1B                 WORD ENEMYSTATEIDLE
05898  1A68  9C 1B                 WORD ENEMYSTATEWALKR
05899  1A6A  73 1C                 WORD ENEMYSTATEWALKL
05900  1A6C  F9 1D                 WORD ENEMYSTATEROPE
05901  1A6E  60 1E                 WORD ENEMYSTATEJUMP
05902  1A70  97 1D                 WORD ENEMYSTATEPUNCHR
05903  1A72  C9 1D                 WORD ENEMYSTATEPUNCHL
05904  1A74  F2 1E                 WORD ENEMYSTATEKICKR
05905  1A76  1D 1F                 WORD ENEMYSTATEKICKL
05906  1A78  19 1D                 WORD ENEMYSTATEATTACKRIGHT
05907  1A7A  37 1D                 WORD ENEMYSTATEATTACKLEFT
05908  1A7C  55 1D                 WORD ENEMYSTATERIGHTDEAD
05909  1A7E  76 1D                 WORD ENEMYSTATELEFTDEAD
05910  1A80             
05911  1A80             ;-------------------------------------------------------------------------------
05912  1A80             ;===============================================================================
05913  1A80             ; CHANGE PLAYER STATE
05914  1A80             ;===============================================================================
05915  1A80             ; CHANGE A PLAYERS STATE
05916  1A80             ;
05917  1A80             ; A = STATE TO CHANGE TO
05918  1A80             ;
05919  1A80             ; MODIFIES A,X,ZEROPAGE_POINTER_1
05920  1A80             
05921  1A80             ;C64 BRAIN NOTES: PLAYER STATES RECORDED (ANIMATION, IDLE, RUNNING, ETC.).
05922  1A80             ; DATA IS SAVED TO PLAYER_SUBSTATE
05923  1A80             ;-------------------------------------------------------------------------------
05924  1A80             
05925  1A80             CHANGEENEMYSTATE 
05926  1A80  AA                    TAX                                            ; TRANSFER A TO X
05927  1A81  8D 67 1F              STA ENEMY_STATE                                ; STORE THE NEW PLAYER STATE
05928  1A84  A9 00                 LDA #0                                        ; SET SUBSTATE TO ENTER
05929  1A86  8D 68 1F              STA ENEMY_SUBSTATE
05930  1A89             
05931  1A89  A9 01                 LDA #1
05932  1A8B  8D C1 35              STA SPRITE_ANIM_PLAY
05933  1A8E             
05934  1A8E  BD 46 1A              LDA ENEMY_STATE_JUMPTABLE,X                    ; LOOKUP STATE TO CHANGE TO
05935  1A91  85 17                 STA ZEROPAGE_POINTER_1                         ; AND STORE IT IN ZEROPAGE_POINTER_1
05936  1A93             
05937  1A93  BD 47 1A              LDA ENEMY_STATE_JUMPTABLE + 1,X
05938  1A96  85 18                 STA ZEROPAGE_POINTER_1 + 1
05939  1A98             
05940  1A98  6C 17 00              JMP (ZEROPAGE_POINTER_1)                       ; JUMP TO STATE (TO SETUP)
05941  1A9B                        ; NOTE: THIS IS NOT A JSR.
05942  1A9B                        ; THE STATE WILL ACT AS AN EXTENSION OF
05943  1A9B                        ; THIS ROUTINE THEN RETURN
05944  1A9B             
05945  1A9B             
05946  1A9B             CHANGEENEMYSTAGE 
05947  1A9B  8D 67 1F              STA ENEMY_STATE                                ; STORE THE NEW PLAYER STATE
05948  1A9E  A9 01                 LDA #ENEMY_SUBSTAGE_RUNNING
05949  1AA0  8D 69 1F              STA ENEMY_SUBSTAGE
05950  1AA3             
05951  1AA3  A9 01                 LDA #1
05952  1AA5  8D C1 35              STA SPRITE_ANIM_PLAY
05953  1AA8  60                    RTS
05954  1AA9             
05955  1AA9             CHANGEENANIMSTATE 
05956  1AA9  A9 00                 LDA #0
05957  1AAB  8D 6D 1F              STA ENANIM_STATE
05958  1AAE  60                    RTS
05959  1AAF             
05960  1AAF             ;===============================================================================
05961  1AAF             ; UPDATE ENEMY STATE
05962  1AAF             ;===============================================================================
05963  1AAF             ; UPDATE THE PLAYER BASED ON THEIR STATE
05964  1AAF             ;-------------------------------------------------------------------------------
05965  1AAF             
05966  1AAF             UPDATEENEMYSTATE 
05967  1AAF  AE 67 1F              LDX ENEMY_STATE                        ; LOAD PLAYER STATE
05968  1AB2  BD 46 1A              LDA ENEMY_STATE_JUMPTABLE,X            ; FETCH THE STATE ADDRESS FROM THE JUMP TABLE
05969  1AB5  85 17                 STA ZEROPAGE_POINTER_1                  ; STORE IT IN ZEROPAGE_POINTER_1
05970  1AB7  BD 47 1A              LDA ENEMY_STATE_JUMPTABLE +1,X
05971  1ABA  85 18                 STA ZEROPAGE_POINTER_1 + 1
05972  1ABC  6C 17 00              JMP (ZEROPAGE_POINTER_1)                ; JUMP TO THE RIGHT STATE
05973  1ABF             
05974  1ABF             
05975  1ABF             
05976  1ABF             
05977  1ABF             SETENEMYSTATE 
05978  1ABF  AE 69 1F              LDX ENEMY_SUBSTAGE                      ; LOAD PLAYER STATE
05979  1AC2  BD 66 1A              LDA ENEMY_SUBSTAGE_JUMPTABLE,X          ; FETCH THE STATE ADDRESS FROM THE JUMP TABLE
05980  1AC5  85 17                 STA ZEROPAGE_POINTER_1                  ; STORE IT IN ZEROPAGE_POINTER_1
05981  1AC7  BD 67 1A              LDA ENEMY_SUBSTAGE_JUMPTABLE +1,X
05982  1ACA  85 18                 STA ZEROPAGE_POINTER_1 + 1
05983  1ACC  60                    RTS
05984  1ACD             
05985  1ACD             
05986  1ACD             ;===============================================================================
05987  1ACD             ; RESET ENEMY TO ALIGN WITH PLAYER'S VERTICAL POSITION
05988  1ACD             ;-------------------------------------------------------------------------------
05989  1ACD             ; THIS IS USED WHEN RELOCATING A SPRITE'S POSITION ON ANOTHER SCREEN/LEVEL
05990  1ACD             ;===============================================================================
05991  1ACD             
05992  1ACD             RESETENEMYTOPLAYERVERTICAL 
05993  1ACD  A2 00                 LDX #0
05994  1ACF  BD 89 35              LDA SPRITE_POS_Y,X              ; FIND PLAYER SPRITE Y (HEAD) POS
05995  1AD2  A2 02                 LDX #2
05996  1AD4  9D 89 35              STA SPRITE_POS_Y,X              ; SET ENEMY HEAD(Y) TO PLAYER Y
05997  1AD7  A2 01                 LDX #1
05998  1AD9  BD 89 35              LDA SPRITE_POS_Y,X              ; FIND PLAYER SPRITE Y (BODY) POS
05999  1ADC  A2 03                 LDX #3
06000  1ADE  9D 89 35              STA SPRITE_POS_Y,X              ; SET ENEMY BODY(Y) TO PLAYER Y
06001  1AE1  60                    RTS
06002  1AE2             
06003  1AE2             
06004  1AE2             ;===============================================================================
06005  1AE2             ; CHECK FOR ENEMY COLLISION BETWEEN PLAYER SPRITE
06006  1AE2             ;===============================================================================
06007  1AE2             
06008  1AE2             ENEMYTOPLAYERCOLLISION 
06009  1AE2  A9 00                 LDA #0
06010  1AE4  8D DE 35              STA ENEMY_HIT
06011  1AE7  A2 01                 LDX #1
06012  1AE9  A0 03                 LDY #3
06013  1AEB  BD 68 35              LDA SPRITE_POS_X,X
06014  1AEE  D9 68 35              CMP SPRITE_POS_X,Y
06015  1AF1  D0 06                 BNE @NOENEMYCOLLIS
06016  1AF3             
06017  1AF3             ; WHEN A ENEMY STRIKES DOWN OUR SPRITE, MAKE SURE THAT THE
06018  1AF3             ; SPRITE Y POSITION IS ALWAYS ALIGNED ON THE SAME LEVEL AS
06019  1AF3             ; THE ENEMIES.
06020  1AF3             
06021  1AF3             ;        JSR RESETENEMYTOPLAYERVERTICAL
06022  1AF3  A9 01                 LDA #1
06023  1AF5  8D DE 35              STA ENEMY_HIT
06024  1AF8  60                    RTS
06025  1AF9             @NOENEMYCOLLIS 
06026  1AF9  A9 00                 LDA #0
06027  1AFB  8D DE 35              STA ENEMY_HIT
06028  1AFE  60                    RTS
06029  1AFF             
06030  1AFF             
06031  1AFF             ; SID TIMER RANDOM SEED GENERATOR
06032  1AFF             ; USED TO PING WHEN AN ENEMY WILL WALK ONTO THE SCREEN.
06033  1AFF             
06034  1AFF             ;===============================================================================
06035  1AFF             ; ACTIVATE SID RANDOM GENERATOR TIMER
06036  1AFF             ;===============================================================================
06037  1AFF             
06038  1AFF             ENEMYRANDOMTIMER 
06039  1AFF  AD D9 35              LDA ACTIVETIMER
06040  1B02  D0 01                 BNE @BEGINCOUNT
06041  1B04             
06042  1B04             ; ACTIVETIMER=0 MEANS ENEMYVISIBLE STATE IS ON
06043  1B04  60                    RTS
06044  1B05             
06045  1B05             ; IF ACTIVETIMER >0 THEN SPRITES ARE NOT MOVING
06046  1B05             @BEGINCOUNT 
06047  1B05  A9 0A                 LDA #10
06048  1B07  8D 0E D4              STA $D40E               ; VOICE 3 FREQUENCY LOW BYTE
06049  1B0A  8D 0F D4              STA $D40F               ; VOICE 3 FREQUENCY HIGH BYTE
06050  1B0D  A9 80                 LDA #$80                ; NOICE WAVEFORM, GATE BIT OFF
06051  1B0F  8D 12 D4              STA $D412               ; VOICE 3 CONTROL REGISTER
06052  1B12             
06053  1B12             ; USING A VARIABLE TIMER
06054  1B12  EE DB 35              INC ENEMYCOUNTDOWN
06055  1B15  AD DB 35              LDA ENEMYCOUNTDOWN
06056  1B18  C9 1E                 CMP #30
06057  1B1A  B0 01                 BCS @ENEMYCDREACHED
06058  1B1C  60                    RTS
06059  1B1D             
06060  1B1D             @ENEMYCDREACHED 
06061  1B1D  AD 1B D4              LDA $D41B
06062  1B20  8D DA 35              STA ENEMYTIMER
06063  1B23  C9 F0                 CMP #240                ; > 200
06064  1B25  B0 1A                 BCS @NOTFOUND
06065  1B27  C9 F0                 CMP #240                ; <100
06066  1B29  90 08                 BCC @CHECKBELOW240
06067  1B2B  A9 00                 LDA #0
06068  1B2D  8D DB 35              STA ENEMYCOUNTDOWN
06069  1B30  4C 41 1B              JMP @NOTFOUND
06070  1B33             
06071  1B33             ; FUTURE: COULD BE USED TO PURCHASE WEAPONS (AT STORE)
06072  1B33             ; SWORD <190 = $19
06073  1B33             ; CLUB < 150 $150
06074  1B33             ; WHIP <30   = $300
06075  1B33                        
06076  1B33             
06077  1B33             ; LATER ON WE COULD SET <50 = SPRITE ABANDONMENT. MEANING SPRITE LEFT THE
06078  1B33             ; SCREEN BEFORE DECIDING TO ATTACK.
06079  1B33             ; <30 = SPRITE IS FRIENDLY, NO ATTACKS - STATIC PEDESTRIAN
06080  1B33             
06081  1B33             ; COULD ALSO HAVE A SPRITE ENTER THE SCREEN AND LEAVE QUICKLY BEFORE
06082  1B33             ; APPROACHING THE PLAYER (MAKES THEM HARDER TO KILL)
06083  1B33             
06084  1B33             @CHECKBELOW240 
06085  1B33  C9 BE                 CMP #190
06086  1B35  B0 10                 BCS SETENEMYRIGHT       ; <190
06087  1B37             ;        CMP #180
06088  1B37             ;        BCC SETENEMYFIRINGRIGHT
06089  1B37  C9 AA                 CMP #170
06090  1B39  90 17                 BCC SETENEMYLEFT        ; < 100
06091  1B3B             ;        CMP #160
06092  1B3B             ;        BCC SETENEMYFIRINGLEFT
06093  1B3B  A9 00                 LDA #0
06094  1B3D  8D DB 35              STA ENEMYCOUNTDOWN
06095  1B40  60                    RTS
06096  1B41             
06097  1B41             @NOTFOUND
06098  1B41  A9 00                 LDA #ENEMY_STATE_IDLE
06099  1B43  20 80 1A              JSR CHANGEENEMYSTATE
06100  1B46             ;        JSR ENEMYSTATEIDLE
06101  1B46  60                    RTS
06102  1B47             
06103  1B47             
06104  1B47             SETENEMYRIGHT 
06105  1B47  A9 00                 LDA #0
06106  1B49  8D DB 35              STA ENEMYCOUNTDOWN
06107  1B4C  20 5B 1B              JSR ENEMYVISIBLE
06108  1B4F  60                    RTS
06109  1B50             
06110  1B50             SETENEMYFIRINGRIGHT 
06111  1B50             ;        JSR ENEMYSTATEFIRINGRIGHT
06112  1B50  60                    RTS
06113  1B51             
06114  1B51             SETENEMYFIRINGLEFT 
06115  1B51             ;        JSR ENEMYSTATEFIRINGLEFT
06116  1B51  60                    RTS
06117  1B52             
06118  1B52             SETENEMYLEFT 
06119  1B52  A9 00                 LDA #0
06120  1B54  8D DB 35              STA ENEMYCOUNTDOWN
06121  1B57  20 5B 1B              JSR ENEMYVISIBLE
06122  1B5A  60                    RTS
06123  1B5B             
06124  1B5B             ;===============================================================================
06125  1B5B             ; ENEMY CHECK: TO DETERMINE IF A SPAWN OCCURS
06126  1B5B             ;-------------------------------------------------------------------------------
06127  1B5B             ; IF NO FLOOR EXISTS, CAN'T MOVE ENEMY SPRITE LEFT/RIGHT
06128  1B5B             ;===============================================================================
06129  1B5B             
06130  1B5B             ENEMYVISIBLE 
06131  1B5B  A2 03                 LDX #3
06132  1B5D  20 ED 37              JSR ENEMYCHECKBLOCKUNDER
06133  1B60  AD C2 0A              LDA COLLIDER_ATTR
06134  1B63  C9 10                 CMP #COLL_FLOOR
06135  1B65  F0 01                 BEQ @BEGINMOVEROUTINE
06136  1B67             
06137  1B67             ;        JSR RESETENEMYTOPLAYERVERTICAL
06138  1B67             ; NO FLOOR WAS FOUND UNDER SPRITE'S FEET, SO WE EXIT.
06139  1B67             @CANTMOVE
06140  1B67  60                    RTS
06141  1B68             
06142  1B68             @BEGINMOVEROUTINE 
06143  1B68  A9 00                 LDA #0
06144  1B6A  8D D9 35              STA ACTIVETIMER
06145  1B6D  20 71 1B              JSR ENEMYACTIONSTATE
06146  1B70  60                    RTS
06147  1B71             
06148  1B71             
06149  1B71             ;===============================================================================
06150  1B71             ; ENEMY DIRECTION MOVEMENT DETERMINATION
06151  1B71             ;===============================================================================
06152  1B71             ; THIS IS USED TO FIRST RESET THE ENEMY TO PLAYER VERTICAL
06153  1B71             ; POSITION AND THEN SEE WHERE PLAYER IS IN RELATION TO THE
06154  1B71             ; ENEMY SPRITE AND MOVE TOWARDS THE PLAYER.
06155  1B71             ;-------------------------------------------------------------------------------
06156  1B71             ;===============================================================================
06157  1B71             ; ENEMY ACTION STATE
06158  1B71             ;===============================================================================
06159  1B71             
06160  1B71             ENEMYACTIONSTATE 
06161  1B71             
06162  1B71             ; CHECK IF SPRITE IS ON THE FLOOR AT START SO HE WON'T APPEAR IN THE AIR
06163  1B71             ;        JSR RESETENEMYTOPLAYERVERTICAL
06164  1B71             
06165  1B71             ; CHECK DIRECTION ENEMY MOVES BASED ON WHERE PLAYER IS.
06166  1B71             ; IF ENEMY IS IN FRONT OF PLAYER, ENEMY MOVES LEFT.
06167  1B71             ; IF ENEMY IS BEHIND PLAYER, ENEMY MOVES RIGHT.
06168  1B71             
06169  1B71             ; HOW FAR WILL SPRITE MOVE WITHIN TIMER?
06170  1B71             ;        JSR ENEMYFIRERIGHTTIMER
06171  1B71             
06172  1B71             ; DON'T MOVE ENEMY TO RIGHT UNTIL FIRE_RIGHT=0
06173  1B71             ;        LDA FIRE_RIGHT
06174  1B71             ;        BNE @EXITSTAGE
06175  1B71             
06176  1B71  AD 93 1F              LDA ENEMY_BULLETS
06177  1B74  F0 00                 BEQ @MOVEENSPRITE
06178  1B76                        ;JSR MOVEBULLETRIGHT
06179  1B76             
06180  1B76             @MOVEENSPRITE 
06181  1B76  A2 02                 LDX #2
06182  1B78  A0 01                 LDY #1
06183  1B7A  BD 68 35              LDA SPRITE_POS_X,X           ; ENEMY SPRITE X POSITION
06184  1B7D             ;        SEC
06185  1B7D             ;        SBC ENEMY_DISTANCE
06186  1B7D  D9 68 35              CMP SPRITE_POS_X,Y           ; PLAYER SPRITE X POSITION
06187  1B80  B0 14                 BCS @MOVINGDIRLEFTSPRITE
06188  1B82             
06189  1B82  BD 68 35              LDA SPRITE_POS_X,X
06190  1B85             ;        CLC
06191  1B85             ;        ADC ENEMY_DISTANCE
06192  1B85  D9 68 35              CMP SPRITE_POS_X,Y           ; PLAYER SPRITE X POSITION
06193  1B88  90 06                 BCC @MOVINGDIRRIGHTSPRITE
06194  1B8A             
06195  1B8A             ; GO BACK AND START THE TIMER AGAIN, WHICH DETERMINES WHICH SPRITE
06196  1B8A             ; MOVES ON RANDOM.
06197  1B8A             @EXITSTAGE 
06198  1B8A  A9 01                 LDA #1
06199  1B8C  8D D9 35              STA ACTIVETIMER
06200  1B8F  60                    RTS
06201  1B90             
06202  1B90             @MOVINGDIRRIGHTSPRITE 
06203  1B90             ; CHECK IF WE ARE COMING FROM THE LEFT SIDE
06204  1B90  A9 02                 LDA #ENEMY_STATE_WALK_R
06205  1B92  20 80 1A              JSR CHANGEENEMYSTATE
06206  1B95             ;        JSR ENEMYSTATEWALKR
06207  1B95  60                    RTS
06208  1B96             
06209  1B96             ; WHEN SPRITE CONTACTS A LADDER/POLE HE STARTS MOVING LEFT
06210  1B96             @MOVINGDIRLEFTSPRITE 
06211  1B96  A9 04                 LDA #ENEMY_STATE_WALK_L
06212  1B98  20 80 1A              JSR CHANGEENEMYSTATE
06213  1B9B             ;        JSR ENEMYSTATEWALKL
06214  1B9B  60                    RTS
06215  1B9C             
06216  1B9C             
06217  1B9C             
06218  1B9C             ;===============================================================================
06219  1B9C             ; ENEMY STATE WALK RIGHT
06220  1B9C             ;===============================================================================
06221  1B9C             
06222  1B9C             ENEMYSTATEWALKR 
06223  1B9C  A9 01                 LDA #1
06224  1B9E  8D C1 35              STA SPRITE_ANIM_PLAY                   ; PAUSE OUR ANIMATION
06225  1BA1             
06226  1BA1  AD 68 1F              LDA ENEMY_SUBSTATE
06227  1BA4  D0 13                 BNE @RUNNING
06228  1BA6             
06229  1BA6  A2 02                 LDX #2                                 ; USE SPRITE NUMBER 2
06230  1BA8  A9 58                 LDA #<ANIM_ENEMY_WALK_R                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06231  1BAA  85 17                 STA ZEROPAGE_POINTER_1
06232  1BAC  A9 36                 LDA #>ANIM_ENEMY_WALK_R
06233  1BAE  85 18                 STA ZEROPAGE_POINTER_1 + 1
06234  1BB0             
06235  1BB0  20 FD 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06236  1BB3  A9 01                 LDA #1                                 ; SET SUBSTATE TO RUNNING
06237  1BB5  8D 68 1F              STA ENEMY_SUBSTATE
06238  1BB8  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06239  1BB9             @RUNNING
06240  1BB9  A2 02                 LDX #2
06241  1BBB  20 96 18              JSR MOVEENEMYRIGHT              ; = 0 SO WE CAN MOVE THE SPRITE DOWN
06242  1BBE  A2 03                 LDX #3
06243  1BC0  20 96 18              JSR MOVEENEMYRIGHT
06244  1BC3  60                    RTS
06245  1BC4             
06246  1BC4             ; ENEMY STATE IDLE
06247  1BC4             ;===============================================================================
06248  1BC4             
06249  1BC4             ENEMYSTATEBULLET 
06250  1BC4  A9 01                 LDA #1
06251  1BC6  8D C1 35              STA SPRITE_ANIM_PLAY                 ; PAUSE OUR ANIMATION
06252  1BC9             
06253  1BC9             ;        LDA ENEMY_SUBSTATE
06254  1BC9             ;        BNE @RUNNING
06255  1BC9             
06256  1BC9  A2 02                 LDX #2                               ; USE SPRITE NUMBER 2
06257  1BCB  A9 83                 LDA #<ANIM_ENEMY_BULLET                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06258  1BCD  85 17                 STA ZEROPAGE_POINTER_1
06259  1BCF  A9 36                 LDA #>ANIM_ENEMY_BULLET
06260  1BD1  85 18                 STA ZEROPAGE_POINTER_1 + 1
06261  1BD3             
06262  1BD3  20 FD 34              JSR INITSPRITEANIM                   ; INITIALIZE THE ANIMATION
06263  1BD6             ;        LDA #1                               ; SET SUBSTATE TO RUNNING
06264  1BD6             ;        STA ENEMY_SUBSTATE
06265  1BD6  60                    RTS                                  ; WAIT TILL NEXT FRAME TO START
06266  1BD7             @RUNNING
06267  1BD7  60                    RTS
06268  1BD8             
06269  1BD8             ;===============================================================================
06270  1BD8             ; ENEMY STATE IDLE
06271  1BD8             ;===============================================================================
06272  1BD8             
06273  1BD8             ENEMYSTATEIDLE 
06274  1BD8  A9 01                 LDA #1
06275  1BDA  8D C1 35              STA SPRITE_ANIM_PLAY                 ; PAUSE OUR ANIMATION
06276  1BDD             
06277  1BDD  AD 68 1F              LDA ENEMY_SUBSTATE
06278  1BE0  D0 13                 BNE @RUNNING
06279  1BE2             
06280  1BE2  A2 02                 LDX #2                               ; USE SPRITE NUMBER 2
06281  1BE4  A9 54                 LDA #<ANIM_ENEMY_IDLE                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06282  1BE6  85 17                 STA ZEROPAGE_POINTER_1
06283  1BE8  A9 36                 LDA #>ANIM_ENEMY_IDLE
06284  1BEA  85 18                 STA ZEROPAGE_POINTER_1 + 1
06285  1BEC             
06286  1BEC  20 FD 34              JSR INITSPRITEANIM                   ; INITIALIZE THE ANIMATION
06287  1BEF  A9 01                 LDA #1                               ; SET SUBSTATE TO RUNNING
06288  1BF1  8D 68 1F              STA ENEMY_SUBSTATE
06289  1BF4  60                    RTS                                  ; WAIT TILL NEXT FRAME TO START
06290  1BF5             @RUNNING
06291  1BF5  60                    RTS
06292  1BF6             
06293  1BF6             
06294  1BF6             
06295  1BF6             ;===============================================================================
06296  1BF6             ; ENEMY FIRE RIGHT TIMER
06297  1BF6             ;-------------------------------------------------------------------------------
06298  1BF6             ; THIS IS USED TO CHECK WHEN TO SHOOT AT THE PLAYER
06299  1BF6             ; WILL BE USED LATER TO HAVE AN ENEMY APPROACH THE
06300  1BF6             ; PLAYER, STOP AND SHOOT. MOVE AGAIN, STOP AND SHOOT, AND REPEAT
06301  1BF6             ;===============================================================================
06302  1BF6             
06303  1BF6             ENEMYFIRERIGHTTIMER 
06304  1BF6  A9 0A                 LDA #10
06305  1BF8  8D 0E D4              STA $D40E               ; VOICE 3 FREQUENCY LOW BYTE
06306  1BFB  8D 0F D4              STA $D40F               ; VOICE 3 FREQUENCY HIGH BYTE
06307  1BFE  A9 80                 LDA #$80                ; NOISE WAVEFORM, GATE BIT OFF
06308  1C00  8D 12 D4              STA $D412               ; VOICE 3 CONTROL REGISTER
06309  1C03             
06310  1C03  EE DC 35              INC ENEMYFIRECD
06311  1C06  AD DC 35              LDA ENEMYFIRECD
06312  1C09  C9 50                 CMP #80
06313  1C0B  B0 01                 BCS @ENEMYTIMERCOMPLETE
06314  1C0D  60                    RTS
06315  1C0E             
06316  1C0E             @ENEMYTIMERCOMPLETE 
06317  1C0E  AD 1B D4              LDA $D41B
06318  1C11  8D DA 35              STA ENEMYTIMER
06319  1C14  C9 F0                 CMP #240
06320  1C16  B0 04                 BCS @TIMERNOTFOUND
06321  1C18  C9 96                 CMP #150
06322  1C1A  B0 0B                 BCS @WAITTOFIRE
06323  1C1C             
06324  1C1C             @TIMERNOTFOUND 
06325  1C1C  A9 00                 LDA #0
06326  1C1E  8D DC 35              STA ENEMYFIRECD
06327  1C21  A9 03                 LDA #3
06328  1C23  8D 98 1F              STA PLAYER_DIRECTION
06329  1C26  60                    RTS
06330  1C27             
06331  1C27             ; ALLOWS A DELAY TO WAIT FOR ENEMY FIRE (ENABLING MORE WALKING)
06332  1C27             @WAITTOFIRE 
06333  1C27                        ;JSR MOVEBULLETLEFT
06334  1C27  CE 93 1F              DEC ENEMY_BULLETS
06335  1C2A  AD 93 1F              LDA ENEMY_BULLETS
06336  1C2D  F0 01                 BEQ @READYTOFIRE
06337  1C2F  60                    RTS
06338  1C30             
06339  1C30             @READYTOFIRE 
06340  1C30  A9 05                 LDA #5
06341  1C32  8D 97 1F              STA WAITTOFIRECD
06342  1C35  8D 93 1F              STA ENEMY_BULLETS
06343  1C38                        
06344  1C38  AD 96 1F              LDA FIRINGHOLDCD
06345  1C3B  D0 1F                 BNE FIRINGHOLDSTATE
06346  1C3D             
06347  1C3D             ;        LDA #ENEMY_STATE_FIRING_RIGHT
06348  1C3D             ;        JSR CHANGEENANIMSTATE
06349  1C3D             ;        JSR CHANGEENEMYSTATE
06350  1C3D  AD 98 1F              LDA PLAYER_DIRECTION
06351  1C40  C9 01                 CMP #1
06352  1C42  D0 0C                 BNE @SHOOTTOLEFT
06353  1C44             
06354  1C44             @SHOOTTORIGHT 
06355  1C44  20 9B 1C              JSR ENEMYSTATEFIRINGRIGHT
06356  1C47  A9 01                 LDA #1
06357  1C49  8D 94 1F              STA FIRE_RIGHT
06358  1C4C  20 5C 1C              JSR FIRINGHOLDSTATE
06359  1C4F  60                    RTS
06360  1C50             
06361  1C50             ;@ENEMYFIRINGLEFT
06362  1C50             @SHOOTTOLEFT 
06363  1C50             ;        LDA #ENEMY_STATE_FIRING_LEFT
06364  1C50             ;        JSR CHANGEENANIMSTATE
06365  1C50             ;        JSR CHANGEENEMYSTATE
06366  1C50  20 C7 1C              JSR ENEMYSTATEFIRINGLEFT
06367  1C53  A9 01                 LDA #1
06368  1C55  8D 95 1F              STA FIRE_LEFT
06369  1C58  20 5C 1C              JSR FIRINGHOLDSTATE
06370  1C5B  60                    RTS
06371  1C5C             
06372  1C5C             FIRINGHOLDSTATE 
06373  1C5C  EE 96 1F              INC FIRINGHOLDCD
06374  1C5F  AD 96 1F              LDA FIRINGHOLDCD
06375  1C62  C9 04                 CMP #4
06376  1C64  B0 01                 BCS @FIREHOLDDONE
06377  1C66  60                    RTS
06378  1C67             
06379  1C67             @FIREHOLDDONE 
06380  1C67  A9 00                 LDA #0
06381  1C69  8D 94 1F              STA FIRE_RIGHT
06382  1C6C  8D 95 1F              STA FIRE_LEFT
06383  1C6F  8D 96 1F              STA FIRINGHOLDCD
06384  1C72  60                    RTS
06385  1C73             
06386  1C73             
06387  1C73             
06388  1C73             ;===============================================================================
06389  1C73             ; ENEMY STATE WALK LEFT
06390  1C73             ;===============================================================================
06391  1C73             
06392  1C73             ENEMYSTATEWALKL 
06393  1C73  A9 01                 LDA #1
06394  1C75  8D C1 35              STA SPRITE_ANIM_PLAY                   ; START OUR ANIMATION
06395  1C78             
06396  1C78  AD 68 1F              LDA ENEMY_SUBSTATE
06397  1C7B  D0 13                 BNE @RUNNING
06398  1C7D             
06399  1C7D  A2 02                 LDX #2                                 ; USE SPRITE NUMBER 2
06400  1C7F  A9 5C                 LDA #<ANIM_ENEMY_WALK_L                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06401  1C81  85 17                 STA ZEROPAGE_POINTER_1
06402  1C83  A9 36                 LDA #>ANIM_ENEMY_WALK_L
06403  1C85  85 18                 STA ZEROPAGE_POINTER_1 + 1
06404  1C87             
06405  1C87  20 FD 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06406  1C8A  A9 01                 LDA #1                                 ; SET SUBSTATE TO RUNNING
06407  1C8C  8D 68 1F              STA ENEMY_SUBSTATE
06408  1C8F  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06409  1C90             
06410  1C90             @RUNNING
06411  1C90  A2 02                 LDX #2
06412  1C92  20 FF 18              JSR MOVEENEMYLEFT              ; = 0 SO WE CAN MOVE THE SPRITE DOWN
06413  1C95  A2 03                 LDX #3
06414  1C97  20 FF 18              JSR MOVEENEMYLEFT
06415  1C9A  60                    RTS
06416  1C9B             
06417  1C9B             
06418  1C9B             
06419  1C9B             ;===============================================================================
06420  1C9B             ; ENEMY STATE FIRING RIGHT
06421  1C9B             ;===============================================================================
06422  1C9B             
06423  1C9B             ENEMYSTATEFIRINGRIGHT 
06424  1C9B  A9 01                 LDA #1
06425  1C9D  8D C1 35              STA SPRITE_ANIM_PLAY                    ; START OUR ANIMATION
06426  1CA0             
06427  1CA0  A2 02                 LDX #2                                  ; USE SPRITE NUMBER 2
06428  1CA2  A9 65                 LDA #<ANIM_ENEMY_FIRING_RIGHT           ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06429  1CA4  85 17                 STA ZEROPAGE_POINTER_1
06430  1CA6  A9 36                 LDA #>ANIM_ENEMY_FIRING_RIGHT
06431  1CA8  85 18                 STA ZEROPAGE_POINTER_1 + 1
06432  1CAA             
06433  1CAA  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
06434  1CAD  60                    RTS
06435  1CAE             
06436  1CAE             @RUNNING
06437  1CAE  60                    RTS
06438  1CAF             
06439  1CAF  A9 00                 LDA #ENEMY_STATE_IDLE
06440  1CB1  4C D1 11              JMP CHANGEPLAYERSTATE
06441  1CB4             
06442  1CB4  AD 67 3C              LDA JOY_X
06443  1CB7  F0 07                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
06444  1CB9  30 05                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
06445  1CBB  A9 00                 LDA #ENEMY_STATE_IDLE
06446  1CBD  4C D1 11              JMP CHANGEPLAYERSTATE
06447  1CC0             
06448  1CC0             @IDLE
06449  1CC0  60                    RTS
06450  1CC1             
06451  1CC1  A9 00                 LDA #ENEMY_STATE_IDLE
06452  1CC3  4C D1 11              JMP CHANGEPLAYERSTATE
06453  1CC6  60                    RTS
06454  1CC7             
06455  1CC7             
06456  1CC7             
06457  1CC7             ;===============================================================================
06458  1CC7             ; ENEMY STATE FIRING LEFT
06459  1CC7             ;===============================================================================
06460  1CC7             
06461  1CC7             ENEMYSTATEFIRINGLEFT 
06462  1CC7  A9 01                 LDA #1
06463  1CC9  8D C1 35              STA SPRITE_ANIM_PLAY                    ; START OUR ANIMATION
06464  1CCC             
06465  1CCC  A2 02                 LDX #2                                  ; USE SPRITE NUMBER 2
06466  1CCE  A9 69                 LDA #<ANIM_ENEMY_FIRING_LEFT            ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06467  1CD0  85 17                 STA ZEROPAGE_POINTER_1
06468  1CD2  A9 36                 LDA #>ANIM_ENEMY_FIRING_LEFT
06469  1CD4  85 18                 STA ZEROPAGE_POINTER_1 + 1
06470  1CD6             
06471  1CD6  20 FD 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06472  1CD9  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06473  1CDA             
06474  1CDA             @RUNNING
06475  1CDA  AD 67 3C              LDA JOY_X
06476  1CDD  F0 08                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
06477  1CDF  30 06                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
06478  1CE1  60                    RTS
06479  1CE2  A9 00                 LDA #ENEMY_STATE_IDLE
06480  1CE4  4C D1 11              JMP CHANGEPLAYERSTATE
06481  1CE7             
06482  1CE7             @IDLE
06483  1CE7  60                    RTS
06484  1CE8             
06485  1CE8  A9 00                 LDA #ENEMY_STATE_IDLE
06486  1CEA  4C D1 11              JMP CHANGEPLAYERSTATE
06487  1CED  20 D7 0B              JSR WAITFRAME
06488  1CF0  60                    RTS
06489  1CF1             
06490  1CF1             
06491  1CF1             
06492  1CF1             ;===============================================================================
06493  1CF1             ; ENEMY STATE WALK DOWN
06494  1CF1             ;===============================================================================
06495  1CF1             
06496  1CF1             ENEMYSTATEWALKDOWN 
06497  1CF1  A9 01                 LDA #1
06498  1CF3  8D C1 35              STA SPRITE_ANIM_PLAY                   ; START OUR ANIMATION
06499  1CF6             
06500  1CF6  AD 69 1F              LDA ENEMY_SUBSTAGE
06501  1CF9  D0 13                 BNE @RUNNING
06502  1CFB             
06503  1CFB  A2 02                 LDX #2                                 ; USE SPRITE NUMBER 2
06504  1CFD  A9 60                 LDA #<ANIM_ENEMY_WALK_D                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06505  1CFF  85 17                 STA ZEROPAGE_POINTER_1
06506  1D01  A9 36                 LDA #>ANIM_ENEMY_WALK_D
06507  1D03  85 18                 STA ZEROPAGE_POINTER_1 + 1
06508  1D05             
06509  1D05  20 FD 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06510  1D08  A9 01                 LDA #ENEMY_SUBSTAGE_RUNNING            ; SET SUBSTATE TO RUNNING
06511  1D0A  8D 69 1F              STA ENEMY_SUBSTAGE
06512  1D0D  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06513  1D0E             
06514  1D0E             @RUNNING
06515  1D0E  A2 02                 LDX #2
06516  1D10  20 64 19              JSR MOVEENEMYDOWN              ; = 0 SO WE CAN MOVE THE SPRITE DOWN
06517  1D13  A2 03                 LDX #3
06518  1D15  20 64 19              JSR MOVEENEMYDOWN
06519  1D18  60                    RTS
06520  1D19             
06521  1D19             
06522  1D19             
06523  1D19             ;===============================================================================
06524  1D19             ; ENEMY STATE ATTACK RIGHT
06525  1D19             ;-------------------------------------------------------------------------------
06526  1D19             ; USED WHEN ENEMY ATTACKS THE PLAYER TO THE RIGHT
06527  1D19             ;===============================================================================
06528  1D19             
06529  1D19             ENEMYSTATEATTACKRIGHT 
06530  1D19  A9 01                 LDA #1
06531  1D1B  8D C1 35              STA SPRITE_ANIM_PLAY                    ; PAUSE OUR ANIMATION
06532  1D1E             
06533  1D1E  AD 68 1F              LDA ENEMY_SUBSTATE
06534  1D21  D0 13                 BNE @RUNNING
06535  1D23             
06536  1D23  A2 02                 LDX #2                                  ; USE SPRITE NUMBER 2
06537  1D25  A9 6D                 LDA #<ANIM_ENEMY_ATTACK_RIGHT           ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06538  1D27  85 17                 STA ZEROPAGE_POINTER_1
06539  1D29  A9 36                 LDA #>ANIM_ENEMY_ATTACK_RIGHT
06540  1D2B  85 18                 STA ZEROPAGE_POINTER_1 + 1
06541  1D2D             
06542  1D2D  20 FD 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06543  1D30  A9 01                 LDA #1                                 ; SET SUBSTATE TO RUNNING
06544  1D32  8D 68 1F              STA ENEMY_SUBSTATE
06545  1D35  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06546  1D36             @RUNNING
06547  1D36  60                    RTS
06548  1D37             
06549  1D37             
06550  1D37             ;===============================================================================
06551  1D37             ; ENEMY STATE ATTACK LEFT
06552  1D37             ;-------------------------------------------------------------------------------
06553  1D37             ;===============================================================================
06554  1D37             
06555  1D37             ENEMYSTATEATTACKLEFT 
06556  1D37  A9 01                 LDA #1
06557  1D39  8D C1 35              STA SPRITE_ANIM_PLAY                   ; PAUSE OUR ANIMATION
06558  1D3C             
06559  1D3C  AD 68 1F              LDA ENEMY_SUBSTATE
06560  1D3F  D0 13                 BNE @RUNNING
06561  1D41             
06562  1D41  A2 02                 LDX #2                                 ; USE SPRITE NUMBER 2
06563  1D43  A9 71                 LDA #<ANIM_ENEMY_ATTACK_LEFT           ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06564  1D45  85 17                 STA ZEROPAGE_POINTER_1
06565  1D47  A9 36                 LDA #>ANIM_ENEMY_ATTACK_LEFT
06566  1D49  85 18                 STA ZEROPAGE_POINTER_1 + 1
06567  1D4B             
06568  1D4B  20 FD 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06569  1D4E  A9 01                 LDA #1                                 ; SET SUBSTATE TO RUNNING
06570  1D50  8D 68 1F              STA ENEMY_SUBSTATE
06571  1D53  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06572  1D54             @RUNNING
06573  1D54  60                    RTS
06574  1D55             
06575  1D55             
06576  1D55             ;===============================================================================
06577  1D55             ; ENEMY STATE RIGHT DEAD
06578  1D55             ;===============================================================================
06579  1D55             
06580  1D55             ENEMYSTATERIGHTDEAD 
06581  1D55  A9 01                 LDA #1
06582  1D57  8D C1 35              STA SPRITE_ANIM_PLAY                    ; START OUR ANIMATION
06583  1D5A             
06584  1D5A  AD 68 1F              LDA ENEMY_SUBSTATE
06585  1D5D  D0 13                 BNE @RUNNING
06586  1D5F             
06587  1D5F  A2 02                 LDX #2                                  ; USE SPRITE NUMBER 2
06588  1D61  A9 75                 LDA #<ANIM_ENEMY_RIGHT_DEAD             ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06589  1D63  85 17                 STA ZEROPAGE_POINTER_1
06590  1D65  A9 36                 LDA #>ANIM_ENEMY_RIGHT_DEAD
06591  1D67  85 18                 STA ZEROPAGE_POINTER_1 + 1
06592  1D69             
06593  1D69  20 FD 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06594  1D6C  A9 01                 LDA #ENEMY_SUBSTAGE_RUNNING            ; SET SUBSTATE TO RUNNING
06595  1D6E  8D 68 1F              STA ENEMY_SUBSTATE
06596  1D71  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06597  1D72             
06598  1D72             @RUNNING
06599  1D72  20 D7 0B              JSR WAITFRAME
06600  1D75  60                    RTS
06601  1D76             
06602  1D76             
06603  1D76             
06604  1D76             ;===============================================================================
06605  1D76             ; ENEMY STATE LEFT DEAD
06606  1D76             ;===============================================================================
06607  1D76             
06608  1D76             ENEMYSTATELEFTDEAD 
06609  1D76  A9 01                 LDA #1
06610  1D78  8D C1 35              STA SPRITE_ANIM_PLAY                    ; START OUR ANIMATION
06611  1D7B             
06612  1D7B  AD 69 1F              LDA ENEMY_SUBSTAGE
06613  1D7E  D0 13                 BNE @RUNNING
06614  1D80             
06615  1D80  A2 02                 LDX #2                                  ; USE SPRITE NUMBER 2
06616  1D82  A9 7A                 LDA #<ANIM_ENEMY_LEFT_DEAD              ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06617  1D84  85 17                 STA ZEROPAGE_POINTER_1
06618  1D86  A9 36                 LDA #>ANIM_ENEMY_LEFT_DEAD
06619  1D88  85 18                 STA ZEROPAGE_POINTER_1 + 1
06620  1D8A             
06621  1D8A  20 FD 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06622  1D8D  A9 01                 LDA #ENEMY_SUBSTAGE_RUNNING            ; SET SUBSTATE TO RUNNING
06623  1D8F  8D 69 1F              STA ENEMY_SUBSTAGE
06624  1D92  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06625  1D93             
06626  1D93             @RUNNING
06627  1D93  20 D7 0B              JSR WAITFRAME
06628  1D96  60                    RTS
06629  1D97             
06630  1D97             
06631  1D97             
06632  1D97             ;===============================================================================
06633  1D97             ; ENEMY STATE PUNCH RIGHT
06634  1D97             ;-------------------------------------------------------------------------------
06635  1D97             
06636  1D97             ; IMPORTANT: CHECKS WHEN THE PLAYER CAN MOVE LEFT OR RIGHT. NO OTHER STATE OR
06637  1D97             ; SUBROUTINE DOES THIS.
06638  1D97             
06639  1D97             ; THE PLAYER IS STANDING STILL AND WAITING INPUT.
06640  1D97             ; POSSIBLE OPTIMIZATIONS WE ARE DOUBLECHECKING CHECKBLOCKUNDER AND CHECKDOWN,
06641  1D97             ; WE CAN CHECK ONCE AND STORE THOSE IN A TEMP VARIABLE AND LOOK THEM UP
06642  1D97             ; IF NEEDED.
06643  1D97             ;-------------------------------------------------------------------------------
06644  1D97             
06645  1D97             ENEMYSTATEPUNCHR 
06646  1D97  AD 68 1F              LDA ENEMY_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
06647  1D9A  D0 13                 BNE @RUNNING
06648  1D9C             
06649  1D9C  A2 00                 LDX #0
06650  1D9E  A9 33                 LDA #<ANIM_PLAYER_PUNCH_R             ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
06651  1DA0  85 17                 STA ZEROPAGE_POINTER_1
06652  1DA2  A9 36                 LDA #>ANIM_PLAYER_PUNCH_R
06653  1DA4  85 18                 STA ZEROPAGE_POINTER_1 + 1
06654  1DA6             
06655  1DA6  20 FD 34              JSR INITSPRITEANIM                     ; SETUP THE ANIMATION FOR IDLE
06656  1DA9  A9 01                 LDA #1                                 ; SET THE SUBSTATE TO RUNNING
06657  1DAB  8D 68 1F              STA ENEMY_SUBSTATE
06658  1DAE  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06659  1DAF             
06660  1DAF             @RUNNING
06661  1DAF  20 AE 10              JSR JOYSTICKREADY
06662  1DB2  F0 01                 BEQ @INPUT
06663  1DB4  60                    RTS                                    ; NOT READY FOR INPUT, WE RETURN
06664  1DB5             
06665  1DB5             @INPUT     ; PROCESS VALID JOYSTICK INPUT
06666  1DB5  F0 00                 BEQ @JOYCHECK
06667  1DB7             
06668  1DB7             @JOYCHECK
06669  1DB7             
06670  1DB7  AD 67 3C              LDA JOY_X
06671  1DBA  F0 03                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
06672  1DBC  30 01                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
06673  1DBE             
06674  1DBE             @DONEJOY
06675  1DBE  60                    RTS
06676  1DBF             @IDLE
06677  1DBF  A9 00                 LDA #0
06678  1DC1  8D C1 35              STA SPRITE_ANIM_PLAY            ; PAUSE OUR ANIMATION
06679  1DC4             
06680  1DC4  A9 00                 LDA #ENEMY_STATE_IDLE
06681  1DC6  4C 80 1A              JMP CHANGEENEMYSTATE
06682  1DC9             
06683  1DC9             
06684  1DC9             
06685  1DC9             ;===============================================================================
06686  1DC9             ; ENEMY STATE PUNCH LEFT
06687  1DC9             ;-------------------------------------------------------------------------------
06688  1DC9             
06689  1DC9             ; IMPORTANT: CHECKS WHEN THE PLAYER CAN MOVE LEFT OR RIGHT. NO OTHER STATE OR
06690  1DC9             ; SUBROUTINE DOES THIS.
06691  1DC9             
06692  1DC9             ; THE PLAYER IS STANDING STILL AND WAITING INPUT.
06693  1DC9             ; POSSIBLE OPTIMIZATIONS WE ARE DOUBLECHECKING CHECKBLOCKUNDER AND CHECKDOWN,
06694  1DC9             ; WE CAN CHECK ONCE AND STORE THOSE IN A TEMP VARIABLE AND LOOK THEM UP
06695  1DC9             ; IF NEEDED.
06696  1DC9             ;-------------------------------------------------------------------------------
06697  1DC9             
06698  1DC9             ENEMYSTATEPUNCHL 
06699  1DC9  AD 68 1F              LDA ENEMY_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
06700  1DCC  D0 13                 BNE @RUNNING
06701  1DCE             
06702  1DCE  A2 00                 LDX #0
06703  1DD0  A9 37                 LDA #<ANIM_PLAYER_PUNCH_L              ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
06704  1DD2  85 17                 STA ZEROPAGE_POINTER_1
06705  1DD4  A9 36                 LDA #>ANIM_PLAYER_PUNCH_L
06706  1DD6  85 18                 STA ZEROPAGE_POINTER_1 + 1
06707  1DD8             
06708  1DD8  20 FD 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
06709  1DDB  A9 01                 LDA #1                                  ; SET THE SUBSTATE TO RUNNING
06710  1DDD  8D 68 1F              STA ENEMY_SUBSTATE
06711  1DE0  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06712  1DE1             
06713  1DE1             @RUNNING
06714  1DE1  A9 01                 LDA #1
06715  1DE3  8D C1 35              STA SPRITE_ANIM_PLAY                    ; BEGIN OUR ANIMATION WHEN SET TO ONE
06716  1DE6             
06717  1DE6  20 AE 10              JSR JOYSTICKREADY
06718  1DE9  F0 01                 BEQ @INPUT
06719  1DEB  60                    RTS                                     ; NOT READY FOR INPUT, WE RETURN
06720  1DEC             
06721  1DEC             @INPUT     ; PROCESS VALID JOYSTICK INPUT
06722  1DEC             
06723  1DEC  AD 67 3C              LDA JOY_X
06724  1DEF  F0 07                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
06725  1DF1  30 05                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
06726  1DF3             
06727  1DF3             @DONEJOY
06728  1DF3  A9 00                 LDA #ENEMY_STATE_IDLE
06729  1DF5  4C 80 1A              JMP CHANGEENEMYSTATE
06730  1DF8             @IDLE
06731  1DF8  60                    RTS
06732  1DF9             
06733  1DF9             
06734  1DF9             
06735  1DF9             ;===============================================================================
06736  1DF9             ; ENEMY STATE ROPE
06737  1DF9             ;-------------------------------------------------------------------------------
06738  1DF9             ; CLIMBING A ROPE UP
06739  1DF9             ;===============================================================================
06740  1DF9             
06741  1DF9             ENEMYSTATEROPE 
06742  1DF9  AD 68 1F              LDA ENEMY_SUBSTATE                  ; TEST FOR FIRST RUN
06743  1DFC  D0 13                 BNE @RUNNING
06744  1DFE             
06745  1DFE  A2 02                 LDX #2                              ; USE SPRITE NUMBER 0
06746  1E00  A9 7F                 LDA #<ANIM_ENEMY_CLIMB_ROPE         ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06747  1E02  85 17                 STA ZEROPAGE_POINTER_1
06748  1E04  A9 36                 LDA #>ANIM_ENEMY_CLIMB_ROPE
06749  1E06  85 18                 STA ZEROPAGE_POINTER_1 + 1
06750  1E08             
06751  1E08  20 FD 34              JSR INITSPRITEANIM                  ; INITIALIZE THE ANIMATION
06752  1E0B  A9 01                 LDA #1                              ; SET SUBSTATE TO RUNNING
06753  1E0D  8D 68 1F              STA ENEMY_SUBSTATE
06754  1E10  60                    RTS                                 ; CHANGE TAKES EFFECT NEXT FRAME
06755  1E11             
06756  1E11             @RUNNING
06757  1E11  AD 90 1F              LDA ENEMY_TIMER                 ; A TIMER THAT SLOWS DOWN THE ENEMY MOVEMENT
06758  1E14  D0 43                 BNE @INPUT                      ; IF AT ZERO, THEN THE LOOP IS OVER
06759  1E16             
06760  1E16  A9 08                 LDA #8                          ; THIS AREA SUMMONS A RASTER VALUE TO
06761  1E18  8D 92 1F              STA ENEMY_SPEED                 ; SWITCH THE SPEED BY USING 'AND'
06762  1E1B             
06763  1E1B             
06764  1E1B             ;======= NEW CHECK LINES ======
06765  1E1B  AD 99 35              LDA SPRITE_CHAR_POS_Y           ; CHECK THE DOWNWARD Y MOVEMENT
06766  1E1E  C9 0A                 CMP #PLAYER_DOWN_CAP            ; AND SET THE LIMIT BOUNDARIES
06767  1E20  90 0C                 BCC @DOWNMOVE                   ; WE ARE NOT AT THE LIMIT, YET SO BRANCH
06768  1E22             
06769  1E22             ; NOW WE BEGIN CHECKING THE MAP'S Y POSITION
06770  1E22  A5 31                 LDA MAP_Y_POS
06771  1E24  C9 1B                 CMP #$1B                        ; WAIT UNTIL IT'S =27
06772  1E26  D0 31                 BNE @INPUT
06773  1E28  A5 33                 LDA MAP_Y_DELTA                 ;WHEN =27 THEN WE CAN BEGIN CHECKING
06774  1E2A  C9 02                 CMP #02                         ;THE MAP_Y_DELTA PIXELS AREA.
06775  1E2C  90 25                 BCC @STOPCLIMB                  ; WE ARE STILL IN THE TILE AREA
06776  1E2E             ;=============================
06777  1E2E             
06778  1E2E             ; THE SPRITE IS MOVING THROUGH THE TILE SO
06779  1E2E             ; ALTER THE LEFT AND RIGHT MOVEMENT TO CENTER IT
06780  1E2E             ; ON THE ROPE.
06781  1E2E             @DOWNMOVE
06782  1E2E  A2 02                 LDX #2
06783  1E30  BD 70 35              LDA SPRITE_POS_X_DELTA,X
06784  1E33  C9 04                 CMP #4                           ; THEY PASS THROUGH IF DELTA IS 4
06785  1E35  F0 12                 BEQ @MOVESPRITEDOWN              ; MOVE SPRITE DOWN SINCE WE PASSED THROUGH THE TILE
06786  1E37  90 06                 BCC @LESS                        ; IF LESS THAN 4, SHIFT RIGHT ONE PIXEL
06787  1E39             
06788  1E39  20 FF 18              JSR MOVEENEMYLEFT                ; NOT EQUAL, NOT LESS, MUST BE MORE - SHIFT LEFT ONE
06789  1E3C  4C 49 1E              JMP @MOVESPRITEDOWN
06790  1E3F             @LESS
06791  1E3F  A2 02                 LDX #2
06792  1E41  20 96 18              JSR MOVEENEMYRIGHT
06793  1E44  A2 03                 LDX #3
06794  1E46  20 96 18              JSR MOVEENEMYRIGHT
06795  1E49             
06796  1E49             @MOVESPRITEDOWN 
06797  1E49  A2 02                 LDX #2
06798  1E4B  20 64 19              JSR MOVEENEMYDOWN                ; = 0 SO WE CAN MOVE THE SPRITE DOWN
06799  1E4E  A2 03                 LDX #3
06800  1E50  20 64 19              JSR MOVEENEMYDOWN
06801  1E53             
06802  1E53             @STOPCLIMB 
06803  1E53  60                    RTS
06804  1E54  A9 00                 LDA #PLAYER_STATE_IDLE
06805  1E56  4C D1 11              JMP CHANGEPLAYERSTATE
06806  1E59             
06807  1E59             @NODOWNMOVE 
06808  1E59             @INPUT
06809  1E59  60                    RTS
06810  1E5A  A9 00                 LDA #PLAYER_STATE_IDLE
06811  1E5C  4C D1 11              JMP CHANGEPLAYERSTATE
06812  1E5F  60                    RTS
06813  1E60             
06814  1E60             
06815  1E60             ;===============================================================================
06816  1E60             ; ENEMY STATE JUMP
06817  1E60             ;-------------------------------------------------------------------------------
06818  1E60             ;  ENEMY IS JUMPING
06819  1E60             ;===============================================================================
06820  1E60             
06821  1E60             ENEMYSTATEJUMP 
06822  1E60  AD 68 1F              LDA ENEMY_SUBSTATE
06823  1E63  D0 13                 BNE @RUNNING
06824  1E65             
06825  1E65  A2 00                 LDX #0
06826  1E67  A9 2E                 LDA #<ANIM_PLAYER_JUMP
06827  1E69  85 17                 STA ZEROPAGE_POINTER_1
06828  1E6B  A9 36                 LDA #>ANIM_PLAYER_JUMP
06829  1E6D  85 18                 STA ZEROPAGE_POINTER_1 + 1
06830  1E6F                        
06831  1E6F  20 FD 34              JSR INITSPRITEANIM
06832  1E72  A9 01                 LDA #1                          ; ENEMY_SUBSTATE_RUNNING
06833  1E74  8D 68 1F              STA ENEMY_SUBSTATE
06834  1E77  60                    RTS
06835  1E78             
06836  1E78             @RUNNING
06837  1E78  A9 00                 LDA #0                          ; CLEAR THE IDLE VARIABLE
06838  1E7A  8D 30 13              STA IDLE_VAR
06839  1E7D             
06840  1E7D  20 AE 10              JSR JOYSTICKREADY
06841  1E80  F0 01                 BEQ @INPUT
06842  1E82  60                    RTS
06843  1E83             
06844  1E83             ; PLAYER JUMP IS CONFIRMED WITH A TABLE
06845  1E83             
06846  1E83             @INPUT
06847  1E83             @JUMPING
06848  1E83  EE 52 18              INC PLAYER_JUMP_POS
06849  1E86  AD 52 18              LDA PLAYER_JUMP_POS
06850  1E89  C9 23                 CMP #35
06851  1E8B  D0 08                 BNE @JUMPON
06852  1E8D             
06853  1E8D  A9 00                 LDA #0
06854  1E8F  8D 52 18              STA PLAYER_JUMP_POS
06855  1E92  4C AF 1E              JMP @JUMPCOMPLETE
06856  1E95             
06857  1E95             @JUMPON
06858  1E95  AE 52 18              LDX PLAYER_JUMP_POS             ; CHECK X FOR JUMP TABLE (X = CURRENT STATE
06859  1E98                        ; OF INCREMENT PLAYER_JUMP_POS)
06860  1E98  BD 53 18              LDA PLAYER_JUMP_TABLE,X         ; CHECK IF AT END OF JUMP TABLE = 0
06861  1E9B  F0 12                 BEQ @JUMPCOMPLETE
06862  1E9D             
06863  1E9D             @JUMPCONTINUE 
06864  1E9D  A2 02                 LDX #2
06865  1E9F  20 1B 34              JSR MOVESPRITEUP
06866  1EA2  A2 03                 LDX #3
06867  1EA4  20 1B 34              JSR MOVESPRITEUP
06868  1EA7  4C 83 1E              JMP @JUMPING
06869  1EAA             
06870  1EAA             @JUMPBLOCKED 
06871  1EAA  A9 00                 LDA #0
06872  1EAC  8D 52 18              STA PLAYER_JUMP_POS
06873  1EAF             
06874  1EAF             @JUMPCOMPLETE 
06875  1EAF  AD 67 3C              LDA JOY_X                       ; HORIZONTAL MOVEMENT
06876  1EB2  F0 07                 BEQ @VERTCHECK                  ; CHECK ZERO - HORIZONTAL INPUT
06877  1EB4  30 00                 BMI @LEFT                       ; NEGATIVE = LEFT
06878  1EB6             
06879  1EB6             @RIGHT
06880  1EB6             
06881  1EB6             @LEFT
06882  1EB6  A9 04                 LDA #ENEMY_STATE_WALK_L        ; GO TO WALK STATE LEFT
06883  1EB8  20 80 1A              JSR CHANGEENEMYSTATE
06884  1EBB             
06885  1EBB             @VERTCHECK 
06886  1EBB  AD 68 3C              LDA JOY_Y                       ; CHECK VERTICAL JOYSTICK INPUT
06887  1EBE  F0 31                 BEQ @END                        ; ZERO MEANS NO INPUT
06888  1EC0  30 03                 BMI @UP                         ; NEGATIVE MEANS UP
06889  1EC2  10 0C                 BPL @DOWN                       ; ALREADY CHECKED FOR 0 - SO THIS IS POSITIVE
06890  1EC4  60                    RTS
06891  1EC5             
06892  1EC5             @UP        
06893  1EC5  A2 02                 LDX #2
06894  1EC7  C9 30                 CMP #COLL_ROPE                  ; CHECK FOR ROPE UNDER PLAYER
06895  1EC9  D0 26                 BNE @END
06896  1ECB  A9 0A                 LDA #ENEMY_STATE_JUMP          ; CHANGE TO JUMP ROPE STATE
06897  1ECD  4C 80 1A              JMP CHANGEENEMYSTATE
06898  1ED0             
06899  1ED0             @DOWN
06900  1ED0  A2 02                 LDX #2                          ; IF WE ARE ON A ROPE, CAN WE MOVE DOWN?
06901  1ED2  C9 30                 CMP #COLL_ROPE
06902  1ED4  D0 1B                 BNE @NOROPE
06903  1ED6             
06904  1ED6  20 51 37              JSR ENEMYCHECKMOVEDOWN               ; IF WE ARE AT THE END, THERE WILL BE SOLID GROUND UNDER US
06905  1ED9  F0 11                 BEQ @GOROPECLIMB                ; NO BLOCKING AND ON ROPE? WE CHANGE TO CLIMBING
06906  1EDB                        
06907  1EDB                        ; OTHERWISE WE HAVE NO MORE CHECKS.
06908  1EDB  AD E7 35              LDA ENEMY_SPRITE_POS_X_DELTA          ; IF NOT LINED UP ON THE ROPE WE CAN A FALSE POSITIVE
06909  1EDE  C9 04                 CMP #4                          ; FOR COLLISIONS AROUND A 'ROPE HOLE'
06910  1EE0  F0 0F                 BEQ @END
06911  1EE2             
06912  1EE2  90 04                 BCC @DELTALESS                  ; IF LESS THAN 4 - SHIFT LEFT ONE
06913  1EE4  20 FF 18              JSR MOVEENEMYLEFT
06914  1EE7  60                    RTS
06915  1EE8             @DELTALESS 
06916  1EE8  20 96 18              JSR MOVEENEMYRIGHT
06917  1EEB  60                    RTS
06918  1EEC             
06919  1EEC             @GOROPECLIMB 
06920  1EEC  A9 08                 LDA #ENEMY_STATE_ROPE
06921  1EEE  4C 80 1A              JMP CHANGEENEMYSTATE
06922  1EF1             
06923  1EF1             @NOROPE
06924  1EF1             @END
06925  1EF1  60                    RTS
06926  1EF2             
06927  1EF2             
06928  1EF2             
06929  1EF2             ;===============================================================================
06930  1EF2             ; ENEMY STATE KICK RIGHT
06931  1EF2             ;===============================================================================
06932  1EF2             
06933  1EF2             ENEMYSTATEKICKR 
06934  1EF2  AD 68 1F              LDA ENEMY_SUBSTATE                     ; TEST FOR FIRST RUN
06935  1EF5  D0 13                 BNE @RUNNING
06936  1EF7             
06937  1EF7  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
06938  1EF9  A9 43                 LDA #<ANIM_PLAYER_KICK_R                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06939  1EFB  85 17                 STA ZEROPAGE_POINTER_1
06940  1EFD  A9 36                 LDA #>ANIM_PLAYER_KICK_R
06941  1EFF  85 18                 STA ZEROPAGE_POINTER_1 + 1
06942  1F01             
06943  1F01  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
06944  1F04  A9 01                 LDA #1                                  ; SET SUBSTATE TO RUNNING
06945  1F06  8D 68 1F              STA ENEMY_SUBSTATE
06946  1F09  60                    RTS                                     ; STATE CHANGE GOES INTO EFFECT NEXT FRAME
06947  1F0A             
06948  1F0A             @RUNNING
06949  1F0A  20 AE 10              JSR JOYSTICKREADY
06950  1F0D  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT
06951  1F0F  60                    RTS
06952  1F10             @INPUT
06953  1F10  AD 67 3C              LDA JOY_X
06954  1F13  F0 02                 BEQ @VERT_CHECK                         ; X AXIS IN 0 - CHECK FOR UP
06955  1F15  30 05                 BMI @IDLE                               ; IF IT'S -1 (LEFT) RETURN TO IDLE
06956  1F17                        ; SO IT HAS TO BE 1 (RIGHT) - CLIMB THE STAIR
06957  1F17             @VERT_CHECK 
06958  1F17                        ; TO DO : CHECK FOR AN UP PRESS
06959  1F17  A9 00                 LDA #ENEMY_STATE_IDLE                   ; RETURN TO IDLE (WHICH WILL LIKELY GO TO FALL)
06960  1F19  4C 80 1A              JMP CHANGEENEMYSTATE
06961  1F1C             
06962  1F1C             @IDLE
06963  1F1C  60                    RTS
06964  1F1D             
06965  1F1D             
06966  1F1D             
06967  1F1D             ;===============================================================================
06968  1F1D             ; ENEMY STATE KICK LEFT
06969  1F1D             ;===============================================================================
06970  1F1D             
06971  1F1D             ENEMYSTATEKICKL 
06972  1F1D  AD 68 1F              LDA ENEMY_SUBSTATE                     ; TEST FOR FIRST RUN
06973  1F20  D0 13                 BNE @RUNNING
06974  1F22             
06975  1F22  A2 00                 LDX #0                                 ; USE SPRITE NUMBER 0
06976  1F24  A9 47                 LDA #<ANIM_PLAYER_KICK_L               ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06977  1F26  85 17                 STA ZEROPAGE_POINTER_1
06978  1F28  A9 36                 LDA #>ANIM_PLAYER_KICK_L
06979  1F2A  85 18                 STA ZEROPAGE_POINTER_1 + 1
06980  1F2C             
06981  1F2C  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
06982  1F2F  A9 01                 LDA #1                                  ; SET SUBSTATE TO RUNNING
06983  1F31  8D 68 1F              STA ENEMY_SUBSTATE
06984  1F34  60                    RTS                                     ; STATE CHANGE GOES INTO EFFECT NEXT FRAME
06985  1F35             
06986  1F35             @RUNNING
06987  1F35  20 AE 10              JSR JOYSTICKREADY
06988  1F38  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT
06989  1F3A  60                    RTS
06990  1F3B             @INPUT
06991  1F3B  AD 67 3C              LDA JOY_X
06992  1F3E  F0 02                 BEQ @VERT_CHECK                         ; X AXIS IN 0 - CHECK FOR UP
06993  1F40  30 05                 BMI @IDLE                               ; IF IT'S -1 (LEFT) RETURN TO IDLE
06994  1F42                        ; SO IT HAS TO BE 1 (RIGHT) - CLIMB THE STAIR
06995  1F42             @VERT_CHECK 
06996  1F42  A9 00                 LDA #ENEMY_STATE_IDLE                   ; RETURN TO IDLE (WHICH WILL LIKELY GO TO FALL)
06997  1F44  4C 80 1A              JMP CHANGEENEMYSTATE
06998  1F47             
06999  1F47             @IDLE
07000  1F47  60                    RTS
07001  1F48             
07002  1F48             
07003  1F48             
07004  1F48             ;===============================================================================
07005  1F48             ; STATE FRAMEWORK
07006  1F48             ;-------------------------------------------------------------------------------
07007  1F48             ; A BLANK STATE TEMPLATE TO MAKE ADDING NEW STATES EASIER
07008  1F48             ;-------------------------------------------------------------------------------
07009  1F48             
07010  1F48             ENEMYSTATE_FRAMEWORK 
07011  1F48  AD 68 1F              LDA ENEMY_SUBSTATE                     ; TEST FOR FIRST RUN
07012  1F4B  D0 13                 BNE @RUNNING
07013  1F4D             
07014  1F4D  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
07015  1F4F  A9 87                 LDA #<ANIM_NPC1                         ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
07016  1F51  85 17                 STA ZEROPAGE_POINTER_1
07017  1F53  A9 36                 LDA #>ANIM_NPC1
07018  1F55  85 18                 STA ZEROPAGE_POINTER_1 + 1
07019  1F57             
07020  1F57  20 FD 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
07021  1F5A  A9 01                 LDA #1                                  ; SET SUBSTATE TO RUNNING
07022  1F5C  8D 68 1F              STA ENEMY_SUBSTATE
07023  1F5F  60                    RTS                                     ; CHANGE TAKES EFFECT NEXT FRAME
07024  1F60             
07025  1F60             @RUNNING
07026  1F60  20 AE 10              JSR JOYSTICKREADY
07027  1F63  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT
07028  1F65  60                    RTS
07029  1F66                        ; PROCESS VALID JOYSTICK INPUT
07030  1F66             @INPUT
07031  1F66             @RIGHT
07032  1F66             @LEFT
07033  1F66             
07034  1F66             @VERTCHECK 
07035  1F66             @UP        
07036  1F66             @DOWN
07037  1F66                        
07038  1F66             @END
07039  1F66  60                    RTS
07040  1F67             
07041  1F67             
07042  1F67             ;===============================================================================
07043  1F67             ;===============================================================================
07044  1F67             ; PLAYER DATA
07045  1F67             ;-------------------------------------------------------------------------------
07046  1F67             
07047  1F67             ENEMY_DATA 
07048  1F67             
07049  1F67             ENEMY_STATE 
07050  1F67  00                    BYTE 0
07051  1F68             ENEMY_SUBSTATE 
07052  1F68  00                    BYTE 0
07053  1F69             ENEMY_SUBSTAGE 
07054  1F69  00                    BYTE 0
07055  1F6A             ENEMY_JUMPUPRIGHT 
07056  1F6A  00                    BYTE 0
07057  1F6B             ENEMY_JUMPUPLEFT 
07058  1F6B  00                    BYTE 0
07059  1F6C             ENEMY_FALLFLAG 
07060  1F6C  00                    BYTE 0
07061  1F6D             ENANIM_STATE 
07062  1F6D  00                    BYTE 0
07063  1F6E             
07064  1F6E             ; JUMP TABLE FROM ENDURION'S CODE SAMPLE:
07065  1F6E             GAMEDEVE.NET/BLOG/949/ENTRY-2250107-A-C64-GAME-STEP-7' 
07066  1F6E             
07067  1F6E             ENEMY_JUMP_POS 
07068  1F6E  00                    BYTE 0
07069  1F6F             ENEMY_JUMP_TABLE 
07070  1F6F                        ;BYTE 8,7,5,3,2,1,1,1,0,0
07071  1F6F  12 11 0F              BYTE 18,17,15,13,12,11,11,11,10,10
07072  1F79  08 07 05              BYTE 8,7,5,3,2,1,1,1,0,0
07073  1F83             ENEMY_JUMP_TABLE_SIZE 
07074  1F83  0A                    BYTE 10
07075  1F84             ENEMY_FALL_POS 
07076  1F84  00                    BYTE 0
07077  1F85             ENEMY_FALL_SPEED_TABLE 
07078  1F85  01 01 02              BYTE 1,1,2,2,3,3,3,3,3,3
07079  1F8F             
07080  1F8F  00         ENEMYDOWNCAP BYTE 0
07081  1F90             
07082  1F90  00         ENEMY_TIMER BYTE 0
07083  1F91  00         ENEMY_TIMER2 BYTE 0
07084  1F92  00         ENEMY_SPEED BYTE 0
07085  1F93             
07086  1F93  05         ENEMY_BULLETS BYTE 5
07087  1F94             
07088  1F94  00         FIRE_RIGHT BYTE 0
07089  1F95  00         FIRE_LEFT  BYTE 0
07090  1F96  00         FIRINGHOLDCD BYTE 0
07091  1F97  00         WAITTOFIRECD BYTE 0
07092  1F98             
07093  1F98  00         PLAYER_DIRECTION BYTE 0
07094  1F99             ;===============================================================================
07095  1F99             ; SCREEN ROUTINES
07096  1F99             ;===============================================================================
07097  1F99             ; PETER 'SIG' HEWETT
07098  1F99             ; - 2016/2017
07099  1F99             ;-------------------------------------------------------------------------------
07100  1F99             ; SWAP SCREENS
07101  1F99             ;-------------------------------------------------------------------------------
07102  1F99             ; EXCHANGE THE FRONT AND BACKBUFFER SCREENS
07103  1F99             ;-------------------------------------------------------------------------------
07104  1F99             
07105  1F99             SWAPSCREENS 
07106  1F99  A5 26                 LDA CURRENT_SCREEN + 1             ; LOAD HI BYTE OF CURRENT SCREEN
07107  1F9B  C9 44                 CMP #>SCREEN2_MEM
07108  1F9D  F0 11                 BEQ @SCREEN2
07109  1F9F             
07110  1F9F             
07111  1F9F             
07112  1F9F  A9 00                 LDA #<SCREEN2_MEM
07113  1FA1  85 25                 STA CURRENT_SCREEN
07114  1FA3  A9 44                 LDA #>SCREEN2_MEM
07115  1FA5  85 26                 STA CURRENT_SCREEN + 1
07116  1FA7             
07117  1FA7             
07118  1FA7             
07119  1FA7  A9 00                 LDA #<SCREEN1_MEM
07120  1FA9  85 27                 STA CURRENT_BUFFER
07121  1FAB  A9 40                 LDA #>SCREEN1_MEM
07122  1FAD  85 28                 STA CURRENT_BUFFER + 1
07123  1FAF             
07124  1FAF             
07125  1FAF  60                    RTS
07126  1FB0             @SCREEN2   
07127  1FB0             
07128  1FB0             
07129  1FB0  A9 00                 LDA #<SCREEN1_MEM
07130  1FB2  85 25                 STA CURRENT_SCREEN
07131  1FB4  A9 40                 LDA #>SCREEN1_MEM
07132  1FB6  85 26                 STA CURRENT_SCREEN + 1
07133  1FB8             
07134  1FB8             
07135  1FB8             
07136  1FB8  A9 00                 LDA #<SCREEN2_MEM
07137  1FBA  85 27                 STA CURRENT_BUFFER
07138  1FBC  A9 44                 LDA #>SCREEN2_MEM
07139  1FBE  85 28                 STA CURRENT_BUFFER + 1
07140  1FC0             
07141  1FC0  60                    RTS
07142  1FC1             
07143  1FC1             
07144  1FC1             ;===============================================================================
07145  1FC1             ; FETCH PLAYFIELD LINE ADDRESS
07146  1FC1             ;===============================================================================
07147  1FC1             ; A HELPER ROUTINE TO RETURN THE LINE ADDRESS FOR THE CURRENT FRONT SCREEN ONLY.
07148  1FC1             ; A CUT BACK VERSION
07149  1FC1             ; OF FETCHLINEADDRESS FOR FASTER USE WITH SPRITE/CHARACTER COLLISIONS IT ALSO
07150  1FC1             ; USES THE Y REGISTER
07151  1FC1             ; INSTEAD OF THE X AS THAT IS TIED UP IN OUR COLLISION ROUTINES TO HOLD
07152  1FC1             ; THE SPRITE NUMBER
07153  1FC1             ;
07154  1FC1             ; Y = LINE NUMBER
07155  1FC1             ; RETURNS : ZEROPAGE_POINTER_1 = SCREEN LINE ADDRESS
07156  1FC1             ; MODIFIES A
07157  1FC1             ;-------------------------------------------------------------------------------
07158  1FC1             
07159  1FC1             FETCHPLAYFIELDLINEADDRESS 
07160  1FC1  A5 26                 LDA CURRENT_SCREEN + 1          ; LOAD HI BYTE OF CURREN SCREEN ADDRESS
07161  1FC3  C9 40                 CMP #>SCREEN1_MEM               ; COMPARE IT TO THE HI BYTE OF SCREEN1_MEM
07162  1FC5  F0 0B                 BEQ @SCREEN1                    ; IF IT'S EQUAL - IT'S SCREEN1
07163  1FC7                        ; OTHERWISE IT'S SCREEN2
07164  1FC7                        
07165  1FC7  B9 3B 21              LDA SCREEN2_LINE_OFFSET_TABLE_LO,Y      ; USE Y TO LOOKUP THE ADDRESS AND SAVE IT IN
07166  1FCA  85 17                 STA ZEROPAGE_POINTER_1                  ; ZEROPAGE_POINTER_1
07167  1FCC  B9 54 21              LDA SCREEN2_LINE_OFFSET_TABLE_HI,Y
07168  1FCF  85 18                 STA ZEROPAGE_POINTER_1 + 1
07169  1FD1  60                    RTS
07170  1FD2             
07171  1FD2             @SCREEN1
07172  1FD2  B9 09 21              LDA SCREEN1_LINE_OFFSET_TABLE_LO,Y      ; USE Y TO LOOKUP THE ADDRESS AND SAVE IT IN
07173  1FD5  85 17                 STA ZEROPAGE_POINTER_1                  ; ZEROPAGE_POINTER_1
07174  1FD7  B9 22 21              LDA SCREEN1_LINE_OFFSET_TABLE_HI,Y
07175  1FDA  85 18                 STA ZEROPAGE_POINTER_1 + 1
07176  1FDC  60                    RTS
07177  1FDD             
07178  1FDD             ;-------------------------------------------------------------------------------
07179  1FDD             ; FETCH LINE ADDRESS
07180  1FDD             ;-------------------------------------------------------------------------------
07181  1FDD             ; A HELPER ROUTINE TO RETURN THE LINE ADDRESS FOR THE CORRECT SCREEN TO DRAW TO
07182  1FDD             ; GIVEN THE SCREEN BASE IN WPARAM1, AND THE LINE IN X (Y COORD) WE TEST
07183  1FDD             ; THE HIGH BYTE IN WPARAM1 AND USE THE CORRECT LOOKUP TABLE TO GET THE LINE
07184  1FDD             ; ADDRESS, RETURNING IT IN ZEROPAGE_POINTER_1
07185  1FDD             
07186  1FDD             ; AN ADDITIONAL 'JUMP IN' POINT "FETCHSCREENLINEADDRESS" CAN BE USED THAT WILL
07187  1FDD             ; ONLY CONSIDER THE CURRENT_SCREEN POINTER, LIKEWISE "FETCHBUFFERLINEADDRESS"
07188  1FDD             ; WILL JUMP IN AND SUBSTITUTE THE CURRENT BUFFER.
07189  1FDD             ;
07190  1FDD             ; X - LINE REQUIRED
07191  1FDD             ;
07192  1FDD             ; RETURNS ZEROPAGE_POINTER_1
07193  1FDD             ;
07194  1FDD             ; MODIFIES A
07195  1FDD             ;
07196  1FDD             ;-------------------------------------------------------------------------------
07197  1FDD             
07198  1FDD             
07199  1FDD             GETLINEADDRESS 
07200  1FDD  A5 0B                 LDA WPARAM1 + 1
07201  1FDF  4C E9 1F              JMP DETECTSCREEN
07202  1FE2             
07203  1FE2             GETSCREENLINEADDRESS 
07204  1FE2  A5 26                 LDA CURRENT_SCREEN + 1
07205  1FE4  4C E9 1F              JMP DETECTSCREEN
07206  1FE7             
07207  1FE7             FETCHBUFFERLINEADDRESS 
07208  1FE7  A5 28                 LDA CURRENT_BUFFER + 1
07209  1FE9             
07210  1FE9             DETECTSCREEN 
07211  1FE9  C9 40                 CMP #>SCREEN1_MEM
07212  1FEB  F0 08                 BEQ @SCREEN1
07213  1FED  C9 44                 CMP #>SCREEN2_MEM
07214  1FEF  F0 0F                 BEQ @SCREEN2
07215  1FF1  C9 58                 CMP #>SCORE_SCREEN
07216  1FF3  F0 16                 BEQ @SCORE            ; IF NONE OF THE ABOVE, IT WILL DEFAULT TO SCREEN1
07217  1FF5             
07218  1FF5             @SCREEN1
07219  1FF5  BD 09 21              LDA SCREEN1_LINE_OFFSET_TABLE_LO,X
07220  1FF8  85 17                 STA ZEROPAGE_POINTER_1
07221  1FFA  BD 22 21              LDA SCREEN1_LINE_OFFSET_TABLE_HI,X
07222  1FFD  85 18                 STA ZEROPAGE_POINTER_1 + 1
07223  1FFF  60                    RTS
07224  2000             @SCREEN2
07225  2000  BD 3B 21              LDA SCREEN2_LINE_OFFSET_TABLE_LO,X
07226  2003  85 17                 STA ZEROPAGE_POINTER_1
07227  2005  BD 54 21              LDA SCREEN2_LINE_OFFSET_TABLE_HI,X
07228  2008  85 18                 STA ZEROPAGE_POINTER_1 + 1
07229  200A  60                    RTS
07230  200B             
07231  200B             @SCORE
07232  200B  BD 9F 21              LDA SCORE_LINE_OFFSET_TABLE_LO,X
07233  200E  85 17                 STA ZEROPAGE_POINTER_1
07234  2010  BD B8 21              LDA SCORE_LINE_OFFSET_TABLE_HI,X
07235  2013  85 18                 STA ZEROPAGE_POINTER_1 + 1
07236  2015  60                    RTS
07237  2016             
07238  2016             
07239  2016             
07240  2016             DISPLAYBYTE 
07241  2016             
07242  2016  85 06                 STA PARAM4                                      ; STORE THE BYTE TO DISPLAY IN PARAM4
07243  2018  20 DD 1F              JSR GETLINEADDRESS
07244  201B             
07245  201B  BD 6D 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X                ; FETCH LINE ADDRESS FOR COLOR
07246  201E  85 21                 STA ZEROPAGE_POINTER_3
07247  2020  BD 86 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
07248  2023  85 22                 STA ZEROPAGE_POINTER_3 + 1
07249  2025             
07250  2025  A5 06                 LDA PARAM4                                      ; LOAD THE BYTE TO BE DISPLAYED
07251  2027  29 0F                 AND #$0F
07252  2029  18                    CLC                                             ; MASK FOR THE LOWER HALF (0-F)
07253  202A  69 30                 ADC #$30                                        ; ADD $30 (48) TO DISPLAY CHARACTER SET
07254  202C                        ; NUMBERS
07255  202C  18                    CLC                                             ; CLEAR CARRY FLAG
07256  202D  C9 3A                 CMP #$3A                                        ; LESS THAN THE CODE FOR A (10)?
07257  202F  90 03                 BCC @WRITEDIGIT                                 ; GO TO THE NEXT DIGIT
07258  2031  38                    SEC
07259  2032  E9 39                 SBC #$39                                        ; IF SO WE SET THE CHARACTER CODE BACK TO
07260  2034                        ; DISPLAY A-F ($01 - $0A)
07261  2034             @WRITEDIGIT 
07262  2034  C8                    INY                                             ; INCREMENT THE POSITION ON THE LINE
07263  2035  91 17                 STA (ZEROPAGE_POINTER_1),Y                      ; WRITE THE CHARACTER CODE
07264  2037  A9 07                 LDA #COLOR_YELLOW                               ; SET THE COLOR TO WHITE
07265  2039  91 21                 STA (ZEROPAGE_POINTER_3),Y                      ; WRITE THE COLOR TO COLOR RAM
07266  203B             
07267  203B  88                    DEY                                             ; DECREMENT THE POSITION ON THE LINE
07268  203C  A5 06                 LDA PARAM4                                      ; FETCH THE BYTE TO DISPLAYTEXT
07269  203E  29 F0                 AND #$F0                                        ; MASK FOR THE TOP 4 BITS (00 - F0) - 11110000
07270  2040  4A                    LSR                                              ; SHIFT IT RIGHT TO A VALUE OF 0-F
07271  2041  4A                    LSR
07272  2042  4A                    LSR
07273  2043  4A                    LSR
07274  2044  69 30                 ADC #$30                                        ; FROM HERE, IT'S THE SAME
07275  2046  18                    CLC
07276  2047  C9 3A                 CMP #$3A                                        ; CHECK FOR A-F
07277  2049  90 02                 BCC @LASTDIGIT
07278  204B  E9 39                 SBC #$39
07279  204D             
07280  204D             @LASTDIGIT 
07281  204D  91 17                 STA (ZEROPAGE_POINTER_1),Y                      ; WRITE CHARACTER AND COLOR
07282  204F  A9 07                 LDA #COLOR_YELLOW
07283  2051  91 21                 STA (ZEROPAGE_POINTER_3),Y
07284  2053  60                    RTS
07285  2054             
07286  2054             DISPLAYTEXT 
07287  2054             
07288  2054  A6 04                 LDX PARAM2
07289  2056  BD 9F 21              LDA SCORE_LINE_OFFSET_TABLE_LO,X
07290  2059  85 19                 STA ZEROPAGE_POINTER_2
07291  205B  BD B8 21              LDA SCORE_LINE_OFFSET_TABLE_HI,X
07292  205E  85 1A                 STA ZEROPAGE_POINTER_2 + 1
07293  2060             
07294  2060                        
07295  2060  BD 6D 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X          ; FETCH THE ADDRESS FOR THE LINE IN COLOR RAM
07296  2063  85 21                 STA ZEROPAGE_POINTER_3
07297  2065  BD 86 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
07298  2068  85 22                 STA ZEROPAGE_POINTER_3 + 1
07299  206A             
07300  206A             
07301  206A                        ; ADD THE X OFFSET TO THE DESTINATION ADDRESS
07302  206A  A5 19                 LDA ZEROPAGE_POINTER_2
07303  206C  18                    CLC
07304  206D  65 03                 ADC PARAM1
07305  206F  85 19                 STA ZEROPAGE_POINTER_2
07306  2071  A5 1A                 LDA ZEROPAGE_POINTER_2 + 1
07307  2073  69 00                 ADC #0
07308  2075  85 1A                 STA ZEROPAGE_POINTER_2 + 1
07309  2077                        ; SAME FOR COLOR RAM
07310  2077  A5 21                 LDA ZEROPAGE_POINTER_3
07311  2079  18                    CLC
07312  207A  65 03                 ADC PARAM1
07313  207C  85 21                 STA ZEROPAGE_POINTER_3
07314  207E  A5 22                 LDA ZEROPAGE_POINTER_3 + 1
07315  2080  69 00                 ADC #0
07316  2082  85 22                 STA ZEROPAGE_POINTER_3 + 1
07317  2084                        ; START THE WRITE FOR THIS LINE
07318  2084  A0 00                 LDY #0
07319  2086             @INLINELOOP 
07320  2086  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
07321  2088  C9 00                 CMP #00
07322  208A  F0 20                 BEQ @ENDMARKERREACHED
07323  208C  C9 2F                 CMP #$2F
07324  208E  F0 0A                 BEQ @LINEBREAK
07325  2090  91 19                 STA (ZEROPAGE_POINTER_2),Y
07326  2092  A5 05                 LDA PARAM3
07327  2094  91 21                 STA (ZEROPAGE_POINTER_3),Y
07328  2096  C8                    INY
07329  2097  4C 86 20              JMP @INLINELOOP
07330  209A             
07331  209A             @LINEBREAK 
07332  209A  C8                    INY
07333  209B  98                    TYA
07334  209C  18                    CLC
07335  209D  65 17                 ADC ZEROPAGE_POINTER_1
07336  209F  85 17                 STA ZEROPAGE_POINTER_1
07337  20A1  A9 00                 LDA #0
07338  20A3  65 18                 ADC ZEROPAGE_POINTER_1 + 1
07339  20A5  85 18                 STA ZEROPAGE_POINTER_1 + 1
07340  20A7             
07341  20A7  E6 04                 INC PARAM2
07342  20A9  4C 54 20              JMP DISPLAYTEXT
07343  20AC             
07344  20AC             @ENDMARKERREACHED 
07345  20AC  60                    RTS
07346  20AD             
07347  20AD             ;-------------------------------------------------------------------------------
07348  20AD             ; CLEAR SCREEN
07349  20AD             ;-------------------------------------------------------------------------------
07350  20AD             ;
07351  20AD             ; CLEARS THE SCREEN USING A CHOSEN CHARACTER.
07352  20AD             ; A = CHARACTER/COLOR TO CLEAR THE SCREEN WITH
07353  20AD             ;
07354  20AD             ; MODIFIES X
07355  20AD             ;-------------------------------------------------------------------------------
07356  20AD             
07357  20AD             
07358  20AD             CLEARSCREEN1 
07359  20AD  A2 00                 LDX #$00
07360  20AF             @CLEARLOOP 
07361  20AF  9D 00 40              STA SCREEN1_MEM,X
07362  20B2  9D FA 40              STA SCREEN1_MEM + 250,X
07363  20B5  9D F4 41              STA SCREEN1_MEM + 500,X                 ; GAME SCREEN ONLY GOES TO 720
07364  20B8  9D EE 42              STA SCREEN1_MEM + 750,X
07365  20BB  E8                    INX
07366  20BC  E0 FA                 CPX #250
07367  20BE  D0 EF                 BNE @CLEARLOOP
07368  20C0  60                    RTS
07369  20C1             
07370  20C1             
07371  20C1             
07372  20C1             
07373  20C1             CLEARSCREEN2 
07374  20C1  A2 00                 LDX #$00
07375  20C3             @CLEARLOOP 
07376  20C3  9D 00 44              STA SCREEN2_MEM,X
07377  20C6  9D FA 44              STA SCREEN2_MEM + 250,X
07378  20C9  9D F4 45              STA SCREEN2_MEM + 500,X                 ; GAME SCREEN ONLY GOES TO 720
07379  20CC  9D EE 46              STA SCREEN2_MEM + 750,X
07380  20CF  E8                    INX
07381  20D0  E0 FA                 CPX #250
07382  20D2  D0 EF                 BNE @CLEARLOOP
07383  20D4  60                    RTS
07384  20D5             
07385  20D5             
07386  20D5             
07387  20D5             CLEARCOLORRAM 
07388  20D5  A2 00                 LDX #$00
07389  20D7             @CLEARLOOP 
07390  20D7  9D 00 D8              STA COLOR_MEM,X
07391  20DA  9D FA D8              STA COLOR_MEM + 250,X
07392  20DD  9D F4 D9              STA COLOR_MEM + 500,X
07393  20E0  9D EE DA              STA COLOR_MEM + 750,X
07394  20E3  E8                    INX
07395  20E4  E0 FA                 CPX #250
07396  20E6  D0 EF                 BNE @CLEARLOOP
07397  20E8  60                    RTS
07398  20E9             
07399  20E9             
07400  20E9             ;-------------------------------------------------------------------------------
07401  20E9             ; COPY TO BUFFER (SLOW)
07402  20E9             ;-------------------------------------------------------------------------------
07403  20E9             ; NOTE : DON'T USE THIS FOR SCROLLING. USE THE UNROLLED VERSION IN SCROLLING.ASM
07404  20E9             ; THIS IS JUST FOR SETUP PURPOSES. IT TAKES THE CURRENT FRONT SCREEN AND COPYS
07405  20E9             ; IT TO THE BUFFER
07406  20E9             ;--------------------------------------------------------------------------------
07407  20E9             
07408  20E9             COPYTOBUFFER 
07409  20E9             
07410  20E9             @COPY_SCREEN1 
07411  20E9  A2 00                 LDX #$00
07412  20EB             @LOOP1
07413  20EB  BD 00 40              LDA SCREEN1_MEM,X
07414  20EE  9D 00 44              STA SCREEN2_MEM,X
07415  20F1             
07416  20F1  BD FA 40              LDA SCREEN1_MEM + 250,X
07417  20F4  9D FA 44              STA SCREEN2_MEM + 250,X
07418  20F7                        
07419  20F7  BD F4 41              LDA SCREEN1_MEM + 500,X
07420  20FA  9D F4 45              STA SCREEN2_MEM + 500,X
07421  20FD             
07422  20FD  BD EE 42              LDA SCREEN1_MEM + 750,X                 ; GAME SCREEN ONLY GOES TO 720
07423  2100  9D EE 46              STA SCREEN2_MEM + 750,X
07424  2103  E8                    INX
07425  2104  E0 FA                 CPX #250
07426  2106  D0 E3                 BNE @LOOP1
07427  2108  60                    RTS
07428  2109             
07429  2109             
07430  2109             
07431  2109             ; SCREEN LINE OFFSET TABLES
07432  2109             ; QUERY A LINE WITH LDA (POINTER TO TABLE),X (WHERE X HOLDS THE LINE NUMBER)
07433  2109             ; AND IT WILL RETURN THE SCREEN ADDRESS FOR THAT LINE
07434  2109             
07435  2109             ; C64 PRG STUDIO HAS A LACK OF EXPRESSION SUPPORT THAT MAKES CREATING SOME
07436  2109             ; TABLES VERY PROBLEMATIC
07437  2109             ; BE AWARE THAT YOU CAN ONLY USE ONE EXPRESSION AFTER A DEFINED CONSTANT,
07438  2109             ; NO BRACES, AND BE SURE TO ACCOUNT FOR ORDER OF PRECEDENCE.
07439  2109             
07440  2109             ; FOR THESE TABLES YOU MUST HAVE THE OPERATOR CALC DIRECTIVE SET AT THE TOP OF
07441  2109             ; YOUR MAIN FILE
07442  2109             ; OR HAVE IT CHECKED IN OPTIONS OR BAD THINGS WILL HAPPEN!! IT BASICALLY MEANS
07443  2109             ; THAT CALCULATIONS
07444  2109             ; WILL BE PERFORMED BEFORE GIVING BACK THE HI/LO BYTE WITH '>' RATHER THAN THE
07445  2109             ; DEFAULT OF HI/LO BYTE THEN THE CALCULATION
07446  2109             SCREEN_LINE_OFFSET_TABLE_LO 
07447  2109             SCREEN1_LINE_OFFSET_TABLE_LO 
07448  2109  00                    BYTE <SCREEN1_MEM
07449  210A  28                    BYTE <SCREEN1_MEM + 40
07450  210B  50                    BYTE <SCREEN1_MEM + 80
07451  210C  78                    BYTE <SCREEN1_MEM + 120
07452  210D  A0                    BYTE <SCREEN1_MEM + 160
07453  210E  C8                    BYTE <SCREEN1_MEM + 200
07454  210F  F0                    BYTE <SCREEN1_MEM + 240
07455  2110  18                    BYTE <SCREEN1_MEM + 280
07456  2111  40                    BYTE <SCREEN1_MEM + 320
07457  2112  68                    BYTE <SCREEN1_MEM + 360
07458  2113  90                    BYTE <SCREEN1_MEM + 400
07459  2114  B8                    BYTE <SCREEN1_MEM + 440
07460  2115  E0                    BYTE <SCREEN1_MEM + 480
07461  2116  08                    BYTE <SCREEN1_MEM + 520
07462  2117  30                    BYTE <SCREEN1_MEM + 560
07463  2118  58                    BYTE <SCREEN1_MEM + 600
07464  2119  80                    BYTE <SCREEN1_MEM + 640
07465  211A  A8                    BYTE <SCREEN1_MEM + 680
07466  211B  D0                    BYTE <SCREEN1_MEM + 720
07467  211C  F8                    BYTE <SCREEN1_MEM + 760
07468  211D  20                    BYTE <SCREEN1_MEM + 800
07469  211E  48                    BYTE <SCREEN1_MEM + 840
07470  211F  70                    BYTE <SCREEN1_MEM + 880
07471  2120  98                    BYTE <SCREEN1_MEM + 920
07472  2121  C0                    BYTE <SCREEN1_MEM + 960
07473  2122             
07474  2122             SCREEN_LINE_OFFSET_TABLE_HI 
07475  2122             SCREEN1_LINE_OFFSET_TABLE_HI 
07476  2122  40                    BYTE >SCREEN1_MEM
07477  2123  40                    BYTE >SCREEN1_MEM + 40
07478  2124  40                    BYTE >SCREEN1_MEM + 80
07479  2125  40                    BYTE >SCREEN1_MEM + 120
07480  2126  40                    BYTE >SCREEN1_MEM + 160
07481  2127  40                    BYTE >SCREEN1_MEM + 200
07482  2128  40                    BYTE >SCREEN1_MEM + 240
07483  2129  41                    BYTE >SCREEN1_MEM + 280
07484  212A  41                    BYTE >SCREEN1_MEM + 320
07485  212B  41                    BYTE >SCREEN1_MEM + 360
07486  212C  41                    BYTE >SCREEN1_MEM + 400
07487  212D  41                    BYTE >SCREEN1_MEM + 440
07488  212E  41                    BYTE >SCREEN1_MEM + 480
07489  212F  42                    BYTE >SCREEN1_MEM + 520
07490  2130  42                    BYTE >SCREEN1_MEM + 560
07491  2131  42                    BYTE >SCREEN1_MEM + 600
07492  2132  42                    BYTE >SCREEN1_MEM + 640
07493  2133  42                    BYTE >SCREEN1_MEM + 680
07494  2134  42                    BYTE >SCREEN1_MEM + 720
07495  2135  42                    BYTE >SCREEN1_MEM + 760
07496  2136  43                    BYTE >SCREEN1_MEM + 800
07497  2137  43                    BYTE >SCREEN1_MEM + 840
07498  2138  43                    BYTE >SCREEN1_MEM + 880
07499  2139  43                    BYTE >SCREEN1_MEM + 920
07500  213A  43                    BYTE >SCREEN1_MEM + 960
07501  213B             
07502  213B             SCREEN2_LINE_OFFSET_TABLE_LO 
07503  213B  00                    BYTE <SCREEN2_MEM
07504  213C  28                    BYTE <SCREEN2_MEM + 40
07505  213D  50                    BYTE <SCREEN2_MEM + 80
07506  213E  78                    BYTE <SCREEN2_MEM + 120
07507  213F  A0                    BYTE <SCREEN2_MEM + 160
07508  2140  C8                    BYTE <SCREEN2_MEM + 200
07509  2141  F0                    BYTE <SCREEN2_MEM + 240
07510  2142  18                    BYTE <SCREEN2_MEM + 280
07511  2143  40                    BYTE <SCREEN2_MEM + 320
07512  2144  68                    BYTE <SCREEN2_MEM + 360
07513  2145  90                    BYTE <SCREEN2_MEM + 400
07514  2146  B8                    BYTE <SCREEN2_MEM + 440
07515  2147  E0                    BYTE <SCREEN2_MEM + 480
07516  2148  08                    BYTE <SCREEN2_MEM + 520
07517  2149  30                    BYTE <SCREEN2_MEM + 560
07518  214A  58                    BYTE <SCREEN2_MEM + 600
07519  214B  80                    BYTE <SCREEN2_MEM + 640
07520  214C  A8                    BYTE <SCREEN2_MEM + 680
07521  214D  D0                    BYTE <SCREEN2_MEM + 720
07522  214E  F8                    BYTE <SCREEN2_MEM + 760
07523  214F  20                    BYTE <SCREEN2_MEM + 800
07524  2150  48                    BYTE <SCREEN2_MEM + 840
07525  2151  70                    BYTE <SCREEN2_MEM + 880
07526  2152  98                    BYTE <SCREEN2_MEM + 920
07527  2153  C0                    BYTE <SCREEN2_MEM + 960
07528  2154             
07529  2154             SCREEN2_LINE_OFFSET_TABLE_HI 
07530  2154  44                    BYTE >SCREEN2_MEM
07531  2155  44                    BYTE >SCREEN2_MEM + 40
07532  2156  44                    BYTE >SCREEN2_MEM + 80
07533  2157  44                    BYTE >SCREEN2_MEM + 120
07534  2158  44                    BYTE >SCREEN2_MEM + 160
07535  2159  44                    BYTE >SCREEN2_MEM + 200
07536  215A  44                    BYTE >SCREEN2_MEM + 240
07537  215B  45                    BYTE >SCREEN2_MEM + 280
07538  215C  45                    BYTE >SCREEN2_MEM + 320
07539  215D  45                    BYTE >SCREEN2_MEM + 360
07540  215E  45                    BYTE >SCREEN2_MEM + 400
07541  215F  45                    BYTE >SCREEN2_MEM + 440
07542  2160  45                    BYTE >SCREEN2_MEM + 480
07543  2161  46                    BYTE >SCREEN2_MEM + 520
07544  2162  46                    BYTE >SCREEN2_MEM + 560
07545  2163  46                    BYTE >SCREEN2_MEM + 600
07546  2164  46                    BYTE >SCREEN2_MEM + 640
07547  2165  46                    BYTE >SCREEN2_MEM + 680
07548  2166  46                    BYTE >SCREEN2_MEM + 720
07549  2167  46                    BYTE >SCREEN2_MEM + 760
07550  2168  47                    BYTE >SCREEN2_MEM + 800
07551  2169  47                    BYTE >SCREEN2_MEM + 840
07552  216A  47                    BYTE >SCREEN2_MEM + 880
07553  216B  47                    BYTE >SCREEN2_MEM + 920
07554  216C  47                    BYTE >SCREEN2_MEM + 960
07555  216D                        
07556  216D             COLOR_LINE_OFFSET_TABLE_LO 
07557  216D  00                    BYTE <COLOR_MEM
07558  216E  28                    BYTE <COLOR_MEM + 40
07559  216F  50                    BYTE <COLOR_MEM + 80
07560  2170  78                    BYTE <COLOR_MEM + 120
07561  2171  A0                    BYTE <COLOR_MEM + 160
07562  2172  C8                    BYTE <COLOR_MEM + 200
07563  2173  F0                    BYTE <COLOR_MEM + 240
07564  2174  18                    BYTE <COLOR_MEM + 280
07565  2175  40                    BYTE <COLOR_MEM + 320
07566  2176  68                    BYTE <COLOR_MEM + 360
07567  2177  90                    BYTE <COLOR_MEM + 400
07568  2178  B8                    BYTE <COLOR_MEM + 440
07569  2179  E0                    BYTE <COLOR_MEM + 480
07570  217A  08                    BYTE <COLOR_MEM + 520
07571  217B  30                    BYTE <COLOR_MEM + 560
07572  217C  58                    BYTE <COLOR_MEM + 600
07573  217D  80                    BYTE <COLOR_MEM + 640
07574  217E  A8                    BYTE <COLOR_MEM + 680
07575  217F  D0                    BYTE <COLOR_MEM + 720
07576  2180  F8                    BYTE <COLOR_MEM + 760
07577  2181  20                    BYTE <COLOR_MEM + 800
07578  2182  48                    BYTE <COLOR_MEM + 840
07579  2183  70                    BYTE <COLOR_MEM + 880
07580  2184  98                    BYTE <COLOR_MEM + 920
07581  2185  C0                    BYTE <COLOR_MEM + 960
07582  2186             
07583  2186             COLOR_LINE_OFFSET_TABLE_HI 
07584  2186  D8                    BYTE >COLOR_MEM
07585  2187  D8                    BYTE >COLOR_MEM + 40
07586  2188  D8                    BYTE >COLOR_MEM + 80
07587  2189  D8                    BYTE >COLOR_MEM + 120
07588  218A  D8                    BYTE >COLOR_MEM + 160
07589  218B  D8                    BYTE >COLOR_MEM + 200
07590  218C  D8                    BYTE >COLOR_MEM + 240
07591  218D  D9                    BYTE >COLOR_MEM + 280
07592  218E  D9                    BYTE >COLOR_MEM + 320
07593  218F  D9                    BYTE >COLOR_MEM + 360
07594  2190  D9                    BYTE >COLOR_MEM + 400
07595  2191  D9                    BYTE >COLOR_MEM + 440
07596  2192  D9                    BYTE >COLOR_MEM + 480
07597  2193  DA                    BYTE >COLOR_MEM + 520
07598  2194  DA                    BYTE >COLOR_MEM + 560
07599  2195  DA                    BYTE >COLOR_MEM + 600
07600  2196  DA                    BYTE >COLOR_MEM + 640
07601  2197  DA                    BYTE >COLOR_MEM + 680
07602  2198  DA                    BYTE >COLOR_MEM + 720
07603  2199  DA                    BYTE >COLOR_MEM + 760
07604  219A  DB                    BYTE >COLOR_MEM + 800
07605  219B  DB                    BYTE >COLOR_MEM + 840
07606  219C  DB                    BYTE >COLOR_MEM + 880
07607  219D  DB                    BYTE >COLOR_MEM + 920
07608  219E  DB                    BYTE >COLOR_MEM + 960
07609  219F             
07610  219F             SCORE_LINE_OFFSET_TABLE_LO 
07611  219F  00                    BYTE <SCORE_SCREEN
07612  21A0  28                    BYTE <SCORE_SCREEN + 40
07613  21A1  50                    BYTE <SCORE_SCREEN + 80
07614  21A2  78                    BYTE <SCORE_SCREEN + 120
07615  21A3  A0                    BYTE <SCORE_SCREEN + 160
07616  21A4  C8                    BYTE <SCORE_SCREEN + 200
07617  21A5  F0                    BYTE <SCORE_SCREEN + 240
07618  21A6  18                    BYTE <SCORE_SCREEN + 280
07619  21A7  40                    BYTE <SCORE_SCREEN + 320
07620  21A8  68                    BYTE <SCORE_SCREEN + 360
07621  21A9  90                    BYTE <SCORE_SCREEN + 400
07622  21AA  B8                    BYTE <SCORE_SCREEN + 440
07623  21AB  E0                    BYTE <SCORE_SCREEN + 480
07624  21AC  08                    BYTE <SCORE_SCREEN + 520
07625  21AD  30                    BYTE <SCORE_SCREEN + 560
07626  21AE  58                    BYTE <SCORE_SCREEN + 600
07627  21AF  80                    BYTE <SCORE_SCREEN + 640
07628  21B0  A8                    BYTE <SCORE_SCREEN + 680
07629  21B1  D0                    BYTE <SCORE_SCREEN + 720
07630  21B2  F8                    BYTE <SCORE_SCREEN + 760
07631  21B3  20                    BYTE <SCORE_SCREEN + 800
07632  21B4  48                    BYTE <SCORE_SCREEN + 840
07633  21B5  70                    BYTE <SCORE_SCREEN + 880
07634  21B6  98                    BYTE <SCORE_SCREEN + 920
07635  21B7  C0                    BYTE <SCORE_SCREEN + 960
07636  21B8             
07637  21B8             SCORE_LINE_OFFSET_TABLE_HI 
07638  21B8  58                    BYTE >SCORE_SCREEN
07639  21B9  58                    BYTE >SCORE_SCREEN + 40
07640  21BA  58                    BYTE >SCORE_SCREEN + 80
07641  21BB  58                    BYTE >SCORE_SCREEN + 120
07642  21BC  58                    BYTE >SCORE_SCREEN + 160
07643  21BD  58                    BYTE >SCORE_SCREEN + 200
07644  21BE  58                    BYTE >SCORE_SCREEN + 240
07645  21BF  59                    BYTE >SCORE_SCREEN + 280
07646  21C0  59                    BYTE >SCORE_SCREEN + 320
07647  21C1  59                    BYTE >SCORE_SCREEN + 360
07648  21C2  59                    BYTE >SCORE_SCREEN + 400
07649  21C3  59                    BYTE >SCORE_SCREEN + 440
07650  21C4  59                    BYTE >SCORE_SCREEN + 480
07651  21C5  5A                    BYTE >SCORE_SCREEN + 520
07652  21C6  5A                    BYTE >SCORE_SCREEN + 560
07653  21C7  5A                    BYTE >SCORE_SCREEN + 600
07654  21C8  5A                    BYTE >SCORE_SCREEN + 640
07655  21C9  5A                    BYTE >SCORE_SCREEN + 680
07656  21CA  5A                    BYTE >SCORE_SCREEN + 720
07657  21CB  5A                    BYTE >SCORE_SCREEN + 760
07658  21CC  5B                    BYTE >SCORE_SCREEN + 800
07659  21CD  5B                    BYTE >SCORE_SCREEN + 840
07660  21CE  5B                    BYTE >SCORE_SCREEN + 880
07661  21CF  5B                    BYTE >SCORE_SCREEN + 920
07662  21D0  5B                    BYTE >SCORE_SCREEN + 960
07663  21D1             XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;=============================================================================== 
07664  21D1             ; CHAR PAD TOOLS
07665  21D1             ;===============================================================================
07666  21D1             ; PETER 'SIG' HEWETT 2017
07667  21D1             ;-------------------------------------------------------------------------------
07668  21D1             ; TOOLS FOR INTEGRATING CHARPAD CHARACTER SETS, TILES, AND MAPS
07669  21D1             ;===============================================================================
07670  21D1             ; MAP NOTES:
07671  21D1             ;
07672  21D1             ; CHARPAD SETUP : TO MAKE A LEVEL MAP, SET UP FOR 256 CHARACTERS
07673  21D1             ;                 A TILE SIZE OF 4X4
07674  21D1             ;                 SET NUMBER OF TILES TO 64
07675  21D1             ;                 SET MAP SIZE TO 64 X 32
07676  21D1             ;                 *IMPORTANT* SET COLOR TO 'PER CHARACTER'
07677  21D1             ;
07678  21D1             
07679  21D1             ;-------------------------------------------------------------------------------
07680  21D1             ;                                                               DRAW MAP
07681  21D1             ;-------------------------------------------------------------------------------
07682  21D1             ; DRAW THE ENTIRE MAP ON THE SCREEN. THIS WON'T BE DONE THAT OFTEN AS MOST UPDATES
07683  21D1             ; TO THE SCREEN WILL BE SCROLLING. BUT FOR STARTING A LEVEL, RESETTING ON DEATH,
07684  21D1             ; OR TELEPORTING, WE NEED TO BUILD THE ENTIRE SCREEN.
07685  21D1             ; THIS ALSO SETS UP ESSENTIAL DATA FOR USING THE MAP.
07686  21D1             ; INITIALIZES : MAP_POS_X
07687  21D1             ;               MAP_POS_Y
07688  21D1             ;               MAP_POS_ADDRESS
07689  21D1             ;               MAP_X_DELTA
07690  21D1             ;               MAP_Y_DELTA
07691  21D1             ;
07692  21D1             ; X = START MAP X COORD (TOP LEFT CORNER)
07693  21D1             ; Y = START MAP Y COORD (TOP LEFT CORNER)
07694  21D1             ;
07695  21D1             ; USES ZEROPAGE_POINTER_4 (AS TILEDRAW USES 1,2,3)
07696  21D1             ;-------------------------------------------------------------------------------
07697  21D1             
07698  21D1             DRAWMAP
07699  21D1             
07700  21D1  A9 00                 LDA #0
07701  21D3  85 32                 STA MAP_X_DELTA
07702  21D5  85 33                 STA MAP_Y_DELTA
07703  21D7             
07704  21D7  86 30                 STX MAP_X_POS
07705  21D9  84 31                 STY MAP_Y_POS
07706  21DB             
07707  21DB                        ;---------------------------------------------------------------
07708  21DB                        ; FIRST FIND THE ADDRESS FOR THE STARTING MAP POSITION
07709  21DB             
07710  21DB  A6 31                 LDX MAP_Y_POS
07711  21DD             
07712  21DD  BD 74 23              LDA MAP2025_LINE_LOOKUP_LO,X        ; FETCH THE ADDRESS FOR THE LINE (Y POS)
07713  21E0  85 23                 STA ZEROPAGE_POINTER_4
07714  21E2  BD 8A 23              LDA MAP2025_LINE_LOOKUP_HI,X
07715  21E5  85 24                 STA ZEROPAGE_POINTER_4 + 1
07716  21E7             
07717  21E7  18                    CLC
07718  21E8  A5 23                 LDA ZEROPAGE_POINTER_4          ; ADD THE X POSITION
07719  21EA  65 30                 ADC MAP_X_POS
07720  21EC  85 23                 STA ZEROPAGE_POINTER_4
07721  21EE  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07722  21F0  69 00                 ADC #0
07723  21F2  85 24                 STA ZEROPAGE_POINTER_4 + 1      ; ZEROPAGE_POINTER_1 NOW HOLDS THE
07724  21F4                        ; MAP START ADDRESS
07725  21F4             
07726  21F4                        ; SAVE THIS INFO FOR MAP USAGE
07727  21F4             
07728  21F4             
07729  21F4  A5 23                 LDA ZEROPAGE_POINTER_4
07730  21F6  85 2E                 STA MAP_POS_ADDRESS
07731  21F8  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07732  21FA  85 2F                 STA MAP_POS_ADDRESS + 1
07733  21FC                        
07734  21FC                        ;-----------------------------------------------------------------------
07735  21FC                        ; FETCH MAP DATA AND DRAW TILE - COORDS ARE IN 'TILES' NOT
07736  21FC                        ; CHARACTER POSITIONS
07737  21FC             
07738  21FC  A0 00                 LDY #0                  ; HOLDS X SCREEN COORD
07739  21FE  A2 00                 LDX #0                  ; HOLDS Y SCREEN COORD
07740  2200             
07741  2200             @LOOP
07742  2200  B1 23                 LDA (ZEROPAGE_POINTER_4),Y              ; FETCH MAP DATA
07743  2202  20 1F 22              JSR DRAWTILE                            ; DRAW THE TILE
07744  2205             
07745  2205  C8                    INY                                     ; INC X AND CHECK FOR END OF SCREEN
07746  2206  C0 0A                 CPY #10                                 ; (10 TILES)
07747  2208  D0 F6                 BNE @LOOP
07748  220A                        ; GO DOWN ONE LINE ON THE MAP (64 CHAR)
07749  220A             
07750  220A             
07751  220A  A5 23                 LDA ZEROPAGE_POINTER_4
07752  220C  18                    CLC
07753  220D  69 10                 ADC #16
07754  220F  85 23                 STA ZEROPAGE_POINTER_4
07755  2211  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07756  2213  69 00                 ADC #0
07757  2215  85 24                 STA ZEROPAGE_POINTER_4 + 1
07758  2217             
07759  2217  A0 00                 LDY #0
07760  2219  E8                    INX
07761  221A  E0 06                 CPX #6
07762  221C  D0 E2                 BNE @LOOP
07763  221E  60                    RTS
07764  221F             
07765  221F             
07766  221F             ;-------------------------------------------------------------------------------
07767  221F             ;                                                               DRAW TILE
07768  221F             ;-------------------------------------------------------------------------------
07769  221F             ; THIS ROUTINE ACTUALLY WON'T BE CALLED THAT OFTEN. MOST UPDATES ARE SCROLLING,
07770  221F             ; SO THERE ARE VERY FEW CIRCUMSTANCES THAT NEED A WHOLE TILE DRAWN AT ONCE.
07771  221F             ;-------------------------------------------------------------------------------
07772  221F             ;
07773  221F             ; X = SCREEN TILE Y COORD    - 'FLIPPED' SO IT DOVETAILS INTO THE MAPDRAW
07774  221F             ; Y = SCREEN TILE X COORD       ROUTINE WITHOUT EXHANGING DATA IN REGISTERS
07775  221F             ; A = TILE # TO DRAW
07776  221F             ;
07777  221F             ; RESTORES REGISTERS OFF THE STACK A / X / Y
07778  221F             ;-------------------------------------------------------------------------------
07779  221F             
07780  221F             
07781  221F             DRAWTILE
07782  221F  85 03                 STA PARAM1                      ; SAVE TILE NUMBER
07783  2221  84 04                 STY PARAM2                      ; SAVE X POS
07784  2223  86 05                 STX PARAM3                      ; SAVE Y POS
07785  2225             
07786  2225             
07787  2225             
07788  2225  48                    PHA
07789  2226  8A                    TXA
07790  2227  48                    PHA
07791  2228  98                    TYA
07792  2229  48                    PHA
07793  222A                        ; EXIT CLEANER - THIS ROUTINE WILL
07794  222A                        ; LIKELY BE NESTED
07795  222A                        ;------------------------------------------------------
07796  222A                        ; FIRST GET THE DESTINATION FOR THE TILE
07797  222A             
07798  222A  A5 05                 LDA PARAM3                      ; FETCH THE Y POS (IN TILE COORDS)
07799  222C  0A                    ASL
07800  222D  0A                    ASL                             ; MULTIPLY BY 4 (TILES ARE 4 X 4 CHARS)
07801  222E  AA                    TAX                             ; SCREEN LINE IN X
07802  222F             
07803  222F  20 E2 1F              JSR GETSCREENLINEADDRESS      ; FETCH LINE ADDRESS BASED ON CURRENT DISPLAYED SCREEN
07804  2232                        ; Y LINE ADDRESS IS IN ZEROPAGE_POINTER_1
07805  2232             
07806  2232             
07807  2232  BD 6D 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X        ; FETCH COLOR RAM LINE ADDRESS TOO
07808  2235  85 21                 STA ZEROPAGE_POINTER_3
07809  2237  BD 86 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
07810  223A  85 22                 STA ZEROPAGE_POINTER_3 + 1
07811  223C                        
07812  223C  A5 04                 LDA PARAM2                      ; GET X COORD
07813  223E  0A                    ASL                             ; MULTIPLY BY 4
07814  223F  0A                    ASL
07815  2240  AA                    TAX                             ; SAVE IT IN X
07816  2241  18                    CLC                             ; ADD TO Y LINE ADDRESS
07817  2242  65 17                 ADC ZEROPAGE_POINTER_1
07818  2244  85 17                 STA ZEROPAGE_POINTER_1
07819  2246  A5 18                 LDA ZEROPAGE_POINTER_1 + 1
07820  2248  69 00                 ADC #0
07821  224A  85 18                 STA ZEROPAGE_POINTER_1 + 1      ; DESTINATION BASE ADDRESS IS IN ZEROPAGE_POINTER_1
07822  224C  8A                    TXA
07823  224D  18                    CLC
07824  224E  65 21                 ADC ZEROPAGE_POINTER_3          ; COLOR RAM DESTINATION IS IN ZEROPAGE_POINTER_3
07825  2250  85 21                 STA ZEROPAGE_POINTER_3
07826  2252  A5 22                 LDA ZEROPAGE_POINTER_3 + 1
07827  2254  69 00                 ADC #0
07828  2256  85 22                 STA ZEROPAGE_POINTER_3 + 1
07829  2258             
07830  2258                        ;------------------------------------------------------------
07831  2258                        ; FETCH THE SOURCE TILE ADDRESS
07832  2258             
07833  2258  A6 03                 LDX PARAM1                      ; FETCH THE TILE NUMBER
07834  225A  BD CC 23              LDA TILE_NUMBER_LOOKUP_LO,X
07835  225D  85 19                 STA ZEROPAGE_POINTER_2
07836  225F  BD 0D 24              LDA TILE_NUMBER_LOOKUP_HI,X
07837  2262  85 1A                 STA ZEROPAGE_POINTER_2 + 1
07838  2264                        ;-------------------------------------------------------------
07839  2264                        ; LOOP THROUGH AND DRAW THE TILE
07840  2264             
07841  2264  A0 00                 LDY #0
07842  2266             @DRAWLOOP
07843  2266  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; GET THE CHARACTER CODE
07844  2268  91 17                 STA (ZEROPAGE_POINTER_1),Y      ; STORE IT ON THE SCREEN
07845  226A  AA                    TAX                             ; PASS TO X AS AN OFFSET
07846  226B  BD 20 78              LDA ATTRIBUTE_MEM,X             ; FETCH THE COLOR/DATA ATTRIBUTE
07847  226E  91 21                 STA (ZEROPAGE_POINTER_3),Y      ; WRITE IT TO COLOR RAM
07848  2270                        
07849  2270  C0 0F                 CPY #15                         ; DRAWN THE 15TH CHARACTER? WE'RE FINISHED
07850  2272  F0 25                 BEQ @DONE
07851  2274             
07852  2274  98                    TYA                             ; SAVE Y BEFORE THE INCREMENT FOR OUR TEST
07853  2275  C8                    INY                             ; (SAVES HAVING TO INC IT IN 2 DIFF PLACES)
07854  2276             
07855  2276                        ; I NEED TO COUNT 0-3 TO DRAW A ROW OF TILES,
07856  2276  29 03                 AND #%00000011                  ; BUT I NEED TO COUNT 0-15 TO FETCH THE TILE DATA
07857  2278  C9 03                 CMP #3                          ; BOTH NEED TO USE INDIRECT Y ADDRESSING, AND SAVING/
07858  227A  D0 EA                 BNE @DRAWLOOP                   ; FETCHING Y RAPIDLY BECOMES A TANGLED NIGHTMARE.
07859  227C                        ; BY MASKING OUT THE LAST 2 BITS IN A, WE GET A NUMBER
07860  227C                        ; THAT COUNTS 0-3 OVER AND OVER WITHOUT STOPPING THE
07861  227C                        ; DATA FETCH COUNT 0-15. IT'S ALSO FASTER THAN MY OTHER
07862  227C                        ; OPTIONS BY QUITE A BIT.
07863  227C             
07864  227C             
07865  227C  18                    CLC                             ; ADD NEW LINE
07866  227D  A5 17                 LDA ZEROPAGE_POINTER_1          ; INCREMENT DESTINATION AND COLOR RAM BY 1 LINE - 4 CHARS
07867  227F  69 24                 ADC #40 - 4
07868  2281  85 17                 STA ZEROPAGE_POINTER_1          ; BY 'BACKSETTING' OUR POINTERS, WE DON'T NEED TO CHANGE Y
07869  2283  A5 18                 LDA ZEROPAGE_POINTER_1 + 1      ; WHEN DRAWING 0-3 CHARACTERS, AND CAN LEAVE THE 0-15
07870  2285  69 00                 ADC #0                          ; COUNT INTACT.
07871  2287  85 18                 STA ZEROPAGE_POINTER_1 + 1      ; WE HAVE TO INCREASE THEM TO THE NEXT LINE ANYWAYS, SO THIS
07872  2289                        ; ONLY SAVES TIME.
07873  2289  18                    CLC
07874  228A  A5 21                 LDA ZEROPAGE_POINTER_3
07875  228C  69 24                 ADC #40 - 4
07876  228E  85 21                 STA ZEROPAGE_POINTER_3
07877  2290  A5 22                 LDA ZEROPAGE_POINTER_3 + 1
07878  2292  69 00                 ADC #0
07879  2294  85 22                 STA ZEROPAGE_POINTER_3 + 1
07880  2296  4C 66 22              JMP @DRAWLOOP
07881  2299             @DONE
07882  2299             
07883  2299             
07884  2299  68                    PLA
07885  229A  A8                    TAY
07886  229B  68                    PLA
07887  229C  AA                    TAX
07888  229D  68                    PLA
07889  229E  60                    RTS
07890  229F             
07891  229F             
07892  229F             
07893  229F             
07894  229F             
07895  229F             
07896  229F             
07897  229F             TILEMAP
07898  229F             
07899  229F  A9 00                 LDA #0
07900  22A1  85 32                 STA MAP_X_DELTA
07901  22A3  85 33                 STA MAP_Y_DELTA
07902  22A5             
07903  22A5  86 30                 STX MAP_X_POS
07904  22A7  84 31                 STY MAP_Y_POS
07905  22A9             
07906  22A9                        ;---------------------------------------------------------------
07907  22A9                        ; FIRST FIND THE ADDRESS FOR THE STARTING MAP POSITION
07908  22A9             
07909  22A9  A6 31                 LDX MAP_Y_POS
07910  22AB             
07911  22AB  BD A0 23              LDA ALLEYMAP_LINE_LOOKUP_LO,X
07912  22AE  85 23                 STA ZEROPAGE_POINTER_4
07913  22B0  BD B6 23              LDA ALLEYMAP_LINE_LOOKUP_HI,X
07914  22B3  85 24                 STA ZEROPAGE_POINTER_4 + 1
07915  22B5             
07916  22B5  18                    CLC
07917  22B6  A5 23                 LDA ZEROPAGE_POINTER_4          ; ADD THE X POSITION
07918  22B8  65 30                 ADC MAP_X_POS
07919  22BA  85 23                 STA ZEROPAGE_POINTER_4
07920  22BC  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07921  22BE  69 00                 ADC #0
07922  22C0  85 24                 STA ZEROPAGE_POINTER_4 + 1      ; ZEROPAGE_POINTER_1 NOW HOLDS THE MAP
07923  22C2                        ; START ADDRESS
07924  22C2             
07925  22C2                        ; SAVE THIS INFO FOR MAP USAGE
07926  22C2             
07927  22C2             
07928  22C2  A5 23                 LDA ZEROPAGE_POINTER_4
07929  22C4  85 2E                 STA MAP_POS_ADDRESS
07930  22C6  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07931  22C8  85 2F                 STA MAP_POS_ADDRESS + 1
07932  22CA                        
07933  22CA                        ;-----------------------------------------------------------------------
07934  22CA                        ; FETCH MAP DATA AND DRAW TILE - COORDS ARE IN 'TILES' NOT
07935  22CA                        ; CHARACTER POSITIONS
07936  22CA             
07937  22CA  A0 00                 LDY #0                  ; HOLDS X SCREEN COORD
07938  22CC  A2 00                 LDX #0                  ; HOLDS Y SCREEN COORD
07939  22CE             
07940  22CE             @LOOP
07941  22CE  B1 23                 LDA (ZEROPAGE_POINTER_4),Y              ; FETCH MAP DATA
07942  22D0  20 ED 22              JSR TILEDRAW                            ; DRAW THE TILE
07943  22D3             
07944  22D3  C8                    INY                                     ; INC X AND CHECK FOR END OF SCREEN
07945  22D4  C0 0A                 CPY #10                                 ; (10 TILES)
07946  22D6  D0 F6                 BNE @LOOP
07947  22D8                        ; GO DOWN ONE LINE ON THE MAP (64 CHAR)
07948  22D8             
07949  22D8             
07950  22D8  A5 23                 LDA ZEROPAGE_POINTER_4
07951  22DA  18                    CLC
07952  22DB  69 11                 ADC #17
07953  22DD  85 23                 STA ZEROPAGE_POINTER_4
07954  22DF  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07955  22E1  69 00                 ADC #0
07956  22E3  85 24                 STA ZEROPAGE_POINTER_4 + 1
07957  22E5             
07958  22E5  A0 00                 LDY #0
07959  22E7  E8                    INX
07960  22E8  E0 06                 CPX #6
07961  22EA  D0 E2                 BNE @LOOP
07962  22EC  60                    RTS
07963  22ED             
07964  22ED             
07965  22ED             ;-------------------------------------------------------------------------------
07966  22ED             ;                                                               DRAW TILE
07967  22ED             ;-------------------------------------------------------------------------------
07968  22ED             ; THIS ROUTINE ACTUALLY WON'T BE CALLED THAT OFTEN. MOST UPDATES ARE SCROLLING,
07969  22ED             ; SO THERE ARE VERY FEW CIRCUMSTANCES THAT NEED A WHOLE TILE DRAWN AT ONCE.
07970  22ED             ;-------------------------------------------------------------------------------
07971  22ED             ;
07972  22ED             ; X = SCREEN TILE Y COORD    - 'FLIPPED' SO IT DOVETAILS INTO THE MAPDRAW
07973  22ED             ; Y = SCREEN TILE X COORD       ROUTINE WITHOUT EXHANGING DATA IN REGISTERS
07974  22ED             ; A = TILE # TO DRAW
07975  22ED             ;
07976  22ED             ; RESTORES REGISTERS OFF THE STACK A / X / Y
07977  22ED             ;-------------------------------------------------------------------------------
07978  22ED             
07979  22ED             
07980  22ED             TILEDRAW
07981  22ED  85 03                 STA PARAM1                      ; SAVE TILE NUMBER
07982  22EF  84 04                 STY PARAM2                      ; SAVE X POS
07983  22F1  86 05                 STX PARAM3                      ; SAVE Y POS
07984  22F3             
07985  22F3             
07986  22F3             
07987  22F3  48                    PHA
07988  22F4  8A                    TXA
07989  22F5  48                    PHA
07990  22F6  98                    TYA
07991  22F7  48                    PHA
07992  22F8                        ; EXIT CLEANER - THIS ROUTINE WILL
07993  22F8                        ; LIKELY BE NESTED
07994  22F8                        ;------------------------------------------------------
07995  22F8                        ; FIRST GET THE DESTINATION FOR THE TILE
07996  22F8             
07997  22F8  A5 05                 LDA PARAM3                      ; FETCH THE Y POS (IN TILE COORDS)
07998  22FA  0A                    ASL
07999  22FB  0A                    ASL                             ; MULTIPLY BY 4 (TILES ARE 4 X 4 CHARS)
08000  22FC  AA                    TAX                             ; SCREEN LINE IN X
08001  22FD             
08002  22FD  20 E2 1F              JSR GETSCREENLINEADDRESS      ; FETCH LINE ADDRESS BASED ON CURRENT DISPLAYED SCREEN
08003  2300                        ; Y LINE ADDRESS IS IN ZEROPAGE_POINTER_1
08004  2300             
08005  2300             
08006  2300  BD 6D 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X        ; FETCH COLOR RAM LINE ADDRESS TOO
08007  2303  85 21                 STA ZEROPAGE_POINTER_3
08008  2305  BD 86 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
08009  2308  85 22                 STA ZEROPAGE_POINTER_3 + 1
08010  230A                        
08011  230A  A5 04                 LDA PARAM2                      ; GET X COORD
08012  230C  0A                    ASL                             ; MULTIPLY BY 4
08013  230D  0A                    ASL
08014  230E  AA                    TAX                             ; SAVE IT IN X
08015  230F  18                    CLC                             ; ADD TO Y LINE ADDRESS
08016  2310  65 17                 ADC ZEROPAGE_POINTER_1
08017  2312  85 17                 STA ZEROPAGE_POINTER_1
08018  2314  A5 18                 LDA ZEROPAGE_POINTER_1 + 1
08019  2316  69 00                 ADC #0
08020  2318  85 18                 STA ZEROPAGE_POINTER_1 + 1      ; DESTINATION BASE ADDRESS IS IN ZEROPAGE_POINTER_1
08021  231A  8A                    TXA
08022  231B  18                    CLC
08023  231C  65 21                 ADC ZEROPAGE_POINTER_3          ; COLOR RAM DESTINATION IS IN ZEROPAGE_POINTER_3
08024  231E  85 21                 STA ZEROPAGE_POINTER_3
08025  2320  A5 22                 LDA ZEROPAGE_POINTER_3 + 1
08026  2322  69 00                 ADC #0
08027  2324  85 22                 STA ZEROPAGE_POINTER_3 + 1
08028  2326             
08029  2326                        ;------------------------------------------------------------
08030  2326                        ; FETCH THE SOURCE TILE ADDRESS
08031  2326             
08032  2326  A6 03                 LDX PARAM1                      ; FETCH THE TILE NUMBER
08033  2328  BD 4D 24              LDA TILE2_NUMBER_LOOKUP_LO,X
08034  232B  85 19                 STA ZEROPAGE_POINTER_2
08035  232D  BD 8E 24              LDA TILE2_NUMBER_LOOKUP_HI,X
08036  2330  85 1A                 STA ZEROPAGE_POINTER_2 + 1
08037  2332                        ;-------------------------------------------------------------
08038  2332                        ; LOOP THROUGH AND DRAW THE TILE
08039  2332             
08040  2332  A0 00                 LDY #0
08041  2334             @DRAWLOOP
08042  2334  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; GET THE CHARACTER CODE
08043  2336  91 17                 STA (ZEROPAGE_POINTER_1),Y      ; STORE IT ON THE SCREEN
08044  2338  AA                    TAX                             ; PASS TO X AS AN OFFSET
08045  2339  BD AA 80              LDA ATTRIBUTE2_MEM,X             ; FETCH THE COLOR/DATA ATTRIBUTE
08046  233C  91 21                 STA (ZEROPAGE_POINTER_3),Y      ; WRITE IT TO COLOR RAM
08047  233E                        
08048  233E  C0 0F                 CPY #15                         ; DRAWN THE 15TH CHARACTER? WE'RE FINISHED
08049  2340  F0 25                 BEQ @DONE
08050  2342             
08051  2342  98                    TYA                             ; SAVE Y BEFORE THE INCREMENT FOR OUR TEST
08052  2343  C8                    INY                             ; (SAVES HAVING TO INC IT IN 2 DIFF PLACES)
08053  2344             
08054  2344                        ; I NEED TO COUNT 0-3 TO DRAW A ROW OF TILES,
08055  2344  29 03                 AND #%00000011                  ; BUT I NEED TO COUNT 0-15 TO FETCH THE TILE DATA
08056  2346  C9 03                 CMP #3                          ; BOTH NEED TO USE INDIRECT Y ADDRESSING, AND SAVING/
08057  2348  D0 EA                 BNE @DRAWLOOP                   ; FETCHING Y RAPIDLY BECOMES A TANGLED NIGHTMARE.
08058  234A                        ; BY MASKING OUT THE LAST 2 BITS IN A, WE GET A NUMBER
08059  234A                        ; THAT COUNTS 0-3 OVER AND OVER WITHOUT STOPPING THE
08060  234A                        ; DATA FETCH COUNT 0-15. IT'S ALSO FASTER THAN MY OTHER
08061  234A                        ; OPTIONS BY QUITE A BIT.
08062  234A             
08063  234A             
08064  234A  18                    CLC                             ; ADD NEW LINE
08065  234B  A5 17                 LDA ZEROPAGE_POINTER_1          ; INCREMENT DESTINATION AND COLOR RAM BY 1 LINE - 4 CHARS
08066  234D  69 24                 ADC #40 - 4
08067  234F  85 17                 STA ZEROPAGE_POINTER_1          ; BY 'BACKSETTING' OUR POINTERS, WE DON'T NEED TO CHANGE Y
08068  2351  A5 18                 LDA ZEROPAGE_POINTER_1 + 1      ; WHEN DRAWING 0-3 CHARACTERS, AND CAN LEAVE THE 0-15
08069  2353  69 00                 ADC #0                          ; COUNT INTACT.
08070  2355  85 18                 STA ZEROPAGE_POINTER_1 + 1      ; WE HAVE TO INCREASE THEM TO THE NEXT LINE ANYWAYS, SO THIS
08071  2357                        ; ONLY SAVES TIME.
08072  2357  18                    CLC
08073  2358  A5 21                 LDA ZEROPAGE_POINTER_3
08074  235A  69 24                 ADC #40 - 4
08075  235C  85 21                 STA ZEROPAGE_POINTER_3
08076  235E  A5 22                 LDA ZEROPAGE_POINTER_3 + 1
08077  2360  69 00                 ADC #0
08078  2362  85 22                 STA ZEROPAGE_POINTER_3 + 1
08079  2364  4C 34 23              JMP @DRAWLOOP
08080  2367             @DONE
08081  2367             
08082  2367             
08083  2367  68                    PLA
08084  2368  A8                    TAY
08085  2369  68                    PLA
08086  236A  AA                    TAX
08087  236B  68                    PLA
08088  236C  60                    RTS
08089  236D             
08090  236D             ;===============================================================================
08091  236D             ; LEVEL DATA AND TABLES
08092  236D             ;===============================================================================
08093  236D             
08094  236D             CURRENT_LEVEL 
08095  236D  00                    BYTE 0
08096  236E             
08097  236E             ;CHAR_ADDRESS
08098  236E             ;        WORD LEVEL_1_CHARS
08099  236E             
08100  236E             ATTRIB_ADDRESS 
08101  236E  20 78                 WORD ATTRIBUTE_MEM
08102  2370             
08103  2370             TILE_ADDRESS 
08104  2370  19 79                 WORD TILE_MEM
08105  2372             
08106  2372             MAP_ADDRESS 
08107  2372  00 E0                 WORD LEVEL_1_MAP
08108  2374             ;-------------------------------------------------------------------------------
08109  2374             ; MAP DATA LOOKUP TABLE 1
08110  2374             ;-------------------------------------------------------------------------------
08111  2374             ; LOOKUP TABLE TO RETURN AN ADDRESS TO A MAP LINE (Y COORD). THIS TABLE ASSUMES
08112  2374             ; A LANDSCAPE
08113  2374             ; LAYOUT (64 X 32 TILES). A PORTRAIT STYLE TABLE WILL BE DONE IN THE FUTURE TO
08114  2374             ; ALLOW MORE VERTICAL MAPS
08115  2374             ;-------------------------------------------------------------------------------
08116  2374             MAP_LINE_LOOKUP_LO 
08117  2374             ;        BYTE <MAP_MEM
08118  2374             ;        BYTE <MAP_MEM + 100
08119  2374             ;        BYTE <MAP_MEM + 200
08120  2374             ;        BYTE <MAP_MEM + 300
08121  2374             ;        BYTE <MAP_MEM + 400
08122  2374             ;        BYTE <MAP_MEM + 500
08123  2374             ;        BYTE <MAP_MEM + 600
08124  2374             ;        BYTE <MAP_MEM + 700
08125  2374             ;        BYTE <MAP_MEM + 800
08126  2374             ;        BYTE <MAP_MEM + 900
08127  2374             ;        BYTE <MAP_MEM + 1000             ; 10
08128  2374             ;        BYTE <MAP_MEM + 1100
08129  2374             ;        BYTE <MAP_MEM + 1200
08130  2374             ;        BYTE <MAP_MEM + 1300
08131  2374             ;        BYTE <MAP_MEM + 1400
08132  2374             ;        BYTE <MAP_MEM + 1500
08133  2374             ;        BYTE <MAP_MEM + 1600
08134  2374             ;        BYTE <MAP_MEM + 1700
08135  2374             ;        BYTE <MAP_MEM + 1800
08136  2374             ;        BYTE <MAP_MEM + 1900
08137  2374             ;        BYTE <MAP_MEM + 2000            ;20
08138  2374             ;        BYTE <MAP_MEM + 2100
08139  2374             ;        BYTE <MAP_MEM + 2200
08140  2374             ;        BYTE <MAP_MEM + 2300
08141  2374             ;        BYTE <MAP_MEM + 2400
08142  2374             ;        BYTE <MAP_MEM + 2500
08143  2374             ;        BYTE <MAP_MEM + 2600
08144  2374             ;        BYTE <MAP_MEM + 2700
08145  2374             ;        BYTE <MAP_MEM + 2800
08146  2374             ;        BYTE <MAP_MEM + 2900
08147  2374             ;        BYTE <MAP_MEM + 3000            ;30
08148  2374             ;        BYTE <MAP_MEM + 3100
08149  2374             ;        BYTE <MAP_MEM + 3200            ;32
08150  2374             
08151  2374             ;;; NEW LINES - PARKOUR BIG MAP
08152  2374             ;        BYTE <MAP_MEM + 3300
08153  2374             ;        BYTE <MAP_MEM + 3400
08154  2374             ;        BYTE <MAP_MEM + 3500
08155  2374             ;        BYTE <MAP_MEM + 3600
08156  2374             ;        BYTE <MAP_MEM + 3700
08157  2374             ;        BYTE <MAP_MEM + 3800
08158  2374             ;        BYTE <MAP_MEM + 3900
08159  2374             ;        BYTE <MAP_MEM + 4000
08160  2374             ;        BYTE <MAP_MEM + 4100
08161  2374             ;        BYTE <MAP_MEM + 4200
08162  2374             ;        BYTE <MAP_MEM + 4300
08163  2374             ;        BYTE <MAP_MEM + 4400
08164  2374             ;        BYTE <MAP_MEM + 4500
08165  2374             
08166  2374             ;        BYTE <MAP_MEM + 4600
08167  2374             ;        BYTE <MAP_MEM + 4700
08168  2374             ;        BYTE <MAP_MEM + 4800
08169  2374             ;        BYTE <MAP_MEM + 4900
08170  2374             ;        BYTE <MAP_MEM + 5000
08171  2374             
08172  2374             ;        BYTE <MAP_MEM + 5010
08173  2374             ;        BYTE <MAP_MEM + 5020
08174  2374             ;        BYTE <MAP_MEM + 5030
08175  2374             ;        BYTE <MAP_MEM + 5040
08176  2374             ;        BYTE <MAP_MEM + 5050
08177  2374             
08178  2374             MAP_LINE_LOOKUP_HI 
08179  2374             ;        BYTE >MAP_MEM
08180  2374             ;        BYTE >MAP_MEM + 100
08181  2374             ;        BYTE >MAP_MEM + 200
08182  2374             ;        BYTE >MAP_MEM + 300
08183  2374             ;        BYTE >MAP_MEM + 400
08184  2374             ;        BYTE >MAP_MEM + 500
08185  2374             ;        BYTE >MAP_MEM + 600
08186  2374             ;        BYTE >MAP_MEM + 700
08187  2374             ;        BYTE >MAP_MEM + 800
08188  2374             ;        BYTE >MAP_MEM + 900
08189  2374             ;        BYTE >MAP_MEM + 1000            ; 10
08190  2374             ;        BYTE >MAP_MEM + 1100
08191  2374             ;        BYTE >MAP_MEM + 1200
08192  2374             ;        BYTE >MAP_MEM + 1300
08193  2374             ;        BYTE >MAP_MEM + 1400
08194  2374             ;        BYTE >MAP_MEM + 1500
08195  2374             ;        BYTE >MAP_MEM + 1600
08196  2374             ;        BYTE >MAP_MEM + 1700
08197  2374             ;        BYTE >MAP_MEM + 1800
08198  2374             ;        BYTE >MAP_MEM + 1900
08199  2374             ;        BYTE >MAP_MEM + 2000            ;20
08200  2374             ;        BYTE >MAP_MEM + 2100
08201  2374             ;        BYTE >MAP_MEM + 2200
08202  2374             ;        BYTE >MAP_MEM + 2300        ; BYTE >MAP_MEM + 4700
08203  2374             ;        BYTE >MAP_MEM + 2400
08204  2374             ;        BYTE >MAP_MEM + 2500
08205  2374             ;        BYTE >MAP_MEM + 2600
08206  2374             ;        BYTE >MAP_MEM + 2700
08207  2374             ;        BYTE >MAP_MEM + 2800
08208  2374             ;        BYTE >MAP_MEM + 2900            ;30
08209  2374             ;        BYTE >MAP_MEM + 3000
08210  2374             ;        BYTE >MAP_MEM + 3100            ;32
08211  2374             
08212  2374             MAP2025_LINE_LOOKUP_LO 
08213  2374  80                    BYTE <MAP_MEM
08214  2375  90                    BYTE <MAP_MEM + TILE_DEPTH1; 22
08215  2376  A0                    BYTE <MAP_MEM + TILE_DEPTH2 ;44
08216  2377  B0                    BYTE <MAP_MEM + TILE_DEPTH3 ;66
08217  2378  C0                    BYTE <MAP_MEM + TILE_DEPTH4 ;88
08218  2379  D0                    BYTE <MAP_MEM + TILE_DEPTH5 ;110
08219  237A  E0                    BYTE <MAP_MEM + TILE_DEPTH6 ;132
08220  237B  F0                    BYTE <MAP_MEM + TILE_DEPTH7 ;154
08221  237C  00                    BYTE <MAP_MEM + TILE_DEPTH8 ;176
08222  237D  10                    BYTE <MAP_MEM + TILE_DEPTH9 ;198
08223  237E  20                    BYTE <MAP_MEM + TILE_DEPTH10 ;220
08224  237F  30                    BYTE <MAP_MEM + TILE_DEPTH11 ;242             ; 10
08225  2380  40                    BYTE <MAP_MEM + TILE_DEPTH12 ;'264
08226  2381  50                    BYTE <MAP_MEM + TILE_DEPTH13 ;286
08227  2382  60                    BYTE <MAP_MEM + TILE_DEPTH14 ;308
08228  2383  70                    BYTE <MAP_MEM + TILE_DEPTH15 ;330
08229  2384  80                    BYTE <MAP_MEM + TILE_DEPTH16 ;352
08230  2385  90                    BYTE <MAP_MEM + TILE_DEPTH17 ;374
08231  2386  A0                    BYTE <MAP_MEM + TILE_DEPTH18 ;396
08232  2387  B0                    BYTE <MAP_MEM + TILE_DEPTH19 ;418
08233  2388  C0                    BYTE <MAP_MEM + TILE_DEPTH20 ;440
08234  2389  D0                    BYTE <MAP_MEM + TILE_DEPTH21 ;462            ;20
08235  238A             
08236  238A             
08237  238A             MAP2025_LINE_LOOKUP_HI 
08238  238A  77                    BYTE >MAP_MEM
08239  238B  77                    BYTE >MAP_MEM + TILE_DEPTH1; 22
08240  238C  77                    BYTE >MAP_MEM + TILE_DEPTH2 ;44
08241  238D  77                    BYTE >MAP_MEM + TILE_DEPTH3 ;66
08242  238E  77                    BYTE >MAP_MEM + TILE_DEPTH4 ;88
08243  238F  77                    BYTE >MAP_MEM + TILE_DEPTH5 ;110
08244  2390  77                    BYTE >MAP_MEM + TILE_DEPTH6 ;132
08245  2391  77                    BYTE >MAP_MEM + TILE_DEPTH7 ;154
08246  2392  78                    BYTE >MAP_MEM + TILE_DEPTH8 ;176
08247  2393  78                    BYTE >MAP_MEM + TILE_DEPTH9 ;198
08248  2394  78                    BYTE >MAP_MEM + TILE_DEPTH10 ;220
08249  2395  78                    BYTE >MAP_MEM + TILE_DEPTH11 ;242             ; 10
08250  2396  78                    BYTE >MAP_MEM + TILE_DEPTH12 ;'264
08251  2397  78                    BYTE >MAP_MEM + TILE_DEPTH13 ;286
08252  2398  78                    BYTE >MAP_MEM + TILE_DEPTH14 ;308
08253  2399  78                    BYTE >MAP_MEM + TILE_DEPTH15 ;330
08254  239A  78                    BYTE >MAP_MEM + TILE_DEPTH16 ;352
08255  239B  78                    BYTE >MAP_MEM + TILE_DEPTH17 ;374
08256  239C  78                    BYTE >MAP_MEM + TILE_DEPTH18 ;396
08257  239D  78                    BYTE >MAP_MEM + TILE_DEPTH19 ;418
08258  239E  78                    BYTE >MAP_MEM + TILE_DEPTH20 ;440
08259  239F  78                    BYTE >MAP_MEM + TILE_DEPTH21 ;462            ;20
08260  23A0             
08261  23A0             ALLEYMAP_LINE_LOOKUP_LO 
08262  23A0  00                    BYTE <MAP2_MEM
08263  23A1  11                    BYTE <MAP2_MEM + TILE2_DEPTH1; 22
08264  23A2  22                    BYTE <MAP2_MEM + TILE2_DEPTH2 ;44
08265  23A3  33                    BYTE <MAP2_MEM + TILE2_DEPTH3 ;66
08266  23A4  44                    BYTE <MAP2_MEM + TILE2_DEPTH4 ;88
08267  23A5  55                    BYTE <MAP2_MEM + TILE2_DEPTH5 ;110
08268  23A6  66                    BYTE <MAP2_MEM + TILE2_DEPTH6 ;132
08269  23A7  77                    BYTE <MAP2_MEM + TILE2_DEPTH7 ;154
08270  23A8  88                    BYTE <MAP2_MEM + TILE2_DEPTH8 ;176
08271  23A9  99                    BYTE <MAP2_MEM + TILE2_DEPTH9 ;198
08272  23AA  AA                    BYTE <MAP2_MEM + TILE2_DEPTH10 ;220
08273  23AB  BB                    BYTE <MAP2_MEM + TILE2_DEPTH11 ;242             ; 10
08274  23AC  CC                    BYTE <MAP2_MEM + TILE2_DEPTH12 ;'264
08275  23AD  DD                    BYTE <MAP2_MEM + TILE2_DEPTH13 ;286
08276  23AE  EE                    BYTE <MAP2_MEM + TILE2_DEPTH14 ;308
08277  23AF  FF                    BYTE <MAP2_MEM + TILE2_DEPTH15 ;330
08278  23B0  10                    BYTE <MAP2_MEM + TILE2_DEPTH16 ;352
08279  23B1  21                    BYTE <MAP2_MEM + TILE2_DEPTH17 ;374
08280  23B2  32                    BYTE <MAP2_MEM + TILE2_DEPTH18 ;396
08281  23B3  43                    BYTE <MAP2_MEM + TILE2_DEPTH19 ;418
08282  23B4  54                    BYTE <MAP2_MEM + TILE2_DEPTH20 ;440
08283  23B5  65                    BYTE <MAP2_MEM + TILE2_DEPTH21 ;462            ;20
08284  23B6             
08285  23B6             
08286  23B6             ALLEYMAP_LINE_LOOKUP_HI 
08287  23B6  80                    BYTE >MAP2_MEM
08288  23B7  80                    BYTE >MAP2_MEM + TILE2_DEPTH1; 22
08289  23B8  80                    BYTE >MAP2_MEM + TILE2_DEPTH2 ;44
08290  23B9  80                    BYTE >MAP2_MEM + TILE2_DEPTH3 ;66
08291  23BA  80                    BYTE >MAP2_MEM + TILE2_DEPTH4 ;88
08292  23BB  80                    BYTE >MAP2_MEM + TILE2_DEPTH5 ;110
08293  23BC  80                    BYTE >MAP2_MEM + TILE2_DEPTH6 ;132
08294  23BD  80                    BYTE >MAP2_MEM + TILE2_DEPTH7 ;154
08295  23BE  80                    BYTE >MAP2_MEM + TILE2_DEPTH8 ;176
08296  23BF  80                    BYTE >MAP2_MEM + TILE2_DEPTH9 ;198
08297  23C0  80                    BYTE >MAP2_MEM + TILE2_DEPTH10 ;220
08298  23C1  80                    BYTE >MAP2_MEM + TILE2_DEPTH11 ;242             ; 10
08299  23C2  80                    BYTE >MAP2_MEM + TILE2_DEPTH12 ;'264
08300  23C3  80                    BYTE >MAP2_MEM + TILE2_DEPTH13 ;286
08301  23C4  80                    BYTE >MAP2_MEM + TILE2_DEPTH14 ;308
08302  23C5  80                    BYTE >MAP2_MEM + TILE2_DEPTH15 ;330
08303  23C6  81                    BYTE >MAP2_MEM + TILE2_DEPTH16 ;352
08304  23C7  81                    BYTE >MAP2_MEM + TILE2_DEPTH17 ;374
08305  23C8  81                    BYTE >MAP2_MEM + TILE2_DEPTH18 ;396
08306  23C9  81                    BYTE >MAP2_MEM + TILE2_DEPTH19 ;418
08307  23CA  81                    BYTE >MAP2_MEM + TILE2_DEPTH20 ;440
08308  23CB  81                    BYTE >MAP2_MEM + TILE2_DEPTH21 ;462            ;20
08309  23CC             
08310  23CC             ;-------------------------------------------------------------------------------
08311  23CC             ; TILE ADDRESS LOOKUP TABLE
08312  23CC             ;-------------------------------------------------------------------------------
08313  23CC             ; LOOKUP TABLE TO FIND THE START ADDRESS OF A TILE ON THE CURRENT MAP.
08314  23CC             ; ALL CURRENT LEVEL TILES ARE
08315  23CC             ; HELD IN TILE_MEM, THERE ARE 64 ENTRIES
08316  23CC             ;-------------------------------------------------------------------------------
08317  23CC             
08318  23CC             TILE_NUMBER_LOOKUP_LO 
08319  23CC  19                    BYTE <TILE_MEM                  ; 0
08320  23CD  29                    BYTE <TILE_MEM + 16
08321  23CE  39                    BYTE <TILE_MEM + 32
08322  23CF  49                    BYTE <TILE_MEM + 48
08323  23D0  59                    BYTE <TILE_MEM + 64
08324  23D1  69                    BYTE <TILE_MEM + 80
08325  23D2  79                    BYTE <TILE_MEM + 96
08326  23D3  89                    BYTE <TILE_MEM + 112
08327  23D4  99                    BYTE <TILE_MEM + 128
08328  23D5  A9                    BYTE <TILE_MEM + 144
08329  23D6  B9                    BYTE <TILE_MEM + 160            ; 10
08330  23D7  C9                    BYTE <TILE_MEM + 176
08331  23D8  D9                    BYTE <TILE_MEM + 192
08332  23D9  E9                    BYTE <TILE_MEM + 208
08333  23DA  F9                    BYTE <TILE_MEM + 224
08334  23DB  09                    BYTE <TILE_MEM + 240
08335  23DC  19                    BYTE <TILE_MEM + 256
08336  23DD  29                    BYTE <TILE_MEM + 272
08337  23DE  39                    BYTE <TILE_MEM + 288
08338  23DF  49                    BYTE <TILE_MEM + 304
08339  23E0  59                    BYTE <TILE_MEM + 320            ; 20
08340  23E1  69                    BYTE <TILE_MEM + 336
08341  23E2  79                    BYTE <TILE_MEM + 352
08342  23E3  89                    BYTE <TILE_MEM + 368
08343  23E4  99                    BYTE <TILE_MEM + 384
08344  23E5  A9                    BYTE <TILE_MEM + 400
08345  23E6  B9                    BYTE <TILE_MEM + 416
08346  23E7  C9                    BYTE <TILE_MEM + 432
08347  23E8  D9                    BYTE <TILE_MEM + 448
08348  23E9  E9                    BYTE <TILE_MEM + 464
08349  23EA  F9                    BYTE <TILE_MEM + 480            ; 30
08350  23EB  09                    BYTE <TILE_MEM + 496
08351  23EC  19                    BYTE <TILE_MEM + 512
08352  23ED  29                    BYTE <TILE_MEM + 528
08353  23EE  39                    BYTE <TILE_MEM + 544
08354  23EF  49                    BYTE <TILE_MEM + 560
08355  23F0  59                    BYTE <TILE_MEM + 576
08356  23F1  69                    BYTE <TILE_MEM + 592
08357  23F2  79                    BYTE <TILE_MEM + 608
08358  23F3  89                    BYTE <TILE_MEM + 624
08359  23F4  99                    BYTE <TILE_MEM + 640            ; 40
08360  23F5  A9                    BYTE <TILE_MEM + 656
08361  23F6  B9                    BYTE <TILE_MEM + 672
08362  23F7  C9                    BYTE <TILE_MEM + 688
08363  23F8  D9                    BYTE <TILE_MEM + 704
08364  23F9  E9                    BYTE <TILE_MEM + 720
08365  23FA  F9                    BYTE <TILE_MEM + 736
08366  23FB  09                    BYTE <TILE_MEM + 752
08367  23FC  19                    BYTE <TILE_MEM + 768
08368  23FD  29                    BYTE <TILE_MEM + 784
08369  23FE  39                    BYTE <TILE_MEM + 800            ;50
08370  23FF  49                    BYTE <TILE_MEM + 816
08371  2400  59                    BYTE <TILE_MEM + 832
08372  2401  69                    BYTE <TILE_MEM + 848
08373  2402  79                    BYTE <TILE_MEM + 864
08374  2403  89                    BYTE <TILE_MEM + 880
08375  2404  99                    BYTE <TILE_MEM + 896
08376  2405  A9                    BYTE <TILE_MEM + 912
08377  2406  B9                    BYTE <TILE_MEM + 928
08378  2407  C9                    BYTE <TILE_MEM + 944
08379  2408  D9                    BYTE <TILE_MEM + 960            ; 10
08380  2409  E9                    BYTE <TILE_MEM + 976
08381  240A  F9                    BYTE <TILE_MEM + 992
08382  240B  09                    BYTE <TILE_MEM + 1008
08383  240C  19                    BYTE <TILE_MEM + 1024           ; 64
08384  240D             
08385  240D             TILE_NUMBER_LOOKUP_HI 
08386  240D  79                    BYTE >TILE_MEM                  ; 0
08387  240E  79                    BYTE >TILE_MEM + 16
08388  240F  79                    BYTE >TILE_MEM + 32
08389  2410  79                    BYTE >TILE_MEM + 48
08390  2411  79                    BYTE >TILE_MEM + 64
08391  2412  79                    BYTE >TILE_MEM + 80
08392  2413  79                    BYTE >TILE_MEM + 96
08393  2414  79                    BYTE >TILE_MEM + 112
08394  2415  79                    BYTE >TILE_MEM + 128
08395  2416  79                    BYTE >TILE_MEM + 144
08396  2417  79                    BYTE >TILE_MEM + 160            ; 10
08397  2418  79                    BYTE >TILE_MEM + 176
08398  2419  79                    BYTE >TILE_MEM + 192
08399  241A  79                    BYTE >TILE_MEM + 208
08400  241B  79                    BYTE >TILE_MEM + 224
08401  241C  7A                    BYTE >TILE_MEM + 240
08402  241D  7A                    BYTE >TILE_MEM + 256
08403  241E  7A                    BYTE >TILE_MEM + 272
08404  241F  7A                    BYTE >TILE_MEM + 288
08405  2420  7A                    BYTE >TILE_MEM + 304
08406  2421  7A                    BYTE >TILE_MEM + 320            ; 20
08407  2422  7A                    BYTE >TILE_MEM + 336
08408  2423  7A                    BYTE >TILE_MEM + 352
08409  2424  7A                    BYTE >TILE_MEM + 368
08410  2425  7A                    BYTE >TILE_MEM + 384
08411  2426  7A                    BYTE >TILE_MEM + 400
08412  2427  7A                    BYTE >TILE_MEM + 416
08413  2428  7A                    BYTE >TILE_MEM + 432
08414  2429  7A                    BYTE >TILE_MEM + 448
08415  242A  7A                    BYTE >TILE_MEM + 464
08416  242B  7A                    BYTE >TILE_MEM + 480            ; 30
08417  242C  7B                    BYTE >TILE_MEM + 496
08418  242D  7B                    BYTE >TILE_MEM + 512
08419  242E  7B                    BYTE >TILE_MEM + 528
08420  242F  7B                    BYTE >TILE_MEM + 544
08421  2430  7B                    BYTE >TILE_MEM + 560
08422  2431  7B                    BYTE >TILE_MEM + 576
08423  2432  7B                    BYTE >TILE_MEM + 592
08424  2433  7B                    BYTE >TILE_MEM + 608
08425  2434  7B                    BYTE >TILE_MEM + 624
08426  2435  7B                    BYTE >TILE_MEM + 640            ; 40
08427  2436  7B                    BYTE >TILE_MEM + 656
08428  2437  7B                    BYTE >TILE_MEM + 672
08429  2438  7B                    BYTE >TILE_MEM + 688
08430  2439  7B                    BYTE >TILE_MEM + 704
08431  243A  7B                    BYTE >TILE_MEM + 720
08432  243B  7B                    BYTE >TILE_MEM + 736
08433  243C  7C                    BYTE >TILE_MEM + 752
08434  243D  7C                    BYTE >TILE_MEM + 768
08435  243E  7C                    BYTE >TILE_MEM + 784
08436  243F  7C                    BYTE >TILE_MEM + 800            ;50
08437  2440  7C                    BYTE >TILE_MEM + 816
08438  2441  7C                    BYTE >TILE_MEM + 832
08439  2442  7C                    BYTE >TILE_MEM + 848
08440  2443  7C                    BYTE >TILE_MEM + 864
08441  2444  7C                    BYTE >TILE_MEM + 880
08442  2445  7C                    BYTE >TILE_MEM + 896
08443  2446  7C                    BYTE >TILE_MEM + 912
08444  2447  7C                    BYTE >TILE_MEM + 928
08445  2448  7C                    BYTE >TILE_MEM + 944
08446  2449  7C                    BYTE >TILE_MEM + 960            ; 10
08447  244A  7C                    BYTE >TILE_MEM + 976
08448  244B  7C                    BYTE >TILE_MEM + 992
08449  244C  7D                    BYTE >TILE_MEM + 1008
08450  244D             
08451  244D             TILE2_NUMBER_LOOKUP_LO 
08452  244D  A1                    BYTE <TILE2_MEM                  ; 0
08453  244E  B1                    BYTE <TILE2_MEM + 16
08454  244F  C1                    BYTE <TILE2_MEM + 32
08455  2450  D1                    BYTE <TILE2_MEM + 48
08456  2451  E1                    BYTE <TILE2_MEM + 64
08457  2452  F1                    BYTE <TILE2_MEM + 80
08458  2453  01                    BYTE <TILE2_MEM + 96
08459  2454  11                    BYTE <TILE2_MEM + 112
08460  2455  21                    BYTE <TILE2_MEM + 128
08461  2456  31                    BYTE <TILE2_MEM + 144
08462  2457  41                    BYTE <TILE2_MEM + 160            ; 10
08463  2458  51                    BYTE <TILE2_MEM + 176
08464  2459  61                    BYTE <TILE2_MEM + 192
08465  245A  71                    BYTE <TILE2_MEM + 208
08466  245B  81                    BYTE <TILE2_MEM + 224
08467  245C  91                    BYTE <TILE2_MEM + 240
08468  245D  A1                    BYTE <TILE2_MEM + 256
08469  245E  B1                    BYTE <TILE2_MEM + 272
08470  245F  C1                    BYTE <TILE2_MEM + 288
08471  2460  D1                    BYTE <TILE2_MEM + 304
08472  2461  E1                    BYTE <TILE2_MEM + 320            ; 20
08473  2462  F1                    BYTE <TILE2_MEM + 336
08474  2463  01                    BYTE <TILE2_MEM + 352
08475  2464  11                    BYTE <TILE2_MEM + 368
08476  2465  21                    BYTE <TILE2_MEM + 384
08477  2466  31                    BYTE <TILE2_MEM + 400
08478  2467  41                    BYTE <TILE2_MEM + 416
08479  2468  51                    BYTE <TILE2_MEM + 432
08480  2469  61                    BYTE <TILE2_MEM + 448
08481  246A  71                    BYTE <TILE2_MEM + 464
08482  246B  81                    BYTE <TILE2_MEM + 480            ; 30
08483  246C  91                    BYTE <TILE2_MEM + 496
08484  246D  A1                    BYTE <TILE2_MEM + 512
08485  246E  B1                    BYTE <TILE2_MEM + 528
08486  246F  C1                    BYTE <TILE2_MEM + 544
08487  2470  D1                    BYTE <TILE2_MEM + 560
08488  2471  E1                    BYTE <TILE2_MEM + 576
08489  2472  F1                    BYTE <TILE2_MEM + 592
08490  2473  01                    BYTE <TILE2_MEM + 608
08491  2474  11                    BYTE <TILE2_MEM + 624
08492  2475  21                    BYTE <TILE2_MEM + 640            ; 40
08493  2476  31                    BYTE <TILE2_MEM + 656
08494  2477  41                    BYTE <TILE2_MEM + 672
08495  2478  51                    BYTE <TILE2_MEM + 688
08496  2479  61                    BYTE <TILE2_MEM + 704
08497  247A  71                    BYTE <TILE2_MEM + 720
08498  247B  81                    BYTE <TILE2_MEM + 736
08499  247C  91                    BYTE <TILE2_MEM + 752
08500  247D  A1                    BYTE <TILE2_MEM + 768
08501  247E  B1                    BYTE <TILE2_MEM + 784
08502  247F  C1                    BYTE <TILE2_MEM + 800            ;50
08503  2480  D1                    BYTE <TILE2_MEM + 816
08504  2481  E1                    BYTE <TILE2_MEM + 832
08505  2482  F1                    BYTE <TILE2_MEM + 848
08506  2483  01                    BYTE <TILE2_MEM + 864
08507  2484  11                    BYTE <TILE2_MEM + 880
08508  2485  21                    BYTE <TILE2_MEM + 896
08509  2486  31                    BYTE <TILE2_MEM + 912
08510  2487  41                    BYTE <TILE2_MEM + 928
08511  2488  51                    BYTE <TILE2_MEM + 944
08512  2489  61                    BYTE <TILE2_MEM + 960            ; 10
08513  248A  71                    BYTE <TILE2_MEM + 976
08514  248B  81                    BYTE <TILE2_MEM + 992
08515  248C  91                    BYTE <TILE2_MEM + 1008
08516  248D  A1                    BYTE <TILE2_MEM + 1024           ; 64
08517  248E             
08518  248E             TILE2_NUMBER_LOOKUP_HI 
08519  248E             
08520  248E  81                    BYTE >TILE2_MEM                  ; 0
08521  248F  81                    BYTE >TILE2_MEM + 16
08522  2490  81                    BYTE >TILE2_MEM + 32
08523  2491  81                    BYTE >TILE2_MEM + 48
08524  2492  81                    BYTE >TILE2_MEM + 64
08525  2493  81                    BYTE >TILE2_MEM + 80
08526  2494  82                    BYTE >TILE2_MEM + 96
08527  2495  82                    BYTE >TILE2_MEM + 112
08528  2496  82                    BYTE >TILE2_MEM + 128
08529  2497  82                    BYTE >TILE2_MEM + 144
08530  2498  82                    BYTE >TILE2_MEM + 160            ; 10
08531  2499  82                    BYTE >TILE2_MEM + 176
08532  249A  82                    BYTE >TILE2_MEM + 192
08533  249B  82                    BYTE >TILE2_MEM + 208
08534  249C  82                    BYTE >TILE2_MEM + 224
08535  249D  82                    BYTE >TILE2_MEM + 240
08536  249E  82                    BYTE >TILE2_MEM + 256
08537  249F  82                    BYTE >TILE2_MEM + 272
08538  24A0  82                    BYTE >TILE2_MEM + 288
08539  24A1  82                    BYTE >TILE2_MEM + 304
08540  24A2  82                    BYTE >TILE2_MEM + 320            ; 20
08541  24A3  82                    BYTE >TILE2_MEM + 336
08542  24A4  83                    BYTE >TILE2_MEM + 352
08543  24A5  83                    BYTE >TILE2_MEM + 368
08544  24A6  83                    BYTE >TILE2_MEM + 384
08545  24A7  83                    BYTE >TILE2_MEM + 400
08546  24A8  83                    BYTE >TILE2_MEM + 416
08547  24A9  83                    BYTE >TILE2_MEM + 432
08548  24AA  83                    BYTE >TILE2_MEM + 448
08549  24AB  83                    BYTE >TILE2_MEM + 464
08550  24AC  83                    BYTE >TILE2_MEM + 480            ; 30
08551  24AD  83                    BYTE >TILE2_MEM + 496
08552  24AE  83                    BYTE >TILE2_MEM + 512
08553  24AF  83                    BYTE >TILE2_MEM + 528
08554  24B0  83                    BYTE >TILE2_MEM + 544
08555  24B1  83                    BYTE >TILE2_MEM + 560
08556  24B2  83                    BYTE >TILE2_MEM + 576
08557  24B3  83                    BYTE >TILE2_MEM + 592
08558  24B4  84                    BYTE >TILE2_MEM + 608
08559  24B5  84                    BYTE >TILE2_MEM + 624
08560  24B6  84                    BYTE >TILE2_MEM + 640            ; 40
08561  24B7  84                    BYTE >TILE2_MEM + 656
08562  24B8  84                    BYTE >TILE2_MEM + 672
08563  24B9  84                    BYTE >TILE2_MEM + 688
08564  24BA  84                    BYTE >TILE2_MEM + 704
08565  24BB  84                    BYTE >TILE2_MEM + 720
08566  24BC  84                    BYTE >TILE2_MEM + 736
08567  24BD  84                    BYTE >TILE2_MEM + 752
08568  24BE  84                    BYTE >TILE2_MEM + 768
08569  24BF  84                    BYTE >TILE2_MEM + 784
08570  24C0  84                    BYTE >TILE2_MEM + 800            ;50
08571  24C1  84                    BYTE >TILE2_MEM + 816
08572  24C2  84                    BYTE >TILE2_MEM + 832
08573  24C3  84                    BYTE >TILE2_MEM + 848
08574  24C4  85                    BYTE >TILE2_MEM + 864
08575  24C5  85                    BYTE >TILE2_MEM + 880
08576  24C6  85                    BYTE >TILE2_MEM + 896
08577  24C7  85                    BYTE >TILE2_MEM + 912
08578  24C8  85                    BYTE >TILE2_MEM + 928
08579  24C9  85                    BYTE >TILE2_MEM + 944
08580  24CA  85                    BYTE >TILE2_MEM + 960            ; 10
08581  24CB  85                    BYTE >TILE2_MEM + 976
08582  24CC  85                    BYTE >TILE2_MEM + 992
08583  24CD  85                    BYTE >TILE2_MEM + 1008
08584  24CE  85                    BYTE >TILE2_MEM + 1024           ; 64
08585  24CF                        
08586  24CF             ;===============================================================================
08587  24CF             ; SCROLLING ROUTINES
08588  24CF             ;
08589  24CF             ; PETER 'SIG' HEWETT AKA RETROROMICON
08590  24CF             ;===============================================================================
08591  24CF             ;  ROUTINES FOR SCROLLING THE SCREEN. THE WAY WE'LL BE DOING SCROLLING IS BY LETTING THE
08592  24CF             ; PLAYER 'ROAM' WITHIN A BOUNDRY THEN 'PUSHING' THE SCREEN WHEN THEY HIT A BOUNDRY.
08593  24CF             ; THIS SHOULD MAKE THINGS A LITTLE EASIER AS THERE WILL NEVER BE A POINT WHEN SCROLLING IS
08594  24CF             ; INSTANTLY REVERSED.
08595  24CF             ; ALSO GIVEN THAT THE ONLY WAY TO EXCEED THE TOP THRESHOLD SHOULD BE BY LADDER/ELEVATOR, AND
08596  24CF             ; THE BOTTOM BY AN EXCESSIVE FALL (DEATH), WE CAN GIVE THE FEEL OF A 4/8 WAY SCROLLER WHILE
08597  24CF             ; ONLY IMPLEMENTING 4 SEPERATE ONE WAY SCROLLERS - WHICH WILL BE A LOT SIMPLER.
08598  24CF             ;
08599  24CF             ;
08600  24CF             ; NOTE : LIKE SPRITE MOVEMENT, THESE ROUTINES PERFORM A ONE PIXEL SCROLL, TO SCROLL MORE THAN ONE
08601  24CF             ;        PIXEL, THEY MUST BE CALLED MULTIPLE TIMES.
08602  24CF             ;
08603  24CF             ;       DIRECTION SCROLLED IS REFERRING TO THE DIRECTION THE CHARACTER IS MOVING, NOT THE ACTUAL
08604  24CF             ;       DIRECTION OF THE SCREEN, SO THINGS MIGHT SEEM A LITTLE 'BASS-ACKWARDS'
08605  24CF             ;
08606  24CF             ; WARNING - THIS IS A LONG FILE FULL OF SPECIAL CASE ROUTINES AND UNWOUND LOOPS
08607  24CF             ;-------------------------------------------------------------------------------
08608  24CF             ; SCROLL METHOD:
08609  24CF             ; EACH PIXEL SCROLL REPRESENTS A 'FRAME', A COUNTDOWN TO 'THE JUMP FRAME' WHERE THE ENTIRE SCREEN
08610  24CF             ; MUST BE SHIFTED ONE CHARACTER ACROSS. IN THE FRAMES LEADING UP TO THAT WE PERFORM WHATEVER TASKS
08611  24CF             ; WE CAN IN THE BACKGROUND. WE DO MAP LOOKUPS, PREPARE BUFFERS FOR 'NEW CHARACTERS', COPY THE
08612  24CF             ; BACKBUFFER ONE CHARACTER ACROSS - THEN ON THE 'JUMP FRAME' WE COPY COLOR RAM - IN ONE PASS,
08613  24CF             ; AND SWAP THE SCREENS, AND FINALLY RESET FOR THE NEXT ROUND.
08614  24CF             ;
08615  24CF             ; DURING TESTING I'M PRETTY SURE THERE ARE 4 VIABLE SPEEDS FOR SCROLLING THAT CAN BE ACCOMPLISHED
08616  24CF             ; (AT MY LEVEL OF CODING ANYWAYS) - 1/2 PIXEL , 1 PIXEL, 2 PIXELS AND 3 PIXELS.
08617  24CF             ; THAT SHOULD MAKE FOR DECENT VARIABLE SPEED SCROLLING AND PLAYER ACCELERATION AT A LATER DATE
08618  24CF             ;
08619  24CF             ; NOTES :
08620  24CF             ;               RIGHT SCROLLING MUST START ON FRAME 4 FOR SPEED 1
08621  24CF             ;-------------------------------------------------------------------------------
08622  24CF             ;
08623  24CF             SCROLL_STOP = 0
08624  24CF             SCROLL_RIGHT = 1
08625  24CF             SCROLL_LEFT = 2
08626  24CF             SCROLL_UP  = 3
08627  24CF             SCROLL_DOWN = 4
08628  24CF             
08629  24CF             ;-------------------------------------------------------------------------------
08630  24CF             ; UPDATE SCROLLING
08631  24CF             ;-------------------------------------------------------------------------------
08632  24CF             ; ENTRY POINT FOR ALL SCROLLING. HERE WE WORK OUT WHAT DIRECTION (IF ANY) WE ARE
08633  24CF             ; SCROLLING IN
08634  24CF             ; AND BRANCH OFF TO THE DIRECTIONAL SCROLL ROUTINES - THERE WE DIVIDE THE WORK
08635  24CF             ; UP ALONG THE
08636  24CF             ; FRAMES AND PERFORM THE ACTUAL SCROLLING.
08637  24CF             ;
08638  24CF             ; UPDATESCROLL:
08639  24CF             ;-------------------------------------------------------------------------------
08640  24CF             ; SCROLL_DIRECTION - TRACKS THE DIRECTION OF THE SCREEN SCROLL  \
08641  24CF             ; SCROLL_MOVING - FLAG TO CHECK WHEN THE SCREEN STARTS MOVING
08642  24CF             ; SCROLL_COUNT_X - CYCLES THROUGH 0-7 HORIZONTAL INTERVALS TO SCROLL PIXELS
08643  24CF             ; SCROLL_COUNT_Y - CYCLES THROUGH 0-7 VERTICAL INTERVALS TO SCROLL PIXELS
08644  24CF                        
08645  24CF             ;===============================================================================
08646  24CF             
08647  24CF             
08648  24CF             UPDATESCROLL 
08649  24CF  A5 2C                 LDA SCROLL_DIRECTION             ; CHECK FOR DIRECTION OF SCROLL
08650  24D1  D0 6D                 BNE @START
08651  24D3             
08652  24D3                        ; WE HAVE STOPPED - BUT WE NEED TO KNOW WE ARE ON
08653  24D3                        ; THE CORRECT 'START FRAMES' SO IF WE SCROLL AGAIN
08654  24D3                        ; (ESPECIALLY IN THE OPPOSITE DIRECTION) THEN EVERYTHING
08655  24D3                        ; IS SETUP PROPERLY - OTHERWISE WE COULD MISS COPYING
08656  24D3                        ; THE BUFFERS, UPDATING THE BACK SCREEN, OR GLITCHING THE
08657  24D3                        ; THE COLOR SHIFT. THE EXTRA SHIFTS WILL BE BARELY NOTICABLE
08658  24D3             
08659  24D3             ;===============================================================================
08660  24D3             ; THE SCREEN HAS STOPPED MOVING HERE AND WE EXIT
08661  24D3             ;===============================================================================
08662  24D3             
08663  24D3  A5 2D                 LDA SCROLL_MOVING               ; IF WE ARE STOPPPED (SCROLL_STOP = 0)
08664  24D5                        ;THEN WE CAN RETURN
08665  24D5  D0 01                 BNE @FIX_FRAME
08666  24D7  60                    RTS
08667  24D8             
08668  24D8             ;===============================================================================
08669  24D8             ; THE SCREEN IS STILL MOVING HERE
08670  24D8             ; SO WE INITIALIZE ALL THESE CHECKS BELOW
08671  24D8             ;-------------------------------------------------------------------------------
08672  24D8             ;===============================================================================
08673  24D8             ; CHECK IF SCROLL_MOVING <> 1 (SCROLL_RIGHT)
08674  24D8             ;===============================================================================
08675  24D8             @FIX_FRAME 
08676  24D8             @FIX_RIGHT 
08677  24D8  C9 01                 CMP #SCROLL_RIGHT               ; CHECK IF WE'RE SCROLLING RIGHT
08678  24DA  D0 15                 BNE @FIX_LEFT
08679  24DC             
08680  24DC             ;===============================================================================
08681  24DC             ; SCROLL_COUNT_X = INCREASES FROM 0-7 TO KEEP THE TILE SCROLLING SMOOTH (IN PIXELS)
08682  24DC             
08683  24DC             ; SCREEN IS MOVING TO THE RIGHT (SCROLL_MOVING), SO WE CHECK IF
08684  24DC             ; SCROLL_COUNT_X = 4 AND GOTO @FIX_DONE WHICH WILL SET
08685  24DC             ; SCROLL_MOVING = 0 (SCROLL_STOP) AND THEN IT CHECKS FOR A SCREEN SCROLL
08686  24DC             ; TO THE RIGHT, LEFT, DOWN, AND UP.
08687  24DC             ;===============================================================================
08688  24DC                        ; FIX RIGHT FRAME
08689  24DC  A5 29                 LDA SCROLL_COUNT_X              ; GET THE SCROLL COUNTER
08690  24DE  C9 04                 CMP #4                          ; IF WE'RE AT FRAME 4 WE STOP SCROLLING
08691  24E0  F0 5A                 BEQ @FIX_DONE
08692  24E2             
08693  24E2             ;-------------------------------------------------------------------------
08694  24E2             ;                               ; DO OUR EXTRA PIXEL SCROLL ADJUSTMENT
08695  24E2  A2 00                 LDX #0                  ; MOVE PLAYER SPRITE LEFT ONE PIXEL
08696  24E4  20 BD 33              JSR MOVESPRITELEFT      ; EVENTUALLY WE'LL SCROLL ALL THE
08697  24E7                        ;ACTIVE SPRITES
08698  24E7  A2 01                 LDX #1
08699  24E9  20 BD 33              JSR MOVESPRITELEFT
08700  24EC             
08701  24EC  A5 2D                 LDA SCROLL_MOVING
08702  24EE  4C 40 25              JMP @START
08703  24F1             ; FIX SCROLL LEFT
08704  24F1             
08705  24F1             ;===============================================================================
08706  24F1             ; CHECK IF SCROLL_MOVING <> 1 (SCROLL_LEFT)
08707  24F1             ;===============================================================================
08708  24F1             @FIX_LEFT
08709  24F1  C9 02                 CMP #SCROLL_LEFT
08710  24F3  D0 15                 BNE @FIX_UP
08711  24F5             
08712  24F5             ;===============================================================================
08713  24F5             ; FIX THE SCROLL TO THE LEFT
08714  24F5             ;===============================================================================
08715  24F5             ;===============================================================================
08716  24F5             ; SCREEN IS MOVING TO THE LEFT (SCROLL_MOVING).
08717  24F5             ; FIRST CHECK IF SCROLL_FIX_SKIP <>0 AND GOTO @FIX_DONE.
08718  24F5             ; THEN WE CHECK IF
08719  24F5             ; SCROLL_COUNT_X = 4 AND GOTO @FIX_DONE WHICH WILL SET
08720  24F5             ; SCROLL_MOVING = 0 (SCROLL_STOP) AND THEN IT CHECKS FOR A SCREEN SCROLL
08721  24F5             ; TO THE RIGHT, LEFT, DOWN, AND UP.
08722  24F5             ;===============================================================================
08723  24F5                        ; ABORT IF NEEDED
08724  24F5             ;        LDA SCROLL_FIX_SKIP
08725  24F5             ;        BNE @FIX_DONE
08726  24F5             
08727  24F5             ;===============================================================================
08728  24F5             ; SCROLL_COUNT_X = INCREASES FROM 0-7 TO KEEP THE TILE SCROLLING SMOOTH (IN PIXELS)
08729  24F5             ; SCROLL_MOVING = CHECKS IF THE SCREEN IS STILL SCROLLING.
08730  24F5             
08731  24F5             ; SCROLL_COUNT_X = 4 AND GOTO @FIX_DONE WHICH WILL SET
08732  24F5             ; SCROLL_MOVING = 0 (SCROLL_STOP) AND THEN IT CHECKS FOR A SCREEN SCROLL
08733  24F5             ; TO THE RIGHT, LEFT, DOWN, AND UP.
08734  24F5             ;===============================================================================
08735  24F5             @CHECK_LEFT 
08736  24F5  A5 29                 LDA SCROLL_COUNT_X
08737  24F7  C9 04                 CMP #4
08738  24F9  F0 41                 BEQ @FIX_DONE
08739  24FB             
08740  24FB                        ;-----------------------------------------------------------------------
08741  24FB                        ;                                 DO OUR EXTRA PIXEL SCROLL ADJUSTMENT
08742  24FB  A2 00                 LDX #0
08743  24FD  20 EF 33              JSR MOVESPRITERIGHT
08744  2500  A2 01                 LDX #1
08745  2502  20 EF 33              JSR MOVESPRITERIGHT
08746  2505             
08747  2505  A5 2D                 LDA SCROLL_MOVING
08748  2507  4C 40 25              JMP @START
08749  250A             
08750  250A             ;===============================================================================
08751  250A             ; FIX THE THE UP SCROLL
08752  250A             ;===============================================================================
08753  250A             ;===============================================================================
08754  250A             ; CHECK IF SCROLL_MOVING <> 1 (SCROLL_UP)
08755  250A             
08756  250A             ; SCROLL_COUNT_Y = INCREASES FROM 0-7 TO KEEP THE TILE SCROLLING SMOOTH (IN PIXELS)
08757  250A             ;===============================================================================
08758  250A             @FIX_UP
08759  250A  C9 03                 CMP #SCROLL_UP
08760  250C  D0 15                 BNE @FIX_DOWN
08761  250E             
08762  250E  A5 2A                 LDA SCROLL_COUNT_Y
08763  2510  C9 03                 CMP #3
08764  2512  F0 28                 BEQ @FIX_DONE
08765  2514             
08766  2514                        ;-----------------------------------------------------------------------
08767  2514                        ;                               DO EXTRA PIXEL SCROLL ADJUSTMENT FOR UP
08768  2514  A2 00                 LDX #0
08769  2516  20 36 34              JSR MOVESPRITEDOWN
08770  2519  A2 01                 LDX #1
08771  251B  20 36 34              JSR MOVESPRITEDOWN
08772  251E                        
08773  251E  A5 2D                 LDA SCROLL_MOVING
08774  2520  4C 40 25              JMP @START
08775  2523                        
08776  2523             ;===============================================================================
08777  2523             ; FIX THE DOWN SCROLL
08778  2523             ;===============================================================================
08779  2523             ;===============================================================================
08780  2523             ; CHECK IF SCROLL_MOVING <> 1 (SCROLL_DOWN)
08781  2523             
08782  2523             ; SCROLL_COUNT_Y = INCREASES FROM 0-7 TO KEEP THE TILE SCROLLING SMOOTH (IN PIXELS)
08783  2523             ;===============================================================================
08784  2523             @FIX_DOWN
08785  2523  C9 04                 CMP #SCROLL_DOWN
08786  2525  D0 15                 BNE @FIX_DONE
08787  2527                        
08788  2527  A5 2A                 LDA SCROLL_COUNT_Y
08789  2529  C9 03                 CMP #3
08790  252B  F0 0F                 BEQ @FIX_DONE
08791  252D                        
08792  252D  A2 00                 LDX #0
08793  252F  20 1B 34              JSR MOVESPRITEUP
08794  2532  A2 01                 LDX #1
08795  2534  20 1B 34              JSR MOVESPRITEUP
08796  2537                        
08797  2537  A5 2D                 LDA SCROLL_MOVING
08798  2539  4C 40 25              JMP @START
08799  253C             
08800  253C             
08801  253C             @FIX_DONE
08802  253C  A9 00                 LDA #SCROLL_STOP
08803  253E  85 2D                 STA SCROLL_MOVING
08804  2540             
08805  2540             ;===============================================================================
08806  2540             ; THIS SECTION IS CALLED ANYTIME SCROLL_DIRECTION <> 0
08807  2540             ; THEN IT WILL CHECK SCROLL_MOVING FOR EACH DIRECTION: RIGHT, LEFT, DOWN & UP
08808  2540             ;===============================================================================
08809  2540             @START
08810  2540             ;-------------------------------- SIMPLE TESTING AT THIS POINT
08811  2540             ;        LDA TIMER                       ; SOLID TIMED SCROLL
08812  2540             ;        AND #%1                        ; SLOW TIMER TO TEST THE SCREEN
08813  2540             ;       BNE @END
08814  2540             
08815  2540             ;        LDA SCROLL_DIRECTION            ; FETCH SCROLL DIRECTION
08816  2540             
08817  2540             ;-------------------------------- A = SCROLL_DIRECTION
08818  2540             
08819  2540  C9 01                 CMP #SCROLL_RIGHT               ; SCROLL RIGHT
08820  2542  D0 03                 BNE @LEFT
08821  2544  4C 4B 26              JMP SCROLLRIGHT
08822  2547             @LEFT
08823  2547  C9 02                 CMP #SCROLL_LEFT                ; SCROLL LEFT
08824  2549  D0 03                 BNE @DOWN
08825  254B  4C F2 25              JMP SCROLLLEFT
08826  254E             
08827  254E  C9 04      @DOWN      CMP #SCROLL_DOWN                ; SCROLL DOWN
08828  2550  D0 03                 BNE @UP
08829  2552  4C AA 25              JMP SCROLLDOWN
08830  2555             
08831  2555             @UP        
08832  2555  C9 03                 CMP #SCROLL_UP
08833  2557  D0 03                 BNE @END
08834  2559  4C 5D 25              JMP SCROLLUP
08835  255C                        
08836  255C             @END
08837  255C             
08838  255C  60                    RTS
08839  255D             
08840  255D             ; SCROLL UP
08841  255D             ;-------------------------------------------------------------------------------
08842  255D             ; SCROLL ONE PIXEL UP AND TAKE CARE OF THE SCREEN/COLOR WRAP IF NEEDED
08843  255D             ;-------------------------------------------------------------------------------
08844  255D             ; SCROLL_COUNT_Y - CYCLES THROUGH 0-7 VERTICAL INTERVALS TO SCROLL PIXELS
08845  255D             ;===============================================================================
08846  255D             
08847  255D             SCROLLUP
08848  255D  A2 02                 LDX #2
08849  255F  20 36 34              JSR MOVESPRITEDOWN
08850  2562  A2 03                 LDX #3
08851  2564  20 36 34              JSR MOVESPRITEDOWN
08852  2567             
08853  2567  E6 2A                 INC SCROLL_COUNT_Y
08854  2569  A5 2A                 LDA SCROLL_COUNT_Y
08855  256B  29 07                 AND #%00000111
08856  256D  85 2A                 STA SCROLL_COUNT_Y
08857  256F             @FRAME4
08858  256F  C9 04                 CMP #4
08859  2571  D0 01                 BNE @FRAME5
08860  2573  60                    RTS
08861  2574             @FRAME5
08862  2574  C9 05                 CMP #5
08863  2576  D0 04                 BNE @FRAME6
08864  2578  20 2A 30              JSR COPYVERTICALBUFFER
08865  257B  60                    RTS
08866  257C             @FRAME6
08867  257C  C9 06                 CMP #6
08868  257E  D0 07                 BNE @FRAME7
08869  2580  20 A5 26              JSR SHIFTCHARSUP
08870  2583  20 9A 2C              JSR DRAWUPBUFFER
08871  2586  60                    RTS
08872  2587             @FRAME7
08873  2587  C9 07                 CMP #7
08874  2589  D0 01                 BNE @FRAME0
08875  258B  60                    RTS
08876  258C             @FRAME0
08877  258C  C9 00                 CMP #0
08878  258E  D0 19                 BNE @DONE
08879  2590             
08880  2590  20 99 1F              JSR SWAPSCREENS
08881  2593  20 B2 2B              JSR COLORSHIFTUP
08882  2596  20 0C 2D              JSR DRAWUPCOLOR
08883  2599             
08884  2599  A5 33                 LDA MAP_Y_DELTA
08885  259B  38                    SEC
08886  259C  E9 01                 SBC #1
08887  259E  29 03                 AND #%0011
08888  25A0  85 33                 STA MAP_Y_DELTA
08889  25A2             
08890  25A2  C9 03                 CMP #3
08891  25A4  F0 01                 BEQ @NEWTILE
08892  25A6  60                    RTS
08893  25A7             
08894  25A7             @NEWTILE
08895  25A7                        
08896  25A7  C6 31                 DEC MAP_Y_POS
08897  25A9             @DONE
08898  25A9  60                    RTS
08899  25AA             
08900  25AA             
08901  25AA             ;-------------------------------------------------------------------------------
08902  25AA             ; SCROLL DOWN
08903  25AA             ;-------------------------------------------------------------------------------
08904  25AA             ; SCROLL ONE PIXEL DOWN AND TAKE CARE OF SCREEN/COLOR WRAP IF NEEDED
08905  25AA             ;-------------------------------------------------------------------------------
08906  25AA             ; SCROLL_COUNT_Y - CYCLES THROUGH 0-7 VERTICAL INTERVALS TO SCROLL PIXELS
08907  25AA             ;===============================================================================
08908  25AA             
08909  25AA             SCROLLDOWN 
08910  25AA  A2 02                 LDX #2
08911  25AC  20 1B 34              JSR MOVESPRITEUP
08912  25AF  A2 03                 LDX #3
08913  25B1  20 1B 34              JSR MOVESPRITEUP
08914  25B4             
08915  25B4  C6 2A                 DEC SCROLL_COUNT_Y              ; INCREEMNT THE SCROLL Y VALUE
08916  25B6  A5 2A                 LDA SCROLL_COUNT_Y
08917  25B8  29 07                 AND #%00000111                  ; MASK IT TO A 0-7 COUNT
08918  25BA  85 2A                 STA SCROLL_COUNT_Y              ; STORE IT FOR THE NEXT RASTER IRQ TO UPDATE
08919  25BC             @FRAME4
08920  25BC             @FRAME3
08921  25BC             @FRAME2
08922  25BC  C9 02                 CMP #2
08923  25BE  D0 04                 BNE @FRAME1
08924  25C0  20 2A 30              JSR COPYVERTICALBUFFER
08925  25C3  60                    RTS
08926  25C4             @FRAME1
08927  25C4  C9 01                 CMP #1
08928  25C6  D0 07                 BNE @FRAME0
08929  25C8  20 B2 27              JSR SHIFTCHARSDOWN
08930  25CB  20 D0 2C              JSR DRAWDOWNBUFFER
08931  25CE             
08932  25CE  60                    RTS
08933  25CF             @FRAME0    
08934  25CF  C9 00                 CMP #0
08935  25D1  D0 01                 BNE @FRAME7
08936  25D3             
08937  25D3  60                    RTS
08938  25D4             @FRAME7
08939  25D4  C9 07                 CMP #7
08940  25D6  D0 19                 BNE @DONE
08941  25D8  20 99 1F              JSR SWAPSCREENS                 ; SWAP BACK / FRONT SCREENS
08942  25DB  20 26 2C              JSR COLORSHIFTDOWN              ; SHIFT COLOR DOWN ONE CHARACTER
08943  25DE  20 28 2D              JSR DRAWDOWNCOLOR               ; DRAW NEW COLORS IN BOTTOM LINE
08944  25E1             
08945  25E1  A5 33                 LDA MAP_Y_DELTA                 ; INCREMENT THE MAP_Y_DELTA
08946  25E3  18                    CLC
08947  25E4  69 01                 ADC #1
08948  25E6  29 03                 AND #%0011                      ; MASK TO A VALUE BETWEEN 0-3
08949  25E8  85 33                 STA MAP_Y_DELTA
08950  25EA             
08951  25EA  C9 00                 CMP #0                          ; CHECK FOR CROSSOVER TO A NEW TILE
08952  25EC  F0 01                 BEQ @NEWTILE
08953  25EE  60                    RTS
08954  25EF             @NEWTILE
08955  25EF  E6 31                 INC MAP_Y_POS                   ; INCREMENT MAP Y POS ON A NEW TILE
08956  25F1                        
08957  25F1                        ; TODO - INCREMENT MAP_ADDRESS TO NEXT MAP LINE
08958  25F1             
08959  25F1             @DONE
08960  25F1  60                    RTS
08961  25F2             
08962  25F2             ;-------------------------------------------------------------------------------                                                                             SCROLL LEFT
08963  25F2             ;-------------------------------------------------------------------------------
08964  25F2             ; SCROLL ONE PIXEL LEFT AND TAKE CARE OF SCREEN/COLOR WRAP IF NEEDED
08965  25F2             ;-------------------------------------------------------------------------------
08966  25F2             ; SCROLL_COUNT_X - CYCLES THROUGH 0-7 HORIZONTAL INTERVALS TO SCROLL PIXELS
08967  25F2             ;===============================================================================
08968  25F2             
08969  25F2             SCROLLLEFT 
08970  25F2  A2 02                 LDX #2
08971  25F4  20 EF 33              JSR MOVESPRITERIGHT
08972  25F7  A2 03                 LDX #3
08973  25F9  20 EF 33              JSR MOVESPRITERIGHT
08974  25FC             
08975  25FC  E6 29                 INC SCROLL_COUNT_X              ; INCREMENT THE SCROLL X VALUE
08976  25FE  A5 29                 LDA SCROLL_COUNT_X
08977  2600  29 07                 AND #%00000111                  ; MASK IT TO A 0-7 COUNT
08978  2602  85 29                 STA SCROLL_COUNT_X              ; STORE IT FOR THE RASTER IRQ TO UPDATE
08979  2604             @FRAME4
08980  2604             @FRAME5
08981  2604  C9 05                 CMP #5
08982  2606  D0 04                 BNE @FRAME6
08983  2608             ;        JSR COPYHORIZONTALBUFFER        ; COPY NEW CHARACTERS FROM THE MAP TO
08984  2608                        ;THE BUFFERS
08985  2608  20 99 31              JSR COPYLEFTBUFFER
08986  260B  60                    RTS
08987  260C             @FRAME6    
08988  260C  C9 06                 CMP #6
08989  260E  D0 07                 BNE @FRAME7
08990  2610  20 BF 28              JSR SHIFTCHARSLEFT              ; SHIFT THE BACKSCREEN OVER BY ONE CHARACTER
08991  2613  20 48 2D              JSR DRAWLEFTBUFFER              ; DRAW THE NEW CHARACTERS TO THE SCREEN
08992  2616  60                    RTS
08993  2617             @FRAME7
08994  2617  C9 07                 CMP #7
08995  2619  D0 01                 BNE @FRAME0
08996  261B  60                    RTS
08997  261C             @FRAME0
08998  261C  C9 00                 CMP #0
08999  261E  D0 2A                 BNE @DONE
09000  2620  20 99 1F              JSR SWAPSCREENS                         ; SWAP THE BUFFER SCREEN AND DISPLAYED SCREEN
09001  2623  20 C0 29              JSR COLORSHIFTLEFT                      ; SHIFT COLOR RAM ONE CHARACTER TO THE LEFT
09002  2626  20 40 2E              JSR DRAWLEFTCOLOR                       ; DRAW IN THE LEFTMOST COLUMN IN COLOR RAM
09003  2629             
09004  2629  38                    SEC
09005  262A  A5 32                 LDA MAP_X_DELTA                         ; DECREMENT MAP X DELTA BY 3
09006  262C                        ;(CHARACTER WITHIN TILE)
09007  262C  E9 01                 SBC #1
09008  262E  29 03                 AND #%00000011                          ; MASK IT'S VALUE TO 0-7
09009  2630  85 32                 STA MAP_X_DELTA                         ; SAVE THE NEW DELTA
09010  2632  C9 03                 CMP #3                                  ; IF THE DELTA IS 3, WE HIT A NEW TILE
09011  2634  F0 01                 BEQ @NEW_TILE
09012  2636  60                    RTS
09013  2637             @NEW_TILE
09014  2637  C6 30                 DEC MAP_X_POS                           ; SO DECREMENT THE MAP X POSITION
09015  2639  38                    SEC
09016  263A  AD 72 23              LDA MAP_ADDRESS                         ; SUBTRACT 1 FROM MAP ADDRESS
09017  263D  E9 01                 SBC #1                                  ; (ADDRESS OF THE TOP - RIGHT
09018  263F  8D 72 23              STA MAP_ADDRESS                         ; CORNER OF THE MAP)
09019  2642  AD 73 23              LDA MAP_ADDRESS + 1
09020  2645  E9 00                 SBC #0
09021  2647  8D 73 23              STA MAP_ADDRESS + 1
09022  264A                        
09023  264A             
09024  264A             @DONE
09025  264A  60                    RTS
09026  264B             
09027  264B             ;-------------------------------------------------------------------------------
09028  264B             ; SCROLL RIGHT
09029  264B             ;-------------------------------------------------------------------------------
09030  264B             ; SCROLL ONE PIXEL RIGHT AND TAKE CARE OF SCREEN/COLOR WRAP IF NEEDED
09031  264B             ; TASKS ARE BROKEN DOWN AND PERFORMED ON EACH 'FRAME'
09032  264B             ;-------------------------------------------------------------------------------
09033  264B             ; SCROLL_COUNT_X - CYCLES THROUGH 0-7 HORIZONTAL INTERVALS TO SCROLL PIXELS
09034  264B             ;===============================================================================
09035  264B             
09036  264B             SCROLLRIGHT 
09037  264B  A2 02                 LDX #2
09038  264D  20 BD 33              JSR MOVESPRITELEFT
09039  2650  A2 03                 LDX #3
09040  2652  20 BD 33              JSR MOVESPRITELEFT
09041  2655             
09042  2655  C6 29                 DEC SCROLL_COUNT_X      ; DECREMENT TO SCROLL RIGHT
09043  2657  A5 29                 LDA SCROLL_COUNT_X      ; LOAD INTO A
09044  2659  29 07                 AND #%00000111          ; MASK LOWER 3 BITS TO MAKE A 0 - 7 COUNT
09045  265B  85 29                 STA SCROLL_COUNT_X      ; STORE THE NEW COUNT - RASTER IRQ DOES THE
09046  265D                        ; SCROLLRIGHT
09047  265D             
09048  265D                        ; A HOLDS THE COUNT, FROM HERE WE CAN TEST AGAINST IT
09049  265D                        ; TO SPLIT THE WORKLOAD DEPENDING ON WHAT
09050  265D                        ; 'FRAME' WE ARE AT
09051  265D             
09052  265D             @FRAME2
09053  265D  C9 02                 CMP #2
09054  265F  D0 04                 BNE @FRAME1
09055  2661  20 F5 30              JSR COPYHORIZONTALBUFFER     ; FETCH THE NEXT COLUMN TO DRAW
09056  2664  60                    RTS
09057  2665                        ;---------------------------------------------------- FRAME 1
09058  2665             @FRAME1
09059  2665  C9 01                 CMP #1
09060  2667  D0 07                 BNE @FRAME0
09061  2669  20 38 2A              JSR SHIFTCHARSRIGHT     ; SHIFT CHARACTERS TO THE BUFFER SCREEN
09062  266C  20 B9 2E              JSR DRAWRIGHTBUFFER     ; DRAW IN THE NEW CHARACTERS FROM THE BUFFER
09063  266F  60                    RTS
09064  2670                        ;---------------------------------------------------- FRAME 0 - PREJUMP
09065  2670             @FRAME0
09066  2670  C9 00                 CMP #0
09067  2672  D0 01                 BNE @FRAME7
09068  2674  60                    RTS
09069  2675                        ;---------------------------------------------------- FRAME 7 - JUMP FRAME
09070  2675             @FRAME7
09071  2675  C9 07                 CMP #7
09072  2677  D0 2B                 BNE @DONE
09073  2679  20 99 1F              JSR SWAPSCREENS         ; BRING THE BUFFER TO THE FOREGROUND
09074  267C  20 38 2B              JSR COLORSHIFTRIGHT     ; SHIFT THE COLOR RAM ONE CHARACTER
09075  267F  20 B1 2F              JSR DRAWRIGHTCOLOR      ; DRAW IN THE NEW COLORS FROM THE BUFFER
09076  2682             
09077  2682  18                    CLC
09078  2683  A5 32                 LDA MAP_X_DELTA         ; ADD ONE TO DELTA
09079  2685  69 01                 ADC #1
09080  2687  29 03                 AND #%00000011          ; IF DELTA WRAPS WE GO UP A TILE
09081  2689  85 32                 STA MAP_X_DELTA
09082  268B  C9 00                 CMP #0
09083  268D  F0 01                 BEQ @NEWTILE
09084  268F  60                    RTS
09085  2690             @NEWTILE
09086  2690  E6 30                 INC MAP_X_POS           ; INC MAP POS TO NEXT TILE
09087  2692  18                    CLC
09088  2693  AD 72 23              LDA MAP_ADDRESS         ; INC MAP ADDRESS TO NEXT POSITION
09089  2696  69 01                 ADC #1
09090  2698  8D 72 23              STA MAP_ADDRESS
09091  269B  AD 73 23              LDA MAP_ADDRESS + 1
09092  269E  69 00                 ADC #0
09093  26A0  8D 73 23              STA MAP_ADDRESS + 1
09094  26A3             
09095  26A3  60                    RTS
09096  26A4             @DONE
09097  26A4  60                    RTS
09098  26A5             
09099  26A5             ;-------------------------------------------------------------------------------
09100  26A5             ; SHIFT CHARS UP
09101  26A5             ;-------------------------------------------------------------------------------
09102  26A5             ; SHIFT THE CHARACTERS FOR A SCROLL GOING UP (CHARACTERS ARE MOVING DOWN)
09103  26A5             ;-------------------------------------------------------------------------------
09104  26A5             
09105  26A5             SHIFTCHARSUP 
09106  26A5  A5 26                 LDA CURRENT_SCREEN + 1
09107  26A7  C9 44                 CMP #>SCREEN2_MEM
09108  26A9  F0 03                 BEQ @SCREEN2
09109  26AB  4C B2 26              JMP @COPYFM1
09110  26AE             @SCREEN2
09111  26AE  4C 32 27              JMP @COPYFM2
09112  26B1  60                    RTS
09113  26B2             
09114  26B2             @COPYFM1
09115  26B2  A2 00                 LDX #0
09116  26B4             @COPYLOOP1 
09117  26B4             
09118  26B4  BD 00 40              LDA SCREEN1_MEM,X
09119  26B7  9D 28 44              STA SCREEN2_MEM + 40,X
09120  26BA             
09121  26BA  BD 28 40              LDA SCREEN1_MEM + 40,X
09122  26BD  9D 50 44              STA SCREEN2_MEM + 80,X
09123  26C0             
09124  26C0  BD 50 40              LDA SCREEN1_MEM + 80,X
09125  26C3  9D 78 44              STA SCREEN2_MEM + 120,X
09126  26C6             
09127  26C6  BD 78 40              LDA SCREEN1_MEM + 120,X
09128  26C9  9D A0 44              STA SCREEN2_MEM + 160,X
09129  26CC             
09130  26CC             
09131  26CC  BD A0 40              LDA SCREEN1_MEM + 160,X
09132  26CF  9D C8 44              STA SCREEN2_MEM + 200,X
09133  26D2             
09134  26D2  BD C8 40              LDA SCREEN1_MEM + 200,X
09135  26D5  9D F0 44              STA SCREEN2_MEM + 240,X
09136  26D8             
09137  26D8  BD F0 40              LDA SCREEN1_MEM + 240,X
09138  26DB  9D 18 45              STA SCREEN2_MEM + 280,X
09139  26DE             
09140  26DE  BD 18 41              LDA SCREEN1_MEM + 280,X
09141  26E1  9D 40 45              STA SCREEN2_MEM + 320,X
09142  26E4             
09143  26E4             
09144  26E4  BD 40 41              LDA SCREEN1_MEM + 320,X
09145  26E7  9D 68 45              STA SCREEN2_MEM + 360,X
09146  26EA             
09147  26EA  BD 68 41              LDA SCREEN1_MEM + 360,X
09148  26ED  9D 90 45              STA SCREEN2_MEM + 400,X
09149  26F0             
09150  26F0  BD 90 41              LDA SCREEN1_MEM + 400,X
09151  26F3  9D B8 45              STA SCREEN2_MEM + 440,X
09152  26F6             
09153  26F6  BD B8 41              LDA SCREEN1_MEM + 440,X
09154  26F9  9D E0 45              STA SCREEN2_MEM + 480,X
09155  26FC             
09156  26FC             
09157  26FC  BD E0 41              LDA SCREEN1_MEM + 480,X
09158  26FF  9D 08 46              STA SCREEN2_MEM + 520,X
09159  2702             
09160  2702  BD 08 42              LDA SCREEN1_MEM + 520,X
09161  2705  9D 30 46              STA SCREEN2_MEM + 560,X
09162  2708             
09163  2708  BD 30 42              LDA SCREEN1_MEM + 560,X
09164  270B  9D 58 46              STA SCREEN2_MEM + 600,X
09165  270E             
09166  270E  BD 58 42              LDA SCREEN1_MEM + 600,X
09167  2711  9D 80 46              STA SCREEN2_MEM + 640,X
09168  2714             
09169  2714             
09170  2714  BD 80 42              LDA SCREEN1_MEM + 640,X
09171  2717  9D A8 46              STA SCREEN2_MEM + 680,X
09172  271A             
09173  271A  BD A8 42              LDA SCREEN1_MEM + 680,X
09174  271D  9D D0 46              STA SCREEN2_MEM + 720,X
09175  2720             
09176  2720  BD D0 42              LDA SCREEN1_MEM + 720,X
09177  2723  9D F8 46              STA SCREEN2_MEM + 760,X
09178  2726             
09179  2726  BD F8 42              LDA SCREEN1_MEM + 760,X
09180  2729  9D 20 47              STA SCREEN2_MEM + 800,X
09181  272C  E8                    INX
09182  272D  E0 28                 CPX #40
09183  272F  D0 83                 BNE @COPYLOOP1
09184  2731  60                    RTS
09185  2732             
09186  2732             @COPYFM2
09187  2732  A2 00                 LDX #0
09188  2734             @COPYLOOP2 
09189  2734             
09190  2734  BD 00 44              LDA SCREEN2_MEM,X
09191  2737  9D 28 40              STA SCREEN1_MEM + 40,X
09192  273A             
09193  273A  BD 28 44              LDA SCREEN2_MEM + 40,X
09194  273D  9D 50 40              STA SCREEN1_MEM + 80,X
09195  2740             
09196  2740  BD 50 44              LDA SCREEN2_MEM + 80,X
09197  2743  9D 78 40              STA SCREEN1_MEM + 120,X
09198  2746             
09199  2746  BD 78 44              LDA SCREEN2_MEM + 120,X
09200  2749  9D A0 40              STA SCREEN1_MEM + 160,X
09201  274C             
09202  274C             
09203  274C  BD A0 44              LDA SCREEN2_MEM + 160,X
09204  274F  9D C8 40              STA SCREEN1_MEM + 200,X
09205  2752             
09206  2752  BD C8 44              LDA SCREEN2_MEM + 200,X
09207  2755  9D F0 40              STA SCREEN1_MEM + 240,X
09208  2758             
09209  2758  BD F0 44              LDA SCREEN2_MEM + 240,X
09210  275B  9D 18 41              STA SCREEN1_MEM + 280,X
09211  275E             
09212  275E  BD 18 45              LDA SCREEN2_MEM + 280,X
09213  2761  9D 40 41              STA SCREEN1_MEM + 320,X
09214  2764             
09215  2764             
09216  2764  BD 40 45              LDA SCREEN2_MEM + 320,X
09217  2767  9D 68 41              STA SCREEN1_MEM + 360,X
09218  276A             
09219  276A  BD 68 45              LDA SCREEN2_MEM + 360,X
09220  276D  9D 90 41              STA SCREEN1_MEM + 400,X
09221  2770             
09222  2770  BD 90 45              LDA SCREEN2_MEM + 400,X
09223  2773  9D B8 41              STA SCREEN1_MEM + 440,X
09224  2776             
09225  2776  BD B8 45              LDA SCREEN2_MEM + 440,X
09226  2779  9D E0 41              STA SCREEN1_MEM + 480,X
09227  277C             
09228  277C             
09229  277C  BD E0 45              LDA SCREEN2_MEM + 480,X
09230  277F  9D 08 42              STA SCREEN1_MEM + 520,X
09231  2782             
09232  2782  BD 08 46              LDA SCREEN2_MEM + 520,X
09233  2785  9D 30 42              STA SCREEN1_MEM + 560,X
09234  2788             
09235  2788  BD 30 46              LDA SCREEN2_MEM + 560,X
09236  278B  9D 58 42              STA SCREEN1_MEM + 600,X
09237  278E             
09238  278E  BD 58 46              LDA SCREEN2_MEM + 600,X
09239  2791  9D 80 42              STA SCREEN1_MEM + 640,X
09240  2794             
09241  2794  BD 80 46              LDA SCREEN2_MEM + 640,X
09242  2797  9D A8 42              STA SCREEN1_MEM + 680,X
09243  279A             
09244  279A  BD A8 46              LDA SCREEN2_MEM + 680,X
09245  279D  9D D0 42              STA SCREEN1_MEM + 720,X
09246  27A0             
09247  27A0  BD D0 46              LDA SCREEN2_MEM + 720,X
09248  27A3  9D F8 42              STA SCREEN1_MEM + 760,X
09249  27A6             
09250  27A6  BD F8 46              LDA SCREEN2_MEM + 760,X
09251  27A9  9D 20 43              STA SCREEN1_MEM + 800,X
09252  27AC  E8                    INX
09253  27AD  E0 28                 CPX #40
09254  27AF  D0 83                 BNE @COPYLOOP2
09255  27B1  60                    RTS
09256  27B2             
09257  27B2             
09258  27B2             ;-------------------------------------------------------------------------------
09259  27B2             ; SHIFT CHARS DOWN
09260  27B2             ;-------------------------------------------------------------------------------
09261  27B2             ; SHIFT THE CHARACTERS FOR A SCROLL GOING DOWN (CHARACTERS ARE MOVING UP)
09262  27B2             ;-------------------------------------------------------------------------------
09263  27B2             
09264  27B2             SHIFTCHARSDOWN 
09265  27B2  A5 26                 LDA CURRENT_SCREEN + 1
09266  27B4  C9 44                 CMP #>SCREEN2_MEM
09267  27B6  F0 03                 BEQ @SCREEN2
09268  27B8  4C BF 27              JMP @COPYFM1
09269  27BB             @SCREEN2
09270  27BB  4C 3F 28              JMP @COPYFM2
09271  27BE  60                    RTS
09272  27BF             
09273  27BF             @COPYFM1
09274  27BF  A2 00                 LDX #0
09275  27C1             @COPYLOOP1 
09276  27C1  BD 28 40              LDA SCREEN1_MEM + 40,X          ; TILE 1
09277  27C4  9D 00 44              STA SCREEN2_MEM,X
09278  27C7             
09279  27C7  BD 50 40              LDA SCREEN1_MEM + 80,X
09280  27CA  9D 28 44              STA SCREEN2_MEM + 40,X
09281  27CD             
09282  27CD  BD 78 40              LDA SCREEN1_MEM + 120,X
09283  27D0  9D 50 44              STA SCREEN2_MEM + 80,X
09284  27D3             
09285  27D3  BD A0 40              LDA SCREEN1_MEM + 160,X
09286  27D6  9D 78 44              STA SCREEN2_MEM + 120,X
09287  27D9             
09288  27D9             
09289  27D9  BD C8 40              LDA SCREEN1_MEM + 200,X         ; TILE 2
09290  27DC  9D A0 44              STA SCREEN2_MEM + 160,X
09291  27DF             
09292  27DF  BD F0 40              LDA SCREEN1_MEM + 240,X
09293  27E2  9D C8 44              STA SCREEN2_MEM + 200,X
09294  27E5             
09295  27E5  BD 18 41              LDA SCREEN1_MEM + 280,X
09296  27E8  9D F0 44              STA SCREEN2_MEM + 240,X
09297  27EB                        
09298  27EB  BD 40 41              LDA SCREEN1_MEM + 320,X
09299  27EE  9D 18 45              STA SCREEN2_MEM + 280,X
09300  27F1             
09301  27F1             
09302  27F1  BD 68 41              LDA SCREEN1_MEM + 360,X         ; TILE 3
09303  27F4  9D 40 45              STA SCREEN2_MEM + 320,X
09304  27F7             
09305  27F7  BD 90 41              LDA SCREEN1_MEM + 400,X
09306  27FA  9D 68 45              STA SCREEN2_MEM + 360,X
09307  27FD             
09308  27FD  BD B8 41              LDA SCREEN1_MEM + 440,X
09309  2800  9D 90 45              STA SCREEN2_MEM + 400,X
09310  2803             
09311  2803  BD E0 41              LDA SCREEN1_MEM + 480,X
09312  2806  9D B8 45              STA SCREEN2_MEM + 440,X
09313  2809             
09314  2809             
09315  2809  BD 08 42              LDA SCREEN1_MEM + 520,X         ; TILE 4
09316  280C  9D E0 45              STA SCREEN2_MEM + 480,X
09317  280F                        
09318  280F  BD 30 42              LDA SCREEN1_MEM + 560,X
09319  2812  9D 08 46              STA SCREEN2_MEM + 520,X
09320  2815                        
09321  2815  BD 58 42              LDA SCREEN1_MEM + 600,X
09322  2818  9D 30 46              STA SCREEN2_MEM + 560,X
09323  281B             
09324  281B  BD 80 42              LDA SCREEN1_MEM + 640,X
09325  281E  9D 58 46              STA SCREEN2_MEM + 600,X
09326  2821             
09327  2821             
09328  2821  BD A8 42              LDA SCREEN1_MEM + 680,X
09329  2824  9D 80 46              STA SCREEN2_MEM + 640,X
09330  2827                        
09331  2827  BD D0 42              LDA SCREEN1_MEM + 720,X
09332  282A  9D A8 46              STA SCREEN2_MEM + 680,X
09333  282D             
09334  282D  BD F8 42              LDA SCREEN1_MEM + 760,X
09335  2830  9D D0 46              STA SCREEN2_MEM + 720,X
09336  2833             
09337  2833  BD 20 43              LDA SCREEN1_MEM + 800,X
09338  2836  9D F8 46              STA SCREEN2_MEM + 760,X
09339  2839  E8                    INX
09340  283A  E0 28                 CPX #40
09341  283C  D0 83                 BNE @COPYLOOP1
09342  283E  60                    RTS
09343  283F             
09344  283F             
09345  283F             @COPYFM2
09346  283F  A2 00                 LDX #0
09347  2841             @COPYLOOP2 
09348  2841  BD 28 44              LDA SCREEN2_MEM + 40,X          ; TILE 1
09349  2844  9D 00 40              STA SCREEN1_MEM,X
09350  2847             
09351  2847  BD 50 44              LDA SCREEN2_MEM + 80,X
09352  284A  9D 28 40              STA SCREEN1_MEM + 40,X
09353  284D             
09354  284D  BD 78 44              LDA SCREEN2_MEM + 120,X
09355  2850  9D 50 40              STA SCREEN1_MEM + 80,X
09356  2853             
09357  2853  BD A0 44              LDA SCREEN2_MEM + 160,X
09358  2856  9D 78 40              STA SCREEN1_MEM + 120,X
09359  2859             
09360  2859             
09361  2859  BD C8 44              LDA SCREEN2_MEM + 200,X       ; TILE 2
09362  285C  9D A0 40              STA SCREEN1_MEM + 160,X
09363  285F             
09364  285F  BD F0 44              LDA SCREEN2_MEM + 240,X
09365  2862  9D C8 40              STA SCREEN1_MEM + 200,X
09366  2865             
09367  2865  BD 18 45              LDA SCREEN2_MEM + 280,X
09368  2868  9D F0 40              STA SCREEN1_MEM + 240,X
09369  286B                        
09370  286B  BD 40 45              LDA SCREEN2_MEM + 320,X
09371  286E  9D 18 41              STA SCREEN1_MEM + 280,X
09372  2871             
09373  2871             
09374  2871  BD 68 45              LDA SCREEN2_MEM + 360,X         ; TILE 3
09375  2874  9D 40 41              STA SCREEN1_MEM + 320,X
09376  2877             
09377  2877  BD 90 45              LDA SCREEN2_MEM + 400,X
09378  287A  9D 68 41              STA SCREEN1_MEM + 360,X
09379  287D             
09380  287D  BD B8 45              LDA SCREEN2_MEM + 440,X
09381  2880  9D 90 41              STA SCREEN1_MEM + 400,X
09382  2883             
09383  2883  BD E0 45              LDA SCREEN2_MEM + 480,X
09384  2886  9D B8 41              STA SCREEN1_MEM + 440,X
09385  2889             
09386  2889             
09387  2889  BD 08 46              LDA SCREEN2_MEM + 520,X         ; TILE 4
09388  288C  9D E0 41              STA SCREEN1_MEM + 480,X
09389  288F                        
09390  288F  BD 30 46              LDA SCREEN2_MEM + 560,X
09391  2892  9D 08 42              STA SCREEN1_MEM + 520,X
09392  2895                        
09393  2895  BD 58 46              LDA SCREEN2_MEM + 600,X
09394  2898  9D 30 42              STA SCREEN1_MEM + 560,X
09395  289B             
09396  289B  BD 80 46              LDA SCREEN2_MEM + 640,X
09397  289E  9D 58 42              STA SCREEN1_MEM + 600,X
09398  28A1             
09399  28A1  BD A8 46              LDA SCREEN2_MEM + 680,X         ; TILE 5
09400  28A4  9D 80 42              STA SCREEN1_MEM + 640,X
09401  28A7                        
09402  28A7  BD D0 46              LDA SCREEN2_MEM + 720,X
09403  28AA  9D A8 42              STA SCREEN1_MEM + 680,X
09404  28AD             
09405  28AD  BD F8 46              LDA SCREEN2_MEM + 760,X
09406  28B0  9D D0 42              STA SCREEN1_MEM + 720,X
09407  28B3             
09408  28B3  BD 20 47              LDA SCREEN2_MEM + 800,X
09409  28B6  9D F8 42              STA SCREEN1_MEM + 760,X
09410  28B9  E8                    INX
09411  28BA  E0 28                 CPX #40
09412  28BC  D0 83                 BNE @COPYLOOP2
09413  28BE             
09414  28BE  60                    RTS
09415  28BF             
09416  28BF             
09417  28BF             ;-------------------------------------------------------------------------------
09418  28BF             ; SHIFT CHARS LEFT
09419  28BF             ;-------------------------------------------------------------------------------
09420  28BF             ; SHIFT THE CHARACTERS FOR A SCROLL IN THE LEFT DIRECTION (CHARACTERS ARE
09421  28BF             ; MOVING RIGHT) ROUTINES ARE UNROLLED FOR SPEED
09422  28BF             ;-------------------------------------------------------------------------------
09423  28BF             
09424  28BF             SHIFTCHARSLEFT 
09425  28BF  A5 26                 LDA CURRENT_SCREEN + 1
09426  28C1  C9 44                 CMP #>SCREEN2_MEM
09427  28C3  F0 03                 BEQ @SCREEN2
09428  28C5  4C CC 28              JMP @COPYFM1
09429  28C8             @SCREEN2
09430  28C8  4C 46 29              JMP @COPYFM2
09431  28CB  60                    RTS
09432  28CC             @COPYFM1
09433  28CC  A2 00                 LDX #0
09434  28CE             @COPYLOOP1 
09435  28CE  BD 00 40              LDA SCREEN1_MEM,X
09436  28D1  9D 01 44              STA SCREEN2_MEM + 1,X
09437  28D4             
09438  28D4  BD 28 40              LDA SCREEN1_MEM + 40,X
09439  28D7  9D 29 44              STA SCREEN2_MEM + 41,X
09440  28DA             
09441  28DA  BD 50 40              LDA SCREEN1_MEM + 80,X
09442  28DD  9D 51 44              STA SCREEN2_MEM + 81,X
09443  28E0             
09444  28E0  BD 78 40              LDA SCREEN1_MEM + 120,X
09445  28E3  9D 79 44              STA SCREEN2_MEM + 121,X
09446  28E6                        
09447  28E6  BD A0 40              LDA SCREEN1_MEM + 160,X
09448  28E9  9D A1 44              STA SCREEN2_MEM + 161,X
09449  28EC             
09450  28EC  BD C8 40              LDA SCREEN1_MEM + 200,X
09451  28EF  9D C9 44              STA SCREEN2_MEM + 201,X
09452  28F2             
09453  28F2  BD F0 40              LDA SCREEN1_MEM + 240,X
09454  28F5  9D F1 44              STA SCREEN2_MEM + 241,X
09455  28F8             
09456  28F8  BD 18 41              LDA SCREEN1_MEM + 280,X
09457  28FB  9D 19 45              STA SCREEN2_MEM + 281,X
09458  28FE             
09459  28FE  BD 40 41              LDA SCREEN1_MEM + 320,X
09460  2901  9D 41 45              STA SCREEN2_MEM + 321,X
09461  2904             
09462  2904  BD 68 41              LDA SCREEN1_MEM + 360,X
09463  2907  9D 69 45              STA SCREEN2_MEM + 361,X
09464  290A             
09465  290A  BD 90 41              LDA SCREEN1_MEM + 400,X
09466  290D  9D 91 45              STA SCREEN2_MEM + 401,X
09467  2910             
09468  2910  BD B8 41              LDA SCREEN1_MEM + 440,X
09469  2913  9D B9 45              STA SCREEN2_MEM + 441,X
09470  2916             
09471  2916  BD E0 41              LDA SCREEN1_MEM + 480,X
09472  2919  9D E1 45              STA SCREEN2_MEM + 481,X
09473  291C             
09474  291C  BD 08 42              LDA SCREEN1_MEM + 520,X
09475  291F  9D 09 46              STA SCREEN2_MEM + 521,X
09476  2922             
09477  2922  BD 30 42              LDA SCREEN1_MEM + 560,X
09478  2925  9D 31 46              STA SCREEN2_MEM + 561,X
09479  2928             
09480  2928  BD 58 42              LDA SCREEN1_MEM + 600,X
09481  292B  9D 59 46              STA SCREEN2_MEM + 601,X
09482  292E             
09483  292E  BD 80 42              LDA SCREEN1_MEM + 640,X
09484  2931  9D 81 46              STA SCREEN2_MEM + 641,X
09485  2934                        
09486  2934  BD A8 42              LDA SCREEN1_MEM + 680,X
09487  2937  9D A9 46              STA SCREEN2_MEM + 681,X
09488  293A             
09489  293A  BD D0 42              LDA SCREEN1_MEM + 720,X
09490  293D  9D D1 46              STA SCREEN2_MEM + 721,X
09491  2940  E8                    INX
09492  2941  E0 27                 CPX #39
09493  2943  D0 89                 BNE @COPYLOOP1
09494  2945  60                    RTS
09495  2946             
09496  2946             @COPYFM2
09497  2946  A2 00                 LDX #0
09498  2948             @COPYLOOP2 
09499  2948  BD 00 44              LDA SCREEN2_MEM,X
09500  294B  9D 01 40              STA SCREEN1_MEM + 1,X
09501  294E             
09502  294E  BD 28 44              LDA SCREEN2_MEM + 40,X
09503  2951  9D 29 40              STA SCREEN1_MEM + 41,X
09504  2954             
09505  2954  BD 50 44              LDA SCREEN2_MEM + 80,X
09506  2957  9D 51 40              STA SCREEN1_MEM + 81,X
09507  295A             
09508  295A  BD 78 44              LDA SCREEN2_MEM + 120,X
09509  295D  9D 79 40              STA SCREEN1_MEM + 121,X
09510  2960                        
09511  2960  BD A0 44              LDA SCREEN2_MEM + 160,X
09512  2963  9D A1 40              STA SCREEN1_MEM + 161,X
09513  2966             
09514  2966  BD C8 44              LDA SCREEN2_MEM + 200,X
09515  2969  9D C9 40              STA SCREEN1_MEM + 201,X
09516  296C             
09517  296C  BD F0 44              LDA SCREEN2_MEM + 240,X
09518  296F  9D F1 40              STA SCREEN1_MEM + 241,X
09519  2972             
09520  2972  BD 18 45              LDA SCREEN2_MEM + 280,X
09521  2975  9D 19 41              STA SCREEN1_MEM + 281,X
09522  2978             
09523  2978  BD 40 45              LDA SCREEN2_MEM + 320,X
09524  297B  9D 41 41              STA SCREEN1_MEM + 321,X
09525  297E             
09526  297E  BD 68 45              LDA SCREEN2_MEM + 360,X
09527  2981  9D 69 41              STA SCREEN1_MEM + 361,X
09528  2984             
09529  2984  BD 90 45              LDA SCREEN2_MEM + 400,X
09530  2987  9D 91 41              STA SCREEN1_MEM + 401,X
09531  298A             
09532  298A  BD B8 45              LDA SCREEN2_MEM + 440,X
09533  298D  9D B9 41              STA SCREEN1_MEM + 441,X
09534  2990             
09535  2990  BD E0 45              LDA SCREEN2_MEM + 480,X
09536  2993  9D E1 41              STA SCREEN1_MEM + 481,X
09537  2996             
09538  2996  BD 08 46              LDA SCREEN2_MEM + 520,X
09539  2999  9D 09 42              STA SCREEN1_MEM + 521,X
09540  299C             
09541  299C  BD 30 46              LDA SCREEN2_MEM + 560,X
09542  299F  9D 31 42              STA SCREEN1_MEM + 561,X
09543  29A2             
09544  29A2  BD 58 46              LDA SCREEN2_MEM + 600,X
09545  29A5  9D 59 42              STA SCREEN1_MEM + 601,X
09546  29A8             
09547  29A8  BD 80 46              LDA SCREEN2_MEM + 640,X
09548  29AB  9D 81 42              STA SCREEN1_MEM + 641,X
09549  29AE                        
09550  29AE  BD A8 46              LDA SCREEN2_MEM + 680,X
09551  29B1  9D A9 42              STA SCREEN1_MEM + 681,X
09552  29B4             
09553  29B4  BD D0 46              LDA SCREEN2_MEM + 720,X
09554  29B7  9D D1 42              STA SCREEN1_MEM + 721,X
09555  29BA  E8                    INX
09556  29BB  E0 27                 CPX #39
09557  29BD  D0 89                 BNE @COPYLOOP2
09558  29BF  60                    RTS
09559  29C0             
09560  29C0             
09561  29C0             
09562  29C0             ;-------------------------------------------------------------------------------
09563  29C0             ; SHIFT COLOR LEFT
09564  29C0             ;-------------------------------------------------------------------------------
09565  29C0             
09566  29C0             COLORSHIFTLEFT 
09567  29C0  A2 26                 LDX #38
09568  29C2             @COPYLOOP
09569  29C2  BD 00 D8              LDA COLOR_MEM,X
09570  29C5  9D 01 D8              STA COLOR_MEM + 1,X
09571  29C8             
09572  29C8  BD 28 D8              LDA COLOR_MEM + 40,X
09573  29CB  9D 29 D8              STA COLOR_MEM + 41,X
09574  29CE             
09575  29CE  BD 50 D8              LDA COLOR_MEM + 80,X
09576  29D1  9D 51 D8              STA COLOR_MEM + 81,X
09577  29D4                        
09578  29D4  BD 78 D8              LDA COLOR_MEM + 120,X
09579  29D7  9D 79 D8              STA COLOR_MEM + 121,X
09580  29DA             
09581  29DA  BD A0 D8              LDA COLOR_MEM + 160,X
09582  29DD  9D A1 D8              STA COLOR_MEM + 161,X
09583  29E0             
09584  29E0  BD C8 D8              LDA COLOR_MEM + 200,X
09585  29E3  9D C9 D8              STA COLOR_MEM + 201,X
09586  29E6             
09587  29E6  BD F0 D8              LDA COLOR_MEM + 240,X
09588  29E9  9D F1 D8              STA COLOR_MEM + 241,X
09589  29EC             
09590  29EC  BD 18 D9              LDA COLOR_MEM + 280,X
09591  29EF  9D 19 D9              STA COLOR_MEM + 281,X
09592  29F2             
09593  29F2  BD 40 D9              LDA COLOR_MEM + 320,X
09594  29F5  9D 41 D9              STA COLOR_MEM + 321,X
09595  29F8             
09596  29F8  BD 68 D9              LDA COLOR_MEM + 360,X
09597  29FB  9D 69 D9              STA COLOR_MEM + 361,X
09598  29FE             
09599  29FE  BD 90 D9              LDA COLOR_MEM + 400,X
09600  2A01  9D 91 D9              STA COLOR_MEM + 401,X
09601  2A04             
09602  2A04  BD B8 D9              LDA COLOR_MEM + 440,X
09603  2A07  9D B9 D9              STA COLOR_MEM + 441,X
09604  2A0A             
09605  2A0A  BD E0 D9              LDA COLOR_MEM + 480,X
09606  2A0D  9D E1 D9              STA COLOR_MEM + 481,X
09607  2A10             
09608  2A10  BD 08 DA              LDA COLOR_MEM + 520,X
09609  2A13  9D 09 DA              STA COLOR_MEM + 521,X
09610  2A16             
09611  2A16  BD 30 DA              LDA COLOR_MEM + 560,X
09612  2A19  9D 31 DA              STA COLOR_MEM + 561,X
09613  2A1C             
09614  2A1C  BD 58 DA              LDA COLOR_MEM + 600,X
09615  2A1F  9D 59 DA              STA COLOR_MEM + 601,X
09616  2A22             
09617  2A22  BD 80 DA              LDA COLOR_MEM + 640,X
09618  2A25  9D 81 DA              STA COLOR_MEM + 641,X
09619  2A28             
09620  2A28  BD A8 DA              LDA COLOR_MEM + 680,X
09621  2A2B  9D A9 DA              STA COLOR_MEM + 681,X
09622  2A2E             
09623  2A2E  BD D0 DA              LDA COLOR_MEM + 720,X
09624  2A31  9D D1 DA              STA COLOR_MEM + 721,X
09625  2A34  CA                    DEX
09626  2A35  10 8B                 BPL @COPYLOOP
09627  2A37  60                    RTS
09628  2A38             
09629  2A38             
09630  2A38             ;-------------------------------------------------------------------------------
09631  2A38             ; SHIFT CHARS RIGHT
09632  2A38             ;-------------------------------------------------------------------------------
09633  2A38             ; SHIFT THE CHARACTERS FOR A SCROLL IN THE RIGHT DIRECTION (THE CHARACTERS ARE
09634  2A38             ; ACTUALLY MOVING LEFT) THESE ROUTINES ARE UNROLLED FOR SPEED
09635  2A38             ;-------------------------------------------------------------------------------
09636  2A38             
09637  2A38             SHIFTCHARSRIGHT 
09638  2A38                        
09639  2A38  A5 26                 LDA CURRENT_SCREEN + 1          ; DETECT OUR FRONT SCREEN / BACKSCREEN
09640  2A3A  C9 44                 CMP #>SCREEN2_MEM               ; CHECK FOR SCREEN2
09641  2A3C  F0 03                 BEQ @SCREEN2
09642  2A3E  4C 44 2A              JMP @COPYFM1                    ; WE USE JMP BECAUSE IT WILL BE > 256 BYTES
09643  2A41             @SCREEN2
09644  2A41  4C BE 2A              JMP @COPYFM2
09645  2A44             
09646  2A44                        ;--------------------------------- COPY FROM SCREEN1 TO SCREEN2
09647  2A44             @COPYFM1
09648  2A44  A2 00                 LDX #0
09649  2A46             @COPYLOOP1 
09650  2A46  BD 01 40              LDA SCREEN1_MEM + 1,X
09651  2A49  9D 00 44              STA SCREEN2_MEM,X
09652  2A4C             
09653  2A4C  BD 29 40              LDA SCREEN1_MEM + 41,X
09654  2A4F  9D 28 44              STA SCREEN2_MEM + 40,X
09655  2A52                        
09656  2A52  BD 51 40              LDA SCREEN1_MEM + 81,X
09657  2A55  9D 50 44              STA SCREEN2_MEM + 80,X
09658  2A58             
09659  2A58  BD 79 40              LDA SCREEN1_MEM + 121,X
09660  2A5B  9D 78 44              STA SCREEN2_MEM + 120,X
09661  2A5E                        
09662  2A5E  BD A1 40              LDA SCREEN1_MEM + 161,X
09663  2A61  9D A0 44              STA SCREEN2_MEM + 160,X
09664  2A64                        
09665  2A64  BD C9 40              LDA SCREEN1_MEM + 201,X
09666  2A67  9D C8 44              STA SCREEN2_MEM + 200,X
09667  2A6A             
09668  2A6A  BD F1 40              LDA SCREEN1_MEM + 241,X
09669  2A6D  9D F0 44              STA SCREEN2_MEM + 240,X
09670  2A70             
09671  2A70  BD 19 41              LDA SCREEN1_MEM + 281,X
09672  2A73  9D 18 45              STA SCREEN2_MEM + 280,X
09673  2A76             
09674  2A76  BD 41 41              LDA SCREEN1_MEM + 321,X
09675  2A79  9D 40 45              STA SCREEN2_MEM + 320,X
09676  2A7C             
09677  2A7C  BD 69 41              LDA SCREEN1_MEM + 361,X
09678  2A7F  9D 68 45              STA SCREEN2_MEM + 360,X
09679  2A82             
09680  2A82  BD 91 41              LDA SCREEN1_MEM + 401,X
09681  2A85  9D 90 45              STA SCREEN2_MEM + 400,X
09682  2A88             
09683  2A88  BD B9 41              LDA SCREEN1_MEM + 441,X
09684  2A8B  9D B8 45              STA SCREEN2_MEM + 440,X
09685  2A8E             
09686  2A8E  BD E1 41              LDA SCREEN1_MEM + 481,X
09687  2A91  9D E0 45              STA SCREEN2_MEM + 480,X
09688  2A94             
09689  2A94  BD 09 42              LDA SCREEN1_MEM + 521,X
09690  2A97  9D 08 46              STA SCREEN2_MEM + 520,X
09691  2A9A             
09692  2A9A  BD 31 42              LDA SCREEN1_MEM + 561,X
09693  2A9D  9D 30 46              STA SCREEN2_MEM + 560,X
09694  2AA0             
09695  2AA0  BD 59 42              LDA SCREEN1_MEM + 601,X
09696  2AA3  9D 58 46              STA SCREEN2_MEM + 600,X
09697  2AA6             
09698  2AA6  BD 81 42              LDA SCREEN1_MEM + 641,X
09699  2AA9  9D 80 46              STA SCREEN2_MEM + 640,X
09700  2AAC                        
09701  2AAC  BD A9 42              LDA SCREEN1_MEM + 681,X
09702  2AAF  9D A8 46              STA SCREEN2_MEM + 680,X
09703  2AB2             
09704  2AB2  BD D1 42              LDA SCREEN1_MEM + 721,X
09705  2AB5  9D D0 46              STA SCREEN2_MEM + 720,X
09706  2AB8  E8                    INX
09707  2AB9  E0 27                 CPX #39
09708  2ABB  D0 89                 BNE @COPYLOOP1
09709  2ABD  60                    RTS
09710  2ABE             
09711  2ABE                        ;--------------------------------- COPY FROM SCREEN2 TO SCREEN1
09712  2ABE             @COPYFM2
09713  2ABE  A2 00                 LDX #0
09714  2AC0             @COPYLOOP2 
09715  2AC0  BD 01 44              LDA SCREEN2_MEM + 1,X
09716  2AC3  9D 00 40              STA SCREEN1_MEM,X
09717  2AC6             
09718  2AC6  BD 29 44              LDA SCREEN2_MEM + 41,X
09719  2AC9  9D 28 40              STA SCREEN1_MEM + 40,X
09720  2ACC                        
09721  2ACC  BD 51 44              LDA SCREEN2_MEM + 81,X
09722  2ACF  9D 50 40              STA SCREEN1_MEM + 80,X
09723  2AD2             
09724  2AD2  BD 79 44              LDA SCREEN2_MEM + 121,X
09725  2AD5  9D 78 40              STA SCREEN1_MEM + 120,X
09726  2AD8                        
09727  2AD8  BD A1 44              LDA SCREEN2_MEM + 161,X
09728  2ADB  9D A0 40              STA SCREEN1_MEM + 160,X
09729  2ADE                        
09730  2ADE  BD C9 44              LDA SCREEN2_MEM + 201,X
09731  2AE1  9D C8 40              STA SCREEN1_MEM + 200,X
09732  2AE4             
09733  2AE4  BD F1 44              LDA SCREEN2_MEM + 241,X
09734  2AE7  9D F0 40              STA SCREEN1_MEM + 240,X
09735  2AEA             
09736  2AEA  BD 19 45              LDA SCREEN2_MEM + 281,X
09737  2AED  9D 18 41              STA SCREEN1_MEM + 280,X
09738  2AF0             
09739  2AF0  BD 41 45              LDA SCREEN2_MEM + 321,X
09740  2AF3  9D 40 41              STA SCREEN1_MEM + 320,X
09741  2AF6             
09742  2AF6  BD 69 45              LDA SCREEN2_MEM + 361,X
09743  2AF9  9D 68 41              STA SCREEN1_MEM + 360,X
09744  2AFC             
09745  2AFC  BD 91 45              LDA SCREEN2_MEM + 401,X
09746  2AFF  9D 90 41              STA SCREEN1_MEM + 400,X
09747  2B02             
09748  2B02  BD B9 45              LDA SCREEN2_MEM + 441,X
09749  2B05  9D B8 41              STA SCREEN1_MEM + 440,X
09750  2B08             
09751  2B08  BD E1 45              LDA SCREEN2_MEM + 481,X
09752  2B0B  9D E0 41              STA SCREEN1_MEM + 480,X
09753  2B0E             
09754  2B0E  BD 09 46              LDA SCREEN2_MEM + 521,X
09755  2B11  9D 08 42              STA SCREEN1_MEM + 520,X
09756  2B14             
09757  2B14  BD 31 46              LDA SCREEN2_MEM + 561,X
09758  2B17  9D 30 42              STA SCREEN1_MEM + 560,X
09759  2B1A             
09760  2B1A  BD 59 46              LDA SCREEN2_MEM + 601,X
09761  2B1D  9D 58 42              STA SCREEN1_MEM + 600,X
09762  2B20             
09763  2B20  BD 81 46              LDA SCREEN2_MEM + 641,X
09764  2B23  9D 80 42              STA SCREEN1_MEM + 640,X
09765  2B26                        
09766  2B26  BD A9 46              LDA SCREEN2_MEM + 681,X
09767  2B29  9D A8 42              STA SCREEN1_MEM + 680,X
09768  2B2C             
09769  2B2C  BD D1 46              LDA SCREEN2_MEM + 721,X
09770  2B2F  9D D0 42              STA SCREEN1_MEM + 720,X
09771  2B32  E8                    INX
09772  2B33  E0 27                 CPX #39
09773  2B35  D0 89                 BNE @COPYLOOP2
09774  2B37  60                    RTS
09775  2B38             
09776  2B38             
09777  2B38             ;-------------------------------------------------------------------------------
09778  2B38             ; COLOR SHIFT RIGHT
09779  2B38             ;-------------------------------------------------------------------------------
09780  2B38             ; SHIFT THE COLOR FOR RIGHT SCROLLING BY ONE CHARACTER
09781  2B38             ;-------------------------------------------------------------------------------
09782  2B38             
09783  2B38             COLORSHIFTRIGHT 
09784  2B38  A2 00                 LDX #0
09785  2B3A             @COPYLOOP
09786  2B3A  BD 01 D8              LDA COLOR_MEM + 1,X
09787  2B3D  9D 00 D8              STA COLOR_MEM,X
09788  2B40             
09789  2B40  BD 29 D8              LDA COLOR_MEM + 41,X
09790  2B43  9D 28 D8              STA COLOR_MEM + 40,X
09791  2B46             
09792  2B46  BD 51 D8              LDA COLOR_MEM + 81,X
09793  2B49  9D 50 D8              STA COLOR_MEM + 80,X
09794  2B4C                        
09795  2B4C  BD 79 D8              LDA COLOR_MEM + 121,X
09796  2B4F  9D 78 D8              STA COLOR_MEM + 120,X
09797  2B52             
09798  2B52  BD A1 D8              LDA COLOR_MEM + 161,X
09799  2B55  9D A0 D8              STA COLOR_MEM + 160,X
09800  2B58             
09801  2B58  BD C9 D8              LDA COLOR_MEM + 201,X
09802  2B5B  9D C8 D8              STA COLOR_MEM + 200,X
09803  2B5E             
09804  2B5E  BD F1 D8              LDA COLOR_MEM + 241,X
09805  2B61  9D F0 D8              STA COLOR_MEM + 240,X
09806  2B64             
09807  2B64  BD 19 D9              LDA COLOR_MEM + 281,X
09808  2B67  9D 18 D9              STA COLOR_MEM + 280,X
09809  2B6A             
09810  2B6A  BD 41 D9              LDA COLOR_MEM + 321,X
09811  2B6D  9D 40 D9              STA COLOR_MEM + 320,X
09812  2B70             
09813  2B70  BD 69 D9              LDA COLOR_MEM + 361,X
09814  2B73  9D 68 D9              STA COLOR_MEM + 360,X
09815  2B76             
09816  2B76  BD 91 D9              LDA COLOR_MEM + 401,X
09817  2B79  9D 90 D9              STA COLOR_MEM + 400,X
09818  2B7C             
09819  2B7C  BD B9 D9              LDA COLOR_MEM + 441,X
09820  2B7F  9D B8 D9              STA COLOR_MEM + 440,X
09821  2B82             
09822  2B82  BD E1 D9              LDA COLOR_MEM + 481,X
09823  2B85  9D E0 D9              STA COLOR_MEM + 480,X
09824  2B88             
09825  2B88  BD 09 DA              LDA COLOR_MEM + 521,X
09826  2B8B  9D 08 DA              STA COLOR_MEM + 520,X
09827  2B8E             
09828  2B8E  BD 31 DA              LDA COLOR_MEM + 561,X
09829  2B91  9D 30 DA              STA COLOR_MEM + 560,X
09830  2B94             
09831  2B94  BD 59 DA              LDA COLOR_MEM + 601,X
09832  2B97  9D 58 DA              STA COLOR_MEM + 600,X
09833  2B9A             
09834  2B9A  BD 81 DA              LDA COLOR_MEM + 641,X
09835  2B9D  9D 80 DA              STA COLOR_MEM + 640,X
09836  2BA0             
09837  2BA0  BD A9 DA              LDA COLOR_MEM + 681,X
09838  2BA3  9D A8 DA              STA COLOR_MEM + 680,X
09839  2BA6             
09840  2BA6  BD D1 DA              LDA COLOR_MEM + 721,X
09841  2BA9  9D D0 DA              STA COLOR_MEM + 720,X
09842  2BAC  E8                    INX
09843  2BAD  E0 27                 CPX #39
09844  2BAF  D0 89                 BNE @COPYLOOP
09845  2BB1  60                    RTS
09846  2BB2             
09847  2BB2             
09848  2BB2             ;-------------------------------------------------------------------------------
09849  2BB2             ; SHIFT COLORS UP
09850  2BB2             ;-------------------------------------------------------------------------------
09851  2BB2             
09852  2BB2             COLORSHIFTUP 
09853  2BB2  A2 00                 LDX #0
09854  2BB4             
09855  2BB4             @COPYLOOP
09856  2BB4  BD A8 DA              LDA COLOR_MEM + 680,X
09857  2BB7  9D D0 DA              STA COLOR_MEM + 720,X
09858  2BBA             
09859  2BBA  BD 80 DA              LDA COLOR_MEM + 640,X
09860  2BBD  9D A8 DA              STA COLOR_MEM + 680,X
09861  2BC0             
09862  2BC0  BD 58 DA              LDA COLOR_MEM + 600,X
09863  2BC3  9D 80 DA              STA COLOR_MEM + 640,X
09864  2BC6             
09865  2BC6  BD 30 DA              LDA COLOR_MEM + 560,X
09866  2BC9  9D 58 DA              STA COLOR_MEM + 600,X
09867  2BCC             
09868  2BCC             
09869  2BCC  BD 08 DA              LDA COLOR_MEM + 520,X
09870  2BCF  9D 30 DA              STA COLOR_MEM + 560,X
09871  2BD2             
09872  2BD2  BD E0 D9              LDA COLOR_MEM + 480,X
09873  2BD5  9D 08 DA              STA COLOR_MEM + 520,X
09874  2BD8             
09875  2BD8  BD B8 D9              LDA COLOR_MEM + 440,X
09876  2BDB  9D E0 D9              STA COLOR_MEM + 480,X
09877  2BDE             
09878  2BDE  BD 90 D9              LDA COLOR_MEM + 400,X
09879  2BE1  9D B8 D9              STA COLOR_MEM + 440,X
09880  2BE4             
09881  2BE4             
09882  2BE4  BD 68 D9              LDA COLOR_MEM + 360,X
09883  2BE7  9D 90 D9              STA COLOR_MEM + 400,X
09884  2BEA             
09885  2BEA  BD 40 D9              LDA COLOR_MEM + 320,X
09886  2BED  9D 68 D9              STA COLOR_MEM + 360,X
09887  2BF0             
09888  2BF0  BD 18 D9              LDA COLOR_MEM + 280,X
09889  2BF3  9D 40 D9              STA COLOR_MEM + 320,X
09890  2BF6                        
09891  2BF6  BD F0 D8              LDA COLOR_MEM + 240,X
09892  2BF9  9D 18 D9              STA COLOR_MEM + 280,X
09893  2BFC             
09894  2BFC  BD C8 D8              LDA COLOR_MEM + 200,X
09895  2BFF  9D F0 D8              STA COLOR_MEM + 240,X
09896  2C02             
09897  2C02             
09898  2C02  BD A0 D8              LDA COLOR_MEM + 160,X
09899  2C05  9D C8 D8              STA COLOR_MEM + 200,X
09900  2C08             
09901  2C08  BD 78 D8              LDA COLOR_MEM + 120,X
09902  2C0B  9D A0 D8              STA COLOR_MEM + 160,X
09903  2C0E             
09904  2C0E  BD 50 D8              LDA COLOR_MEM + 80,X
09905  2C11  9D 78 D8              STA COLOR_MEM + 120,X
09906  2C14             
09907  2C14  BD 28 D8              LDA COLOR_MEM + 40,X
09908  2C17  9D 50 D8              STA COLOR_MEM + 80,X
09909  2C1A             
09910  2C1A  BD 00 D8              LDA COLOR_MEM,X
09911  2C1D  9D 28 D8              STA COLOR_MEM + 40,X
09912  2C20  E8                    INX
09913  2C21  E0 28                 CPX #40
09914  2C23  D0 8F                 BNE @COPYLOOP
09915  2C25  60                    RTS
09916  2C26             
09917  2C26             ;-------------------------------------------------------------------------------
09918  2C26             ; SHIFT COLORS DOWN
09919  2C26             ;-------------------------------------------------------------------------------
09920  2C26             
09921  2C26             COLORSHIFTDOWN 
09922  2C26  A2 00                 LDX #0
09923  2C28             @COPYLOOP
09924  2C28  BD 28 D8              LDA COLOR_MEM + 40,X          ; TILE 1
09925  2C2B  9D 00 D8              STA COLOR_MEM,X
09926  2C2E             
09927  2C2E  BD 50 D8              LDA COLOR_MEM + 80,X
09928  2C31  9D 28 D8              STA COLOR_MEM + 40,X
09929  2C34             
09930  2C34  BD 78 D8              LDA COLOR_MEM + 120,X
09931  2C37  9D 50 D8              STA COLOR_MEM + 80,X
09932  2C3A             
09933  2C3A  BD A0 D8              LDA COLOR_MEM + 160,X
09934  2C3D  9D 78 D8              STA COLOR_MEM + 120,X
09935  2C40             
09936  2C40             
09937  2C40  BD C8 D8              LDA COLOR_MEM + 200,X       ; TILE 2
09938  2C43  9D A0 D8              STA COLOR_MEM + 160,X
09939  2C46             
09940  2C46  BD F0 D8              LDA COLOR_MEM + 240,X
09941  2C49  9D C8 D8              STA COLOR_MEM + 200,X
09942  2C4C             
09943  2C4C  BD 18 D9              LDA COLOR_MEM + 280,X
09944  2C4F  9D F0 D8              STA COLOR_MEM + 240,X
09945  2C52                        
09946  2C52  BD 40 D9              LDA COLOR_MEM + 320,X
09947  2C55  9D 18 D9              STA COLOR_MEM + 280,X
09948  2C58             
09949  2C58             
09950  2C58  BD 68 D9              LDA COLOR_MEM + 360,X         ; TILE 3
09951  2C5B  9D 40 D9              STA COLOR_MEM + 320,X
09952  2C5E             
09953  2C5E  BD 90 D9              LDA COLOR_MEM + 400,X
09954  2C61  9D 68 D9              STA COLOR_MEM + 360,X
09955  2C64             
09956  2C64  BD B8 D9              LDA COLOR_MEM + 440,X
09957  2C67  9D 90 D9              STA COLOR_MEM + 400,X
09958  2C6A             
09959  2C6A  BD E0 D9              LDA COLOR_MEM + 480,X
09960  2C6D  9D B8 D9              STA COLOR_MEM + 440,X
09961  2C70             
09962  2C70             
09963  2C70  BD 08 DA              LDA COLOR_MEM + 520,X         ; TILE 4
09964  2C73  9D E0 D9              STA COLOR_MEM + 480,X
09965  2C76                        
09966  2C76  BD 30 DA              LDA COLOR_MEM + 560,X
09967  2C79  9D 08 DA              STA COLOR_MEM + 520,X
09968  2C7C                        
09969  2C7C  BD 58 DA              LDA COLOR_MEM + 600,X
09970  2C7F  9D 30 DA              STA COLOR_MEM + 560,X
09971  2C82             
09972  2C82  BD 80 DA              LDA COLOR_MEM + 640,X
09973  2C85  9D 58 DA              STA COLOR_MEM + 600,X
09974  2C88             
09975  2C88             
09976  2C88  BD A8 DA              LDA COLOR_MEM + 680,X         ; TILE 5
09977  2C8B  9D 80 DA              STA COLOR_MEM + 640,X
09978  2C8E                        
09979  2C8E  BD D0 DA              LDA COLOR_MEM + 720,X
09980  2C91  9D A8 DA              STA COLOR_MEM + 680,X
09981  2C94             
09982  2C94             ;        LDA COLOR_MEM + 760,X
09983  2C94             ;        STA COLOR_MEM + 720,X
09984  2C94             
09985  2C94             ;        LDA COLOR_MEM + 800,X
09986  2C94             ;        STA COLOR_MEM + 760,X
09987  2C94  E8                    INX
09988  2C95  E0 28                 CPX #40
09989  2C97  D0 8F                 BNE @COPYLOOP
09990  2C99  60                    RTS
09991  2C9A             
09992  2C9A             ;-------------------------------------------------------------------------------
09993  2C9A             ; DRAW UP BUFFER
09994  2C9A             ;-------------------------------------------------------------------------------
09995  2C9A             ; DRAW THE CHARACTERS IN THE VERTICAL BUFFER TO THE TOP LINE OF THE SCROLLING SCREEN
09996  2C9A             ;-------------------------------------------------------------------------------
09997  2C9A             ;-------------------------------------------------------------------------------
09998  2C9A             ; <SCREEN2_MEM, >SCREEN2_MEM - READS SWITCHING SCREEN BACKGROUNDS
09999  2C9A             ;===============================================================================
10000  2C9A             ; ; DRAWS UP TO 40 PIXELS (CPY #40)
10001  2C9A             ;===============================================================================
10002  2C9A             
10003  2C9A             DRAWUPBUFFER 
10004  2C9A                        
10005  2C9A             
10006  2C9A             
10007  2C9A  A9 70                 LDA #<VERTICAL_BUFFER
10008  2C9C  85 17                 STA ZEROPAGE_POINTER_1
10009  2C9E  A9 32                 LDA #>VERTICAL_BUFFER
10010  2CA0  85 18                 STA ZEROPAGE_POINTER_1 + 1
10011  2CA2             
10012  2CA2             
10013  2CA2  A5 28                 LDA CURRENT_BUFFER + 1
10014  2CA4  C9 44                 CMP #>SCREEN2_MEM
10015  2CA6  F0 14                 BEQ @SCREEN2
10016  2CA8             
10017  2CA8  A9 00                 LDA #<SCREEN1_MEM
10018  2CAA  85 19                 STA ZEROPAGE_POINTER_2
10019  2CAC  A9 40                 LDA #>SCREEN1_MEM
10020  2CAE  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10021  2CB0             
10022  2CB0  A0 00                 LDY #0
10023  2CB2             @COPYLOOP1 
10024  2CB2  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10025  2CB4  91 19                 STA (ZEROPAGE_POINTER_2),Y
10026  2CB6             
10027  2CB6  C8                    INY
10028  2CB7  C0 28                 CPY #40
10029  2CB9  D0 F7                 BNE @COPYLOOP1
10030  2CBB  60                    RTS
10031  2CBC             
10032  2CBC             @SCREEN2
10033  2CBC             
10034  2CBC  A9 00                 LDA #<SCREEN2_MEM
10035  2CBE  85 19                 STA ZEROPAGE_POINTER_2
10036  2CC0  A9 44                 LDA #>SCREEN2_MEM
10037  2CC2  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10038  2CC4             
10039  2CC4  A0 00                 LDY #0
10040  2CC6             @COPYLOOP2 
10041  2CC6  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10042  2CC8  91 19                 STA (ZEROPAGE_POINTER_2),Y
10043  2CCA  C8                    INY
10044  2CCB  C0 28                 CPY #40
10045  2CCD  D0 F7                 BNE @COPYLOOP2
10046  2CCF  60                    RTS
10047  2CD0             
10048  2CD0             
10049  2CD0             ;-------------------------------------------------------------------------------
10050  2CD0             ; DRAW DOWN BUFFER
10051  2CD0             ;-------------------------------------------------------------------------------
10052  2CD0             ; DRAW THE CHARACTERS IN THE VERTICAL BUFFER TO THE BOTTOM LINE OF THE SCROLLING SCREEN
10053  2CD0             ;-------------------------------------------------------------------------------
10054  2CD0             
10055  2CD0             BOTTOM_DRAW_LINE = 17
10056  2CD0             
10057  2CD0             
10058  2CD0             DRAWDOWNBUFFER 
10059  2CD0             
10060  2CD0             
10061  2CD0             
10062  2CD0  A9 70                 LDA #<VERTICAL_BUFFER
10063  2CD2  85 17                 STA ZEROPAGE_POINTER_1
10064  2CD4  A9 32                 LDA #>VERTICAL_BUFFER
10065  2CD6  85 18                 STA ZEROPAGE_POINTER_1 + 1
10066  2CD8             
10067  2CD8             
10068  2CD8  A2 11                 LDX #BOTTOM_DRAW_LINE           ; LINE TO DRAW TO
10069  2CDA             
10070  2CDA             
10071  2CDA  A5 28                 LDA CURRENT_BUFFER + 1
10072  2CDC  C9 44                 CMP #>SCREEN2_MEM
10073  2CDE  F0 16                 BEQ @SCREEN2
10074  2CE0             
10075  2CE0                        ; TO DO - UNWRAP IF REQUIRED
10076  2CE0             
10077  2CE0  BD 09 21              LDA SCREEN1_LINE_OFFSET_TABLE_LO,X
10078  2CE3  85 19                 STA ZEROPAGE_POINTER_2
10079  2CE5  BD 22 21              LDA SCREEN1_LINE_OFFSET_TABLE_HI,X
10080  2CE8  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10081  2CEA             
10082  2CEA  A0 00                 LDY #0
10083  2CEC             @COPYLOOP
10084  2CEC  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10085  2CEE  91 19                 STA (ZEROPAGE_POINTER_2),Y
10086  2CF0  C8                    INY
10087  2CF1  C0 28                 CPY #40
10088  2CF3  D0 F7                 BNE @COPYLOOP
10089  2CF5  60                    RTS
10090  2CF6             
10091  2CF6             @SCREEN2
10092  2CF6  BD 3B 21              LDA SCREEN2_LINE_OFFSET_TABLE_LO,X
10093  2CF9  85 19                 STA ZEROPAGE_POINTER_2
10094  2CFB  BD 54 21              LDA SCREEN2_LINE_OFFSET_TABLE_HI,X
10095  2CFE  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10096  2D00             
10097  2D00  A0 00                 LDY #0
10098  2D02             @COPYLOOP2 
10099  2D02  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10100  2D04  91 19                 STA (ZEROPAGE_POINTER_2),Y
10101  2D06             
10102  2D06  C8                    INY
10103  2D07  C0 28                 CPY #40
10104  2D09  D0 F7                 BNE @COPYLOOP2
10105  2D0B             
10106  2D0B  60                    RTS
10107  2D0C             
10108  2D0C             ;-------------------------------------------------------------------------------
10109  2D0C             ; DRAW UP COLOR
10110  2D0C             ;-------------------------------------------------------------------------------
10111  2D0C             ; WRITE THE CONTENTS OF THE VERTICAL_COLOR_BUFFER TO THE TOP 'OFF SCREEN' LINE
10112  2D0C             ; IN COLOR RAM
10113  2D0C             ;-------------------------------------------------------------------------------
10114  2D0C             
10115  2D0C             DRAWUPCOLOR 
10116  2D0C             
10117  2D0C             
10118  2D0C             
10119  2D0C  A9 98                 LDA #<VERTICAL_COLOR_BUFFER
10120  2D0E  85 17                 STA ZEROPAGE_POINTER_1
10121  2D10  A9 32                 LDA #>VERTICAL_COLOR_BUFFER
10122  2D12  85 18                 STA ZEROPAGE_POINTER_1 + 1
10123  2D14             
10124  2D14             
10125  2D14  A9 00                 LDA #<COLOR_MEM
10126  2D16  85 19                 STA ZEROPAGE_POINTER_2
10127  2D18  A9 D8                 LDA #>COLOR_MEM
10128  2D1A  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10129  2D1C             
10130  2D1C  A0 00                 LDY #0
10131  2D1E             @COPYLOOP
10132  2D1E  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10133  2D20  91 19                 STA (ZEROPAGE_POINTER_2),Y
10134  2D22             
10135  2D22  C8                    INY
10136  2D23  C0 28                 CPY #40
10137  2D25  D0 F7                 BNE @COPYLOOP
10138  2D27             
10139  2D27  60                    RTS
10140  2D28             
10141  2D28             
10142  2D28             ;-------------------------------------------------------------------------------
10143  2D28             ; DRAW DOWN COLOR
10144  2D28             ;-------------------------------------------------------------------------------
10145  2D28             ; WRITE THE CONTENTS OF THE VERTICAL_COLOR_BUFFER TO THE BOTTOM 'OFF SCREEN'
10146  2D28             ; LINE IN COLOR RAM
10147  2D28             ;-------------------------------------------------------------------------------
10148  2D28             
10149  2D28             DRAWDOWNCOLOR 
10150  2D28             
10151  2D28  A2 11                 LDX #BOTTOM_DRAW_LINE
10152  2D2A             
10153  2D2A             
10154  2D2A             
10155  2D2A  A9 98                 LDA #<VERTICAL_COLOR_BUFFER
10156  2D2C  85 17                 STA ZEROPAGE_POINTER_1
10157  2D2E  A9 32                 LDA #>VERTICAL_COLOR_BUFFER
10158  2D30  85 18                 STA ZEROPAGE_POINTER_1 + 1
10159  2D32             
10160  2D32                        
10161  2D32  BD 6D 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X
10162  2D35  85 19                 STA ZEROPAGE_POINTER_2
10163  2D37  BD 86 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
10164  2D3A  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10165  2D3C             
10166  2D3C  A0 00                 LDY #0
10167  2D3E             
10168  2D3E             @COPYLOOP
10169  2D3E  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10170  2D40  91 19                 STA (ZEROPAGE_POINTER_2),Y
10171  2D42             
10172  2D42  C8                    INY
10173  2D43  C0 28                 CPY #40
10174  2D45  D0 F7                 BNE @COPYLOOP
10175  2D47             
10176  2D47  60                    RTS
10177  2D48             
10178  2D48             ;-------------------------------------------------------------------------------
10179  2D48             ; DRAW LEFT BUFFER
10180  2D48             ;-------------------------------------------------------------------------------
10181  2D48             ; DRAW THE CONTENTS OF THE HORIZONTAL BUFFER TO THE BACKBUFFER - UNROLLED FOR SPEED
10182  2D48             ;-------------------------------------------------------------------------------
10183  2D48             ; SCREEN1_MEM - SCREEN ONE DRAWS FROM 40,760 (19 LINES TO THE LEFT)
10184  2D48             ;===============================================================================
10185  2D48             
10186  2D48             DRAWLEFTBUFFER 
10187  2D48  A5 28                 LDA CURRENT_BUFFER + 1
10188  2D4A  C9 44                 CMP #>SCREEN2_MEM
10189  2D4C  F0 79                 BEQ @SCREEN2
10190  2D4E             
10191  2D4E  AD 44 32              LDA HORIZONTAL_BUFFER
10192  2D51  8D 00 40              STA SCREEN1_MEM
10193  2D54  AD 45 32              LDA HORIZONTAL_BUFFER + 1
10194  2D57  8D 28 40              STA SCREEN1_MEM + 40
10195  2D5A  AD 46 32              LDA HORIZONTAL_BUFFER + 2
10196  2D5D  8D 50 40              STA SCREEN1_MEM + 80
10197  2D60  AD 47 32              LDA HORIZONTAL_BUFFER + 3
10198  2D63  8D 78 40              STA SCREEN1_MEM + 120
10199  2D66             
10200  2D66  AD 48 32              LDA HORIZONTAL_BUFFER + 4
10201  2D69  8D A0 40              STA SCREEN1_MEM + 160
10202  2D6C  AD 49 32              LDA HORIZONTAL_BUFFER + 5
10203  2D6F  8D C8 40              STA SCREEN1_MEM + 200
10204  2D72  AD 4A 32              LDA HORIZONTAL_BUFFER + 6
10205  2D75  8D F0 40              STA SCREEN1_MEM + 240
10206  2D78  AD 4B 32              LDA HORIZONTAL_BUFFER + 7
10207  2D7B  8D 18 41              STA SCREEN1_MEM + 280
10208  2D7E             
10209  2D7E  AD 4C 32              LDA HORIZONTAL_BUFFER + 8
10210  2D81  8D 40 41              STA SCREEN1_MEM + 320
10211  2D84  AD 4D 32              LDA HORIZONTAL_BUFFER + 9
10212  2D87  8D 68 41              STA SCREEN1_MEM + 360
10213  2D8A  AD 4E 32              LDA HORIZONTAL_BUFFER + 10
10214  2D8D  8D 90 41              STA SCREEN1_MEM + 400
10215  2D90  AD 4F 32              LDA HORIZONTAL_BUFFER + 11
10216  2D93  8D B8 41              STA SCREEN1_MEM + 440
10217  2D96             
10218  2D96  AD 50 32              LDA HORIZONTAL_BUFFER + 12
10219  2D99  8D E0 41              STA SCREEN1_MEM + 480
10220  2D9C  AD 51 32              LDA HORIZONTAL_BUFFER + 13
10221  2D9F  8D 08 42              STA SCREEN1_MEM + 520
10222  2DA2  AD 52 32              LDA HORIZONTAL_BUFFER + 14
10223  2DA5  8D 30 42              STA SCREEN1_MEM + 560
10224  2DA8  AD 53 32              LDA HORIZONTAL_BUFFER + 15
10225  2DAB  8D 58 42              STA SCREEN1_MEM + 600
10226  2DAE             
10227  2DAE  AD 54 32              LDA HORIZONTAL_BUFFER + 16
10228  2DB1  8D 80 42              STA SCREEN1_MEM + 640
10229  2DB4  AD 55 32              LDA HORIZONTAL_BUFFER + 17
10230  2DB7  8D A8 42              STA SCREEN1_MEM + 680
10231  2DBA  AD 56 32              LDA HORIZONTAL_BUFFER + 18
10232  2DBD  8D D0 42              STA SCREEN1_MEM + 720
10233  2DC0  AD 57 32              LDA HORIZONTAL_BUFFER + 19
10234  2DC3  8D F8 42              STA SCREEN1_MEM + 760
10235  2DC6             
10236  2DC6  60                    RTS
10237  2DC7             @SCREEN2
10238  2DC7  AD 44 32              LDA HORIZONTAL_BUFFER
10239  2DCA  8D 00 44              STA SCREEN2_MEM
10240  2DCD  AD 45 32              LDA HORIZONTAL_BUFFER + 1
10241  2DD0  8D 28 44              STA SCREEN2_MEM + 40
10242  2DD3  AD 46 32              LDA HORIZONTAL_BUFFER + 2
10243  2DD6  8D 50 44              STA SCREEN2_MEM + 80
10244  2DD9  AD 47 32              LDA HORIZONTAL_BUFFER + 3
10245  2DDC  8D 78 44              STA SCREEN2_MEM + 120
10246  2DDF             
10247  2DDF  AD 48 32              LDA HORIZONTAL_BUFFER + 4
10248  2DE2  8D A0 44              STA SCREEN2_MEM + 160
10249  2DE5  AD 49 32              LDA HORIZONTAL_BUFFER + 5
10250  2DE8  8D C8 44              STA SCREEN2_MEM + 200
10251  2DEB  AD 4A 32              LDA HORIZONTAL_BUFFER + 6
10252  2DEE  8D F0 44              STA SCREEN2_MEM + 240
10253  2DF1  AD 4B 32              LDA HORIZONTAL_BUFFER + 7
10254  2DF4  8D 18 45              STA SCREEN2_MEM + 280
10255  2DF7             
10256  2DF7  AD 4C 32              LDA HORIZONTAL_BUFFER + 8
10257  2DFA  8D 40 45              STA SCREEN2_MEM + 320
10258  2DFD  AD 4D 32              LDA HORIZONTAL_BUFFER + 9
10259  2E00  8D 68 45              STA SCREEN2_MEM + 360
10260  2E03  AD 4E 32              LDA HORIZONTAL_BUFFER + 10
10261  2E06  8D 90 45              STA SCREEN2_MEM + 400
10262  2E09  AD 4F 32              LDA HORIZONTAL_BUFFER + 11
10263  2E0C  8D B8 45              STA SCREEN2_MEM + 440
10264  2E0F             
10265  2E0F  AD 50 32              LDA HORIZONTAL_BUFFER + 12
10266  2E12  8D E0 45              STA SCREEN2_MEM + 480
10267  2E15  AD 51 32              LDA HORIZONTAL_BUFFER + 13
10268  2E18  8D 08 46              STA SCREEN2_MEM + 520
10269  2E1B  AD 52 32              LDA HORIZONTAL_BUFFER + 14
10270  2E1E  8D 30 46              STA SCREEN2_MEM + 560
10271  2E21  AD 53 32              LDA HORIZONTAL_BUFFER + 15
10272  2E24  8D 58 46              STA SCREEN2_MEM + 600
10273  2E27             
10274  2E27  AD 54 32              LDA HORIZONTAL_BUFFER + 16
10275  2E2A  8D 80 46              STA SCREEN2_MEM + 640
10276  2E2D  AD 55 32              LDA HORIZONTAL_BUFFER + 17
10277  2E30  8D A8 46              STA SCREEN2_MEM + 680
10278  2E33  AD 56 32              LDA HORIZONTAL_BUFFER + 18
10279  2E36  8D D0 46              STA SCREEN2_MEM + 720
10280  2E39  AD 57 32              LDA HORIZONTAL_BUFFER + 19
10281  2E3C  8D F8 46              STA SCREEN2_MEM + 760
10282  2E3F             
10283  2E3F  60                    RTS
10284  2E40             
10285  2E40             ;-------------------------------------------------------------------------------
10286  2E40             ; DRAW RIGHT COLOR
10287  2E40             ;-------------------------------------------------------------------------------
10288  2E40             
10289  2E40             DRAWLEFTCOLOR 
10290  2E40  AD 5A 32              LDA HORIZONTAL_COLOR_BUFFER
10291  2E43  8D 00 D8              STA COLOR_MEM
10292  2E46  AD 5B 32              LDA HORIZONTAL_COLOR_BUFFER + 1
10293  2E49  8D 28 D8              STA COLOR_MEM + 40
10294  2E4C  AD 5C 32              LDA HORIZONTAL_COLOR_BUFFER + 2
10295  2E4F  8D 50 D8              STA COLOR_MEM + 80
10296  2E52  AD 5D 32              LDA HORIZONTAL_COLOR_BUFFER + 3
10297  2E55  8D 78 D8              STA COLOR_MEM + 120
10298  2E58             
10299  2E58  AD 5E 32              LDA HORIZONTAL_COLOR_BUFFER + 4
10300  2E5B  8D A0 D8              STA COLOR_MEM + 160
10301  2E5E  AD 5F 32              LDA HORIZONTAL_COLOR_BUFFER + 5
10302  2E61  8D C8 D8              STA COLOR_MEM + 200
10303  2E64  AD 60 32              LDA HORIZONTAL_COLOR_BUFFER + 6
10304  2E67  8D F0 D8              STA COLOR_MEM + 240
10305  2E6A  AD 61 32              LDA HORIZONTAL_COLOR_BUFFER + 7
10306  2E6D  8D 18 D9              STA COLOR_MEM + 280
10307  2E70             
10308  2E70  AD 62 32              LDA HORIZONTAL_COLOR_BUFFER + 8
10309  2E73  8D 40 D9              STA COLOR_MEM + 320
10310  2E76  AD 63 32              LDA HORIZONTAL_COLOR_BUFFER + 9
10311  2E79  8D 68 D9              STA COLOR_MEM + 360
10312  2E7C  AD 64 32              LDA HORIZONTAL_COLOR_BUFFER + 10
10313  2E7F  8D 90 D9              STA COLOR_MEM + 400
10314  2E82  AD 65 32              LDA HORIZONTAL_COLOR_BUFFER + 11
10315  2E85  8D B8 D9              STA COLOR_MEM + 440
10316  2E88             
10317  2E88  AD 66 32              LDA HORIZONTAL_COLOR_BUFFER + 12
10318  2E8B  8D E0 D9              STA COLOR_MEM + 480
10319  2E8E  AD 67 32              LDA HORIZONTAL_COLOR_BUFFER + 13
10320  2E91  8D 08 DA              STA COLOR_MEM + 520
10321  2E94  AD 68 32              LDA HORIZONTAL_COLOR_BUFFER + 14
10322  2E97  8D 30 DA              STA COLOR_MEM + 560
10323  2E9A  AD 69 32              LDA HORIZONTAL_COLOR_BUFFER + 15
10324  2E9D  8D 58 DA              STA COLOR_MEM + 600
10325  2EA0             
10326  2EA0  AD 6A 32              LDA HORIZONTAL_COLOR_BUFFER + 16
10327  2EA3  8D 80 DA              STA COLOR_MEM + 640
10328  2EA6  AD 6B 32              LDA HORIZONTAL_COLOR_BUFFER + 17
10329  2EA9  8D A8 DA              STA COLOR_MEM + 680
10330  2EAC  AD 6C 32              LDA HORIZONTAL_COLOR_BUFFER + 18
10331  2EAF  8D D0 DA              STA COLOR_MEM + 720
10332  2EB2  AD 6D 32              LDA HORIZONTAL_COLOR_BUFFER + 19
10333  2EB5  8D F8 DA              STA COLOR_MEM + 760
10334  2EB8             
10335  2EB8  60                    RTS
10336  2EB9             
10337  2EB9             ;-------------------------------------------------------------------------------
10338  2EB9             ; DRAW RIGHT BUFFER
10339  2EB9             ;-------------------------------------------------------------------------------
10340  2EB9             ; DRAW THE CONTENTS OF THE RIGHT BUFFER TO THE BACKBUFFER - UNROLLED FOR SPEED
10341  2EB9             ;-------------------------------------------------------------------------------
10342  2EB9             ; SCREEN1_MEM - SCREEN ONE DRAWS FROM 39,799 (19 LINES TO THE RIGHT)
10343  2EB9             ;===============================================================================
10344  2EB9             
10345  2EB9             DRAWRIGHTBUFFER 
10346  2EB9  A5 28                 LDA CURRENT_BUFFER + 1
10347  2EBB  C9 44                 CMP #>SCREEN2_MEM
10348  2EBD  F0 79                 BEQ @SCREEN2
10349  2EBF                        
10350  2EBF  AD 44 32              LDA HORIZONTAL_BUFFER
10351  2EC2  8D 27 40              STA SCREEN1_MEM + 39
10352  2EC5  AD 45 32              LDA HORIZONTAL_BUFFER + 1
10353  2EC8  8D 4F 40              STA SCREEN1_MEM + 79
10354  2ECB  AD 46 32              LDA HORIZONTAL_BUFFER + 2
10355  2ECE  8D 77 40              STA SCREEN1_MEM + 119
10356  2ED1  AD 47 32              LDA HORIZONTAL_BUFFER + 3
10357  2ED4  8D 9F 40              STA SCREEN1_MEM + 159
10358  2ED7             
10359  2ED7  AD 48 32              LDA HORIZONTAL_BUFFER + 4
10360  2EDA  8D C7 40              STA SCREEN1_MEM + 199
10361  2EDD  AD 49 32              LDA HORIZONTAL_BUFFER + 5
10362  2EE0  8D EF 40              STA SCREEN1_MEM + 239
10363  2EE3  AD 4A 32              LDA HORIZONTAL_BUFFER + 6
10364  2EE6  8D 17 41              STA SCREEN1_MEM + 279
10365  2EE9  AD 4B 32              LDA HORIZONTAL_BUFFER + 7
10366  2EEC  8D 3F 41              STA SCREEN1_MEM + 319
10367  2EEF             
10368  2EEF  AD 4C 32              LDA HORIZONTAL_BUFFER + 8
10369  2EF2  8D 67 41              STA SCREEN1_MEM + 359
10370  2EF5  AD 4D 32              LDA HORIZONTAL_BUFFER + 9
10371  2EF8  8D 8F 41              STA SCREEN1_MEM + 399
10372  2EFB  AD 4E 32              LDA HORIZONTAL_BUFFER + 10
10373  2EFE  8D B7 41              STA SCREEN1_MEM + 439
10374  2F01  AD 4F 32              LDA HORIZONTAL_BUFFER + 11
10375  2F04  8D DF 41              STA SCREEN1_MEM + 479
10376  2F07             
10377  2F07  AD 50 32              LDA HORIZONTAL_BUFFER + 12
10378  2F0A  8D 07 42              STA SCREEN1_MEM + 519
10379  2F0D  AD 51 32              LDA HORIZONTAL_BUFFER + 13
10380  2F10  8D 2F 42              STA SCREEN1_MEM + 559
10381  2F13  AD 52 32              LDA HORIZONTAL_BUFFER + 14
10382  2F16  8D 57 42              STA SCREEN1_MEM + 599
10383  2F19  AD 53 32              LDA HORIZONTAL_BUFFER + 15
10384  2F1C  8D 7F 42              STA SCREEN1_MEM + 639
10385  2F1F             
10386  2F1F  AD 54 32              LDA HORIZONTAL_BUFFER + 16
10387  2F22  8D A7 42              STA SCREEN1_MEM + 679
10388  2F25  AD 55 32              LDA HORIZONTAL_BUFFER + 17
10389  2F28  8D CF 42              STA SCREEN1_MEM + 719
10390  2F2B  AD 56 32              LDA HORIZONTAL_BUFFER + 18
10391  2F2E  8D F7 42              STA SCREEN1_MEM + 759
10392  2F31  AD 57 32              LDA HORIZONTAL_BUFFER + 19
10393  2F34  8D 1F 43              STA SCREEN1_MEM + 799
10394  2F37             
10395  2F37  60                    RTS
10396  2F38             @SCREEN2
10397  2F38             
10398  2F38  AD 44 32              LDA HORIZONTAL_BUFFER
10399  2F3B  8D 27 44              STA SCREEN2_MEM + 39
10400  2F3E  AD 45 32              LDA HORIZONTAL_BUFFER + 1
10401  2F41  8D 4F 44              STA SCREEN2_MEM + 79
10402  2F44  AD 46 32              LDA HORIZONTAL_BUFFER + 2
10403  2F47  8D 77 44              STA SCREEN2_MEM + 119
10404  2F4A  AD 47 32              LDA HORIZONTAL_BUFFER + 3
10405  2F4D  8D 9F 44              STA SCREEN2_MEM + 159
10406  2F50             
10407  2F50  AD 48 32              LDA HORIZONTAL_BUFFER + 4
10408  2F53  8D C7 44              STA SCREEN2_MEM + 199
10409  2F56  AD 49 32              LDA HORIZONTAL_BUFFER + 5
10410  2F59  8D EF 44              STA SCREEN2_MEM + 239
10411  2F5C  AD 4A 32              LDA HORIZONTAL_BUFFER + 6
10412  2F5F  8D 17 45              STA SCREEN2_MEM + 279
10413  2F62  AD 4B 32              LDA HORIZONTAL_BUFFER + 7
10414  2F65  8D 3F 45              STA SCREEN2_MEM + 319
10415  2F68             
10416  2F68  AD 4C 32              LDA HORIZONTAL_BUFFER + 8
10417  2F6B  8D 67 45              STA SCREEN2_MEM + 359
10418  2F6E  AD 4D 32              LDA HORIZONTAL_BUFFER + 9
10419  2F71  8D 8F 45              STA SCREEN2_MEM + 399
10420  2F74  AD 4E 32              LDA HORIZONTAL_BUFFER + 10
10421  2F77  8D B7 45              STA SCREEN2_MEM + 439
10422  2F7A  AD 4F 32              LDA HORIZONTAL_BUFFER + 11
10423  2F7D  8D DF 45              STA SCREEN2_MEM + 479
10424  2F80             
10425  2F80  AD 50 32              LDA HORIZONTAL_BUFFER + 12
10426  2F83  8D 07 46              STA SCREEN2_MEM + 519
10427  2F86  AD 51 32              LDA HORIZONTAL_BUFFER + 13
10428  2F89  8D 2F 46              STA SCREEN2_MEM + 559
10429  2F8C  AD 52 32              LDA HORIZONTAL_BUFFER + 14
10430  2F8F  8D 57 46              STA SCREEN2_MEM + 599
10431  2F92  AD 53 32              LDA HORIZONTAL_BUFFER + 15
10432  2F95  8D 7F 46              STA SCREEN2_MEM + 639
10433  2F98             
10434  2F98  AD 54 32              LDA HORIZONTAL_BUFFER + 16
10435  2F9B  8D A7 46              STA SCREEN2_MEM + 679
10436  2F9E  AD 55 32              LDA HORIZONTAL_BUFFER + 17
10437  2FA1  8D CF 46              STA SCREEN2_MEM + 719
10438  2FA4  AD 56 32              LDA HORIZONTAL_BUFFER + 18
10439  2FA7  8D F7 46              STA SCREEN2_MEM + 759
10440  2FAA  AD 57 32              LDA HORIZONTAL_BUFFER + 19
10441  2FAD  8D 1F 47              STA SCREEN2_MEM + 799
10442  2FB0  60                    RTS
10443  2FB1             
10444  2FB1             ;-------------------------------------------------------------------------------
10445  2FB1             ; DRAW RIGHT COLOR
10446  2FB1             ;-------------------------------------------------------------------------------
10447  2FB1             
10448  2FB1             DRAWRIGHTCOLOR 
10449  2FB1  AD 5A 32              LDA HORIZONTAL_COLOR_BUFFER
10450  2FB4  8D 27 D8              STA COLOR_MEM + 39
10451  2FB7  AD 5B 32              LDA HORIZONTAL_COLOR_BUFFER + 1
10452  2FBA  8D 4F D8              STA COLOR_MEM + 79
10453  2FBD  AD 5C 32              LDA HORIZONTAL_COLOR_BUFFER + 2
10454  2FC0  8D 77 D8              STA COLOR_MEM + 119
10455  2FC3  AD 5D 32              LDA HORIZONTAL_COLOR_BUFFER + 3
10456  2FC6  8D 9F D8              STA COLOR_MEM + 159
10457  2FC9             
10458  2FC9  AD 5E 32              LDA HORIZONTAL_COLOR_BUFFER + 4
10459  2FCC  8D C7 D8              STA COLOR_MEM + 199
10460  2FCF  AD 5F 32              LDA HORIZONTAL_COLOR_BUFFER + 5
10461  2FD2  8D EF D8              STA COLOR_MEM + 239
10462  2FD5  AD 60 32              LDA HORIZONTAL_COLOR_BUFFER + 6
10463  2FD8  8D 17 D9              STA COLOR_MEM + 279
10464  2FDB  AD 61 32              LDA HORIZONTAL_COLOR_BUFFER + 7
10465  2FDE  8D 3F D9              STA COLOR_MEM + 319
10466  2FE1             
10467  2FE1  AD 62 32              LDA HORIZONTAL_COLOR_BUFFER + 8
10468  2FE4  8D 67 D9              STA COLOR_MEM + 359
10469  2FE7  AD 63 32              LDA HORIZONTAL_COLOR_BUFFER + 9
10470  2FEA  8D 8F D9              STA COLOR_MEM + 399
10471  2FED  AD 64 32              LDA HORIZONTAL_COLOR_BUFFER + 10
10472  2FF0  8D B7 D9              STA COLOR_MEM + 439
10473  2FF3  AD 65 32              LDA HORIZONTAL_COLOR_BUFFER + 11
10474  2FF6  8D DF D9              STA COLOR_MEM + 479
10475  2FF9             
10476  2FF9  AD 66 32              LDA HORIZONTAL_COLOR_BUFFER + 12
10477  2FFC  8D 07 DA              STA COLOR_MEM + 519
10478  2FFF  AD 67 32              LDA HORIZONTAL_COLOR_BUFFER + 13
10479  3002  8D 2F DA              STA COLOR_MEM + 559
10480  3005  AD 68 32              LDA HORIZONTAL_COLOR_BUFFER + 14
10481  3008  8D 57 DA              STA COLOR_MEM + 599
10482  300B  AD 69 32              LDA HORIZONTAL_COLOR_BUFFER + 15
10483  300E  8D 7F DA              STA COLOR_MEM + 639
10484  3011             
10485  3011  AD 6A 32              LDA HORIZONTAL_COLOR_BUFFER + 16
10486  3014  8D A7 DA              STA COLOR_MEM + 679
10487  3017  AD 6B 32              LDA HORIZONTAL_COLOR_BUFFER + 17
10488  301A  8D CF DA              STA COLOR_MEM + 719
10489  301D  AD 6C 32              LDA HORIZONTAL_COLOR_BUFFER + 18
10490  3020  8D F7 DA              STA COLOR_MEM + 759
10491  3023  AD 6D 32              LDA HORIZONTAL_COLOR_BUFFER + 19
10492  3026  8D 1F DB              STA COLOR_MEM + 799
10493  3029  60                    RTS
10494  302A             
10495  302A             
10496  302A             ;-------------------------------------------------------------------------------
10497  302A             ; COPY TO VERTICAL BUFFER
10498  302A             ;-------------------------------------------------------------------------------
10499  302A             ; COPY THE DATA NEEDED TO THE VERTICAL_BUFFER AND VERTICAL_COLOR_BUFFER FOR
10500  302A             ; EDGE DRAWING OF NEW CHARACTERS ON THE 'JUMP FRAME'
10501  302A             ;
10502  302A             ; NOTE : THIS WILL HAVE TO BE REWRITTEN TO COMBINE VERT AND HORIZ SCROLLING AND
10503  302A             ; DELTA VALUES
10504  302A             ;-------------------------------------------------------------------------------
10505  302A             ; MAP_X_POS = PARAM1, MAP_X_DELTA = PARAM3
10506  302A             ;===============================================================================
10507  302A             ; SCROLL_DIRECTION, #SCROLL_DOWN - CHECKS HOW FAR WE SCROLLED VERTICALLY
10508  302A             ;===============================================================================
10509  302A             ; MAP_Y_DELTA = AND MASKED WITH #0011. THEN MAP_Y_DELTA = PARAM4
10510  302A             ;===============================================================================
10511  302A             
10512  302A             COPYVERTICALBUFFER 
10513  302A             
10514  302A                        ; VARIABLES:
10515  302A                        ; PARAM1 = MAP X POSITION (FOR THE TILE TO BE READ FROM)
10516  302A                        ; PARAM2 = ADJUSTED MAP Y POSITION FOR THE TILE TO BE READ FROM
10517  302A                        ; PARAM3 = ADJUSTED MAP X DELTA
10518  302A                        ; PARAM4 = ADJUSTED MAP Y DELTA
10519  302A             
10520  302A  A5 30                 LDA MAP_X_POS           ; LOAD THE MAP X POSITION
10521  302C  85 03                 STA PARAM1
10522  302E  A5 32                 LDA MAP_X_DELTA         ; LOAD THE MAP X DELTA (POSITION WITHIN TILE)
10523  3030  85 05                 STA PARAM3
10524  3032             
10525  3032  A5 31                 LDA MAP_Y_POS
10526  3034             
10527  3034                        ; WHAT DIRECTION ARE WE SCROLLING? UP OR DOWN?
10528  3034                        ; THE DIRECTION WILL DICTATE HOW WE CALCULATE
10529  3034                        ; WHAT TILE
10530  3034                        ; WE NEED TO READ FROM
10531  3034  A6 2C                 LDX SCROLL_DIRECTION
10532  3036  E0 04                 CPX #SCROLL_DOWN
10533  3038  F0 13                 BEQ @SCROLLINGDOWN
10534  303A                        ;-----------------------------------------------------------------------
10535  303A                        ; DIRECTION UP
10536  303A                        ; SCROLLING UP.  THE TILE WE NEED IS THE SAME
10537  303A                        ; IF MAP_Y_DELTA
10538  303A                        ; IS > 0.   IF IT'S EQUAL TO 0, WE NEED MAP_Y - 1.
10539  303A                        ; THE DELTA IS OBVIOUSLY CURRENT DELTA - 1
10540  303A             @SCROLLINGUP 
10541  303A             
10542  303A                        ; A CURRENTLY HOLDS MAP_Y_POS
10543  303A  85 04                 STA PARAM2              ; STORE IT IN PARAM2
10544  303C                        
10545  303C  A6 33                 LDX MAP_Y_DELTA
10546  303E  CA                    DEX
10547  303F  8A                    TXA
10548  3040  29 03                 AND #%0011
10549  3042  85 06                 STA PARAM4              ; STORE ADJUSTED Y DELTA
10550  3044  C9 03                 CMP #3                  ; ORIGINAL DELTA WAS 0
10551  3046  D0 1A                 BNE @FETCHTILE          ; IF != 3 TILE DOESN'T DECREASE
10552  3048             
10553  3048  C6 04                 DEC PARAM2              ; DECREMENT MAP_Y (IN PARAM2)
10554  304A  4C 62 30              JMP @FETCHTILE
10555  304D             
10556  304D                        ;-----------------------------------------------------------------------
10557  304D                        ; DIRECTION DOWN
10558  304D                        ; SCROLLING DOWN, THE TILE WE NEED IS MAP_Y + 4
10559  304D                        ; AND THE CHARACTER LINE WITHIN THE TILE IS
10560  304D                        ; MAP_Y_DELTA + 2
10561  304D                        ; THIS MEANS WE MAY BE READING FROM TILE
10562  304D                        ; MAP_Y + 5 IF THE
10563  304D                        ; MAP_Y_DELTA >= 2
10564  304D                        ; SO IF WE ADD 2 THEN AND %0011 (3) TO IT, TO
10565  304D                        ; MASK IT
10566  304D                        ; BACK TO A 0-3 VALUE.. IF OUR VALUE > MAP_Y_DELTA
10567  304D                        ; WE ARE IN THE
10568  304D                        ; SAME TILE. ELSE WE ADVANCE TO THE NEXT TILE DOWN
10569  304D             @SCROLLINGDOWN 
10570  304D             
10571  304D  18                    CLC                     ; A STILL CONTAINS MAP_POS_Y
10572  304E  69 04                 ADC #4                  ; ADD 4 TO GET THE CORRECT TILE
10573  3050  85 04                 STA PARAM2              ; PARAM 2 CONTAINS THE THE 'ADJUSTED MAP Y POSITION'
10574  3052             
10575  3052  A6 33                 LDX MAP_Y_DELTA         ; FETCH DELTA Y IN X
10576  3054  E8                    INX
10577  3055  E8                    INX                     ; INCREMENT BY 2
10578  3056  8A                    TXA                     ; TRANSFER TO A
10579  3057  29 03                 AND #%0011               ; MASK TO 0-3 VALUE
10580  3059  85 06                 STA PARAM4              ; SAVE THE ADJUSTED DELTA VALUE
10581  305B             
10582  305B  18                    CLC
10583  305C  C5 33                 CMP MAP_Y_DELTA         ; COMPARE - IF CARRY IS SET, VALUE IS >= THAN DELTA (SAME TILE)
10584  305E  B0 02                 BCS @FETCHTILE          ; SO WE TAKE PARAM2 AND CONTINUE TO FETCH THE TILE
10585  3060             
10586  3060  E6 04                 INC PARAM2              ; INCREMENT OUR ADJUSTED MAP_Y TO THE NEXT TILE DOWN
10587  3062             
10588  3062             ;                               NEXT WE HAVE TO FETCH THE CORRECT TILE FROM THE MAP
10589  3062             ;                               OPTIMIZATION NOTE : STORE THE MAP Y LINE ADDRESS SO
10590  3062             ;                               WE DON'T HAVE TO LOOK IT UP EVERY LOOP ITERATION
10591  3062             
10592  3062             @FETCHTILE 
10593  3062  A9 00                 LDA #0
10594  3064  8D 98 31              STA BUFFER_INDEX                ; RESET TO THE START OF THE BUFFER
10595  3067             ;        STA TILE_COUNTER                ; AND RESET THE TILE COUNTER FOR THE LOOP
10596  3067             
10597  3067                        ; LATER WE NEED TO USE THE ADJUSTED Y DELTA VALUE
10598  3067                        ; TO GET THE CORRECT LINE IN THE TILE. EACH LINE IS
10599  3067                        ; 4 TILES, SO WE NEED TO MULTIPLY THE VALUE BY 4
10600  3067                        ; ONCE ADDED TO THE TILE ADDRESS, WE CAN THEN PULL
10601  3067                        ; VALUES FROM THE CORRECT LINE
10602  3067  06 06                 ASL PARAM4
10603  3069  06 06                 ASL PARAM4
10604  306B             
10605  306B             
10606  306B  A6 04                 LDX PARAM2                      ; GET OUR ADJUSTED MAP_Y_POS TO GET THE MAP LINE
10607  306D             
10608  306D  AD 34 10              LDA MAPTWOLOADED
10609  3070  D0 0D                 BNE @LEVELTWOVERTMAP
10610  3072             
10611  3072  BD 74 23              LDA MAP2025_LINE_LOOKUP_LO,X        ; AND STORE THE ADDRESS FOR THAT LINE IN
10612  3075  85 19                 STA ZEROPAGE_POINTER_2          ; ZEROPAGE_POINTER_1
10613  3077  BD 8A 23              LDA MAP2025_LINE_LOOKUP_HI,X
10614  307A  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10615  307C  4C 89 30              JMP @TILELOOP
10616  307F             
10617  307F             ; MAPTWOLOADED=1
10618  307F             @LEVELTWOVERTMAP 
10619  307F  BD A0 23              LDA ALLEYMAP_LINE_LOOKUP_LO,X
10620  3082  85 19                 STA ZEROPAGE_POINTER_2
10621  3084  BD B6 23              LDA ALLEYMAP_LINE_LOOKUP_HI,X
10622  3087  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10623  3089             
10624  3089             @TILELOOP  ; WE THEN USE THE MAP_X POS (PARAM1) TO GET THE TILE
10625  3089  A4 03                 LDY PARAM1
10626  308B             
10627  308B  AD 34 10              LDA MAPTWOLOADED
10628  308E  D0 10                 BNE @LEVEL2TILEMAP
10629  3090             
10630  3090             
10631  3090  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10632  3092  AA                    TAX                             ; USING THE TILE NUMBER WE CAN LOOKUP THE ADDRESS
10633  3093  BD CC 23              LDA TILE_NUMBER_LOOKUP_LO,X     ; OF THE TILE ITSELF AND STORE IT IN ZEROPAGE_POINTER_1
10634  3096  85 17                 STA ZEROPAGE_POINTER_1
10635  3098  BD 0D 24              LDA TILE_NUMBER_LOOKUP_HI,X
10636  309B  85 18                 STA ZEROPAGE_POINTER_1 + 1
10637  309D  4C AD 30              JMP @NOTILE2LOAD
10638  30A0             
10639  30A0             ; MAPTWOLOADED=1
10640  30A0             @LEVEL2TILEMAP 
10641  30A0  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10642  30A2  AA                    TAX
10643  30A3  BD 4D 24              LDA TILE2_NUMBER_LOOKUP_LO,X     ; OF THE TILE ITSELF AND STORE IT IN ZEROPAGE_POINTER_1
10644  30A6  85 17                 STA ZEROPAGE_POINTER_1
10645  30A8  BD 8E 24              LDA TILE2_NUMBER_LOOKUP_HI,X
10646  30AB  85 18                 STA ZEROPAGE_POINTER_1 + 1
10647  30AD             
10648  30AD             @NOTILE2LOAD 
10649  30AD                        ; NEXT WE HAVE TO ADJUST THE ADDRESS BY DELTA VALUE
10650  30AD                        ; TO GET THE CORRECT LINE
10651  30AD  18                    CLC
10652  30AE  A5 17                 LDA ZEROPAGE_POINTER_1
10653  30B0  65 06                 ADC PARAM4
10654  30B2  85 17                 STA ZEROPAGE_POINTER_1
10655  30B4  A5 18                 LDA ZEROPAGE_POINTER_1 + 1
10656  30B6  69 00                 ADC #0
10657  30B8  85 18                 STA ZEROPAGE_POINTER_1 + 1
10658  30BA             
10659  30BA             ;-----------------------------------------------------------------------
10660  30BA             ;                               ; FROM HERE WE LOOP THROUGH THE TILE AND COPY
10661  30BA             ;                               ; THE CHARACTER DATA AND THE COLOR DATA TO THE
10662  30BA             ;                               ; VERTICAL_BUFFER AND VERTICAL_COLOR_BUFFER
10663  30BA             
10664  30BA             ;                               USE THE ADJUSTED X DELTA AS OUR START POINT
10665  30BA             ;                               BECAUSE WE WON'T ALWAYS BE ON A TILE BOUNDRY
10666  30BA             ;                               NOTE: THIS IS ONLY FOR THE FIRST TILE - AFTERWARDS
10667  30BA             ;                                     WE WILL RESET IT TO 0 FOR A FULL TILE
10668  30BA             
10669  30BA             ;        LDY #0
10670  30BA             
10671  30BA             @COPYLOOP
10672  30BA  A4 05                 LDY PARAM3
10673  30BC             
10674  30BC  AE 98 31              LDX BUFFER_INDEX                ; LOAD THE BUFFER INDEX IN X
10675  30BF  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; COPY CHARACTER FROM TILE DATA
10676  30C1  9D 70 32              STA VERTICAL_BUFFER,X           ; TO BUFFER + X
10677  30C4             
10678  30C4  AA                    TAX                             ; COPY TILE NUMBER TO X
10679  30C5             
10680  30C5  AD 34 10              LDA MAPTWOLOADED
10681  30C8  D0 06                 BNE @LEVEL2COLORS
10682  30CA             
10683  30CA             
10684  30CA  BD 20 78              LDA ATTRIBUTE_MEM,X             ; COPY ATTRIBUTE FOR TILE X
10685  30CD  4C D3 30              JMP @NOLEVEL2COLORS
10686  30D0             
10687  30D0             
10688  30D0             @LEVEL2COLORS 
10689  30D0  BD AA 80              LDA ATTRIBUTE2_MEM,X             ; COPY ATTRIBUTE FOR TILE X
10690  30D3             
10691  30D3             @NOLEVEL2COLORS 
10692  30D3             
10693  30D3  AE 98 31              LDX BUFFER_INDEX                ; RELOAD THE BUFFER_INDEX IN X
10694  30D6  9D 98 32              STA VERTICAL_COLOR_BUFFER,X     ; STORE ATTRIBUTE DATA IN COLOR BUFFER + X
10695  30D9                        
10696  30D9  EE 98 31              INC BUFFER_INDEX                ; INCREMENT THE BUFFER_INDEX
10697  30DC  A9 28                 LDA #40                         ; CHECK FOR THE END OF THE BUFFER
10698  30DE  CD 98 31              CMP BUFFER_INDEX
10699  30E1  F0 11                 BEQ @DONE
10700  30E3             
10701  30E3             ;        INY                             ; INCREMENT POSITION IN TILE DATA
10702  30E3             ;        CPY #4                          ; TEST FOR EDGE OF TILE
10703  30E3             
10704  30E3  E6 05                 INC PARAM3                      ; INCREMENT X DELTA (ADJUSTED)
10705  30E5  A9 04                 LDA #4
10706  30E7  C5 05                 CMP PARAM3
10707  30E9             ;        LDA PARAM3                      ; MASK IT TO 0-3 VALUE
10708  30E9             ;        AND #%0011
10709  30E9  D0 CF                 BNE @COPYLOOP                   ; BRANCH IF NOT 0
10710  30EB             
10711  30EB  A9 00                 LDA #0
10712  30ED  85 05                 STA PARAM3
10713  30EF  E6 03                 INC PARAM1                      ; INCREMENT PARAM1 TO THE NEXT TILE
10714  30F1  4C 89 30              JMP @TILELOOP
10715  30F4             @DONE
10716  30F4  60                    RTS
10717  30F5             
10718  30F5             
10719  30F5             
10720  30F5             ;-------------------------------------------------------------------------------
10721  30F5             ; COPY TO HORIZONTAL BUFFER
10722  30F5             ;-------------------------------------------------------------------------------
10723  30F5             ; COPY THE DATA NEEDED TO THE HORIZONTAL_BUFFER AND HORIZONTAL_COLOR_BUFFER FOR
10724  30F5             ; EDGE DRAWING OF NEW CHARS ON THE 'JUMP FRAME'
10725  30F5             ;
10726  30F5             ; V2 OF THIS ROUTINE - REWRITTEN AND SPLIT FROM COPYHORIZONTALBUFFER TO STAY
10727  30F5             ; CONSISTANT WITH THE NEW COPYLEFTBUFFER ROUTINE
10728  30F5             ;-------------------------------------------------------------------------------
10729  30F5             
10730  30F5             COPYHORIZONTALBUFFER 
10731  30F5             COPYRIGHTBUFFER 
10732  30F5                        
10733  30F5                        ; VARIABLES
10734  30F5                        ; PARAM1 = ADJUSTED MAP X POSITION
10735  30F5                        ; PARAM2 = ADJUSTED MAP Y POSITION
10736  30F5                        ; PARAM3 = ADJUSTED MAP X DELTA
10737  30F5                        ; PARAM4 = ADJUSTED MAP Y DELTA
10738  30F5             
10739  30F5                        ;-----------------------------------------------------------------------
10740  30F5                        ; FIRST WE NEED TO KNOW WHAT TILE TO FETCH. SCROLLING RIGHT THIS WILL BE
10741  30F5                        ; MAP_POS_X + 10 (THE MAP IS 10 TILES WIDE)
10742  30F5             
10743  30F5  A5 31                 LDA MAP_Y_POS                   ; SETUP THE VARIABLES WE DON'T NEED TO ADJUST
10744  30F7  85 04                 STA PARAM2
10745  30F9  A5 32                 LDA MAP_X_DELTA
10746  30FB  85 05                 STA PARAM3
10747  30FD  A5 33                 LDA MAP_Y_DELTA
10748  30FF  85 06                 STA PARAM4
10749  3101             
10750  3101  A5 30                 LDA MAP_X_POS                   ; ADD 10 TO MAP_X_POS AND STORE IN PARAM1
10751  3103  18                    CLC
10752  3104  69 0A                 ADC #10
10753  3106  85 03                 STA PARAM1
10754  3108             
10755  3108             
10756  3108                        ;-----------------------------------------------------------------------
10757  3108                        ; VARIABLES ARE SETUP - NOW WE NEED TO FETCH THE TILE TO READ
10758  3108             
10759  3108             @FETCHTILE 
10760  3108  A9 00                 LDA #0
10761  310A  8D 98 31              STA BUFFER_INDEX                ; RESET THE BUFFER INDEX
10762  310D             
10763  310D             @TILELOOP
10764  310D  A6 04                 LDX PARAM2                      ; FETCH ADJUSTED MAP_Y_POSITION
10765  310F             
10766  310F             
10767  310F  AD 34 10              LDA MAPTWOLOADED
10768  3112  D0 0D                 BNE @LEVELTWORIGHTMAP
10769  3114             
10770  3114  BD 74 23              LDA MAP2025_LINE_LOOKUP_LO,X
10771  3117  85 19                 STA ZEROPAGE_POINTER_2          ; STORE THE MAP LINE ADDRESS IN
10772  3119  BD 8A 23              LDA MAP2025_LINE_LOOKUP_HI,X        ; ZEROPAGE_POINTER_2
10773  311C  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10774  311E  4C 2B 31              JMP @SKIPALLEYMAP
10775  3121             
10776  3121             ; ALLEY MAP IS LOADED: MAPTWOLOADED=1
10777  3121             @LEVELTWORIGHTMAP 
10778  3121  BD A0 23              LDA ALLEYMAP_LINE_LOOKUP_LO,X
10779  3124  85 19                 STA ZEROPAGE_POINTER_2
10780  3126  BD B6 23              LDA ALLEYMAP_LINE_LOOKUP_HI,X
10781  3129  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10782  312B             
10783  312B             @SKIPALLEYMAP 
10784  312B                        ; NEXT USE THE ADJUSTED MAP_X_POS TO
10785  312B  A4 03                 LDY PARAM1                      ; GET THE TILE
10786  312D             
10787  312D             
10788  312D  AD 34 10              LDA MAPTWOLOADED
10789  3130  D0 10                 BNE @LEVEL2TILEMAP
10790  3132             
10791  3132  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10792  3134  AA                    TAX
10793  3135  BD CC 23              LDA TILE_NUMBER_LOOKUP_LO,X     ; USE THE TILE NUMBER TO LOOKUP THE
10794  3138  85 17                 STA ZEROPAGE_POINTER_1          ; ADDRESS OF THE TILE DATA
10795  313A  BD 0D 24              LDA TILE_NUMBER_LOOKUP_HI,X
10796  313D  85 18                 STA ZEROPAGE_POINTER_1 + 1
10797  313F  4C 4F 31              JMP @SKIPTILE2LOAD
10798  3142             
10799  3142             ; ALLEY MAP IS LOADED: MAPTWOLOADED=1
10800  3142             @LEVEL2TILEMAP 
10801  3142  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10802  3144  AA                    TAX
10803  3145  BD 4D 24              LDA TILE2_NUMBER_LOOKUP_LO,X     ; OF THE TILE ITSELF AND STORE IT IN ZEROPAGE_POINTER_1
10804  3148  85 17                 STA ZEROPAGE_POINTER_1
10805  314A  BD 8E 24              LDA TILE2_NUMBER_LOOKUP_HI,X
10806  314D  85 18                 STA ZEROPAGE_POINTER_1 + 1
10807  314F             
10808  314F             ;-----------------------------------------------------------------------
10809  314F             @SKIPTILE2LOAD 
10810  314F             ; WE NOW HAVE THE ADDRESS TO THE TILE IN ZEROPAGE_POINTER_1, SO NOW WE
10811  314F             ; HAVE TO
10812  314F             ; LOOP THROUGH THE TILE AT OUR DELTA X VALUE (PARAM3) FOR ALL 4 LINES AND COPY
10813  314F             ; THE CHARACTER AND COLOR ATTRIBUTE DATA TO THEIR BUFFERS.
10814  314F             
10815  314F             ; OUR FIRST BLOCK LOOKUP DEPENDS ON THE MAP Y DELTA
10816  314F             ; SO TEST TO SEE IF IT'S 0 - WHICH IS SHOULD UNLESS IT'S
10817  314F             ; THE FIRST LOOKUP
10818  314F             
10819  314F  A4 05                 LDY PARAM3                      ; LOAD THE ADJUSTED X DELTA IN Y
10820  3151  A5 06                 LDA PARAM4                      ; LOAD THE ADJUSTED Y DELTA
10821  3153  F0 06                 BEQ @COPYLOOP                   ; IF IT'S 0, CONTINUE
10822  3155             
10823  3155  0A                    ASL                             ; ELSE MULTIPLY IT BY 4 (TILE LINE)
10824  3156  0A                    ASL
10825  3157  18                    CLC
10826  3158  65 05                 ADC PARAM3                      ; ADD PARAM3 (ADJUSTED X DELTA)
10827  315A  A8                    TAY                             ; TRANSFER IT TO Y AS OUR NEW START INDEX
10828  315B             
10829  315B             @COPYLOOP
10830  315B  AE 98 31              LDX BUFFER_INDEX                ; LOAD THE BUFFER INDEX
10831  315E  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE CHARACTER #
10832  3160  9D 44 32              STA HORIZONTAL_BUFFER,X         ; STORE IT IN THE HORIZONTAL BUFFER
10833  3163  AA                    TAX                             ; SAVE THE CHARACTER NUMBER IN X
10834  3164             
10835  3164  AD 34 10              LDA MAPTWOLOADED
10836  3167  D0 06                 BNE @LEVEL2RIGHTCOLORS
10837  3169             
10838  3169             ; DISPLAY ISSUE: TAX MAY NEED TO ALSO APPEAR UNDER
10839  3169             ; @LEVEL2COLORS
10840  3169  BD 20 78              LDA ATTRIBUTE_MEM,X             ; USE IT TO FETCH THAT CHARACTERS ATTRIBUTE DATA
10841  316C  4C 72 31              JMP @SKIPLEVEL2RIGHTCOLORS
10842  316F             
10843  316F             
10844  316F             @LEVEL2RIGHTCOLORS 
10845  316F  BD AA 80              LDA ATTRIBUTE2_MEM,X             ; COPY ATTRIBUTE FOR TILE X
10846  3172             
10847  3172             @SKIPLEVEL2RIGHTCOLORS 
10848  3172  AE 98 31              LDX BUFFER_INDEX                ; RESTORE BUFFER_INDEX TO X
10849  3175  9D 5A 32              STA HORIZONTAL_COLOR_BUFFER,X   ; SAVE THE ATTRIBUTE DATA IN THE COLOR BUFFER
10850  3178                        
10851  3178  C8                    INY                             ; ADD 4 TO Y TO GET TO THE NEXT TILE LINE
10852  3179  C8                    INY
10853  317A  C8                    INY
10854  317B  C8                    INY
10855  317C             
10856  317C  EE 98 31              INC BUFFER_INDEX                ; INCREMENT THE BUFFER INDEX
10857  317F  AD 98 31              LDA BUFFER_INDEX                ; IF THE BUFFER IS FULL, WE'RE DONE
10858  3182  C9 13                 CMP #19
10859  3184  F0 11                 BEQ @DONE
10860  3186             
10861  3186  E6 06                 INC PARAM4                      ; USE DELTA Y AS A COUNTER TO THE TILES END
10862  3188  A5 06                 LDA PARAM4
10863  318A  C9 04                 CMP #4
10864  318C  D0 CD                 BNE @COPYLOOP
10865  318E                        ; SETUP FOR THE NEXT TILE
10866  318E  A9 00                 LDA #0
10867  3190  85 06                 STA PARAM4                      ; RESET DELTA Y TO 0 (PARAM4)
10868  3192  E6 04                 INC PARAM2                      ; INCREMENT MAP Y POSITION TO THE NEXT TILE LINE
10869  3194  4C 0D 31              JMP @TILELOOP
10870  3197                        
10871  3197                        
10872  3197             @DONE      
10873  3197             
10874  3197  60                    RTS
10875  3198             
10876  3198             
10877  3198             BUFFER_INDEX 
10878  3198  00                    BYTE 0
10879  3199             
10880  3199             
10881  3199             ;===============================================================================
10882  3199             ; COPY LEFT BUFFER
10883  3199             ;===============================================================================
10884  3199             ; SPLIT FROM COPYHORIZONTAL BUFFER DUE TO A BUG THAT I JUST CAN'T SEEM TO TRACK DOWN.
10885  3199             ; HOPEFULLY A REWRITE OF THE ROUTINE WILL YEILD A CLEANER WAY OF DOING THINGS
10886  3199             ; COPY HORIZONTAL BUFFER WAS A MUCH CLEANER ROUTINE, SO WE'LL LOOK AT THAT AS WELL
10887  3199             ;
10888  3199             ; ACTUALLY IT TURNED OUT SO WELL THAT I DECIDED TO REWRITE THE ORIGINAL
10889  3199             ; COPYHORIZONTALBUFFER
10890  3199             ; ROUTINE, AS THIS VERSION WILL BE MUCH EASIER TO INTEGRATE HANDLING MAP_Y_DELTA
10891  3199             ; WHEN I INCLUDE VERTICAL SCROLLING
10892  3199             ;-------------------------------------------------------------------------------
10893  3199             
10894  3199             COPYLEFTBUFFER 
10895  3199             
10896  3199                        ; VARIABLES
10897  3199                        ; PARAM1 = ADJUSTED MAP X POSITION
10898  3199                        ; PARAM2 = ADJUSTED MAP Y POSITION
10899  3199                        ; PARAM3 = ADJUSTED MAP X DELTA
10900  3199                        ; PARAM4 = ADJUSTED MAP Y DELTA
10901  3199             
10902  3199                        ;-----------------------------------------------------------------------
10903  3199                        ; FIRST WE NEED TO KNOW WHAT MAP TILE WE ARE USING - MOVING LEFT THAT IS
10904  3199                        ; MAP_X_POS OR MAP_X_POS - 1 DEPENDING ON THE MAP_X_DELTA.
10905  3199                        ; ON A DELTA VALUE OF 1 - 3 WE WILL BE ON THE SAME TILE.
10906  3199                        ; ON A DELTA VALUE OF 0 WE WILL NEED ONE TILE OVER.
10907  3199             
10908  3199  A5 31                 LDA MAP_Y_POS                   ; STORE MAP Y POS, THIS WON'T CHANGE
10909  319B  85 04                 STA PARAM2
10910  319D  A5 33                 LDA MAP_Y_DELTA                 ; STORE MAP Y DELTA
10911  319F  85 06                 STA PARAM4
10912  31A1             
10913  31A1  A5 30                 LDA MAP_X_POS                   ; STORE MAP X POS, NOW WORK ON THE ADJUSTED VALUE
10914  31A3  85 03                 STA PARAM1                      ; BASED ON THE MAP_X_DELTA
10915  31A5             
10916  31A5  A6 32                 LDX MAP_X_DELTA                 ; FETCH THE DELTA VALUE
10917  31A7  CA                    DEX                             ; DECREMENT IT BY 1
10918  31A8  8A                    TXA                             ; TRANSFER IT TO A
10919  31A9  29 03                 AND #%0011                      ; MASK IT TO A VALUE OF 0 - 3
10920  31AB  85 05                 STA PARAM3                      ; STORE THIS AS THE ADJUSTED X DELTA (CURRENT - 1)
10921  31AD                        
10922  31AD  C9 03                 CMP #3                          ; IF OUR NEW DELTA IS 3, WE ARE ON A NEW TILE
10923  31AF  D0 02                 BNE @FETCHTILE                  ; IF NOT, WE FETCH THE CURRENT TILE
10924  31B1             
10925  31B1  C6 03                 DEC PARAM1                      ; ADJUST OUR MAP X POSITION BY -1
10926  31B3                        
10927  31B3                        ;-----------------------------------------------------------------------
10928  31B3                        ; PARAM1 SHOULD HOLD THE CORRECT MAP_X_POS WE NEED TO LOOK UP
10929  31B3                        ; PARAM2 SHOULD HOLD THE (UNCHANGED) MAP_Y_POS WE NEED TO LOOK UP
10930  31B3                        ; PARAM3 SHOULD HOLD THE CORRECT MAP_X_DELTA OF THE TILE TO LOOK UP
10931  31B3                        ; PARAM4 SHOULD HOLD THE (UNCHANGED) MAP_Y_DELTA FOR THE TILE
10932  31B3             
10933  31B3                        ; NOW WE NEED TO GET THE FETCH THE TILE
10934  31B3             
10935  31B3             @FETCHTILE 
10936  31B3                        
10937  31B3  A9 00                 LDA #0                          ; RESET TO THE START OF THE BUFFER
10938  31B5  8D 98 31              STA BUFFER_INDEX
10939  31B8             
10940  31B8             @TILELOOP
10941  31B8  A6 04                 LDX PARAM2                      ; FETCH MAP_Y_POS TO LOOKUP THE MAP LINE ADDRESS
10942  31BA             
10943  31BA             
10944  31BA  AD 34 10              LDA MAPTWOLOADED
10945  31BD  D0 0D                 BNE @LEVEL2LEFTMAP
10946  31BF             
10947  31BF  BD 74 23              LDA MAP2025_LINE_LOOKUP_LO,X
10948  31C2  85 19                 STA ZEROPAGE_POINTER_2          ; STORE THE MAP LINE IN ZEROPAGE_POINTER_2
10949  31C4  BD 8A 23              LDA MAP2025_LINE_LOOKUP_HI,X
10950  31C7  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10951  31C9  4C D6 31              JMP @SKIPLEVEL2LEFTMAP
10952  31CC             
10953  31CC             @LEVEL2LEFTMAP 
10954  31CC  BD A0 23              LDA ALLEYMAP_LINE_LOOKUP_LO,X
10955  31CF  85 19                 STA ZEROPAGE_POINTER_2
10956  31D1  BD B6 23              LDA ALLEYMAP_LINE_LOOKUP_HI,X
10957  31D4  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10958  31D6             
10959  31D6             
10960  31D6             @SKIPLEVEL2LEFTMAP 
10961  31D6                        ; NEXT USE THE ADJUSTED MAP_X_POS TO GET THE TILE
10962  31D6  A4 03                 LDY PARAM1
10963  31D8             
10964  31D8  AD 34 10              LDA MAPTWOLOADED
10965  31DB  D0 10                 BNE @LEVEL2LEFTILES
10966  31DD             
10967  31DD             
10968  31DD  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10969  31DF  AA                    TAX                             ; USE THE TILE NUMBER TO LOOKUP THE ADDRESS OF THE TILE DATA
10970  31E0  BD CC 23              LDA TILE_NUMBER_LOOKUP_LO,X
10971  31E3  85 17                 STA ZEROPAGE_POINTER_1          ; AND STORE IT IN ZEROPAGE_POINTER_1
10972  31E5  BD 0D 24              LDA TILE_NUMBER_LOOKUP_HI,X
10973  31E8  85 18                 STA ZEROPAGE_POINTER_1 + 1
10974  31EA  4C FA 31              JMP @SKIPLEVEL2TILES
10975  31ED             
10976  31ED             @LEVEL2LEFTILES 
10977  31ED  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10978  31EF  AA                    TAX                             ; USE THE TILE NUMBER TO LOOKUP THE ADDRESS OF THE TILE DATA
10979  31F0  BD 4D 24              LDA TILE2_NUMBER_LOOKUP_LO,X
10980  31F3  85 17                 STA ZEROPAGE_POINTER_1          ; AND STORE IT IN ZEROPAGE_POINTER_1
10981  31F5  BD 8E 24              LDA TILE2_NUMBER_LOOKUP_HI,X
10982  31F8  85 18                 STA ZEROPAGE_POINTER_1 + 1
10983  31FA             
10984  31FA             ;------------------------------------------------------------------------------
10985  31FA             ; WE NOW HAVE THE ADDRESS TO THE TILE IN ZEROPAGE_POINTER_1 - SO NOW WE HAVE
10986  31FA             ; TO LOOP THROUGH IT AND COPY THE DATA AT OUR DELTA X VALUE (PARAM3) FOR ALL
10987  31FA             ; 4 LINES OF THE TILE INTO THE BUFFER. WE ALSO NEED THE COLOR ATTRIBUTE DATA
10988  31FA             ; FOR THAT CHARACTER (AS WE'VE PACKED INFO INTO THE UPPER HALF OF THE COLOR BYTE)
10989  31FA             
10990  31FA             ; OUR FIRST BLOCK LOOKUP DEPENDS ON THE MAP Y DELTA
10991  31FA             ; SO TEST TO SEE IF IT'S 0 - WHICH IS SHOULD UNLESS IT'S
10992  31FA             ; THE FIRST LOOKUP
10993  31FA             @SKIPLEVEL2TILES 
10994  31FA             
10995  31FA  A4 05                 LDY PARAM3                      ; LOAD THE ADJUSTED X DELTA IN Y
10996  31FC  A5 06                 LDA PARAM4                      ; LOAD THE ADJUSTED Y DELTA
10997  31FE  F0 06                 BEQ @COPYLOOP                   ; IF IT'S 0, CONTINUE
10998  3200             
10999  3200  0A                    ASL                             ; ELSE MULTIPLY IT BY 4 (TILE LINE)
11000  3201  0A                    ASL
11001  3202  18                    CLC
11002  3203  65 05                 ADC PARAM3                      ; ADD PARAM3 (ADJUSTED X DELTA)
11003  3205  A8                    TAY                             ; TRANSFER IT TO Y AS OUR NEW START INDEX
11004  3206             
11005  3206             
11006  3206             @COPYLOOP
11007  3206  AE 98 31              LDX BUFFER_INDEX                ; LOAD THE BUFFER INDEX IN X
11008  3209             
11009  3209  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE CHARACTER #
11010  320B  9D 44 32              STA HORIZONTAL_BUFFER,X         ; STORE IT IN THE BUFFER
11011  320E             
11012  320E  AA                    TAX                             ; SAVE CHARACTER NUMBER IN X
11013  320F             
11014  320F  AD 34 10              LDA MAPTWOLOADED
11015  3212  D0 06                 BNE @LEVEL2LEFTCOLORS
11016  3214             
11017  3214             
11018  3214  BD 20 78              LDA ATTRIBUTE_MEM,X             ; LOOKUP THE ATTRIBUTE FOR THAT CHARACTER
11019  3217  4C 1D 32              JMP @SKIPLEVEL2LEFTCOLORS
11020  321A             
11021  321A             @LEVEL2LEFTCOLORS 
11022  321A  BD AA 80              LDA ATTRIBUTE2_MEM,X             ; LOOKUP THE ATTRIBUTE FOR THAT CHARACTER
11023  321D             
11024  321D             @SKIPLEVEL2LEFTCOLORS 
11025  321D  AE 98 31              LDX BUFFER_INDEX                ; RELOAD THE BUFFER INDEX IN X
11026  3220  9D 5A 32              STA HORIZONTAL_COLOR_BUFFER,X   ; SO WE CAN SAVE THE ATTRIBUTE IN THE
11027  3223                        ; COLOR BUFFER
11028  3223             
11029  3223  C8                    INY                             ; ADD 4 TO Y TO GET TO THE NEXT TILE LINE
11030  3224  C8                    INY
11031  3225  C8                    INY
11032  3226  C8                    INY
11033  3227             
11034  3227  EE 98 31              INC BUFFER_INDEX                ; INCREMENT THE BUFFER INDEX
11035  322A  AD 98 31              LDA BUFFER_INDEX                ; IF THE BUFFER IS FULL, WE'RE DONE
11036  322D  C9 13                 CMP #19                         ; LENGTH OF BUFFER_INDEX
11037  322F  F0 11                 BEQ @DONE
11038  3231             
11039  3231  E6 06                 INC PARAM4                      ; USE THE DELTA Y AS A COUNTER TO THE TILES END
11040  3233  A5 06                 LDA PARAM4
11041  3235  C9 04                 CMP #4
11042  3237  D0 CD                 BNE @COPYLOOP
11043  3239                        ; SETUP FOR THE NEXT TILE
11044  3239  A9 00                 LDA #0
11045  323B  85 06                 STA PARAM4                      ; SET OUR DELTA Y TO 0 - BECAUSE IT'S A NEW TILE
11046  323D  E6 04                 INC PARAM2                      ; INCREMENT OUR MAP Y POSITION TO THE NEXT TILE LINE
11047  323F  4C B8 31              JMP @TILELOOP
11048  3242                        
11049  3242                        
11050  3242                        
11051  3242             @DONE
11052  3242  60                    RTS
11053  3243             
11054  3243             
11055  3243             ;===============================================================================
11056  3243             ; SCROLL DATA + TABLES
11057  3243             ;===============================================================================
11058  3243             
11059  3243             
11060  3243             SCROLL_FIX_SKIP ; CHECK TO SEE IF WE CAN 'SKIP'
11061  3243  00                    BYTE $0                        ; SCROLL FIXING ON STOP
11062  3244             ; EDGE BUFFERS FOR MAP DRAW
11063  3244             HORIZONTAL_BUFFER 
11064  3244  00 00 00              BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11065  325A             HORIZONTAL_COLOR_BUFFER 
11066  325A  00 00 00              BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11067  3270             
11068  3270             VERTICAL_BUFFER 
11069  3270  00 00 00              BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11070  3298             VERTICAL_COLOR_BUFFER 
11071  3298  03 03 03              BYTE 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
11072  32C0             ;===============================================================================
11073  32C0             ; SPRITE TO CHARACTER POSITION X/Y
11074  32C0             ; ------------------------------------------------------------------------------
11075  32C0             ; THESE ALIGN THE SPRITES (EX: 0,1 - TO THE BACKGROUND POSITIONING)
11076  32C0             ;===============================================================================
11077  32C0             SPRITETOCHARPOS 
11078  32C0  BD 6D 3C              LDA BIT_TABLE,X                 ; LOOKUP THE BIT FOR THIS SPRITE NUMBER (0-7)
11079  32C3  49 FF                 EOR #$FF                        ; FLIP ALL BITS (INVERT THE BYTE %0001 WOULD BECOME %1110)
11080  32C5  2D 88 35              AND SPRITE_POS_X_EXTEND         ; MASK OUT THE X EXTEND BIT FOR THIS SPRITE
11081  32C8  8D 88 35              STA SPRITE_POS_X_EXTEND         ; STORE THE RESULT BACK - WE'VE ERASED JUST THIS SPRITES BIT
11082  32CB  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; STORE THIS IN THE VIC REGISTER FOR EXTENDED X BITS
11083  32CE             
11084  32CE  A5 03                 LDA PARAM1                      ; LOAD THE X POS IN CHARACTER COORDS (THE COLUMN)
11085  32D0  9D 78 35              STA SPRITE_CHAR_POS_X,X         ; STORE IT IN THE CHARACTER X POSITION VARIABLE
11086  32D3  C9 1E                 CMP #30                         ; IF X IS LESS THAN 30, NO NEED SET THE EXTENDED BIT
11087  32D5  90 0C                 BCC @NOEXTENDEDX
11088  32D7                        
11089  32D7  BD 6D 3C              LDA BIT_TABLE,X                 ; LOOK UP THE THE BIT FOR THIS SPRITE NUMBER
11090  32DA  0D 88 35              ORA SPRITE_POS_X_EXTEND         ; OR IN THE X EXTEND VALUES - WE HAVE SET THE CORRECT BIT
11091  32DD  8D 88 35              STA SPRITE_POS_X_EXTEND         ; STORE THE RESULTS BACK IN THE X EXTEND VARIABLE
11092  32E0  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; AND THE VIC X EXTEND REGISTER
11093  32E3             
11094  32E3             @NOEXTENDEDX 
11095  32E3                        ; SETUP OUR Y REGISTER SO WE TRANSFER X/Y VALUES TO THE
11096  32E3                        ; CORRECT VIC REGISTER FOR THIS SPRITE
11097  32E3  8A                    TXA                             ; FIRST, TRANSFER THE SPRITE NUMBER TO A
11098  32E4  0A                    ASL                             ; MULTIPLY IT BY 2 (SHIFT LEFT)
11099  32E5  A8                    TAY                             ; THEN STORE IT IN Y
11100  32E6                        ; (NOTE : SEE HOW VIC SPRITE POS REGISTERS ARE ORDERED
11101  32E6                        ;  TO UNDERSTAND WHY I'M DOING THIS)
11102  32E6             
11103  32E6  A5 03                 LDA PARAM1                      ; LOAD IN THE X CHAR POSITION
11104  32E8  0A                    ASL                             ; 3 X SHIFT LEFT = MULTIPLICATION BY 8
11105  32E9  0A                    ASL
11106  32EA  0A                    ASL
11107  32EB  18                    CLC
11108  32EC  69 10                 ADC #24 - SPRITE_DELTA_OFFSET_X ; ADD THE EDGE OF SCREEN (24) MINUS THE DELTA OFFSET
11109  32EE                        ; TO THE ROUGH CENTER 8 PIXELS (1 CHAR) OF THE SPRITE
11110  32EE             
11111  32EE  9D 68 35              STA SPRITE_POS_X,X              ; SAVE IN THE CORRECT SPRITE POS X VARIABLE
11112  32F1  99 00 D0              STA VIC_SPRITE_X_POS,Y          ; SAVE IN THE CORRECT VIC SPRITE POS REGISTER
11113  32F4             
11114  32F4             
11115  32F4  A5 04                 LDA PARAM2                      ; LOAD IN THE Y CHAR POSITION (ROWS)  "9"
11116  32F6  9D 99 35              STA SPRITE_CHAR_POS_Y,X         ; STORE IT IN THE CHARACTER Y POS FOR THIS SPRITE
11117  32F9  0A                    ASL                             ; 3 X SHIFT LEFT = MULTIPLICATION BY 8
11118  32FA  0A                    ASL
11119  32FB  0A                    ASL
11120  32FC  18                    CLC
11121  32FD  69 24                 ADC #50 - SPRITE_DELTA_OFFSET_Y ; ADD TOP EDGE OF SCREEN (50) MINUS THE DELTA OFFSET - 42
11122  32FF  9D 89 35              STA SPRITE_POS_Y,X              ; STORE IN THE CORRECT SPRITE POS Y VARIABLE
11123  3302  99 01 D0              STA VIC_SPRITE_Y_POS,Y          ; AND THE CORRECT VIC SPRITE POS REGISTER
11124  3305             
11125  3305  A9 00                 LDA #0
11126  3307  9D 70 35              STA SPRITE_POS_X_DELTA,X        ;SET BOTH X AND Y DELTA VALUES TO 0 - WE ARE ALIGNED
11127  330A  9D 91 35              STA SPRITE_POS_Y_DELTA,X        ;ON A CHARACTER BORDER (FOR THE PURPOSES OF COLLISIONS)
11128  330D  60                    RTS
11129  330E             
11130  330E             
11131  330E             
11132  330E             ;===============================================================================
11133  330E             ; PUTS A SPRITE AT THE POSITION OF CHARACTER X Y. CALCULATES THE PROPER SPRITE
11134  330E             ; COORDS FROM THE
11135  330E             ; SCREEN MEMORY POSITION THEN SETS IT THERE DIRECTLY.
11136  330E             ; THE PRIMARY USE OF THIS IS THE INITAL POSITIONING OF ANY SPRITE AS IT WILL
11137  330E             ; ALIGN IT WITH THE PROPER DELTA SET UP.
11138  330E             ;
11139  330E             ; PARAM 1 = CHARACTER X POS (COLUMN)
11140  330E             ; PARAM 2 = CHARACTER Y POS (ROW)
11141  330E             ; X = SPRITE NUMBER
11142  330E             ;-------------------------------------------------------------------------------
11143  330E             
11144  330E             
11145  330E             ENEMYTOCHARPOS 
11146  330E  BD 6D 3C              LDA BIT_TABLE,X                 ; LOOKUP THE BIT FOR THIS SPRITE NUMBER (0-7)
11147  3311  49 FF                 EOR #$FF                        ; FLIP ALL BITS (INVERT THE BYTE %0001 WOULD BECOME %1110)
11148  3313  2D FF 35              AND ENEMY_SPRITE_POS_X_EXTEND   ; MASK OUT THE X EXTEND BIT FOR THIS SPRITE
11149  3316  8D FF 35              STA ENEMY_SPRITE_POS_X_EXTEND   ; STORE THE RESULT BACK - WE'VE ERASED JUST THIS SPRITES BIT
11150  3319  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; STORE THIS IN THE VIC REGISTER FOR EXTENDED X BITS
11151  331C             
11152  331C  A5 03                 LDA PARAM1                      ; LOAD THE X POS IN CHARACTER COORDS (THE COLUMN)
11153  331E  9D DF 35              STA ENEMY_SPRITE_POS_X,X         ; STORE IT IN THE CHARACTER X POSITION VARIABLE
11154  3321  C9 1E                 CMP #30                         ; IF X IS LESS THAN 30, NO NEED SET THE EXTENDED BIT
11155  3323  90 0C                 BCC @NOEXTENDEDX
11156  3325                        
11157  3325  BD 6D 3C              LDA BIT_TABLE,X                 ; LOOK UP THE THE BIT FOR THIS SPRITE NUMBER
11158  3328  0D FF 35              ORA ENEMY_SPRITE_POS_X_EXTEND   ; OR IN THE X EXTEND VALUES - WE HAVE SET THE CORRECT BIT
11159  332B  8D FF 35              STA ENEMY_SPRITE_POS_X_EXTEND   ; STORE THE RESULTS BACK IN THE X EXTEND VARIABLE
11160  332E  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; AND THE VIC X EXTEND REGISTER
11161  3331             
11162  3331             @NOEXTENDEDX 
11163  3331                        ; SETUP OUR Y REGISTER SO WE TRANSFER X/Y VALUES TO THE
11164  3331                        ; CORRECT VIC REGISTER FOR THIS SPRITE
11165  3331  8A                    TXA                             ; FIRST, TRANSFER THE SPRITE NUMBER TO A
11166  3332  0A                    ASL                             ; MULTIPLY IT BY 2 (SHIFT LEFT)
11167  3333  A8                    TAY                             ; THEN STORE IT IN Y
11168  3334                        ; (NOTE : SEE HOW VIC SPRITE POS REGISTERS ARE ORDERED
11169  3334                        ;  TO UNDERSTAND WHY I'M DOING THIS)
11170  3334             
11171  3334  A5 03                 LDA PARAM1                      ; LOAD IN THE X CHAR POSITION
11172  3336  0A                    ASL                             ; 3 X SHIFT LEFT = MULTIPLICATION BY 8
11173  3337  0A                    ASL
11174  3338  0A                    ASL
11175  3339  18                    CLC
11176  333A  69 10                 ADC #24 - ENEMY_SPRITE_DELTA_OFFSET_X ; ADD THE EDGE OF SCREEN (24) MINUS THE DELTA OFFSET
11177  333C                        ; TO THE ROUGH CENTER 8 PIXELS (1 CHAR) OF THE SPRITE
11178  333C             
11179  333C  9D DF 35              STA ENEMY_SPRITE_POS_X,X        ; SAVE IN THE CORRECT SPRITE POS X VARIABLE
11180  333F  99 00 D0              STA VIC_SPRITE_X_POS,Y          ; SAVE IN THE CORRECT VIC SPRITE POS REGISTER
11181  3342             
11182  3342             
11183  3342  A5 04                 LDA PARAM2                      ; LOAD IN THE Y CHAR POSITION (ROWS)
11184  3344  9D 10 36              STA ENEMY_SPRITE_CHAR_POS_Y,X   ; STORE IT IN THE CHARACTER Y POS FOR THIS SPRITE
11185  3347  0A                    ASL                             ; 3 X SHIFT LEFT = MULTIPLICATION BY 8
11186  3348  0A                    ASL
11187  3349  0A                    ASL
11188  334A  18                    CLC
11189  334B  6D 5F 35              ADC SPRITE_DEPTH
11190  334E  38                    SEC
11191  334F  E5 0E                 SBC SPRITE_DELTA_OFFSET_Y
11192  3351  69 24                 ADC #50 - ENEMY_SPRITE_DELTA_OFFSET_Y ; ADD TOP EDGE OF SCREEN (50) MINUS THE DELTA OFFSET
11193  3353  9D 00 36              STA ENEMY_SPRITE_POS_Y,X              ; STORE IN THE CORRECT SPRITE POS Y VARIABLE
11194  3356  99 01 D0              STA VIC_SPRITE_Y_POS,Y                ; AND THE CORRECT VIC SPRITE POS REGISTER
11195  3359             
11196  3359  A9 00                 LDA #0
11197  335B  9D E7 35              STA ENEMY_SPRITE_POS_X_DELTA,X        ;SET BOTH X AND Y DELTA VALUES TO 0 - WE ARE ALIGNED
11198  335E  9D 08 36              STA ENEMY_SPRITE_POS_Y_DELTA,X        ;ON A CHARACTER BORDER (FOR THE PURPOSES OF COLLISIONS)
11199  3361  60                    RTS
11200  3362             
11201  3362             
11202  3362             
11203  3362             FLIPBITS
11204  3362  BD 6D 3C              LDA BIT_TABLE,X
11205  3365  49 FF                 EOR #$FF
11206  3367  2D 88 35              AND SPRITE_POS_X_EXTEND
11207  336A  8D 88 35              STA SPRITE_POS_X_EXTEND         ; ENEMY POSITION X
11208  336D  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; 53264
11209  3370  8A                    TXA
11210  3371  0A                    ASL
11211  3372  A8                    TAY
11212  3373             
11213  3373  BD 68 35              LDA SPRITE_POS_X,X
11214  3376  99 00 D0              STA VIC_SPRITE_X_POS,Y          ; $D000,X
11215  3379             
11216  3379  BD 6D 3C              LDA BIT_TABLE,X
11217  337C  4D 88 35              EOR SPRITE_POS_X_EXTEND         ; ENEMY POSITION X
11218  337F  8D 88 35              STA SPRITE_POS_X_EXTEND         ; ENEMY POSITION X
11219  3382  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; 53264
11220  3385  60                    RTS
11221  3386             
11222  3386             REPOSITIONSPRITE 
11223  3386  A2 01                 LDX #1
11224  3388  BD 78 35              LDA SPRITE_CHAR_POS_X,X         ; CHAR X POS = SPRITE_CHAR_POS_X,X
11225  338B  85 03                 STA PARAM1                      ; CHAR X POS = 19
11226  338D             
11227  338D  A2 00                 LDX #0
11228  338F  BD 99 35              LDA SPRITE_CHAR_POS_Y,X         ; 10,12,10,12,0,0,0,0
11229  3392  85 04                 STA PARAM2                      ; CHAR Y POS = 10
11230  3394  20 C0 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
11231  3397             
11232  3397  A2 01                 LDX #1                          ; SPRITE NUMBER 1
11233  3399  BD 99 35              LDA SPRITE_CHAR_POS_Y,X         ; 10,12,10,12,0,0,0,0
11234  339C  85 04                 STA PARAM2
11235  339E  20 C0 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
11236  33A1             
11237  33A1             ; SPRITE 2 AND 3: ENEMY
11238  33A1  A2 02                 LDX #2
11239  33A3  BD 78 35              LDA SPRITE_CHAR_POS_X,X
11240  33A6  85 03                 STA PARAM1                      ; CHAR X POS = 19
11241  33A8             
11242  33A8  A2 02                 LDX #2
11243  33AA  BD 99 35              LDA SPRITE_CHAR_POS_Y,X         ; 10,12,10,12,0,0,0,0
11244  33AD  85 04                 STA PARAM2                      ; CHAR Y POS = 10
11245  33AF  20 C0 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
11246  33B2             
11247  33B2  A2 03                 LDX #3                          ; SPRITE NUMBER 1
11248  33B4  BD 99 35              LDA SPRITE_CHAR_POS_Y,X         ; 10,12,10,12,0,0,0,0
11249  33B7  85 04                 STA PARAM2
11250  33B9  20 C0 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
11251  33BC  60                    RTS
11252  33BD             
11253  33BD             ;===============================================================================
11254  33BD             ; SPRITES WALKS TO THE LEFT
11255  33BD             ;===============================================================================
11256  33BD             
11257  33BD             
11258  33BD             
11259  33BD             MOVESPRITELEFT 
11260  33BD  BD 68 35              LDA SPRITE_POS_X,X                      ; FIRST CHECK FOR 0 (NOT NEGATIVE)
11261  33C0  D0 12                 BNE @DECNOCHANGE                        ; BRANCH IF NOT 0
11262  33C2             
11263  33C2  DE 68 35              DEC SPRITE_POS_X,X                      ; DECREMENT SPRITE X POSITION BY 1 (TO $FF)
11264  33C5             
11265  33C5  BD 6D 3C              LDA BIT_TABLE,X                         ; FETCH THE BIT NEEDED TO CHANGE FOR THIS SPRITE
11266  33C8  4D 88 35              EOR SPRITE_POS_X_EXTEND                 ; USE IT AS A MASK TO FLIP THE CORRECT X EXTEND BIT
11267  33CB  8D 88 35              STA SPRITE_POS_X_EXTEND                 ; STORE TEH DATA THEN SAVE IT IN THE VIC II REGISTER
11268  33CE  8D 10 D0              STA VIC_SPRITE_X_EXTEND                 ; $D011 - SPRITE EXTENDED X BITS (ONE BIT PER SPRITE)
11269  33D1  4C D7 33              JMP @NOCHANGEINEXTENDEDFLAG             ; JUMP TO SAVING THE X POSITION
11270  33D4             
11271  33D4             @DECNOCHANGE ; NOT ZERO X SO WE DECREMENT
11272  33D4  DE 68 35              DEC SPRITE_POS_X,X
11273  33D7             @NOCHANGEINEXTENDEDFLAG 
11274  33D7  8A                    TXA                                     ; COPY X TO THE ACCUMULATOR (SPRITE NUMBER)
11275  33D8  0A                    ASL                                     ; SHIFT IT LEFT (MULTIPLY BY 2)
11276  33D9  A8                    TAY                                     ; SAVE IT IN Y (TO CALCULATE THE REGISTER TO SAVE TO)
11277  33DA             
11278  33DA  BD 68 35              LDA SPRITE_POS_X,X                      ; LOAD OUR VARIABLE SAVED X POSITION
11279  33DD  99 00 D0              STA VIC_SPRITE_X_POS,Y                  ; SAVE IT IN $D000 OFFSET BY Y TO THE CORRECT VIC
11280  33E0                        ; SPRITE REGISTER
11281  33E0             
11282  33E0                        ; HERE WE DECREMENT THE SPRITE DELTA - WE MOVED
11283  33E0                        ; A PIXEL SO THE DELTA GOES DOWN BY ONE
11284  33E0  DE 70 35              DEC SPRITE_POS_X_DELTA,X
11285  33E3  30 01                 BMI @RESETDELTA                         ; TEST FOR CHANGE TO NEGATIVE
11286  33E5  60                    RTS                                     ; IF DELTA IS STILL > 0 WE'RE DONE
11287  33E6             
11288  33E6             @RESETDELTA 
11289  33E6  A9 07                 LDA #$07                                ; IF DELTA FALLS BELOW 0
11290  33E8  9D 70 35              STA SPRITE_POS_X_DELTA,X                ; RESET IT TO #$07 - ONE CHAR
11291  33EB  DE 78 35              DEC SPRITE_CHAR_POS_X,X                 ; DELTA HAS RESET - SO DECREMENT CHARACTER POSITION
11292  33EE  60                    RTS
11293  33EF                        
11294  33EF             
11295  33EF             
11296  33EF             ;===============================================================================
11297  33EF             ; SPRITES WALKS TO THE RIGHT
11298  33EF             ;===============================================================================
11299  33EF             
11300  33EF             
11301  33EF             MOVESPRITERIGHT 
11302  33EF  FE 68 35              INC SPRITE_POS_X,X                      ; INCREASE SPRITE X POSITION BY 1
11303  33F2  D0 0C                 BNE @NOCHANGEINEXTENDEDFLAG             ; IF NOT #$00 THEN NO CHANGE IN X FLAG
11304  33F4                        
11305  33F4  BD 6D 3C              LDA BIT_TABLE,X                         ; GET THE CORRECT BIT TO SET FOR THIS SPRITE
11306  33F7  4D 88 35              EOR SPRITE_POS_X_EXTEND                 ; EOR IN THE EXTENDED BIT (TOGGLE IT ON OR OFF)
11307  33FA  8D 88 35              STA SPRITE_POS_X_EXTEND                 ; STORE THE NEW FLAGS
11308  33FD  8D 10 D0              STA VIC_SPRITE_X_EXTEND                 ; SET IT IN THE VIC REGISTER
11309  3400             
11310  3400             @NOCHANGEINEXTENDEDFLAG 
11311  3400  8A                    TXA                                     ; TRANSFER THE SPRITE # TO A
11312  3401  0A                    ASL                                     ; MULTIPLY IT BY 2
11313  3402  A8                    TAY                                     ; TRANSFER THE RESULT TO Y
11314  3403             
11315  3403  BD 68 35              LDA SPRITE_POS_X,X                      ; COPY THE NEW POSITION TO OUR VARIABLE
11316  3406  99 00 D0              STA VIC_SPRITE_X_POS,Y                  ; UPDATE THE CORRECT X POSITION
11317  3409                        ; REGISTER IN THE VIC
11318  3409             
11319  3409                        ; OUR X POSITION IS NOW INCREMENTED,
11320  3409                        ; SO DELTA ALSO INCREASES BY 1
11321  3409  FE 70 35              INC SPRITE_POS_X_DELTA,X
11322  340C  BD 70 35              LDA SPRITE_POS_X_DELTA,X
11323  340F  29 07                 AND #%0111                              ; MASK IT TO 0-7
11324  3411  F0 01                 BEQ @RESET_DELTA
11325  3413  60                    RTS                                     ; IF IT HASN'T WE'RE DONE
11326  3414             @RESET_DELTA 
11327  3414  9D 70 35              STA SPRITE_POS_X_DELTA,X                ; RESET DELTA TO 0 - THIS MEANS WE'VE CROSSED A
11328  3417  FE 78 35              INC SPRITE_CHAR_POS_X,X                 ; A CHARACTER BOUNDRY, SO INCREASE OUR CHAR POSITION
11329  341A  60                    RTS
11330  341B             
11331  341B             
11332  341B             
11333  341B             ;===============================================================================
11334  341B             ; SPRITES MOVES UP
11335  341B             ;===============================================================================
11336  341B             
11337  341B             MOVESPRITEUP 
11338  341B  DE 89 35              DEC SPRITE_POS_Y,X                      ; DECREMENT THE SPRITE POSITION VARIABLE
11339  341E  8A                    TXA                                     ; COPY THE SPRITE NUMBER TO A
11340  341F  0A                    ASL                                     ; MULTIPLY IT BY 2
11341  3420  A8                    TAY                                     ; TRANSFER IT TO Y
11342  3421  BD 89 35              LDA SPRITE_POS_Y,X                      ; LOAD THE SPRITE POSITION FOR THIS SPRITE
11343  3424  99 01 D0              STA VIC_SPRITE_Y_POS,Y                  ; SEND IT TO THE CORRECT VIC REGISTER - $D001 + Y
11344  3427             
11345  3427                        ; Y POSITION HAS DECREASED, SO OUR DELTA DECREASES
11346  3427  DE 91 35              DEC SPRITE_POS_Y_DELTA,X
11347  342A  30 01                 BMI @RESET_DELTA                        ; TEST TO SEE IF IT DROPS TO NEGATIVE
11348  342C  60                    RTS                                     ; IF NOT WE'RE DONE
11349  342D             @RESET_DELTA 
11350  342D  A9 07                 LDA #$07                                ; RESET THE DELTA TO 0
11351  342F  9D 91 35              STA SPRITE_POS_Y_DELTA,X
11352  3432  DE 99 35              DEC SPRITE_CHAR_POS_Y,X                 ; IF DELTA RESETS, WE'VE CROSSED A CHARACTER BORDER
11353  3435  60                    RTS
11354  3436             
11355  3436             
11356  3436             
11357  3436             ;===============================================================================
11358  3436             ; SPRITES MOVES DOWN
11359  3436             ;===============================================================================
11360  3436             
11361  3436             MOVESPRITEDOWN 
11362  3436  FE 89 35              INC SPRITE_POS_Y,X                      ; INCREMENT THE Y POS VARIABLE FOR THIS SPRITE
11363  3439  8A                    TXA
11364  343A  0A                    ASL
11365  343B  A8                    TAY
11366  343C             
11367  343C  BD 89 35              LDA SPRITE_POS_Y,X
11368  343F  99 01 D0              STA VIC_SPRITE_Y_POS,Y
11369  3442  FE 91 35              INC SPRITE_POS_Y_DELTA,X
11370  3445  BD 91 35              LDA SPRITE_POS_Y_DELTA,X
11371  3448  C9 08                 CMP #$08
11372  344A  F0 01                 BEQ @RESET_DELTA
11373  344C  60                    RTS
11374  344D             
11375  344D             ;@CHECKENEMYHEAD
11376  344D             ;        CPX #2
11377  344D             ;        BEQ @DEACTIVATESPRITE
11378  344D             
11379  344D             ;@CHECKENEMYBODY
11380  344D             ;        CPX #3
11381  344D             ;        BEQ @DEACTIVATESPRITE
11382  344D             ;        RTS
11383  344D             
11384  344D             ;@DEACTIVATESPRITE
11385  344D             ;        LDA #2
11386  344D             ;        STA 53280
11387  344D             ;        JSR DISABLEENEMYSPRITE
11388  344D             ;        RTS
11389  344D             
11390  344D             @RESET_DELTA 
11391  344D  A9 00                 LDA #$00
11392  344F  9D 91 35              STA SPRITE_POS_Y_DELTA,X
11393  3452  FE 99 35              INC SPRITE_CHAR_POS_Y,X
11394  3455  60                    RTS
11395  3456             
11396  3456             
11397  3456             
11398  3456             ;===============================================================================
11399  3456             ; SPRITE ANIMATION ROUTINES
11400  3456             ;===============================================================================
11401  3456             
11402  3456             
11403  3456             ;===============================================================================
11404  3456             ; ANIMATE SPRITE
11405  3456             ;-------------------------------------------------------------------------------
11406  3456             ; ANIMATE AN INDIVIDUAL SPRITE. TAKING DATA FROM IT'S ANIM LIST, UPDATING
11407  3456             ; IT'S VARIABLES AND UPDATING IT'S ANIMATION FRAME
11408  3456             ;
11409  3456             ; IT CAN CURRENTLY HANDLE LOOP, PLAY ONCE, AND PING-PONG ANIMATIONS
11410  3456             ;
11411  3456             ; X = SPRITE NUMBER TO ANIMATE
11412  3456             ;
11413  3456             ; MODIFIES :  Y, ZEROPAGE_POINTER_1
11414  3456             ;
11415  3456             ;-------------------------------------------------------------------------------
11416  3456             
11417  3456             ANIMATESPRITE 
11418  3456                        ;-----------------------------------------------------------------------
11419  3456                        ; FIRST - DO WE NEED TO ANIMATE THIS SPRITE AT ALL? CHECK THE TIMER
11420  3456             
11421  3456  AD C1 35              LDA SPRITE_ANIM_PLAY                    ; RETURN IF ANIM PAUSED
11422  3459  D0 01                 BNE @START
11423  345B  60                    RTS
11424  345C             @START
11425  345C             
11426  345C             ; CONTAINS THE FIRST 2 BYTES OF ANIM_PLAYER_
11427  345C             
11428  345C             ; WITHIN SPRITE_ANIM_TIMER,X
11429  345C             ; BYTE  1: %0000111
11430  345C             ; BYTES 2-X: 18,20,22 "ANIM_PLAYER_R"
11431  345C  BD B1 35              LDA SPRITE_ANIM_TIMER,X                 ; LOAD THE ANIM TIMER MASK
11432  345F  D0 01                 BNE @TIMERCHECK                         ; IS OUR TIMER TURNED OFF? (SET TO 0)
11433  3461             
11434  3461  60                    RTS
11435  3462             @TIMERCHECK 
11436  3462  29 0F                 AND #%00001111                          ; MASK OUT THE UPPER HALF BYTE (EXTRA INFO)
11437  3464  25 08                 AND TIMER                               ; AND THE MASK AGAINST THE TIMER
11438  3466  F0 01                 BEQ @UPDATE                             ; IF THE RESULT ISN'T 0 - RETURN
11439  3468  60                    RTS
11440  3469             @UPDATE
11441  3469                        ;-----------------------------------------------------------------------
11442  3469                        ; FIRST WE NEED TO FETCH THIS SPRITES ANIM LIST.
11443  3469                        
11444  3469  8A                    TXA                                     ; PUT THE SPRITE NUMBER IN A
11445  346A  0A                    ASL                                     ; MULTIPLY BY 2 (TO LOOKUP A WORD)
11446  346B  A8                    TAY                                     ; STORE THE RESULT IN Y
11447  346C             
11448  346C             ; EARLIER IN INITSPRITEANIM WE SAVED THE SPRITE FRAME DATA IN
11449  346C             ; SPRITE_ANIMATION,Y. SO AN EXAMPLE FOR ANIM_ENEMY_WALK_L WOULD SHOW AS BYTES
11450  346C             ; 68,70,72 OR SEEN AS SPRITE ANIMATION: WORD 74,76,78 - ETC.
11451  346C             ; BYTES 74,76,78 ARE THE INDIVIDUAL DIFFERENT SPRITES SHAPES PLACED HERE.
11452  346C                        
11453  346C  B9 C9 35              LDA SPRITE_ANIMATION,Y                  ; FETCH THE ADDRESS TO THE SPRITES ANIM LIST
11454  346F  85 17                 STA ZEROPAGE_POINTER_1                  ; AND STORE IT IN ZEROPAGE_POINTER_1
11455  3471  B9 CA 35              LDA SPRITE_ANIMATION + 1,Y
11456  3474  85 18                 STA ZEROPAGE_POINTER_1 + 1
11457  3476             
11458  3476                        ;-----------------------------------------------------------------------
11459  3476                        ; NEXT - INCREMENT (OR DECREMENT FOR PING PONG) THE ANIMATION COUNTER
11460  3476             
11461  3476             ; READS THE BYTE (EXAMPLE: %0000111) TO SEE IF THE TIMER
11462  3476             ; IS COUNTING UP OR DOWN.
11463  3476             
11464  3476  BD B1 35              LDA SPRITE_ANIM_TIMER,X                 ; CHECK FOR THE MSB IN THE TIMER, IF IT'S SET
11465  3479  10 06                 BPL @INCTIMER                           ; WE COUNT DOWN INSTEAD
11466  347B                        
11467  347B  DE B9 35              DEC SPRITE_ANIM_COUNT,X                 ; DECREMENT ANIM COUNTER AND CONTINUE AS NORMAL
11468  347E  4C 84 34              JMP @ZEROCHECK
11469  3481             
11470  3481             @INCTIMER
11471  3481  FE B9 35              INC SPRITE_ANIM_COUNT,X                 ; INCREMENT THE COUNTER
11472  3484             @ZEROCHECK 
11473  3484  BD B9 35              LDA SPRITE_ANIM_COUNT,X                 ; FETCH IT SO WE CAN DO AN END TEST
11474  3487             
11475  3487  F0 2F                 BEQ @RESETPONG                          ; IT SHOULD NEVER BE ZERO, UNLESS IT'S A PING_PONG
11476  3489                        ; ANIM RETURNING BACK TO ZERO AS THE FIRST BYTES
11477  3489                        ; IS THE ANIM TIMER MASK
11478  3489             
11479  3489             ; EXAMPLE: CYCLE THROUGH 18, 20, 22 ("ANIM_PLAYER_WALK_R")
11480  3489             ; BASIC EXAMPLE POKE 2040, BYTES (68, 70, 72)
11481  3489  A8                    TAY                                     ; USE AS AN INDEX TO LOAD THE CURRENT FRAME FROM THE
11482  348A  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; ANIMLIST
11483  348C             
11484  348C  10 45                 BPL @SETIMAGE                           ; TEST TO MAKE SURE THE FRAME IS POSITIVE (0-128)
11485  348E                        ; IF IT ISN'T, AND THE MSB IS SET, THEN IT'S THE
11486  348E                        ; END BYTE, WHICH WE USE TO TELL US THE TYPE OF
11487  348E                        ; ANIM (AND WHAT TO DO WHEN WE REACH THE END)
11488  348E             
11489  348E  C9 FF                 CMP #TYPE_LOOP                          ; CHECK TO SEE WHAT TYPE OF ANIM THIS IS
11490  3490  F0 39                 BEQ @RESETLOOP
11491  3492             
11492  3492  C9 FD                 CMP #TYPE_PING_PONG
11493  3494  F0 0B                 BEQ @RESETPING
11494  3496                        ;----------------------------------------------------------PLAY_ONCE_ANIM
11495  3496                        ; PLAYONCE ANIM DOESN'T GET RESET
11496  3496  A9 00                 LDA #0                                  ; WE SET THE ANIM TIMER TO 0, SO IT NEVER UPDATES
11497  3498  9D B1 35              STA SPRITE_ANIM_TIMER,X
11498  349B  A9 FF                 LDA #$FF                                ; WE SET THE COUNT TO -1 ($FF) AS SOMETHING OUR
11499  349D  9D B9 35              STA SPRITE_ANIM_COUNT,X                 ; CODE CAN CHECK TO SEE IF A ONCE ONLY IS FINISHED
11500  34A0  60                    RTS
11501  34A1                        ;------------------------------------------------------PING_PONG_ANIM
11502  34A1                        ; WE'VE REACHED THE END OF THE ANIMLIST
11503  34A1             @RESETPING 
11504  34A1  BD B1 35              LDA SPRITE_ANIM_TIMER,X
11505  34A4  49 80                 EOR #%10000000                          ; FLIP BIT 7 IN THE TIMER TO START 0 CHECK
11506  34A6                        ; AND TURN ON DECREMENTING
11507  34A6  9D B1 35              STA SPRITE_ANIM_TIMER,X                 ; SAVE THE NEW COUNTER
11508  34A9             
11509  34A9  BD B9 35              LDA SPRITE_ANIM_COUNT,X
11510  34AC  38                    SEC
11511  34AD  E9 02                 SBC #2                                  ; SUBTRACT 2 FROM THE ANIM COUNTER
11512  34AF  9D B9 35              STA SPRITE_ANIM_COUNT,X                 ; AND SAVE THE RESULT
11513  34B2  A8                    TAY
11514  34B3  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; LOOKUP THE NEW SPRITE FRAME
11515  34B5                        ; A NOW HAS THE SPRITE IMAGE
11516  34B5                        ; X HAS THE SPRITE NUMBER
11517  34B5                        ; SO WE SET THE IMAGE(S)
11518  34B5  4C D3 34              JMP @SETIMAGE
11519  34B8             
11520  34B8             @RESETPONG ; THE REVERSE OF THE ABOVE
11521  34B8  BD B1 35              LDA SPRITE_ANIM_TIMER,X
11522  34BB  49 80                 EOR #%10000000                          ; FLIP BIT 7 (MSB) TO COUNT FORWARDS
11523  34BD  9D B1 35              STA SPRITE_ANIM_TIMER,X                 ; SAVE THE NEW TIMER
11524  34C0             
11525  34C0  A9 02                 LDA #2                                  ; SKIP TO FRAME 2
11526  34C2  9D B9 35              STA SPRITE_ANIM_COUNT,X                 ; SAVE THE NEW COUNTER
11527  34C5  A8                    TAY
11528  34C6  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; LOAD THE NEW SPRITE IMAGE
11529  34C8  4C D3 34              JMP @SETIMAGE
11530  34CB                        ;-------------------------------------------------------------LOOP_ANIM
11531  34CB             @RESETLOOP 
11532  34CB  A9 01                 LDA #1                                  ; RESET THE COUNTER TO THE FIRST FRAME
11533  34CD  9D B9 35              STA SPRITE_ANIM_COUNT,X
11534  34D0  A8                    TAY                                     ; NOW FETCH THE FIRST FRAME
11535  34D1  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
11536  34D3             
11537  34D3             @SETIMAGE
11538  34D3                        ;-------------------------------------------------------------------
11539  34D3                        ; SET THE SPRITE TO IT'S NEW IMAGE - A CURRENTLY CONTAINS THE COUNT
11540  34D3                        ; ZEROPAGE_POINTER_1 HAS THE ADDRESS OF THE SPRITES ANIMLIST
11541  34D3             
11542  34D3                        ; A = CORRECT SPRITE IMAGE, X = SPRITE NUMBER,
11543  34D3                        ; SO WE'RE READY TO SET OUR NEW SPRITE IMAGE
11544  34D3  20 F1 34              JSR SETSPRITEIMAGE                      ; PLACED IN SPRITE_POINTER_BASE (REGISTER 2040+)
11545  34D6                        
11546  34D6  E0 00                 CPX #0                                  ; IF SPRITE IS 0 , IT'S THE PLAYER SPRITE
11547  34D8  F0 05                 BEQ @SETHEADSPRITE0                    ; SO WE NEED TO SET A SECOND SPRITE
11548  34DA             
11549  34DA             ; THIS READS THE BODY SPRITE
11550  34DA  E0 02                 CPX #2                                  ; IF SPRITE IS 2 , IT'S THE ENEMY SPRITE
11551  34DC  F0 0A                 BEQ @SETBODYSPRITE0                    ; SO WE NEED TO SET A SECOND SPRITE
11552  34DE  60                    RTS
11553  34DF             
11554  34DF             @SETHEADSPRITE0 
11555  34DF  18                    CLC
11556  34E0  69 01                 ADC #1                                  ; ADD ONE TO THE FRAME
11557  34E2  E8                    INX                                     ; ADD ONE TO THE SPRITE NUMBER
11558  34E3  20 F1 34              JSR SETSPRITEIMAGE
11559  34E6  CA                    DEX
11560  34E7  60                    RTS
11561  34E8             
11562  34E8             @SETBODYSPRITE0 
11563  34E8  18                    CLC
11564  34E9  69 01                 ADC #1                                  ; ADD ONE TO THE FRAME
11565  34EB  E8                    INX                                     ; ADD ONE TO THE SPRITE NUMBER
11566  34EC  20 F1 34              JSR SETSPRITEIMAGE
11567  34EF  CA                    DEX
11568  34F0  60                    RTS
11569  34F1             
11570  34F1             
11571  34F1             
11572  34F1             ;===============================================================================
11573  34F1             ; SET SPRITE IMAGE
11574  34F1             ;===============================================================================
11575  34F1             ; SETS THE SPRITE IMAGE FOR A HARDWARE SPRITE, AND SETS UP ITS POINTERS FOR
11576  34F1             ; BOTH SCREENS
11577  34F1             ;-------------------------------------------------------------------------------
11578  34F1             ; A = SPRITE IMAGE NUMBER
11579  34F1             ; X = HARDWARE SPRITE NUMBER
11580  34F1             ;
11581  34F1             ; LEAVES REGISTERS INTACT
11582  34F1             ;-------------------------------------------------------------------------------
11583  34F1             
11584  34F1             SETSPRITEIMAGE 
11585  34F1  48                    PHA                                     ; SPRITE IMAGE NUMBER
11586  34F2  18                    CLC
11587  34F3  69 70                 ADC #SPRITE_BASE                        ; SPRITE IMAGE = IMAGE NUM + BASE
11588  34F5  9D F8 43              STA SPRITE_POINTER_BASE1,X
11589  34F8  9D F8 47              STA SPRITE_POINTER_BASE2,X
11590  34FB  68                    PLA
11591  34FC  60                    RTS
11592  34FD             
11593  34FD             
11594  34FD             
11595  34FD             ;===============================================================================
11596  34FD             ; INIT SPRITE ANIM
11597  34FD             ;-------------------------------------------------------------------------------
11598  34FD             ;
11599  34FD             ; SETUP AND INITIALIZE A SPRITES ANIMATIONS
11600  34FD             ;
11601  34FD             ; X = SPRITE NUMBER
11602  34FD             ; ZERO_PAGE_POINTER_1 = ANIMATION LIST ADDRESS
11603  34FD             ;
11604  34FD             ; MODIFIES A,Y
11605  34FD             ;-------------------------------------------------------------------------------
11606  34FD             
11607  34FD             INITSPRITEANIM 
11608  34FD  A9 01                 LDA #1                          ; RESET ANIM COUNTER TO FIRST FRAME
11609  34FF  9D B9 35              STA SPRITE_ANIM_COUNT,X
11610  3502             
11611  3502  8A                    TXA                             ; COPY SPRITE NUMBER TO A
11612  3503  0A                    ASL                             ; MULTIPLY IT BY 2 (SO WE CAN INDEX A WORD)
11613  3504  A8                    TAY                             ; TRANSFER RESULT TO Y
11614  3505                        ; READS "ANIM_PLAYER_" OR "ANIM_ENEMY_"
11615  3505  A5 17                 LDA ZEROPAGE_POINTER_1          ; STORE THE ADDRESS FOR THE ANIMLIST
11616  3507  99 C9 35              STA SPRITE_ANIMATION,Y          ; IN THE CORRECT 'SLOT' FOR THIS SPRITE
11617  350A  A5 18                 LDA ZEROPAGE_POINTER_1 + 1
11618  350C  99 CA 35              STA SPRITE_ANIMATION + 1,Y      ; SPRITE_ANIMATION = "ANIM_PLAYER_" (EXAMPLE)
11619  350F             
11620  350F             ; READS THROUGH ANIMATION BYTES EXAMPLE: "ANIM_ENEMY_WALK_L"
11621  350F             ; SUCH AS BYTE %00000011, BYTE 74,76,78, BYTE TYPE_LOOP
11622  350F             
11623  350F             ; ON THE FIRST PASS THROUGH OF Y=0 WE READ THE TIMER DATA
11624  350F             ; WHEN Y=0, THE CODE BELOW COULD CURRENTLY BE SEEN IN MEMORY AS:
11625  350F             
11626  350F             ;       LDY #0
11627  350F             ;       LDA (ZEROPAGE_POINTER_1),Y    > %000111 (ANIM_ENEMY_WALK_L) TIMER
11628  350F             
11629  350F  A0 00                 LDY #0                          ; FIRST BYTE IN THE LIST IS THE TIMER
11630  3511  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH IT
11631  3513  9D B1 35              STA SPRITE_ANIM_TIMER,X         ; STORE IT IN THIS SPRITES TIMER SLOT
11632  3516             
11633  3516             ; EARLIER IN PLAYERSTATEWALK (LEFT/RIGHT) WE STORED DATA IN ZEROPAGE_POINTER_1
11634  3516             ; TO POINT TO OUR SPRITE ANIMATION FRAMES.
11635  3516             
11636  3516             ; THE ABOVE CODE COULD NOW BE SEEN IN MEMORY AS:
11637  3516             ;       LDY #0
11638  3516             ;       LDA (ZEROPAGE_POINTER_1),Y      ; 68,70,72 (ANIM_ENEMY_WALK_L)
11639  3516             
11640  3516  C8                    INY                             ; INCREMENT Y TO 1 - THE FIRST ANIM FRAME
11641  3517  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; LOAD IT
11642  3519                        ; RIGHT NOW WE HAVE THE SPRITE IMAGE IN A
11643  3519                        ; AND THE SPRITE NUMBER IN X, WHICH IS EXACTLY WHAT
11644  3519                        ; WHAT WE NEED TO USE SETSPRITEIMAGE
11645  3519  20 F1 34              JSR SETSPRITEIMAGE              ; SET (HEAD) SPRITE (POKE 2040, SPRITE FRAME)
11646  351C             
11647  351C  E0 00                 CPX #0                          ; IF THE SPRITE = 0, THEN WE ARE SETTING THE PLAYER SPRITE
11648  351E  F0 01                 BEQ @BODYSPRITE0               ; THE PLAYER USES 2 SPRITES
11649  3520  60                    RTS
11650  3521             
11651  3521             ; SET THE BODY OF THE SPRITE (POKE 2041, SPRITE FRAME)
11652  3521             
11653  3521             @BODYSPRITE0 ; WE DON'T NEED TO SET ALL THE INFO FOR THIS SPRITE
11654  3521  E8                    INX                             ; INCREMENT X TO THE NEXT HARDWARE SPRITE
11655  3522  18                    CLC                             ; ADD ONE TO THE CURRENT ANIM FRAME NUMBER
11656  3523  69 01                 ADC #1                          ; BECAUSE OUR BACKGROUND SPRITE IS THE NEXT FRAME.
11657  3525  20 F1 34              JSR SETSPRITEIMAGE              ; NOW SET THE SPRITE IMAGE
11658  3528  60                    RTS
11659  3529             
11660  3529             
11661  3529             
11662  3529             ;===============================================================================
11663  3529             ; INIT SPRITE ANIM
11664  3529             ;-------------------------------------------------------------------------------
11665  3529             ;
11666  3529             ; SETUP AND INITIALIZE A SPRITES ANIMATIONS
11667  3529             ;
11668  3529             ; X = SPRITE NUMBER
11669  3529             ; ZERO_PAGE_POINTER_1 = ANIMATION LIST ADDRESS
11670  3529             ;
11671  3529             ; MODIFIES A,Y
11672  3529             ;-------------------------------------------------------------------------------
11673  3529             
11674  3529             INITENEMYANIM 
11675  3529  A9 01                 LDA #1                          ; RESET ANIM COUNTER TO FIRST FRAME
11676  352B  9D B9 35              STA SPRITE_ANIM_COUNT,X
11677  352E             
11678  352E  8A                    TXA                             ; COPY SPRITE NUMBER TO A
11679  352F  0A                    ASL                             ; MULTIPLY IT BY 2 (SO WE CAN INDEX A WORD)
11680  3530  A8                    TAY                             ; TRANSFER RESULT TO Y
11681  3531                        ; READS "ANIM_PLAYER_" OR "ANIM_ENEMY_"
11682  3531  A5 17                 LDA ZEROPAGE_POINTER_1          ; STORE THE ADDRESS FOR THE ANIMLIST
11683  3533  99 C9 35              STA SPRITE_ANIMATION,Y          ; IN THE CORRECT 'SLOT' FOR THIS SPRITE
11684  3536  A5 18                 LDA ZEROPAGE_POINTER_1 + 1
11685  3538  99 CA 35              STA SPRITE_ANIMATION + 1,Y
11686  353B             
11687  353B             ; READS THROUGH ANIMATION BYTES EXAMPLE: "ANIM_ENEMY_WALK_L"
11688  353B             ; SUCH AS BYTE %00000011, BYTE 74,76,78, BYTE TYPE_LOOP
11689  353B             
11690  353B             ; ON THE FIRST PASS THROUGH OF Y=0 WE READ THE TIMER DATA
11691  353B             ; WHEN Y=0, THE CODE BELOW COULD CURRENTLY BE SEEN IN MEMORY AS:
11692  353B             
11693  353B             ;       LDY #0
11694  353B             ;       LDA (ZEROPAGE_POINTER_1),Y    > %000111 (ANIM_ENEMY_WALK_L) TIMER
11695  353B             
11696  353B  A0 00                 LDY #0                          ; FIRST BYTE IN THE LIST IS THE TIMER
11697  353D  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH IT
11698  353F  9D B1 35              STA SPRITE_ANIM_TIMER,X         ; STORE IT IN THIS SPRITES TIMER SLOT
11699  3542             
11700  3542             ; EARLIER IN PLAYERSTATEWALK (LEFT/RIGHT) WE STORED DATA IN ZEROPAGE_POINTER_1
11701  3542             ; TO POINT TO OUR SPRITE ANIMATION FRAMES.
11702  3542             
11703  3542             ; THE ABOVE CODE COULD NOW BE SEEN IN MEMORY AS:
11704  3542             ;       LDY #0
11705  3542             ;       LDA (ZEROPAGE_POINTER_1),Y      ; 68,70,72 (ANIM_ENEMY_WALK_L)
11706  3542             
11707  3542  C8                    INY                             ; INCREMENT Y TO 1 - THE FIRST ANIM FRAME
11708  3543  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; LOAD IT
11709  3545                        
11710  3545                        ; RIGHT NOW WE HAVE THE SPRITE IMAGE IN A
11711  3545                        ; AND THE SPRITE NUMBER IN X, WHICH IS EXACTLY WHAT
11712  3545                        ; WHAT WE NEED TO USE SETSPRITEIMAGE
11713  3545  20 F1 34              JSR SETSPRITEIMAGE
11714  3548             
11715  3548  E0 02                 CPX #2                          ; IF THE SPRITE = 0, THEN WE ARE SETTING THE PLAYER SPRITE
11716  354A  F0 01                 BEQ @SECONDSPRITE               ; THE PLAYER USES 2 SPRITES
11717  354C  60                    RTS
11718  354D             @SECONDSPRITE 
11719  354D                        ; WE DON'T NEED TO SET ALL THE INFO FOR THIS SPRITE
11720  354D  E8                    INX                             ; INCREMENT X TO THE NEXT HARDWARE SPRITE
11721  354E  18                    CLC                             ; ADD ONE TO THE CURRENT ANIM FRAME NUMBER
11722  354F  69 01                 ADC #1                          ; BECAUSE OUR BACKGROUND SPRITE IS THE NEXT FRAME.
11723  3551  20 F1 34              JSR SETSPRITEIMAGE              ; NOW SET THE SPRITE IMAGE
11724  3554  60                    RTS
11725  3555             
11726  3555             
11727  3555             ;-------------------------------------------------------------------------------
11728  3555             ;===============================================================================
11729  3555             ; DATA AND TABLES
11730  3555             ;===============================================================================
11731  3555             ;-------------------------------------------------------------------------------
11732  3555             ; SPRITE POINTER TABLES
11733  3555             ;-------------------------------------------------------------------------------
11734  3555             
11735  3555             ; LOOKUP TABLES FOR SETTING SPRITE POINTERS FOR THE
11736  3555             ; CORRECT SCREENS
11737  3555             
11738  3555             SPRITE_POINTER_BASE1 = SCREEN1_MEM + $3F8
11739  3555             SPRITE_POINTER_BASE2 = SCREEN2_MEM + $3F8
11740  3555             SPRITE_POINTER_BASE3 = SCREEN2_MEM + $3F8
11741  3555             
11742  3555             ;-------------------------------------------------------------------------------
11743  3555             ;===============================================================================
11744  3555             ; SPRITE HANDLING DATA
11745  3555             ;===============================================================================
11746  3555             
11747  3555  00         RSP_GAME_SWITCH BYTE 0
11748  3556  00         LSP_GAME_SWITCH BYTE 0                                  ; BUT WITH 2 DIFFERENT Y POSITIONS, IT HAD TO
11749  3557             
11750  3557             ; 0,1 = SPRITE 0 (PLAYER)
11751  3557             ; 2,3 = SPRITE 1 (ENEMY)
11752  3557             SPRITE_STACK 
11753  3557  0A 0C 0A              BYTE 10,12,10,12,10,0,0,0                       ; HANDLES THE UPPER/LOWER SPRITE Y POSITIONS
11754  355F                        ; NOTE: THIS WAS ORIGINALLY MANAGED BY PARAM2
11755  355F                        ; BUT WITH 2 DIFFERENT Y POSITIONS, IT HAD TO
11756  355F                        ; BE ALTERED.
11757  355F  24         SPRITE_DEPTH BYTE 36
11758  3560             
11759  3560             SPRITE_IS_ACTIVE 
11760  3560  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11761  3568                        ; HARDWARE SPRITE X POSITION
11762  3568             SPRITE_POS_X 
11763  3568  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11764  3570                        ; DELTA X POSITION (0-7) - WITHIN A CHAR
11765  3570             SPRITE_POS_X_DELTA 
11766  3570  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11767  3578             
11768  3578             SPRITE_CHAR_POS_X ; CHAR POS X - SPRITE POSITION IN CHARACTER
11769  3578  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00            ; COORDS (0-40)
11770  3580             SPRITE_DELTA_TRIM_X 
11771  3580  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00            ; TRIM DELTA FOR BETTER COLLISIONS
11772  3588             
11773  3588             SPRITE_POS_X_EXTEND ; EXTENDED FLAG FOR X POSITON > 255
11774  3588  00                    BYTE $00                                        ; BITS 0-7 CORRESPOND TO SPRITE NUMBERS
11775  3589             
11776  3589             
11777  3589             SPRITE_POS_Y ; HARDWARE SPRITE Y POSITION
11778  3589  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11779  3591             SPRITE_POS_Y_DELTA 
11780  3591  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11781  3599             SPRITE_CHAR_POS_Y 
11782  3599  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11783  35A1             
11784  35A1             SPRITE_DIRECTION_X 
11785  35A1  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00    ; DIRECTION OF THE SPRITE (-1 0 1)
11786  35A9             SPRITE_DIRECTION_Y 
11787  35A9  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11788  35B1             
11789  35B1             SPRITE_ANIM_TIMER 
11790  35B1  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00    ; TIMING AND PLAYBACK DIRECTION FOR CURRENT ANIM
11791  35B9             SPRITE_ANIM_COUNT 
11792  35B9  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00    ; POSITION IN THE ANIM LIST
11793  35C1             SPRITE_ANIM_PLAY 
11794  35C1  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00    ; CURRENTLY ANIMATED OR PAUSED?
11795  35C9             
11796  35C9                        ; POINTER TO CURRENT ANIMATION TABLE
11797  35C9             SPRITE_ANIMATION 
11798  35C9  00 00 00              WORD $0000,$0000,$0000,$0000
11799  35D1  00 00 00              WORD $0000,$0000,$0000,$0000
11800  35D9             
11801  35D9             ; ENEMY DATA
11802  35D9             
11803  35D9  01         ACTIVETIMER BYTE 1
11804  35DA  01         ENEMYTIMER BYTE 1
11805  35DB  00         ENEMYCOUNTDOWN BYTE 0
11806  35DC  00         ENEMYFIRECD BYTE 0
11807  35DD             
11808  35DD             ENEMY_DISTANCE 
11809  35DD  16                    BYTE 22
11810  35DE             
11811  35DE  00         ENEMY_HIT  BYTE 0
11812  35DF                        
11813  35DF             ENEMY_SPRITE_POS_X 
11814  35DF  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11815  35E7                        ; DELTA X POSITION (0-7) - WITHIN A CHAR
11816  35E7             ENEMY_SPRITE_POS_X_DELTA 
11817  35E7  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11818  35EF             
11819  35EF             ENEMY_SPRITE_CHAR_POS_X ; CHAR POS X - SPRITE POSITION IN CHARACTER
11820  35EF  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00            ; COORDS (0-40)
11821  35F7             ENEMY_SPRITE_DELTA_TRIM_X 
11822  35F7  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00            ; TRIM DELTA FOR BETTER COLLISIONS
11823  35FF             
11824  35FF             ENEMY_SPRITE_POS_X_EXTEND ; EXTENDED FLAG FOR X POSITON > 255
11825  35FF  00                    BYTE $00                                        ; BITS 0-7 CORRESPOND TO SPRITE NUMBERS
11826  3600             
11827  3600             
11828  3600             ENEMY_SPRITE_POS_Y ; HARDWARE SPRITE Y POSITION
11829  3600  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11830  3608             ENEMY_SPRITE_POS_Y_DELTA 
11831  3608  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11832  3610             ENEMY_SPRITE_CHAR_POS_Y 
11833  3610  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11834  3618                        
11835  3618             ;===============================================================================
11836  3618             ; SPRITE ANIMATION TABLES
11837  3618             ;===============================================================================
11838  3618             ; ANIMS ARE HELD IN A BLOCK OF DATA CONTAINING INFO AND A LIST OF ANIM FRAMES.
11839  3618             ; BYTE 0 = TIMING MASK:
11840  3618             ;          THE LOWER 4 BITS CONTAIN A MASK WE WILL AND WITH THE MASTER TIMER,
11841  3618             ; IF THE RESULT IS
11842  3618             ; IS 0 WE WILL GO TO THE NEXT FRAME
11843  3618             ; VALID VALUES ARE THOSE THAT USE ALL BITS (1,3,5,7,15)
11844  3618             .
11845  3618             ; BIT 7 IS USED FOR THE DIRECTION OF THE ANIMATION (IN PING PONG ANIMS). IF WE
11846  3618             ; SET IT
11847  3618             ; WE CAN THEN USE BMI (BRANCH MINUS) TO SEE IF WE COUNT BACKWARDS INSTEAD OF
11848  3618             ; FORWARDS
11849  3618             ;
11850  3618             ; BYTE 1 TO END = SPRITE NUMBERS FOR THE ANIMATION FRAMES
11851  3618             ;
11852  3618             ; THE LAST BYTE BOTH TERMINATES THE ANIMATION, AND ALSO SHOWS WHAT SHOULD BE
11853  3618             ; DONE AT THE END
11854  3618             ; OF IT.  ON A LOOP WE WOULD RESET TO 0, ON A PLAY ONCE ANIM WE WOULD END, ON
11855  3618             ; A PING PONG TYPE IT WILL START COUNTING BACKWARDS
11856  3618             ;-------------------------------------------------------------------------------
11857  3618             ; ANIMATION TYPES
11858  3618             TYPE_LOOP  = $FF
11859  3618             TYPE_PLAY_ONCE = $FE
11860  3618             TYPE_PING_PONG = $FD
11861  3618             ;-------------------------------------------------------------------------------
11862  3618             ANIM_PLAYER_IDLE ; PLAYER IDLE ANIMATION
11863  3618  0F                    BYTE %0001111
11864  3619  04 02                 BYTE 4,2
11865  361B  FD                    BYTE TYPE_PING_PONG
11866  361C             
11867  361C             ANIM_PLAYER_WALK_R 
11868  361C  07                    BYTE %0000111
11869  361D  12 14 16              BYTE 18,20,22
11870  3620  FF                    BYTE TYPE_LOOP
11871  3621             
11872  3621             ANIM_PLAYER_WALK_L 
11873  3621  07                    BYTE %0000111
11874  3622  0C 0E 10              BYTE 12,14,16
11875  3625  FF                    BYTE TYPE_LOOP
11876  3626             
11877  3626             ANIM_PLAYER_FALL 
11878  3626  0F                    BYTE %0001111
11879  3627  22                    BYTE 34
11880  3628  FE                    BYTE TYPE_PLAY_ONCE
11881  3629             
11882  3629             ANIM_CLIMB_POLE 
11883  3629  03                    BYTE %0000011
11884  362A  08 0A 0C              BYTE 8,10,12
11885  362D  FF                    BYTE TYPE_LOOP
11886  362E             
11887  362E             ANIM_PLAYER_JUMP ; PLAYER JUMP ANIMATION
11888  362E  07                    BYTE %00000111
11889  362F  02 04 06              BYTE 2,4,6
11890  3632  FD                    BYTE TYPE_PING_PONG
11891  3633             
11892  3633             ANIM_PLAYER_PUNCH_R 
11893  3633  03                    BYTE %0000011
11894  3634  18 1A                 BYTE 24,26
11895  3636  FF                    BYTE TYPE_LOOP
11896  3637             
11897  3637             ANIM_PLAYER_PUNCH_L 
11898  3637  03                    BYTE %0000011
11899  3638  1E 20                 BYTE 30,32
11900  363A  FF                    BYTE TYPE_LOOP
11901  363B             
11902  363B             ANIM_PLAYER_SHOOT_RIGHT 
11903  363B  0F                    BYTE %0001111
11904  363C  32 32                 BYTE 50,50                              ; START AT 50
11905  363E  FF                    BYTE TYPE_LOOP
11906  363F             
11907  363F             ANIM_PLAYER_SHOOT_LEFT 
11908  363F  0F                    BYTE %0001111
11909  3640  34 34                 BYTE 52,52
11910  3642  FF                    BYTE TYPE_LOOP
11911  3643             
11912  3643             ANIM_PLAYER_KICK_R 
11913  3643  0F                    BYTE %0001111
11914  3644  1A 1C                 BYTE 26,28
11915  3646  FF                    BYTE TYPE_LOOP
11916  3647             
11917  3647             ANIM_PLAYER_KICK_L 
11918  3647  0F                    BYTE %0001111
11919  3648  26 28                 BYTE 38,40
11920  364A  FF                    BYTE TYPE_LOOP
11921  364B             
11922  364B             PLAYER_JUMPCOUNT 
11923  364B  00                    BYTE 0
11924  364C             
11925  364C             ANIM_PLAYER_SWIM_R 
11926  364C  03                    BYTE %0000011
11927  364D  2B 2D                 BYTE 43,45
11928  364F  FF                    BYTE TYPE_LOOP
11929  3650             
11930  3650             ANIM_PLAYER_SWIM_L 
11931  3650  03                    BYTE %0000011
11932  3651  2E 30                 BYTE 46,48
11933  3653  FF                    BYTE TYPE_LOOP
11934  3654             
11935  3654             ; ENEMY ANIMATION: ALWAYS GO BACK 1 FRAME BEFORE THE ONE THAT
11936  3654             ; SHOWS IN THE SPRITE EDITOR.
11937  3654             
11938  3654             ANIM_ENEMY_IDLE 
11939  3654  0F                    BYTE %0001111
11940  3655  62 66                 BYTE 98,102                           ; SPRITES 99-104
11941  3657  FD                    BYTE TYPE_PING_PONG
11942  3658             
11943  3658             ANIM_ENEMY_WALK_R 
11944  3658  07                    BYTE %0000111
11945  3659  4A 4E                 BYTE 74,78                            ; SPRITES 77-80 RUNNING RIGHT
11946  365B  FF                    BYTE TYPE_LOOP
11947  365C             
11948  365C             ANIM_ENEMY_WALK_L 
11949  365C  07                    BYTE %0000111
11950  365D  44 48                 BYTE 68,72                            ; SPRITES 69-74 RUNNING LEFT
11951  365F  FF                    BYTE TYPE_LOOP
11952  3660             
11953  3660             ANIM_ENEMY_WALK_D 
11954  3660  07                    BYTE %0000111
11955  3661  3A 3C 3E              BYTE 58,60,62                         ; SPRITES 69-74 RUNNING LEFT
11956  3664  FF                    BYTE TYPE_LOOP
11957  3665             
11958  3665             ANIM_ENEMY_FIRING_RIGHT 
11959  3665  07                    BYTE %0000111
11960  3666  4A 50                 BYTE 74,80                            ; SPRITES 81, 82, (85,87)
11961  3668  FF                    BYTE TYPE_LOOP
11962  3669             
11963  3669             ANIM_ENEMY_FIRING_LEFT 
11964  3669  0F                    BYTE %0001111
11965  366A  42 48                 BYTE 66,72                            ; SPRITES 67, 68
11966  366C  FF                    BYTE TYPE_LOOP
11967  366D             
11968  366D             ANIM_ENEMY_ATTACK_RIGHT 
11969  366D  07                    BYTE %0000111
11970  366E  56 58                 BYTE 86,88                            ;SPRITES 69-74 RUNNING LEFT
11971  3670  FF                    BYTE TYPE_LOOP
11972  3671             
11973  3671             ANIM_ENEMY_ATTACK_LEFT 
11974  3671  07                    BYTE %0000111
11975  3672  5A 5C                 BYTE 90,92                            ;SPRITES 69-74 RUNNING LEFT
11976  3674  FF                    BYTE TYPE_LOOP
11977  3675             
11978  3675             ANIM_ENEMY_RIGHT_DEAD 
11979  3675  07                    BYTE %0000111
11980  3676  52 54 56              BYTE 82,84,86
11981  3679  FF                    BYTE TYPE_LOOP
11982  367A             
11983  367A             ANIM_ENEMY_LEFT_DEAD 
11984  367A  07                    BYTE %0000111
11985  367B  52 54 56              BYTE 82,84,86
11986  367E  FF                    BYTE TYPE_LOOP
11987  367F             
11988  367F             ANIM_ENEMY_CLIMB_ROPE 
11989  367F  03                    BYTE %0000011
11990  3680  55 56                 BYTE 85,86
11991  3682  FF                    BYTE TYPE_LOOP
11992  3683             
11993  3683             ANIM_ENEMY_BULLET 
11994  3683  03                    BYTE %0000011
11995  3684  36 36                 BYTE 54,54
11996  3686  FF                    BYTE TYPE_LOOP
11997  3687             
11998  3687             ; BELOW ARE OUR CURRENT STATIONARY SPRITES (DON'T MOVE)
11999  3687             ANIM_NPC1  ; NUMBERS 0 TO 9
12000  3687  03                    BYTE %0000011
12001  3688  50 50                 BYTE 80,80                              ; WAS 74,68,82
12002  368A  FD                    BYTE TYPE_PING_PONG
12003  368B             
12004  368B             ANIM_NPC2  ; NUMBERS 0 TO 9
12005  368B  03                    BYTE %0000011
12006  368C  51 51                 BYTE 81,81                              ; WAS 75,69,83
12007  368E  FD                    BYTE TYPE_PING_PONG
12008  368F             
12009  368F             ANIM_NPC3  ; NUMBERS 0 TO 9
12010  368F  03                    BYTE %0000011
12011  3690  5F 5F                 BYTE 95,95                              ; WAS 99,99
12012  3692  FD                    BYTE TYPE_PING_PONG
12013  3693             
12014  3693             ANIM_NPC4  ; NUMBERS 0 TO 9
12015  3693  03                    BYTE %0000011
12016  3694  60 60                 BYTE 96,96                              ; WAS 99,99
12017  3696  FD                    BYTE TYPE_PING_PONG
12018  3697             `;============================================================================== 
12019  3697             ; COLLISION ROUTINES
12020  3697             ;===============================================================================
12021  3697             ; PETER 'SIG' HEWETT
12022  3697             ; - 2016,2017
12023  3697             ;-------------------------------------------------------------------------------
12024  3697             ; ROUTINES DEALING WITH COLLISIONS BETWEEN GAME OBJECTS
12025  3697             ;
12026  3697             ;===============================================================================
12027  3697             ; SPRITE TO BACKGROUND CHARACTERS
12028  3697             ;===============================================================================
12029  3697             ; CHECKS TO SEE IF THE SPRITE IS COLLIDING WITH A BACKGROUND CHARACTER.
12030  3697             ; MANY OF THESE CHECKS WILL BE 'FORWARD LOOKING' (ESPECIALLY IN MOVEMENT CHECKS)
12031  3697             ; WE WILL BE LOOKING TO WHERE THE SPRITE WILL BE, NOT WHERE IT IS, AND THEN
12032  3697             ; LETTING THE SPRITE HANDLING ROUTINES UPDATE THE POSITIONS AND DELTAS FOR US
12033  3697             ; IF WE MOVE.
12034  3697             ;
12035  3697             ; THE ORIGINAL 'FRAMEWORK CODE' WORKED AGAINST A SINGLE SCREEN AND RETURNED A SIMPLE
12036  3697             ; 1 FOR BLOCKED AND 0 FOR CLEAR. WE NEED A MUCH BETTER SYSTEM FOR THE GAME ENGINE
12037  3697             ; THAT WILL HANDLE DOUBLE BUFFERED SCREENS AS WELL AS CALCULATING SCREEN SCROLLING.
12038  3697             ; IT WILL ALSO NEED TO RETURN MORE INFORMATION DEALING WITH DIFFERENT
12039  3697             ; TYPES OF BLOCKS
12040  3697             ;
12041  3697             ;
12042  3697             ;===============================================================================
12043  3697             ; ENEMY CHECK MOVE LEFT
12044  3697             ;-------------------------------------------------------------------------------
12045  3697             ; CHECKS AHEAD TO SEE IF THIS SPRITE CAN LOVE LEFT, OF IT'S GOING TO BE STOPPED
12046  3697             ; BY A BLOCKING CHARACTER
12047  3697             ;
12048  3697             ; X = SPRITE WE WANT TO CHECK FOR
12049  3697             ;
12050  3697             ; RETURNS A = 0 WE CAN MOVE OR A = 1 WE ARE BLOCKED
12051  3697             ;
12052  3697             ; MODIFIES A, Y, PARAM1, PARAM2
12053  3697             ; X REGISTER IS LEFT INTACT
12054  3697             ;-------------------------------------------------------------------------------
12055  3697             
12056  3697             ENEMYCHECKMOVELEFT 
12057  3697  BD 78 35              LDA SPRITE_CHAR_POS_X,X                 ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
12058  369A  85 03                 STA PARAM1
12059  369C  BD 99 35              LDA SPRITE_CHAR_POS_Y,X                 ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
12060  369F  85 04                 STA PARAM2
12061  36A1             
12062  36A1  BD 70 35              LDA SPRITE_POS_X_DELTA,X                ; LOAD X POS DELTA
12063  36A4  38                    SEC
12064  36A5  E5 29                 SBC SCROLL_COUNT_X                      ; ADJUST THE DELTA FOR SCROLLING LEFT/RIGHT
12065  36A7  10 02                 BPL @NOADJX                             ; CHECK TO SEE IF DELTA WRAPS TO -1 ($FF)
12066  36A9             
12067  36A9  C6 03                 DEC PARAM1                              ; IF THE DELTA WRAPS, ADJUST THE X CHAR POSITION
12068  36AB             
12069  36AB             
12070  36AB             @NOADJX
12071  36AB  29 07                 AND #%0111                              ; MASK THE DELTA VALUE BACK TO A 0-7 VALUE
12072  36AD  C9 00                 CMP #0                                  ; CHECK X DELTA TO SEE IF THE SPRITE IS 'FLUSH'
12073  36AF  F0 03                 BEQ @CHECKLEFT                          ; IF IT IS, CONTINUE
12074  36B1  A9 00                 LDA #0                                  ; ELSE RETURN WITH A 'CLEAR' CODE
12075  36B3  60                    RTS
12076  36B4             
12077  36B4             @CHECKLEFT 
12078  36B4  BD 91 35              LDA SPRITE_POS_Y_DELTA,X                ; LOAD THE SPRITE DELTA Y POS
12079  36B7  38                    SEC                                     ; SUBTRACT THE CURRENT Y SCROLL
12080  36B8  E5 2A                 SBC SCROLL_COUNT_Y
12081  36BA  10 02                 BPL @NOADJY                             ; IF IT WRAPS, DECREMENT THE Y CHAR POSITION
12082  36BC             
12083  36BC  C6 04                 DEC PARAM2
12084  36BE             @NOADJY
12085  36BE  29 07                 AND #%0111                              ; MASK BACK TO A 0-7 VALUE
12086  36C0  F0 10                 BEQ @CHECKLEFT2                         ; IF ADJUSTED DELTA Y IS 0, WE ONLY NEED TO CHECK 2
12087  36C2                        ; CHARACTERS
12088  36C2             
12089  36C2                        ; IF NOT WE NEED TO CHECK 3 CHARACTERS
12090  36C2             
12091  36C2  A4 04                 LDY PARAM2                              ; LOAD ADJUSTED Y CHAR POSITION (SCREEN LINE)
12092  36C4  C8                    INY                                     ; INCREMENT BY ONE LINE
12093  36C5             
12094  36C5  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS           ; USE SCREEN_ROUTINES HELPER TO FETCH THE ADDRESS
12095  36C8                        ; STORED IN (ZEROPAGE_POINTER_1)
12096  36C8             
12097  36C8  A4 03                 LDY PARAM1                              ; FETCH SPRITES X POSITION
12098  36CA  88                    DEY                                     ; SUB 1 CHARACTER (LEFT)
12099  36CB             
12100  36CB  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; FETCH THE CHARACTER FROM SCREEN MEMORY
12101  36CD             
12102  36CD  20 53 38              JSR ENEMYTESTBLOCKING                   ; TEST FOR A BLOCKING CHARACTER
12103  36D0                        ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12104  36D0                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12105  36D0             
12106  36D0             
12107  36D0  D0 1F                 BNE @BLOCKEDLEFT
12108  36D2                        
12109  36D2                        ; OTHERWISE CHECK THE OTHER 2 CHARACTERS
12110  36D2             @CHECKLEFT2 
12111  36D2  A4 04                 LDY PARAM2                              ; FETCH THE SPRITE Y CHAR POSITION
12112  36D4  88                    DEY                                     ; GO ONE LINE UP
12113  36D5  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS
12114  36D8             
12115  36D8  A4 03                 LDY PARAM1
12116  36DA  88                    DEY                                     ; ONE CHAR LEFT
12117  36DB             
12118  36DB             
12119  36DB  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12120  36DD  20 53 38              JSR ENEMYTESTBLOCKING                   ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12121  36E0                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12122  36E0             
12123  36E0  D0 0F                 BNE @BLOCKEDLEFT
12124  36E2             
12125  36E2  98                    TYA
12126  36E3  18                    CLC
12127  36E4  69 28                 ADC #40
12128  36E6  A8                    TAY
12129  36E7                        
12130  36E7  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12131  36E9  20 53 38              JSR ENEMYTESTBLOCKING                   ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12132  36EC                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12133  36EC             
12134  36EC  D0 03                 BNE @BLOCKEDLEFT
12135  36EE                        
12136  36EE  A9 00                 LDA #0
12137  36F0  60                    RTS
12138  36F1                        
12139  36F1             @BLOCKEDLEFT 
12140  36F1  A9 01                 LDA #1
12141  36F3  60                    RTS
12142  36F4             
12143  36F4             
12144  36F4             ;-------------------------------------------------------------------------------
12145  36F4             
12146  36F4             ;===============================================================================
12147  36F4             ; ENEMY CHECK MOVE RIGHT
12148  36F4             ;-------------------------------------------------------------------------------
12149  36F4             ; BASED ON THE PREVIOUS 'CANMOVERIGHT' ROUTINE. IT CHECKS AHEAD TO SEE IF THERE
12150  36F4             ; ARE GOING TO BE BLOCKING CHARACTERS IN THE DIRECTION WE WANT TO MOVE.
12151  36F4             ;
12152  36F4             ; THIS VERSION CHECKS THE APPROPRIATE FRONT SCREEN AND RETURNS A CODE. 0 FOR
12153  36F4             ; CLEAR OR 1-255 FOR ANY SPECIAL ACTION THAT CAN OR MUST BE TAKEN.
12154  36F4             ;
12155  36F4             ; X = SPRITE TO CHECK AGAINST
12156  36F4             ;
12157  36F4             ; MODIFIES Y, PARAM1, PARAM2
12158  36F4             ;
12159  36F4             ; RETURNS A = BLOCKING CODE
12160  36F4             ; X REGISTER IS LEFT INTACT
12161  36F4             ;-------------------------------------------------------------------------------
12162  36F4             
12163  36F4             
12164  36F4             ENEMYCHECKMOVERIGHT 
12165  36F4             
12166  36F4  BD 78 35              LDA SPRITE_CHAR_POS_X,X         ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
12167  36F7  85 03                 STA PARAM1
12168  36F9  BD 99 35              LDA SPRITE_CHAR_POS_Y,X         ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
12169  36FC  85 04                 STA PARAM2
12170  36FE             
12171  36FE  BD 70 35              LDA SPRITE_POS_X_DELTA,X        ; FETCH X DELTA
12172  3701  38                    SEC
12173  3702  E5 29                 SBC SCROLL_COUNT_X              ; SUBTRACT THE SCROLL COUNT
12174  3704  10 02                 BPL @NOADJX
12175  3706                        
12176  3706  C6 03                 DEC PARAM1                      ; INCREMENT PARAM1
12177  3708             
12178  3708             @NOADJX
12179  3708  29 07                 AND #%0111                      ; MASK BACK TO A RANGE OF 0-7  ; NO ADJUSTMENT IS NEEDED
12180  370A  C9 04                 CMP #4                          ; IS NEW DELTA = 0?
12181  370C  F0 03                 BEQ @CHECKRIGHT                 ; IF SO, WE CAN CHECK RIGHT
12182  370E  A9 00                 LDA #0                          ; OTHERWISE GIVE A CLEAR CODE AND CARRY ON
12183  3710  60                    RTS
12184  3711             
12185  3711             
12186  3711             @CHECKRIGHT 
12187  3711  BD 91 35              LDA SPRITE_POS_Y_DELTA,X        ; LOAD THE Y DELTA
12188  3714  38                    SEC
12189  3715  E5 2A                 SBC SCROLL_COUNT_Y              ; ADJUST BY THE CURRENT Y SCROLL VALUE
12190  3717  10 02                 BPL @NOADJY                     ; IF THE DELTA GOES BELOW 0 ADJUST Y POSITION
12191  3719             
12192  3719  C6 04                 DEC PARAM2
12193  371B             
12194  371B             @NOADJY
12195  371B  29 07                 AND #%0111                      ; MASK ADJUSTED DELTA VALUE BACK TO 0 - 7
12196  371D                        ; IF Y DELTA IS 0, WE ARE FLUSH ON THE Y AXIS, SO ONLY
12197  371D  F0 10                 BEQ @RIGHTCHECK2                ; CHECK 2 CHARACTERS
12198  371F                        ; OTHERWISE WE ARE OVERLAPPING, SO WE NEED TO CHECK 3
12199  371F  A4 04                 LDY PARAM2                      ; FETCH THE SPRITES Y CHARACTER POSITION
12200  3721  C8                    INY                             ; ADD 1 (ONE CHARACTER LINE DOWN)
12201  3722                        
12202  3722  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THAT SCREEN LINE
12203  3725             
12204  3725  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES X POSITION AND STORE IT IN Y
12205  3727  C8                    INY                             ; ADD 1 CHARACTER (RIGHT)
12206  3728  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE SCREEN CHARACTER
12207  372A  20 53 38              JSR ENEMYTESTBLOCKING           ; SEE IF IT'S A BLOCKING CHARACTER
12208  372D                        ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12209  372D                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12210  372D             
12211  372D             
12212  372D  D0 1F                 BNE @BLOCKEDRIGHT               ; RETURN IF IT IS
12213  372F             
12214  372F             @RIGHTCHECK2 ; CHECK THE 2 CHARACTERS TO THE RIGHT OF THE SPRITE
12215  372F  A4 04                 LDY PARAM2
12216  3731  88                    DEY                             ; SUBTRACT ONE (ONE CHARACTER DOWN)
12217  3732                        
12218  3732  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THAT LINE
12219  3735                        
12220  3735  A4 03                 LDY PARAM1                      ; LOAD THE ADJUSTED X CHARACTER POSITION IN Y
12221  3737  C8                    INY                             ; ADD ONE CHARACTER TO THE RIGHT
12222  3738             
12223  3738  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE CHARACTER
12224  373A  20 53 38              JSR ENEMYTESTBLOCKING           ; TEST THE CHARACTER FOR BLOCKING
12225  373D                        ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12226  373D                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12227  373D             
12228  373D  D0 0F                 BNE @BLOCKEDRIGHT               ; EXIT AND RETURN THE CODE IF BLOCKING
12229  373F             
12230  373F  98                    TYA                             ; ADD #40 TO THE CURRENT X POSITION
12231  3740  18                    CLC                             ; THIS IS THE SAME AS GOING DOWN ONE BLOCK
12232  3741  69 28                 ADC #40
12233  3743  A8                    TAY
12234  3744  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; LOAD THE CHARACTER TO CHECKMOVEDOWN
12235  3746  20 53 38              JSR ENEMYTESTBLOCKING           ; TEST IT
12236  3749                        ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12237  3749                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12238  3749             
12239  3749  D0 03                 BNE @BLOCKEDRIGHT               ; RETURN THE CODE IF BLOCKING
12240  374B             
12241  374B  A9 00                 LDA #0                          ; ELSE RETURN WITH A 'CLEAR' CODE
12242  374D  60                    RTS
12243  374E             
12244  374E             @BLOCKEDRIGHT 
12245  374E  A9 01                 LDA #1
12246  3750  60                    RTS
12247  3751                        
12248  3751             
12249  3751             ;-------------------------------------------------------------------------------
12250  3751             ;===============================================================================
12251  3751             ; ENEMY CHECK MOVE DOWN
12252  3751             ;-------------------------------------------------------------------------------
12253  3751             ;
12254  3751             ; X = SPRITE WE WANT TO CHECK FOR
12255  3751             ;
12256  3751             ; RETURNS : A = 0 WE MOVE OR A = 1 WE ARE BLOCKED
12257  3751             ;
12258  3751             ; MODIFIES : Y,PARAM1, PARAM2
12259  3751             ;            X IS LEFT INTACT
12260  3751             ;-------------------------------------------------------------------------------
12261  3751             
12262  3751             ENEMYCHECKMOVEDOWN 
12263  3751             
12264  3751  BD 78 35              LDA SPRITE_CHAR_POS_X,X           ; FETCH THE SPRITES X CHARACTER COORD
12265  3754  85 03                 STA PARAM1                              ; PARAM1 WILL HOLD THE ADJUSTED Y COORD
12266  3756  BD 99 35              LDA SPRITE_CHAR_POS_Y,X           ; FETCH THE SPRITES Y CHARACTER COORD
12267  3759  85 04                 STA PARAM2                              ; PARAM2 WILL HOLD THE ADJUSTED Y COORD
12268  375B             
12269  375B             
12270  375B                        ; ADJUST THE Y DELTA AND POS Y VALUES
12271  375B  BD 91 35              LDA SPRITE_POS_Y_DELTA,X          ; LOAD THE DELTA Y
12272  375E  38                    SEC
12273  375F  E5 2A                 SBC SCROLL_COUNT_Y                      ; SUBTRACT THE Y SCROLL COUNT
12274  3761  10 02                 BPL @NOADJUSTY                          ; IF IT'S LESS THAN 0, ADJUST Y POS
12275  3763             
12276  3763  C6 04                 DEC PARAM2
12277  3765             
12278  3765             
12279  3765             @NOADJUSTY 
12280  3765  29 07                 AND #%0111                              ; MASK BACK TO 0-7 VALUE
12281  3767                        ; IF ADJUSTED DELTA Y IS 0, WE ARE FLUSH
12282  3767  F0 03                 BEQ @DOWNCHECK                          ; AND DO A CHARACTER CHECK
12283  3769  A9 00                 LDA #0                                  ; ELSE RETURN A CLEAR CODE
12284  376B  60                    RTS
12285  376C                        
12286  376C             
12287  376C             @DOWNCHECK 
12288  376C  BD 70 35              LDA SPRITE_POS_X_DELTA,X           ; CHECK THE X DELTA, IF IT'S FLUSH (0) WE ONLY
12289  376F  38                    SEC
12290  3770  E5 29                 SBC SCROLL_COUNT_X
12291  3772  10 02                 BPL @NOADJX
12292  3774             
12293  3774  C6 03                 DEC PARAM1
12294  3776             
12295  3776             @NOADJX
12296  3776  29 07                 AND #%0111                              ; (MASK AT 0-7 PIXELS)
12297  3778  F0 10                 BEQ @DOWNCHECK2                         ; NEED TO CHECK 2 CHARACTERS
12298  377A             
12299  377A  A4 04                 LDY PARAM2                              ; LOAD THE ADJUSTED Y CHARACTER LINE
12300  377C  C8                    INY                                     ; INCREMENT TO ONE LINE DOWN
12301  377D             
12302  377D  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS
12303  3780                        ; LOAD SPRITE X CHAR POSITION
12304  3780  A4 03                 LDY PARAM1
12305  3782  C8                    INY                                     ; INC X POS (LEFT CHARACTER)
12306  3783  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; FETCH THE CHARACTER
12307  3785             
12308  3785  20 53 38              JSR ENEMYTESTBLOCKING                   ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12309  3788                        ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12310  3788  D0 12                 BNE @DOWNBLOCKED
12311  378A             
12312  378A             @DOWNCHECK2 
12313  378A  A4 04                 LDY PARAM2                              ; LOAD SPRITE Y CHAR COORD
12314  378C  C8                    INY                                     ; INCREMENT DOWN ONE LINE
12315  378D             
12316  378D  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS           ;SAVES DATA IN ZEROPPAGE_POINTER_1
12317  3790                        
12318  3790  A4 03                 LDY PARAM1
12319  3792  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12320  3794             
12321  3794  20 53 38              JSR ENEMYTESTBLOCKING                   ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12322  3797                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12323  3797  D0 03                 BNE @DOWNBLOCKED
12324  3799             
12325  3799  A9 00                 LDA #0
12326  379B  60                    RTS
12327  379C             
12328  379C             @DOWNBLOCKED 
12329  379C  60                    RTS
12330  379D             
12331  379D             
12332  379D             ;===============================================================================
12333  379D             ; ENEMY CHECK MOVE UP
12334  379D             ;-------------------------------------------------------------------------------
12335  379D             ; CHECKS AHEAD TO SEE IF THIS SPRITE CAN MOVE UP, OR IF IT'S GOING TO BE STOPPED
12336  379D             ; BY A BLOCKING CHARACTER
12337  379D             ;
12338  379D             ; X = SPRITE WE WANT TO CHECK FOR
12339  379D             ;
12340  379D             ; RETURNS A = 0 WE CAN MOVE OR A = 1 WE ARE BLOCKED
12341  379D             ;
12342  379D             ; MODIFIES Y,PARAM1,PARAM2
12343  379D             ;-------------------------------------------------------------------------------
12344  379D             
12345  379D             ENEMYCHECKMOVEUP 
12346  379D  BD 78 35              LDA SPRITE_CHAR_POS_X,X                 ; LOAD SPRITES X CHARACTER POS
12347  37A0  85 03                 STA PARAM1                              ; ADJUSTED X CHAR POS WILL BE IN PARAM1
12348  37A2  BD 99 35              LDA SPRITE_CHAR_POS_Y,X                 ; ADJUSTED Y CHARACTER POS
12349  37A5  85 04                 STA PARAM2                              ; LOAD SPRITES Y CHARACTER POS
12350  37A7             
12351  37A7  BD 91 35              LDA SPRITE_POS_Y_DELTA,X                ; LOAD SPRITES Y DELTA
12352  37AA  38                    SEC                                     ; SUBTRACT Y SCROLL VALUE
12353  37AB  E5 2A                 SBC SCROLL_COUNT_Y
12354  37AD  10 02                 BPL @NOADJY                             ; IF IT WRAPS PAST 0 - ADJUST Y CHAR POS
12355  37AF             
12356  37AF  C6 04                 DEC PARAM2
12357  37B1             
12358  37B1             @NOADJY
12359  37B1  29 07                 AND #%0111                              ; MASK BACK TO A VALUE OF 0-7
12360  37B3  F0 03                 BEQ @CHECKUP                            ; IF IT'S 0 - WE ARE FLUSH AND DO A CHECK
12361  37B5  A9 00                 LDA #0                                  ; OTHERWISE RETURN WITH A 'CLEAR' CODE
12362  37B7  60                    RTS
12363  37B8             
12364  37B8             @CHECKUP
12365  37B8  BD 70 35              LDA SPRITE_POS_X_DELTA,X                ; LOAD THE SPRITE X DELTA VALUE
12366  37BB  38                    SEC
12367  37BC  E5 29                 SBC SCROLL_COUNT_X                      ; SUBTRACT CURRENT SCROLL X VALUE
12368  37BE  10 02                 BPL @NOADJX                             ; IF IT WRAPS PAST 0 - ADJUST THE X CHAR POS
12369  37C0             
12370  37C0  C6 03                 DEC PARAM1
12371  37C2             
12372  37C2             @NOADJX    
12373  37C2  29 07                 AND #%0111                              ; MASK BACK TO A 0-7 VALUE
12374  37C4  F0 11                 BEQ @CHECKUP2                           ; IF WE ARE NOT FLUSH WE NEED TO CHECK 2 CHARACTERS
12375  37C6             
12376  37C6  A4 04                 LDY PARAM2                              ; FETCH THE ADJUSTED SPRITE Y CHAR COORD
12377  37C8  88                    DEY                                     ; SUBTRACT 2 LINES (UP)
12378  37C9  88                    DEY
12379  37CA                        
12380  37CA  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS
12381  37CD             
12382  37CD  A4 03                 LDY PARAM1                              ; LOAD ADJUSTED X CHARACTER POS
12383  37CF  C8                    INY                                     ; INC X BY 1 (ONE CHAR RIGHT)
12384  37D0  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12385  37D2                        
12386  37D2             
12387  37D2  20 53 38              JSR ENEMYTESTBLOCKING                   ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12388  37D5                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12389  37D5  D0 13                 BNE @UPBLOCKED
12390  37D7             
12391  37D7             
12392  37D7             @CHECKUP2
12393  37D7  A4 04                 LDY PARAM2                              ; LOAD THE ADJUSTED SPRITE CHAR Y POSITION
12394  37D9  88                    DEY                                     ; DECREMENT (GO UP) BY 2 LINES
12395  37DA  88                    DEY
12396  37DB             
12397  37DB  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS
12398  37DE             
12399  37DE  A4 03                 LDY PARAM1                              ; LOAD ADJUSTED X CHARACTER POSITION
12400  37E0             
12401  37E0  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12402  37E2  20 53 38              JSR ENEMYTESTBLOCKING                   ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12403  37E5                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12404  37E5  D0 03                 BNE @UPBLOCKED
12405  37E7             
12406  37E7  A9 00                 LDA #0
12407  37E9  60                    RTS
12408  37EA             
12409  37EA             @UPBLOCKED 
12410  37EA  A9 01                 LDA #1
12411  37EC  60                    RTS
12412  37ED             
12413  37ED             
12414  37ED             
12415  37ED             ;===============================================================================
12416  37ED             ; ENEMY CHECK BLOCK UNDER
12417  37ED             ;-------------------------------------------------------------------------------
12418  37ED             ; CHECK THE BLOCK UNDER THE SPRITE FOR COLLISION (USEFULL FOR THINGS LIKE
12419  37ED             ; ROPES AND CHESTS)
12420  37ED             ;-------------------------------------------------------------------------------
12421  37ED             
12422  37ED             ENEMYCHECKBLOCKUNDER 
12423  37ED  BD 78 35              LDA SPRITE_CHAR_POS_X,X   ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
12424  37F0  85 03                 STA PARAM1
12425  37F2  BD 99 35              LDA SPRITE_CHAR_POS_Y,X   ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
12426  37F5  85 04                 STA PARAM2
12427  37F7             
12428  37F7  AD 70 35              LDA SPRITE_POS_X_DELTA    ; FETCH X DELTA
12429  37FA  38                    SEC
12430  37FB  E5 29                 SBC SCROLL_COUNT_X              ; SUBTRACT THE SCROLL COUNT
12431  37FD  18                    CLC
12432  37FE  69 03                 ADC #3
12433  3800  10 02                 BPL @NOADJX                     ; IF IT'S 0 OR GREATER, DON'T ADJUST X POSITION
12434  3802  C6 03                 DEC PARAM1                      ; OTHERWISE SUBTRACT 1
12435  3804             
12436  3804             @NOADJX
12437  3804  29 07                 AND #%0111                      ; MASK DELTA BACK TO A VALUE BETWEEN 0-7
12438  3806  F0 00                 BEQ @ADJY                       ; WE ARE FLUSH ON THE X AXIS - DO CHECK ON Y
12439  3808                        ; OTHERWISE ?? I COULD DO ANOTHER SET OF LOOKUPS
12440  3808                        ; BASED ON 'NON FLUSH'
12441  3808             
12442  3808             
12443  3808             @ADJY
12444  3808  AD 91 35              LDA SPRITE_POS_Y_DELTA    ; FETCH THE Y DELTA
12445  380B  38                    SEC
12446  380C  E5 2A                 SBC SCROLL_COUNT_Y
12447  380E  10 02                 BPL @NOADJY
12448  3810  C6 04                 DEC PARAM2
12449  3812             
12450  3812             @NOADJY
12451  3812  29 07                 AND #%0111                      ; IF WE ARE FLUSH ON Y WE ONLY NEED TO CHECK 2 CHARACTERS
12452  3814  F0 14                 BEQ @UNDERCHECK2                ; OTHERWISE WE NEED TO CHECK 3
12453  3816             
12454  3816             @UNDERCHECK 
12455  3816  A4 04                 LDY PARAM2                      ; FETCH THE ADJUSTED Y POSITION
12456  3818  C8                    INY                             ; ADD ONE LINE (DOWN)
12457  3819                        
12458  3819  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THE SCREEN LINE
12459  381C                        ; RETURNED IN ZEROPAGE_POINTER_1
12460  381C  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES ADJUSTED X CHARACTER POSITION
12461  381E  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE SCREEN CHARACTER
12462  3820  20 53 38              JSR ENEMYTESTBLOCKING           ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12463  3823  D0 2A                 BNE @BLOCKINGUNDER              ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12464  3825                        
12465  3825  AD 83 38              LDA ENEMY_COLLIDER_ATTR
12466  3828  D0 28                 BNE @SPECIAL_UNDER               ; A SPECIAL BLOCK IS UNDER US - EXIT
12467  382A             
12468  382A             @UNDERCHECK2 
12469  382A  A4 04                 LDY PARAM2                      ; FETCH THE ADJUSTED Y POSITION
12470  382C  88                    DEY                             ; ONE LINE UP
12471  382D  20 C1 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THE SCREEN LINE
12472  3830                        ; RETURNED IN ZEROPAGE_POINTER_1
12473  3830  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES ADJUSTED X CHARACTER POSITION
12474  3832  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12475  3834  20 53 38              JSR ENEMYTESTBLOCKING           ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12476  3837                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12477  3837  D0 16                 BNE @BLOCKINGUNDER
12478  3839  AD 83 38              LDA ENEMY_COLLIDER_ATTR         ; NO BLOCKED, CONTINUE
12479  383C  D0 14                 BNE @SPECIAL_UNDER
12480  383E             
12481  383E  98                    TYA
12482  383F  18                    CLC
12483  3840  69 28                 ADC #40
12484  3842  A8                    TAY
12485  3843  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12486  3845  D0 08                 BNE @BLOCKINGUNDER
12487  3847  AD 83 38              LDA ENEMY_COLLIDER_ATTR
12488  384A  D0 06                 BNE @SPECIAL_UNDER
12489  384C  A9 00                 LDA #0                          ; RETURNS 0 = NO BLOCK EXIST (FREE SPACE)
12490  384E  60                    RTS
12491  384F             @BLOCKINGUNDER 
12492  384F  A9 01                 LDA #1                          ; CHARACTER HAS BEEN BLOCKED
12493  3851  60                    RTS
12494  3852             @SPECIAL_UNDER ; RETURN THE 'SPECIAL - NOT 1 OR 2'
12495  3852  60                    RTS
12496  3853             
12497  3853             ;===============================================================================
12498  3853             ; ENEMY TEST CHARACTER FOR BLOCKING
12499  3853             ;===============================================================================
12500  3853             ; ORIGINALLY WE HAD A SIMPLE CHECK FOR BLOCKING CHARACTERS > 128. USING CHARPAD
12501  3853             ; WE CAN TEST FOR ATTRIBUTES WE ENCODE IN THE UPPER HALF BYTE OF THE COLOR INFO
12502  3853             ; NOTE : IT SEEMS YOU CAN'T READ THIS BACK DIRECTLY FROM COLOR RAM, BUT WE CAN
12503  3853             ;        LOOK IT UP EASILY ENOUGH GIVEN THE CHARACTER NUMBER.
12504  3853             ;
12505  3853             ;
12506  3853             ;
12507  3853             ; A = CHARACTER NUMBER WE'RE CHECKING AGAINST
12508  3853             ; RETURNS: A = 0 OR 1 (CLEAR - BLOCKED) AND STORES THE COLLISON ATTRIBUTE
12509  3853             ; SO WE CAN TEST AGAINST IT
12510  3853             ;
12511  3853             ; MODIFIES A
12512  3853             ; RESTORES X, Y
12513  3853             ;-------------------------------------------------------------------------------
12514  3853             ; COLLIDER CODES
12515  3853             ;-------------------------------------------------------------------------------
12516  3853             COLL_CLEAR = $00
12517  3853             COLL_FLOOR = $10
12518  3853             COLL_STAIR = $20
12519  3853             COLL_ROPE  = $30
12520  3853             
12521  3853             ;-------------------------------------------------------------------------------
12522  3853             
12523  3853             ENEMYTESTBLOCKING 
12524  3853                        
12525  3853  8D 83 38              STA ENEMY_COLLIDER_ATTR       ; SAVE THE INFO PASSED TO US, WE NEED TO USE A
12526  3856                        
12527  3856  8A                    TXA                     ; STORE X AND Y ON THE STACK
12528  3857  48                    PHA                     ; THE ROUTINES WE GO BACK TO NEED THESE INTACT
12529  3858  98                    TYA
12530  3859  48                    PHA
12531  385A             
12532  385A  AE 83 38              LDX ENEMY_COLLIDER_ATTR       ; LOAD THE CHARACTER NUMBER IN X
12533  385D  BD 20 78              LDA ATTRIBUTE_MEM,X     ; FETCH THE ATTRIBUTE
12534  3860  29 F0                 AND #%11110000          ; MASK THE COLOR INFO - LEAVING THE ATTRIBUTE
12535  3862  8D 83 38              STA ENEMY_COLLIDER_ATTR       ; STORE IT SO THE REST OF THE PROGRAM CAN USE IT
12536  3865  F0 0E                 BEQ @RETURNCLEAR        ; 0 IS ALWAYS CLEAR - SO RETURN
12537  3867  C9 30                 CMP #COLL_ROPE
12538  3869  F0 0A                 BEQ @RETURNCLEAR        ; ROPES ($30) DON'T BLOCK
12539  386B  C9 10                 CMP #COLL_FLOOR         ; COLL_FLOOR = 16: CHECK FOR SKY BACKGROUND
12540  386D  F0 06                 BEQ @RETURNCLEAR
12541  386F  C9 20                 CMP #COLL_STAIR
12542  3871  F0 02                 BEQ @RETURNCLEAR
12543  3873  D0 07                 BNE @BLOCKING           ; BLOCKING CHARACTER  (COMMENT OUT TO PREVENT BLOCKING)
12544  3875             
12545  3875             
12546  3875             @RETURNCLEAR 
12547  3875  68                    PLA                     ; RESTORE X AND Y OFF THE STACK
12548  3876  A8                    TAY
12549  3877  68                    PLA
12550  3878  AA                    TAX
12551  3879             
12552  3879  A9 00                 LDA #0                  ; RETURN 0 - A CLEAR CODE
12553  387B  60                    RTS
12554  387C             
12555  387C             @BLOCKING
12556  387C                        ; ATM ONLY BASIC COLLIDE INFO - IF NOT 0, WE'RE BLOCKING
12557  387C  68                    PLA                     ; RESTORE X AND Y FROM THE STACK
12558  387D  A8                    TAY
12559  387E  68                    PLA
12560  387F  AA                    TAX
12561  3880             
12562  3880  A9 01                 LDA #1                  ; SET TO BLOCKING AND RETURN
12563  3882             
12564  3882  60                    RTS
12565  3883             
12566  3883             ENEMY_COLLIDER_ATTR ; A PLACE TO STORE OUR ATTRIBUTE, AND READ IT LATER IF NEEDED
12567  3883  00                    BYTE 0
12568  3884             
12569  3884             
12570  3884             
12571  3884             ;===============================================================================
12572  3884             ;  JOYSTICK
12573  3884             ;===============================================================================
12574  3884             DISPLAYSPRITEINFO 
12575  3884             
12576  3884  20 88 38              JSR ADMINTEST
12577  3887  60                    RTS
12578  3888             
12579  3888             ;******************************************************************************
12580  3888             ; TURN OFF REGULAR DISPLAY FOR NOW
12581  3888             ; (IT IS COMMENTED OUT)
12582  3888             ;******************************************************************************
12583  3888             
12584  3888             
12585  3888             ;        LDA JOY_X
12586  3888             ;        BNE DISPLAYSPRITEINFONOW
12587  3888             ;        LDA JOY_Y
12588  3888             ;        BNE DISPLAYSPRITEINFONOW
12589  3888             ;        RTS
12590  3888             
12591  3888             
12592  3888             ; 4/5/25
12593  3888             ; IMPLEMENTED THIS ROUTINE TO TEST WRITE OUT HEX VALUES
12594  3888             ; FOR EXAMPLE: FIRST TESTING CONSISTED OF CHECKING IF
12595  3888             ; ATTRIBUTE2_MEM IS READING DATA INTO ITS MEMORY SINCE
12596  3888             ; THE SPRITE KEPT FALLING THROUGH THE MAP (BACKALLEYWAY)
12597  3888             
12598  3888             ; WE WILL SET UP A LOOP HERE THAT DISPLAYS THE VALUES
12599  3888             ; ON THE SCREEN IN A ROW AS THEY ARE SEEN IN MEMORY.
12600  3888             ; NOTE: C64 DEBUGGER MAY BE HELPFUL HERE LATER.
12601  3888             
12602  3888             
12603  3888             DISPLAYSPRITEINFONOW 
12604  3888             ADMINTEST
12605  3888             
12606  3888             ;MAP_CHAR_MEM
12607  3888             
12608  3888  AD 34 10              LDA MAPTWOLOADED
12609  388B  A2 13                 LDX #19
12610  388D  A0 03                 LDY #3
12611  388F  20 16 20              JSR DISPLAYBYTE
12612  3892             
12613  3892  AD 10 48              LDA $4800 + 16
12614  3895  A2 13                 LDX #19
12615  3897  A0 06                 LDY #6
12616  3899  20 16 20              JSR DISPLAYBYTE
12617  389C             
12618  389C  AD 11 48              LDA $4800 + 17
12619  389F  A2 13                 LDX #19
12620  38A1  A0 09                 LDY #9
12621  38A3  20 16 20              JSR DISPLAYBYTE
12622  38A6             
12623  38A6  AD 12 48              LDA $4800 + 18
12624  38A9  A2 13                 LDX #19
12625  38AB  A0 0C                 LDY #12
12626  38AD  20 16 20              JSR DISPLAYBYTE
12627  38B0             
12628  38B0  AD 13 48              LDA $4800 + 19
12629  38B3  A2 13                 LDX #19
12630  38B5  A0 0F                 LDY #15
12631  38B7  20 16 20              JSR DISPLAYBYTE
12632  38BA                        
12633  38BA  AD 14 48              LDA $4800 + 20
12634  38BD  A2 13                 LDX #19
12635  38BF  A0 12                 LDY #18
12636  38C1  20 16 20              JSR DISPLAYBYTE
12637  38C4             
12638  38C4  AD 15 48              LDA $4800 + 21
12639  38C7  A2 13                 LDX #19
12640  38C9  A0 15                 LDY #21
12641  38CB  20 16 20              JSR DISPLAYBYTE
12642  38CE             
12643  38CE  AD B7 0D              LDA HOTELCHARS
12644  38D1  A2 14                 LDX #20
12645  38D3  A0 03                 LDY #3
12646  38D5  20 16 20              JSR DISPLAYBYTE
12647  38D8             
12648  38D8             ;        LDA FILEHI
12649  38D8             ;        LDX #20
12650  38D8             ;        LDY #21
12651  38D8             ;        JSR DISPLAYBYTE
12652  38D8             
12653  38D8             ;        LDA MAP_CHAR_MEM + 17
12654  38D8             ;        LDX #20
12655  38D8             ;        LDY #9
12656  38D8             ;        JSR DISPLAYBYTE
12657  38D8             
12658  38D8             
12659  38D8             
12660  38D8             
12661  38D8  A9 00                 LDA #<SCORE_SCREEN
12662  38DA  85 0A                 STA WPARAM1
12663  38DC  A9 58                 LDA #>SCORE_SCREEN
12664  38DE  85 0B                 STA WPARAM1 + 1
12665  38E0             
12666  38E0  60                    RTS
12667  38E1             
12668  38E1  AD AA 80              LDA ATTRIBUTE2_MEM
12669  38E4  A2 13                 LDX #19
12670  38E6  A0 03                 LDY #3
12671  38E8  20 16 20              JSR DISPLAYBYTE
12672  38EB             
12673  38EB  AD AB 80              LDA ATTRIBUTE2_MEM + 1
12674  38EE  A2 13                 LDX #19
12675  38F0  A0 06                 LDY #6
12676  38F2  20 16 20              JSR DISPLAYBYTE
12677  38F5             
12678  38F5  AD AC 80              LDA ATTRIBUTE2_MEM + 2
12679  38F8  A2 13                 LDX #19
12680  38FA  A0 09                 LDY #9
12681  38FC  20 16 20              JSR DISPLAYBYTE
12682  38FF             
12683  38FF  AD AD 80              LDA ATTRIBUTE2_MEM + 3
12684  3902  A2 13                 LDX #19
12685  3904  A0 0C                 LDY #12
12686  3906  20 16 20              JSR DISPLAYBYTE
12687  3909             
12688  3909  AD AE 80              LDA ATTRIBUTE2_MEM + 4
12689  390C  A2 13                 LDX #19
12690  390E  A0 0F                 LDY #15
12691  3910  20 16 20              JSR DISPLAYBYTE
12692  3913             
12693  3913  AD AF 80              LDA ATTRIBUTE2_MEM + 5
12694  3916  A2 13                 LDX #19
12695  3918  A0 12                 LDY #18
12696  391A  20 16 20              JSR DISPLAYBYTE
12697  391D             
12698  391D  AD B0 80              LDA ATTRIBUTE2_MEM + 6
12699  3920  A2 13                 LDX #19
12700  3922  A0 15                 LDY #21
12701  3924  20 16 20              JSR DISPLAYBYTE
12702  3927             
12703  3927  AD B1 80              LDA ATTRIBUTE2_MEM + 7
12704  392A  A2 13                 LDX #19
12705  392C  A0 18                 LDY #24
12706  392E  20 16 20              JSR DISPLAYBYTE
12707  3931                        
12708  3931  AD B2 80              LDA ATTRIBUTE2_MEM + 8
12709  3934  A2 13                 LDX #19
12710  3936  A0 1B                 LDY #27
12711  3938  20 16 20              JSR DISPLAYBYTE
12712  393B             
12713  393B  AD B3 80              LDA ATTRIBUTE2_MEM + 9
12714  393E  A2 13                 LDX #19
12715  3940  A0 1E                 LDY #30
12716  3942  20 16 20              JSR DISPLAYBYTE
12717  3945             
12718  3945  AD B4 80              LDA ATTRIBUTE2_MEM + 10
12719  3948  A2 13                 LDX #19
12720  394A  A0 21                 LDY #33
12721  394C  20 16 20              JSR DISPLAYBYTE
12722  394F             
12723  394F  AD B5 80              LDA ATTRIBUTE2_MEM + 11
12724  3952  A2 13                 LDX #19
12725  3954  A0 24                 LDY #36
12726  3956  20 16 20              JSR DISPLAYBYTE
12727  3959             
12728  3959             
12729  3959             
12730  3959             
12731  3959  A9 00                 LDA #<SCORE_SCREEN
12732  395B  85 0A                 STA WPARAM1
12733  395D  A9 58                 LDA #>SCORE_SCREEN
12734  395F  85 0B                 STA WPARAM1 + 1
12735  3961             
12736  3961             
12737  3961  60                    RTS
12738  3962             
12739  3962             ; LINE 1
12740  3962  AD C2 0A              LDA COLLIDER_ATTR
12741  3965  A2 13                 LDX #19
12742  3967  A0 07                 LDY #7
12743  3969  20 16 20              JSR DISPLAYBYTE
12744  396C             
12745  396C  AD D9 35              LDA ACTIVETIMER
12746  396F  A2 02                 LDX #2
12747  3971  A2 13                 LDX #19
12748  3973  A0 10                 LDY #16
12749  3975  20 16 20              JSR DISPLAYBYTE
12750  3978             
12751  3978  A2 01                 LDX #1
12752  397A  BD 68 35              LDA SPRITE_POS_X,X
12753  397D  A2 13                 LDX #19
12754  397F  A0 19                 LDY #25
12755  3981  20 16 20              JSR DISPLAYBYTE
12756  3984             
12757  3984             
12758  3984             
12759  3984             ; LINE 2
12760  3984  AD 83 38              LDA ENEMY_COLLIDER_ATTR
12761  3987  A2 14                 LDX #20
12762  3989  A0 07                 LDY #7
12763  398B  20 16 20              JSR DISPLAYBYTE
12764  398E             
12765  398E  AD 52 18              LDA PLAYER_JUMP_POS
12766  3991  A2 14                 LDX #20
12767  3993  A0 10                 LDY #16
12768  3995  20 16 20              JSR DISPLAYBYTE
12769  3998             
12770  3998  A5 30                 LDA MAP_X_POS
12771  399A  A2 14                 LDX #20
12772  399C  A0 19                 LDY #25
12773  399E  20 16 20              JSR DISPLAYBYTE
12774  39A1             
12775  39A1  A2 01                 LDX #1
12776  39A3  A5 31                 LDA MAP_Y_POS
12777  39A5  A2 14                 LDX #20
12778  39A7  A0 21                 LDY #33
12779  39A9  20 16 20              JSR DISPLAYBYTE
12780  39AC             
12781  39AC             ; LINE 3
12782  39AC  A2 03                 LDX #3
12783  39AE  BD 68 35              LDA SPRITE_POS_X,X
12784  39B1  A2 16                 LDX #22
12785  39B3  A0 07                 LDY #7
12786  39B5  20 16 20              JSR DISPLAYBYTE
12787  39B8             
12788  39B8  AD 97 1F              LDA WAITTOFIRECD
12789  39BB  A2 16                 LDX #22
12790  39BD  A0 0F                 LDY #15
12791  39BF  20 16 20              JSR DISPLAYBYTE
12792  39C2             
12793  39C2  AD 96 1F              LDA FIRINGHOLDCD
12794  39C5  A2 16                 LDX #22
12795  39C7  A0 17                 LDY #23
12796  39C9  20 16 20              JSR DISPLAYBYTE
12797  39CC             
12798  39CC  A2 02                 LDX #2
12799  39CE  BD B1 35              LDA SPRITE_ANIM_TIMER,X
12800  39D1  A2 16                 LDX #22
12801  39D3  A0 20                 LDY #32
12802  39D5  20 16 20              JSR DISPLAYBYTE
12803  39D8             
12804  39D8             ; LINE 4
12805  39D8  AD 2D 10              LDA GAMESCORE
12806  39DB  A2 17                 LDX #23
12807  39DD  A0 06                 LDY #6
12808  39DF  20 5A 0E              JSR SCOREBOARD
12809  39E2             
12810  39E2  AD 93 1F              LDA ENEMY_BULLETS
12811  39E5  A2 17                 LDX #23
12812  39E7  A0 17                 LDY #23
12813  39E9  20 16 20              JSR DISPLAYBYTE
12814  39EC             
12815  39EC  AD 10 D0              LDA $D010
12816  39EF  A2 17                 LDX #23
12817  39F1  A0 20                 LDY #32
12818  39F3  20 16 20              JSR DISPLAYBYTE
12819  39F6  60                    RTS
12820  39F7             
12821  39F7             SPRITE_CONSOLE_TEXT 
12822  39F7  20 03 0F              BYTE ' COLL:$   TIMR:$   SPCX:$   SPCY:$      /'
12823  3A20  20 05 0E              BYTE ' ENCO:$   JUMP:$   MAPX:$   MAPY:$      /'
12824  3A49  20 20 20              BYTE '                                        /'
12825  3A72  20 05 0E              BYTE ' ENYX:$   WFIR:$: FRHD:$   ACTV:$       /'
12826  3A9B  20 13 03              BYTE ' SCORE:$      BULLETS:$   MSBX:$            ',0
12827  3AC8             
12828  3AC8             GAME_PANEL_DISPLAY 
12829  3AC8  20 20 20              BYTE '            C64BRAIN.COM                /'
12830  3AF1  20 20 20              BYTE '                                        /'
12831  3B1A  20 20 20              BYTE '             GAME DEMO                  /'
12832  3B43  20 20 20              BYTE '                                        /'
12833  3B6C  20 20 20              BYTE '      WITH MULTIPLE SCROLLING MAPS       ',0
12834  3B96             
12835  3B96             
12836  3B96             ADMIN_TEST_DISPLAY 
12837  3B96  20 20 20              BYTE '                                        /'
12838  3BBF  20 20 20              BYTE '                                        /'
12839  3BE8  20 20 20              BYTE '                                        /'
12840  3C11  20 20 20              BYTE '                                        /'
12841  3C3A  20 20 20              BYTE '                                            ',0
12842  3C67             
12843  3C67             JOY_X      ; CURRENT POSITON OF JOYSTICK(2)
12844  3C67  00                    BYTE $00                ; -1 0 OR +1
12845  3C68             JOY_Y
12846  3C68  00                    BYTE $00                ; -1 0 OR +1
12847  3C69             NE_DIR
12848  3C69  00                    BYTE $00
12849  3C6A             JOY_NW
12850  3C6A  00                    BYTE $00
12851  3C6B             
12852  3C6B             BUTTON_PRESSED ; HOLDS 1 WHEN THE BUTTON IS HELD DOWN
12853  3C6B  00                    BYTE $00
12854  3C6C                        ; HOLDS 1 WHEN A SINGLE PRESS IS MADE (BUTTON RELEASED)
12855  3C6C             BUTTON_ACTION 
12856  3C6C  00                    BYTE $00
12857  3C6D             
12858  3C6D             ;-------------------------------------------------------------------------------
12859  3C6D             ; BIT TABLE
12860  3C6D             ; TAKE A VALUE FROM 0 TO 7 AND RETURN IT'S BIT VALUE
12861  3C6D             BIT_TABLE
12862  3C6D  01 02 04              BYTE 1,2,4,8,16,32,64,128
12863  3C75             
12864  3C75             
12865  3C75             ;*=$4000
12866  3C75             ;===============================================================================
12867  3C75             ; VIC MEMORY BLOCK
12868  3C75             ; CHARSET AND SPRITE DATA
12869  3C75             ;===============================================================================
12870  3C75             ; CHARSET AND SPRITE DATA DIRECTLY LOADED HERE.
12871  3C75             
12872  3C75             VIC_DATA_INCLUDES 
12873  3C75             
12874  3C75             ; VIC VIDEO MEMORY LAYOUT - BANK 1 ($4000 - $7FFF)
12875  3C75             ; SCREEN_1         = $4000 - $43FF         (SCREEN 0)      ; DOUBLE BUFFERED
12876  3C75             ; SCREEN_2         = $4400 - $47FF         (SCREEN 1)      ; GAME SCREEN
12877  3C75             ; MAP_CHARSET1     = $4800 - $5FFF         (CHARSET 1)     ; GAME CHARS (TILES)
12878  3C75             ; MAP_CHARSET2     = $5000 - $5FFF         (CHARSET 1)     ; GAME CHARS (TILES)
12879  3C75             ; SCORE_CHARS      = $5800 - $57FF         (CHARSET 2)     ; SCOREBOARD CHARS
12880  3C75             ; SCORE_SCREEN     = $5800 - $5BFF         (SCREEN 6)      ; SCOREBOARD SCREEN
12881  3C75             ; SPRITES          = $5COO - $7FFF         (144 SPRITE IMAGES)
12882  3C75             
12883  3C75             ;*******************************************************************************
12884  3C75             ;                             HOTEL MAP
12885  3C75             ;*******************************************************************************
12886  3C75             
12887  3C75             ;*=$4800
12888  3C75             MAP_CHAR_MEM ; CHARACTER SET FOR MAP SCREEN
12889  3C75             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FBK - CHARS.BIN"
12890  3C75             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FTEXTMULTICOLOR - CHARS.BIN"
12891  3C75             
12892  3C75             *=$5000
12893  5000             
12894  5000             *=$5800
12895  5800             SCORE_CHAR_MEM 
12896  5800             @          
12897  5800  3C 66 DE   	BYTE	60,102,222,212,218,102,60,0 
12898  5808  38 6C C6   	BYTE	56,108,198,198,254,198,198,0 
12899  5810  FC C6 C6   	BYTE	252,198,198,252,198,198,252,0 
12900  5818  3C 66 C0   	BYTE	60,102,192,192,192,102,60,0 
12901  5820  F8 CC C6   	BYTE	248,204,198,198,198,204,248,0 
12902  5828  7E 60 60   	BYTE	126,96,96,124,96,96,126,0 
12903  5830  7E 60 60   	BYTE	126,96,96,124,96,96,96,0 
12904  5838  3E 60 C0   	BYTE	62,96,192,206,198,102,62,0 
12905  5840  C6 C6 C6   	BYTE	198,198,198,254,198,198,198,0 
12906  5848  7E 18 18   	BYTE	126,24,24,24,24,24,126,0 
12907  5850  06 06 06   	BYTE	6,6,6,6,6,198,124,0 
12908  5858  C6 CC D8   	BYTE	198,204,216,240,248,220,206,0 
12909  5860  60 60 60   	BYTE	96,96,96,96,96,96,126,0 
12910  5868  C6 EE FE   	BYTE	198,238,254,254,214,198,198,0 
12911  5870  C6 E6 F6   	BYTE	198,230,246,254,222,206,198,0 
12912  5878  7C C6 C6   	BYTE	124,198,198,198,198,198,124,0 
12913  5880  FC C6 C6   	BYTE	252,198,198,198,252,192,192,0 
12914  5888  7C C6 C6   	BYTE	124,198,198,198,222,204,122,0 
12915  5890  FC C6 C6   	BYTE	252,198,198,206,248,220,206,0 
12916  5898  78 CC C0   	BYTE	120,204,192,124,6,198,124,0 
12917  58A0  7E 18 18   	BYTE	126,24,24,24,24,24,24,0 
12918  58A8  C6 C6 C6   	BYTE	198,198,198,198,198,198,124,0 
12919  58B0  C6 C6 C6   	BYTE	198,198,198,238,124,56,16,0 
12920  58B8  C6 C6 D6   	BYTE	198,198,214,254,254,238,198,0 
12921  58C0  C6 EE 7C   	BYTE	198,238,124,56,124,238,198,0 
12922  58C8  66 66 66   	BYTE	102,102,102,60,24,24,24,0 
12923  58D0  FE 0E 1C   	BYTE	254,14,28,56,112,224,254,0 
12924  58D8  3C 30 30   	BYTE	60,48,48,48,48,48,60,0 
12925  58E0  0C 12 30   	BYTE	12,18,48,124,48,98,252,0 
12926  58E8  3C 0C 0C   	BYTE	60,12,12,12,12,12,60,0 
12927  58F0  00 18 3C   	BYTE	0,24,60,126,24,24,24,24 
12928  58F8  00 10 30   	BYTE	0,16,48,127,127,48,16,0 
12929  5900  00 00 00   	BYTE	0,0,0,0,0,0,0,0 
12930  5908  18 18 18   	BYTE	24,24,24,24,0,0,24,0 
12931  5910  66 66 66   	BYTE	102,102,102,0,0,0,0,0 
12932  5918  66 66 FF   	BYTE	102,102,255,102,255,102,102,0 
12933  5920  18 3E 60   	BYTE	24,62,96,60,6,124,24,0 
12934  5928  62 66 0C   	BYTE	98,102,12,24,48,102,70,0 
12935  5930  3C 66 3C   	BYTE	60,102,60,56,103,102,63,0 
12936  5938  06 0C 18   	BYTE	6,12,24,0,0,0,0,0 
12937  5940  0C 18 30   	BYTE	12,24,48,48,48,24,12,0 
12938  5948  30 18 0C   	BYTE	48,24,12,12,12,24,48,0 
12939  5950  01 03 07   	BYTE	1,3,7,14,156,248,112,32 
12940  5958  00 18 18   	BYTE	0,24,24,126,24,24,0,0 
12941  5960  00 00 00   	BYTE	0,0,0,0,0,24,24,48 
12942  5968  00 00 00   	BYTE	0,0,0,126,0,0,0,0 
12943  5970  00 00 00   	BYTE	0,0,0,0,0,24,24,0 
12944  5978  00 03 06   	BYTE	0,3,6,12,24,48,96,0 
12945  5980  38 4C C6   	BYTE	56,76,198,198,198,100,56,0 
12946  5988  18 38 18   	BYTE	24,56,24,24,24,24,126,0 
12947  5990  7C C6 0E   	BYTE	124,198,14,60,120,224,254,0 
12948  5998  7E 0C 18   	BYTE	126,12,24,60,6,198,124,0 
12949  59A0  1C 3C 6C   	BYTE	28,60,108,204,254,12,12,0 
12950  59A8  FC C0 FC   	BYTE	252,192,252,6,6,198,124,0 
12951  59B0  3C 60 C0   	BYTE	60,96,192,252,198,198,124,0 
12952  59B8  FE C6 0C   	BYTE	254,198,12,24,48,48,48,0 
12953  59C0  78 C4 E4   	BYTE	120,196,228,120,222,198,124,0 
12954  59C8  7C C6 C6   	BYTE	124,198,198,126,6,12,120,0 
12955  59D0  00 00 18   	BYTE	0,0,24,0,0,24,0,0 
12956  59D8  00 00 18   	BYTE	0,0,24,0,0,24,24,48 
12957  59E0  0E 18 30   	BYTE	14,24,48,96,48,24,14,0 
12958  59E8  00 00 7E   	BYTE	0,0,126,0,126,0,0,0 
12959  59F0  70 18 0C   	BYTE	112,24,12,6,12,24,112,0 
12960  59F8  3C 66 06   	BYTE	60,102,6,12,24,0,24,0 
12961  5A00  00 7F 7F   	BYTE	0,127,127,127,0,247,247,247 
12962  5A08  55 55 55   	BYTE	85,85,85,85,85,85,85,85 
12963  5A10  18 18 18   	BYTE	24,24,24,24,24,24,24,24 
12964  5A18  00 00 00   	BYTE	0,0,0,255,255,0,0,0 
12965  5A20  00 00 FF   	BYTE	0,0,255,255,0,0,0,0 
12966  5A28  00 FF FF   	BYTE	0,255,255,0,0,0,0,0 
12967  5A30  00 00 00   	BYTE	0,0,0,0,255,255,0,0 
12968  5A38  30 30 30   	BYTE	48,48,48,48,48,48,48,48 
12969  5A40  0C 0C 0C   	BYTE	12,12,12,12,12,12,12,12 
12970  5A48  00 00 00   	BYTE	0,0,0,224,240,56,24,24 
12971  5A50  18 18 1C   	BYTE	24,24,28,15,7,0,0,0 
12972  5A58  18 18 38   	BYTE	24,24,56,240,224,0,0,0 
12973  5A60  C0 C0 C0   	BYTE	192,192,192,192,192,192,255,255 
12974  5A68  C0 E0 70   	BYTE	192,224,112,56,28,14,7,3 
12975  5A70  03 07 0E   	BYTE	3,7,14,28,56,112,224,192 
12976  5A78  FF FF C0   	BYTE	255,255,192,192,192,192,192,192 
12977  5A80  FF FF 03   	BYTE	255,255,3,3,3,3,3,3 
12978  5A88  00 3C 7E   	BYTE	0,60,126,126,126,126,60,0 
12979  5A90  00 00 00   	BYTE	0,0,0,0,0,255,255,0 
12980  5A98  36 7F 7F   	BYTE	54,127,127,127,62,28,8,0 
12981  5AA0  60 60 60   	BYTE	96,96,96,96,96,96,96,96 
12982  5AA8  00 00 00   	BYTE	0,0,0,7,15,28,24,24 
12983  5AB0  C3 E7 7E   	BYTE	195,231,126,60,60,126,231,195 
12984  5AB8  00 3C 7E   	BYTE	0,60,126,102,102,126,60,0 
12985  5AC0  18 18 66   	BYTE	24,24,102,102,24,24,60,0 
12986  5AC8  06 06 06   	BYTE	6,6,6,6,6,6,6,6 
12987  5AD0  08 1C 3E   	BYTE	8,28,62,127,62,28,8,0 
12988  5AD8  18 18 18   	BYTE	24,24,24,255,255,24,24,24 
12989  5AE0  C0 C0 30   	BYTE	192,192,48,48,192,192,48,48 
12990  5AE8  18 18 18   	BYTE	24,24,24,24,24,24,24,24 
12991  5AF0  00 00 03   	BYTE	0,0,3,62,118,54,54,0 
12992  5AF8  FF 7F 3F   	BYTE	255,127,63,31,15,7,3,1 
12993  5B00  00 00 00   	BYTE	0,0,0,0,0,0,0,0 
12994  5B08  F0 F0 F0   	BYTE	240,240,240,240,240,240,240,240 
12995  5B10  00 00 00   	BYTE	0,0,0,0,255,255,255,255 
12996  5B18  FF 00 00   	BYTE	255,0,0,0,0,0,0,0 
12997  5B20  00 00 00   	BYTE	0,0,0,0,0,0,0,255 
12998  5B28  C0 C0 C0   	BYTE	192,192,192,192,192,192,192,192 
12999  5B30  CC CC 33   	BYTE	204,204,51,51,204,204,51,51 
13000  5B38  03 03 03   	BYTE	3,3,3,3,3,3,3,3 
13001  5B40  00 00 00   	BYTE	0,0,0,0,204,204,51,51 
13002  5B48  FF FE FC   	BYTE	255,254,252,248,240,224,192,128 
13003  5B50  03 03 03   	BYTE	3,3,3,3,3,3,3,3 
13004  5B58  18 18 18   	BYTE	24,24,24,31,31,24,24,24 
13005  5B60  00 00 00   	BYTE	0,0,0,0,15,15,15,15 
13006  5B68  18 18 18   	BYTE	24,24,24,31,31,0,0,0 
13007  5B70  00 00 00   	BYTE	0,0,0,248,248,24,24,24 
13008  5B78  00 00 00   	BYTE	0,0,0,0,0,0,255,255 
13009  5B80  00 00 00   	BYTE	0,0,0,31,31,24,24,24 
13010  5B88  18 18 18   	BYTE	24,24,24,255,255,0,0,0 
13011  5B90  00 00 00   	BYTE	0,0,0,255,255,24,24,24 
13012  5B98  18 18 18   	BYTE	24,24,24,248,248,24,24,24 
13013  5BA0  C0 C0 C0   	BYTE	192,192,192,192,192,192,192,192 
13014  5BA8  E0 E0 E0   	BYTE	224,224,224,224,224,224,224,224 
13015  5BB0  07 07 07   	BYTE	7,7,7,7,7,7,7,7 
13016  5BB8  FF FF 00   	BYTE	255,255,0,0,0,0,0,0 
13017  5BC0  FF FF FF   	BYTE	255,255,255,0,0,0,0,0 
13018  5BC8  00 00 00   	BYTE	0,0,0,0,0,255,255,255 
13019  5BD0  03 03 03   	BYTE	3,3,3,3,3,3,255,255 
13020  5BD8  00 00 00   	BYTE	0,0,0,0,240,240,240,240 
13021  5BE0  0F 0F 0F   	BYTE	15,15,15,15,0,0,0,0 
13022  5BE8  18 18 18   	BYTE	24,24,24,248,248,0,0,0 
13023  5BF0  F0 F0 F0   	BYTE	240,240,240,240,0,0,0,0 
13024  5BF8  F0 F0 F0   	BYTE	240,240,240,240,15,15,15,15 
13025  5C00  EE 88 E8   	BYTE	238,136,232,40,238,0,0,0 
13026  5C08  E7 C3 99   	BYTE	231,195,153,129,153,153,153,255 
13027  5C10  83 99 99   	BYTE	131,153,153,131,153,153,131,255 
13028  5C18  C3 99 9F   	BYTE	195,153,159,159,159,153,195,255 
13029  5C20  87 93 99   	BYTE	135,147,153,153,153,147,135,255 
13030  5C28  81 9F 9F   	BYTE	129,159,159,135,159,159,129,255 
13031  5C30  81 9F 9F   	BYTE	129,159,159,135,159,159,159,255 
13032  5C38  C3 99 9F   	BYTE	195,153,159,145,153,153,195,255 
13033  5C40  99 99 99   	BYTE	153,153,153,129,153,153,153,255 
13034  5C48  C3 E7 E7   	BYTE	195,231,231,231,231,231,195,255 
13035  5C50  E1 F3 F3   	BYTE	225,243,243,243,243,147,199,255 
13036  5C58  99 93 87   	BYTE	153,147,135,143,135,147,153,255 
13037  5C60  9F 9F 9F   	BYTE	159,159,159,159,159,159,129,255 
13038  5C68  9C 88 80   	BYTE	156,136,128,148,156,156,156,255 
13039  5C70  99 89 81   	BYTE	153,137,129,129,145,153,153,255 
13040  5C78  C3 99 99   	BYTE	195,153,153,153,153,153,195,255 
13041  5C80  00 3C 3C   	BYTE	0,60,60,60,0,60,60,60 
13042  5C88  C3 99 99   	BYTE	195,153,153,153,153,195,241,255 
13043  5C90  83 99 99   	BYTE	131,153,153,131,135,147,153,255 
13044  5C98  C3 99 9F   	BYTE	195,153,159,195,249,153,195,255 
13045  5CA0  81 E7 E7   	BYTE	129,231,231,231,231,231,231,255 
13046  5CA8  99 99 99   	BYTE	153,153,153,153,153,153,195,255 
13047  5CB0  99 99 99   	BYTE	153,153,153,153,153,195,231,255 
13048  5CB8  9C 9C 9C   	BYTE	156,156,156,148,128,136,156,255 
13049  5CC0  99 99 C3   	BYTE	153,153,195,231,195,153,153,255 
13050  5CC8  FF FF FF   	BYTE	255,255,255,255,170,85,170,85 
13051  5CD0  FF FF FF   	BYTE	255,255,255,255,170,85,170,85 
13052  5CD8  C3 CF CF   	BYTE	195,207,207,207,207,207,195,255 
13053  5CE0  F3 ED CF   	BYTE	243,237,207,131,207,157,3,255 
13054  5CE8  C3 F3 F3   	BYTE	195,243,243,243,243,243,195,255 
13055  5CF0  FF E7 C3   	BYTE	255,231,195,129,231,231,231,231 
13056  5CF8  FF EF CF   	BYTE	255,239,207,128,128,207,239,255 
13057  5D00  FF FF FF   	BYTE	255,255,255,255,255,255,255,255 
13058  5D08  E7 E7 E7   	BYTE	231,231,231,231,255,255,231,255 
13059  5D10  99 99 99   	BYTE	153,153,153,255,255,255,255,255 
13060  5D18  99 99 00   	BYTE	153,153,0,153,0,153,153,255 
13061  5D20  E7 C1 9F   	BYTE	231,193,159,195,249,131,231,255 
13062  5D28  9D 99 F3   	BYTE	157,153,243,231,207,153,185,255 
13063  5D30  C3 99 C3   	BYTE	195,153,195,199,152,153,192,255 
13064  5D38  F9 F3 E7   	BYTE	249,243,231,255,255,255,255,255 
13065  5D40  F3 E7 CF   	BYTE	243,231,207,207,207,231,243,255 
13066  5D48  CF E7 F3   	BYTE	207,231,243,243,243,231,207,255 
13067  5D50  FF 99 C3   	BYTE	255,153,195,0,195,153,255,255 
13068  5D58  FF E7 E7   	BYTE	255,231,231,129,231,231,255,255 
13069  5D60  FF FF FF   	BYTE	255,255,255,255,255,231,231,207 
13070  5D68  FF FF FF   	BYTE	255,255,255,129,255,255,255,255 
13071  5D70  FF FF FF   	BYTE	255,255,255,255,255,231,231,255 
13072  5D78  FF FC F9   	BYTE	255,252,249,243,231,207,159,255 
13073  5D80  C3 99 91   	BYTE	195,153,145,137,153,153,195,255 
13074  5D88  E7 E7 C7   	BYTE	231,231,199,231,231,231,129,255 
13075  5D90  C3 99 F9   	BYTE	195,153,249,243,207,159,129,255 
13076  5D98  C3 99 F9   	BYTE	195,153,249,227,249,153,195,255 
13077  5DA0  F9 F1 E1   	BYTE	249,241,225,153,128,249,249,255 
13078  5DA8  81 9F 83   	BYTE	129,159,131,249,249,153,195,255 
13079  5DB0  C3 99 9F   	BYTE	195,153,159,131,153,153,195,255 
13080  5DB8  81 99 F3   	BYTE	129,153,243,231,231,231,231,255 
13081  5DC0  C3 99 99   	BYTE	195,153,153,195,153,153,195,255 
13082  5DC8  C3 99 99   	BYTE	195,153,153,193,249,153,195,255 
13083  5DD0  FF FF E7   	BYTE	255,255,231,255,255,231,255,255 
13084  5DD8  FF FF E7   	BYTE	255,255,231,255,255,231,231,207 
13085  5DE0  F1 E7 CF   	BYTE	241,231,207,159,207,231,241,255 
13086  5DE8  FF FF 81   	BYTE	255,255,129,255,129,255,255,255 
13087  5DF0  8F E7 F3   	BYTE	143,231,243,249,243,231,143,255 
13088  5DF8  C3 99 F9   	BYTE	195,153,249,243,231,255,231,255 
13089  5E00  C3 0F 3C   	BYTE	195,15,60,240,195,15,60,240 
13090  5E08  F7 E3 C1   	BYTE	247,227,193,128,128,227,193,255 
13091  5E10  E7 E7 E7   	BYTE	231,231,231,231,231,231,231,231 
13092  5E18  FF FF FF   	BYTE	255,255,255,0,0,255,255,255 
13093  5E20  FF FF 00   	BYTE	255,255,0,0,255,255,255,255 
13094  5E28  FF 00 00   	BYTE	255,0,0,255,255,255,255,255 
13095  5E30  FF FF FF   	BYTE	255,255,255,255,0,0,255,255 
13096  5E38  CF CF CF   	BYTE	207,207,207,207,207,207,207,207 
13097  5E40  F3 F3 F3   	BYTE	243,243,243,243,243,243,243,243 
13098  5E48  FF FF FF   	BYTE	255,255,255,31,15,199,231,231 
13099  5E50  E7 E7 E3   	BYTE	231,231,227,240,248,255,255,255 
13100  5E58  E7 E7 C7   	BYTE	231,231,199,15,31,255,255,255 
13101  5E60  3F 3F 3F   	BYTE	63,63,63,63,63,63,0,0 
13102  5E68  3F 1F 8F   	BYTE	63,31,143,199,227,241,248,252 
13103  5E70  FC F8 F1   	BYTE	252,248,241,227,199,143,31,63 
13104  5E78  00 00 3F   	BYTE	0,0,63,63,63,63,63,63 
13105  5E80  00 00 FC   	BYTE	0,0,252,252,252,252,252,252 
13106  5E88  FF C3 81   	BYTE	255,195,129,129,129,129,195,255 
13107  5E90  FF FF FF   	BYTE	255,255,255,255,255,0,0,255 
13108  5E98  C9 80 80   	BYTE	201,128,128,128,193,227,247,255 
13109  5EA0  9F 9F 9F   	BYTE	159,159,159,159,159,159,159,159 
13110  5EA8  FF FF FF   	BYTE	255,255,255,248,240,227,231,231 
13111  5EB0  3C 18 81   	BYTE	60,24,129,195,195,129,24,60 
13112  5EB8  FF C3 81   	BYTE	255,195,129,153,153,129,195,255 
13113  5EC0  E7 E7 99   	BYTE	231,231,153,153,231,231,195,255 
13114  5EC8  F9 F9 F9   	BYTE	249,249,249,249,249,249,249,249 
13115  5ED0  F7 E3 C1   	BYTE	247,227,193,128,193,227,247,255 
13116  5ED8  E7 E7 E7   	BYTE	231,231,231,0,0,231,231,231 
13117  5EE0  3F 3F CF   	BYTE	63,63,207,207,63,63,207,207 
13118  5EE8  E7 E7 E7   	BYTE	231,231,231,231,231,231,231,231 
13119  5EF0  FF FF FC   	BYTE	255,255,252,193,137,201,201,255 
13120  5EF8  00 80 C0   	BYTE	0,128,192,224,240,248,252,254 
13121  5F00  FF FF FF   	BYTE	255,255,255,255,255,255,255,255 
13122  5F08  0F 0F 0F   	BYTE	15,15,15,15,15,15,15,15 
13123  5F10  FF FF FF   	BYTE	255,255,255,255,0,0,0,0 
13124  5F18  00 FF FF   	BYTE	0,255,255,255,255,255,255,255 
13125  5F20  FF FF FF   	BYTE	255,255,255,255,255,255,255,0 
13126  5F28  3F 3F 3F   	BYTE	63,63,63,63,63,63,63,63 
13127  5F30  33 33 CC   	BYTE	51,51,204,204,51,51,204,204 
13128  5F38  FC FC FC   	BYTE	252,252,252,252,252,252,252,252 
13129  5F40  FF FF FF   	BYTE	255,255,255,255,51,51,204,204 
13130  5F48  00 01 03   	BYTE	0,1,3,7,15,31,63,127 
13131  5F50  FC FC FC   	BYTE	252,252,252,252,252,252,252,252 
13132  5F58  E7 E7 E7   	BYTE	231,231,231,224,224,231,231,231 
13133  5F60  FF FF FF   	BYTE	255,255,255,255,240,240,240,240 
13134  5F68  E7 E7 E7   	BYTE	231,231,231,224,224,255,255,255 
13135  5F70  FF FF FF   	BYTE	255,255,255,7,7,231,231,231 
13136  5F78  FF FF FF   	BYTE	255,255,255,255,255,255,0,0 
13137  5F80  F7 F7 F7   	BYTE	247,247,247,227,227,227,193,193 
13138  5F88  E7 E7 E7   	BYTE	231,231,231,0,0,255,255,255 
13139  5F90  FF FF FF   	BYTE	255,255,255,0,0,231,231,231 
13140  5F98  E7 E7 E7   	BYTE	231,231,231,7,7,231,231,231 
13141  5FA0  3F 3F 3F   	BYTE	63,63,63,63,63,63,63,63 
13142  5FA8  1F 1F 1F   	BYTE	31,31,31,31,31,31,31,31 
13143  5FB0  F8 F8 F8   	BYTE	248,248,248,248,248,248,248,248 
13144  5FB8  00 00 FF   	BYTE	0,0,255,255,255,255,255,255 
13145  5FC0  00 00 00   	BYTE	0,0,0,255,255,255,255,255 
13146  5FC8  FF FF FF   	BYTE	255,255,255,255,255,0,0,0 
13147  5FD0  FC FC FC   	BYTE	252,252,252,252,252,252,0,0 
13148  5FD8  FF FF FF   	BYTE	255,255,255,255,15,15,15,15 
13149  5FE0  F0 F0 F0   	BYTE	240,240,240,240,255,255,255,255 
13150  5FE8  E7 E7 E7   	BYTE	231,231,231,7,7,255,255,255 
13151  5FF0  0F 0F 0F   	BYTE	15,15,15,15,255,255,255,255 
13152  5FF8  0F 0F 0F   	BYTE	15,15,15,15,240,240,240,240 
13153  6000             @          
13154  6000             INCBIN     "SCORECHARS.CST",0,255           ; CHARACTER SET FOR SCOREBOARD
13155  6000             
13156  6000             *=$5C00
13157  5C00             
13158  5C00             @          
13159  5C00  00 00 30              BYTE $00,$00,$30,$00,$00,$00,$00,$54
13160  5C08  00 00 54              BYTE $00,$00,$54,$00,$00,$54,$00,$00
13161  5C10  FC 00 00              BYTE $FC,$00,$00,$74,$00,$05,$FD,$00
13162  5C18  15 DD 40              BYTE $15,$DD,$40,$5E,$76,$D0,$5E,$5E
13163  5C20  D0 7E 7E              BYTE $D0,$7E,$7E,$F4,$FE,$7E,$F4,$FE
13164  5C28  7A F4 D6              BYTE $7A,$F4,$D6,$9A,$FC,$F6,$9A,$7C
13165  5C30  75 9A 7D              BYTE $75,$9A,$7D,$7F,$96,$5D,$5F,$96
13166  5C38  5D 06 95              BYTE $5D,$06,$95,$FC,$0A,$95,$F4,$00
13167  5C40  A5 77 5F              BYTE $A5,$77,$5F,$67,$DB,$5F,$67,$FF
13168  5C48  82 00 55              BYTE $82,$00,$55,$04,$05,$A7,$11,$1E
13169  5C50  A9 C4 1E              BYTE $A9,$C4,$1E,$A9,$D4,$1E,$A9,$10
13170  5C58  1E 9E 40              BYTE $1E,$9E,$40,$1F,$9E,$90,$07,$9E
13171  5C60  90 07 9E              BYTE $90,$07,$9E,$40,$07,$9E,$40,$07
13172  5C68  9E 40 07              BYTE $9E,$40,$07,$9E,$40,$07,$9E,$40
13173  5C70  01 45 00              BYTE $01,$45,$00,$07,$9E,$40,$07,$9E
13174  5C78  40 1E 57              BYTE $40,$1E,$57,$90,$19,$01,$90,$00
13175  5C80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13176  5C88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13177  5C90  54 00 00              BYTE $54,$00,$00,$54,$00,$00,$54,$00
13178  5C98  00 FC 00              BYTE $00,$FC,$00,$00,$74,$00,$05,$FD
13179  5CA0  00 15 DD              BYTE $00,$15,$DD,$40,$5E,$76,$D0,$5E
13180  5CA8  5E D0 7E              BYTE $5E,$D0,$7E,$7E,$F4,$FE,$7E,$F4
13181  5CB0  FE 7A F4              BYTE $FE,$7A,$F4,$D6,$9A,$F4,$F6,$9A
13182  5CB8  7D 75 9A              BYTE $7D,$75,$9A,$7D,$7F,$66,$5D,$00
13183  5CC0  66 5D 40              BYTE $66,$5D,$40,$A5,$FE,$40,$A5,$F5
13184  5CC8  80 01 55              BYTE $80,$01,$55,$40,$06,$AA,$00,$1E
13185  5CD0  AA 90 1E              BYTE $AA,$90,$1E,$AA,$90,$1E,$AA,$80
13186  5CD8  1E 9E 40              BYTE $1E,$9E,$40,$1F,$9E,$40,$07,$9E
13187  5CE0  40 07 9E              BYTE $40,$07,$9E,$00,$07,$95,$00,$07
13188  5CE8  9B 00 07              BYTE $9B,$00,$07,$9A,$40,$07,$86,$40
13189  5CF0  01 41 00              BYTE $01,$41,$00,$07,$90,$00,$1E,$40
13190  5CF8  00 19 00              BYTE $00,$19,$00,$00,$04,$00,$00,$00
13191  5D00             
13192  5D00             @          
13193  5D00             INCBIN     "YOURSPRITE.SPT",1,4,TRUE        ; IDLE (28,33)
13194  5D00             @          
13195  5D00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13196  5D08  00 00 00              BYTE $00,$00,$00,$00,$00,$54,$00,$00
13197  5D10  54 00 00              BYTE $54,$00,$00,$54,$00,$00,$54,$00
13198  5D18  00 FC 00              BYTE $00,$FC,$00,$00,$74,$00,$01,$FD
13199  5D20  40 05 DD              BYTE $40,$05,$DD,$D0,$1E,$76,$D0,$1E
13200  5D28  5E F4 1E              BYTE $5E,$F4,$1E,$7E,$F4,$7E,$7E,$FD
13201  5D30  7E 7A 7D              BYTE $7E,$7A,$7D,$7E,$9A,$5D,$76,$9A
13202  5D38  7D F6 99              BYTE $7D,$F6,$99,$74,$F6,$A7,$C4,$00
13203  5D40  A7 DD 70              BYTE $A7,$DD,$70,$A4,$E5,$70,$A6,$DE
13204  5D48  80 01 5D              BYTE $80,$01,$5D,$10,$07,$A8,$40,$07
13205  5D50  AA 00 07              BYTE $AA,$00,$07,$AA,$90,$1E,$AA,$90
13206  5D58  1E 9E 90              BYTE $1E,$9E,$90,$1E,$5E,$90,$1E,$9E
13207  5D60  50 17 9E              BYTE $50,$17,$9E,$50,$05,$5E,$50,$07
13208  5D68  9E 50 16              BYTE $9E,$50,$16,$9E,$50,$1E,$5E,$40
13209  5D70  09 15 00              BYTE $09,$15,$00,$00,$1E,$40,$00,$17
13210  5D78  90 00 07              BYTE $90,$00,$07,$90,$00,$01,$40,$00
13211  5D80             
13212  5D80             @          
13213  5D80             INCBIN     "YOURSPRITE.SPT",5,6,TRUE
13214  5D80             @          
13215  5D80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13216  5D88  00 01 55              BYTE $00,$01,$55,$00,$01,$55,$00,$01
13217  5D90  55 00 01              BYTE $55,$00,$01,$55,$00,$00,$54,$00
13218  5D98  02 9A 00              BYTE $02,$9A,$00,$01,$75,$00,$01,$FD
13219  5DA0  00 06 A6              BYTE $00,$06,$A6,$40,$1F,$A6,$D0,$1E
13220  5DA8  A7 D0 7F              BYTE $A7,$D0,$7F,$A7,$F4,$7F,$A7,$F4
13221  5DB0  7E 9A F4              BYTE $7E,$9A,$F4,$FF,$9B,$F4,$F6,$9A
13222  5DB8  3D F6 9A              BYTE $3D,$F6,$9A,$7D,$C6,$6A,$5D,$00
13223  5DC0  6A 5D F6              BYTE $6A,$5D,$F6,$6A,$7D,$D1,$69,$5D
13224  5DC8  82 05 55              BYTE $82,$05,$55,$00,$06,$AA,$40,$1E
13225  5DD0  AA 90 1E              BYTE $AA,$90,$1E,$AA,$90,$1E,$9E,$90
13226  5DD8  1E 56 90              BYTE $1E,$56,$90,$1E,$9E,$90,$07,$9E
13227  5DE0  40 07 9E              BYTE $40,$07,$9E,$40,$07,$9E,$40,$07
13228  5DE8  9E 40 07              BYTE $9E,$40,$07,$9E,$40,$07,$9E,$40
13229  5DF0  01 45 00              BYTE $01,$45,$00,$07,$9E,$40,$07,$9E
13230  5DF8  40 01 45              BYTE $40,$01,$45,$00,$00,$00,$00,$00
13231  5E00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$54
13232  5E08  00 01 55              BYTE $00,$01,$55,$00,$01,$55,$00,$01
13233  5E10  55 00 01              BYTE $55,$00,$01,$55,$00,$01,$55,$00
13234  5E18  00 54 00              BYTE $00,$54,$00,$02,$BA,$00,$01,$FD
13235  5E20  00 06 A6              BYTE $00,$06,$A6,$40,$1F,$A6,$D0,$1F
13236  5E28  A7 D0 1F              BYTE $A7,$D0,$1F,$A6,$F4,$1E,$A7,$F4
13237  5E30  7F 9B F4              BYTE $7F,$9B,$F4,$7E,$9A,$7D,$7F,$9A
13238  5E38  7D 76 9A              BYTE $7D,$76,$9A,$1D,$76,$6A,$1D,$00
13239  5E40  6A 1D D6              BYTE $6A,$1D,$D6,$6A,$7C,$55,$69,$75
13240  5E48  82 01 55              BYTE $82,$01,$55,$7D,$07,$AA,$54,$07
13241  5E50  AA 40 1E              BYTE $AA,$40,$1E,$AA,$40,$1E,$AA,$90
13242  5E58  1E 9E 90              BYTE $1E,$9E,$90,$06,$9E,$90,$07,$97
13243  5E60  90 07 97              BYTE $90,$07,$97,$90,$07,$97,$40,$07
13244  5E68  91 90 07              BYTE $91,$90,$07,$97,$90,$07,$97,$90
13245  5E70  01 41 40              BYTE $01,$41,$40,$07,$90,$00,$07,$90
13246  5E78  00 01 40              BYTE $00,$01,$40,$00,$00,$00,$00,$00
13247  5E80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$54
13248  5E88  00 01 55              BYTE $00,$01,$55,$00,$05,$55,$40,$05
13249  5E90  55 40 05              BYTE $55,$40,$05,$55,$40,$01,$55,$00
13250  5E98  00 54 00              BYTE $00,$54,$00,$00,$74,$00,$00,$FC
13251  5EA0  00 06 A6              BYTE $00,$06,$A6,$40,$1F,$A7,$D0,$1E
13252  5EA8  A6 D0 1E              BYTE $A6,$D0,$1E,$A7,$D0,$1E,$A7,$F4
13253  5EB0  7F 9A F4              BYTE $7F,$9A,$F4,$7F,$9A,$F4,$7E,$9B
13254  5EB8  74 77 9A              BYTE $74,$77,$9A,$74,$F7,$6A,$74,$00
13255  5EC0  6A 7D F7              BYTE $6A,$7D,$F7,$6A,$1D,$D1,$69,$04
13256  5EC8  82 00 55              BYTE $82,$00,$55,$00,$01,$EA,$40,$07
13257  5ED0  AA 40 07              BYTE $AA,$40,$07,$BA,$40,$07,$BE,$40
13258  5ED8  1E 9E 40              BYTE $1E,$9E,$40,$1E,$9E,$40,$1E,$5E
13259  5EE0  40 1E 5E              BYTE $40,$1E,$5E,$40,$0E,$5E,$40,$11
13260  5EE8  5E 40 1E              BYTE $5E,$40,$1E,$5E,$40,$1E,$5E,$40
13261  5EF0  06 55 00              BYTE $06,$55,$00,$01,$1E,$40,$00,$1E
13262  5EF8  40 00 06              BYTE $40,$00,$06,$40,$00,$01,$00,$00
13263  5F00             
13264  5F00             @          
13265  5F00             INCBIN     "YOURSPRITE.SPT",7,12,TRUE        ; ROPE CLIMB (36-39)
13266  5F00             @          
13267  5F00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13268  5F08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13269  5F10  00 00 00              BYTE $00,$00,$00,$00,$00,$05,$50,$00
13270  5F18  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$D4
13271  5F20  00 03 F4              BYTE $00,$03,$F4,$00,$03,$D4,$00,$00
13272  5F28  69 00 01              BYTE $69,$00,$01,$AB,$40,$01,$6F,$40
13273  5F30  01 6F 40              BYTE $01,$6F,$40,$01,$9F,$40,$01,$9F
13274  5F38  40 01 9F              BYTE $40,$01,$9F,$40,$01,$9D,$00,$00
13275  5F40  01 6D 00              BYTE $01,$6D,$00,$01,$6D,$00,$01,$6D
13276  5F48  00 00 7D              BYTE $00,$00,$7D,$00,$00,$55,$00,$01
13277  5F50  AF 40 01              BYTE $AF,$40,$01,$AF,$40,$01,$AB,$40
13278  5F58  01 AB 40              BYTE $01,$AB,$40,$01,$AD,$00,$00,$6D
13279  5F60  00 00 6D              BYTE $00,$00,$6D,$00,$00,$6B,$40,$00
13280  5F68  6B 40 00              BYTE $6B,$40,$00,$6B,$40,$00,$1B,$40
13281  5F70  00 15 40              BYTE $00,$15,$40,$00,$5B,$40,$01,$6B
13282  5F78  40 01 A5              BYTE $40,$01,$A5,$00,$00,$50,$00,$00
13283  5F80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13284  5F88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13285  5F90  00 00 00              BYTE $00,$00,$00,$00,$00,$05,$50,$00
13286  5F98  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$D4
13287  5FA0  00 03 F5              BYTE $00,$03,$F5,$00,$03,$DB,$40,$00
13288  5FA8  6F D0 01              BYTE $6F,$D0,$01,$EF,$D0,$01,$EF,$F4
13289  5FB0  01 6D F4              BYTE $01,$6D,$F4,$01,$69,$F4,$01,$9B
13290  5FB8  7D 01 9A              BYTE $7D,$01,$9A,$DD,$01,$A7,$DD,$00
13291  5FC0  AB DD F5              BYTE $AB,$DD,$F5,$AF,$5F,$DD,$6D,$7D
13292  5FC8  82 1D 96              BYTE $82,$1D,$96,$7D,$04,$7D,$54,$00
13293  5FD0  6F 71 01              BYTE $6F,$71,$01,$AB,$75,$01,$AB,$44
13294  5FD8  01 AB 40              BYTE $01,$AB,$40,$06,$AD,$00,$06,$BD
13295  5FE0  00 06 F7              BYTE $00,$06,$F7,$40,$06,$DF,$40,$1B
13296  5FE8  DE D0 1B              BYTE $DE,$D0,$1B,$7A,$D0,$57,$56,$B4
13297  5FF0  A5 01 94              BYTE $A5,$01,$94,$6A,$40,$69,$1A,$40
13298  5FF8  69 05 01              BYTE $69,$05,$01,$A4,$00,$01,$A4,$00
13299  6000  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13300  6008  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13301  6010  00 00 05              BYTE $00,$00,$05,$50,$00,$05,$50,$00
13302  6018  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$D4
13303  6020  00 03 F4              BYTE $00,$03,$F4,$00,$03,$DD,$00,$01
13304  6028  67 40 01              BYTE $67,$40,$01,$9F,$40,$01,$9F,$40
13305  6030  01 7F 40              BYTE $01,$7F,$40,$01,$7D,$00,$01,$F7
13306  6038  40 07 DB              BYTE $40,$07,$DB,$40,$1F,$5B,$40,$00
13307  6040  A7 6A 40              BYTE $A7,$6A,$40,$AD,$59,$00,$6D,$75
13308  6048  80 7D 96              BYTE $80,$7D,$96,$40,$15,$7D,$00,$0D
13309  6050  AF 40 0D              BYTE $AF,$40,$0D,$AB,$40,$01,$AB,$40
13310  6058  0D 6B 00              BYTE $0D,$6B,$00,$01,$6D,$00,$06,$6B
13311  6060  40 1A 5B              BYTE $40,$1A,$5B,$40,$1A,$DB,$50,$1B
13312  6068  5A D0 1B              BYTE $5A,$D0,$1B,$46,$B4,$57,$06,$B4
13313  6070  A5 01 94              BYTE $A5,$01,$94,$AD,$00,$7D,$7D,$00
13314  6078  6D 14 01              BYTE $6D,$14,$01,$A4,$00,$01,$90,$00
13315  6080             
13316  6080             @          
13317  6080             INCBIN     "YOURSPRITE.SPT",13,18,TRUE       ; WALKING LEFT (14-27)
13318  6080             @          
13319  6080  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13320  6088  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13321  6090  00 00 00              BYTE $00,$00,$00,$05,$50,$00,$05,$50
13322  6098  00 17 C0              BYTE $00,$17,$C0,$00,$17,$40,$00,$17
13323  60A0  C0 00 1F              BYTE $C0,$00,$1F,$C0,$00,$17,$C0,$00
13324  60A8  69 00 01              BYTE $69,$00,$01,$EA,$40,$01,$F9,$40
13325  60B0  01 F9 40              BYTE $01,$F9,$40,$01,$F6,$40,$01,$F6
13326  60B8  40 01 F6              BYTE $40,$01,$F6,$40,$00,$76,$40,$00
13327  60C0  02 79 00              BYTE $02,$79,$00,$01,$75,$00,$01,$7D
13328  60C8  00 00 7D              BYTE $00,$00,$7D,$00,$00,$55,$00,$01
13329  60D0  FA 40 01              BYTE $FA,$40,$01,$FA,$40,$01,$EA,$40
13330  60D8  01 EA 40              BYTE $01,$EA,$40,$00,$7A,$40,$00,$79
13331  60E0  00 00 79              BYTE $00,$00,$79,$00,$01,$E9,$00,$01
13332  60E8  E9 00 01              BYTE $E9,$00,$01,$E9,$00,$01,$E4,$00
13333  60F0  01 54 00              BYTE $01,$54,$00,$01,$E5,$00,$01,$E9
13334  60F8  40 00 5A              BYTE $40,$00,$5A,$40,$00,$05,$00,$00
13335  6100  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13336  6108  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13337  6110  00 00 00              BYTE $00,$00,$00,$05,$50,$00,$05,$50
13338  6118  00 17 C0              BYTE $00,$17,$C0,$00,$17,$40,$00,$17
13339  6120  C0 00 5F              BYTE $C0,$00,$5F,$C0,$01,$E7,$C0,$07
13340  6128  F9 00 07              BYTE $F9,$00,$07,$FB,$40,$1F,$FB,$40
13341  6130  1F 79 40              BYTE $1F,$79,$40,$1F,$69,$40,$7D,$E6
13342  6138  40 77 A6              BYTE $40,$77,$A6,$40,$77,$DA,$40,$00
13343  6140  2A 7E B4              BYTE $2A,$7E,$B4,$3A,$5F,$7C,$39,$76
13344  6148  A0 3D 96              BYTE $A0,$3D,$96,$74,$15,$7D,$10,$0D
13345  6150  F9 00 0D              BYTE $F9,$00,$0D,$EA,$40,$01,$EA,$40
13346  6158  01 EA 40              BYTE $01,$EA,$40,$00,$7A,$90,$00,$7E
13347  6160  90 01 DF              BYTE $90,$01,$DF,$90,$01,$F7,$90,$07
13348  6168  B7 E4 07              BYTE $B7,$E4,$07,$AD,$E4,$1E,$95,$D5
13349  6170  16 40 5A              BYTE $16,$40,$5A,$69,$01,$A9,$69,$01
13350  6178  A4 1A 40              BYTE $A4,$1A,$40,$50,$1A,$40,$00,$00
13351  6180  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13352  6188  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13353  6190  00 00 00              BYTE $00,$00,$00,$05,$50,$00,$05,$50
13354  6198  00 17 C0              BYTE $00,$17,$C0,$00,$17,$40,$00,$17
13355  61A0  C0 00 1F              BYTE $C0,$00,$1F,$C0,$00,$77,$C0,$01
13356  61A8  D9 40 01              BYTE $D9,$40,$01,$F6,$40,$01,$F6,$40
13357  61B0  01 FD 40              BYTE $01,$FD,$40,$00,$7D,$40,$01,$DF
13358  61B8  40 01 E7              BYTE $40,$01,$E7,$D0,$01,$E5,$F4,$00
13359  61C0  1A 77 A5              BYTE $1A,$77,$A5,$3A,$5F,$9D,$39,$F7
13360  61C8  92 1D 96              BYTE $92,$1D,$96,$7D,$04,$7D,$54,$01
13361  61D0  FA 71 01              BYTE $FA,$71,$01,$EA,$75,$01,$EA,$44
13362  61D8  00 E9 70              BYTE $00,$E9,$70,$00,$79,$44,$01,$E9
13363  61E0  90 01 E5              BYTE $90,$01,$E5,$A4,$05,$E7,$A4,$07
13364  61E8  A5 E4 1E              BYTE $A5,$E4,$1E,$91,$E4,$1E,$90,$D5
13365  61F0  16 40 5A              BYTE $16,$40,$5A,$7D,$00,$7A,$79,$00
13366  61F8  7D 1A 40              BYTE $7D,$1A,$40,$14,$06,$40,$00,$00
13367  6200             
13368  6200             @          
13369  6200             INCBIN     "YOURSPRITE.SPT",19,24,TRUE       ; WALKING RIGHT (0 - 13)
13370  6200             @          
13371  6200  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13372  6208  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13373  6210  00 00 00              BYTE $00,$00,$00,$05,$50,$00,$05,$40
13374  6218  00 17 C0              BYTE $00,$17,$C0,$00,$17,$40,$00,$1F
13375  6220  C0 00 17              BYTE $C0,$00,$17,$C0,$00,$17,$00,$00
13376  6228  69 00 01              BYTE $69,$00,$01,$DA,$4C,$01,$F6,$5C
13377  6230  01 F6 74              BYTE $01,$F6,$74,$01,$F6,$7D,$01,$F5
13378  6238  FD 01 FF              BYTE $FD,$01,$FF,$D4,$00,$7F,$40,$00
13379  6240  02 79 00              BYTE $02,$79,$00,$01,$75,$00,$01,$7D
13380  6248  00 00 7D              BYTE $00,$00,$7D,$00,$00,$55,$00,$01
13381  6250  FA 40 01              BYTE $FA,$40,$01,$FA,$40,$01,$EA,$40
13382  6258  01 EA 40              BYTE $01,$EA,$40,$00,$7A,$40,$00,$79
13383  6260  00 00 79              BYTE $00,$00,$79,$00,$01,$E9,$00,$01
13384  6268  E9 00 01              BYTE $E9,$00,$01,$E9,$00,$01,$E4,$00
13385  6270  01 54 00              BYTE $01,$54,$00,$01,$E5,$00,$01,$E9
13386  6278  40 00 5A              BYTE $40,$00,$5A,$40,$00,$05,$00,$00
13387  6280  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13388  6288  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13389  6290  00 00 00              BYTE $00,$00,$00,$05,$50,$00,$05,$50
13390  6298  00 17 C0              BYTE $00,$17,$C0,$00,$17,$40,$00,$17
13391  62A0  C0 00 1F              BYTE $C0,$00,$1F,$C0,$00,$17,$C0,$00
13392  62A8  69 00 01              BYTE $69,$00,$01,$D6,$97,$01,$79,$6B
13393  62B0  01 E9 58              BYTE $01,$E9,$58,$01,$F9,$00,$01,$65
13394  62B8  00 01 F6              BYTE $00,$01,$F6,$00,$00,$76,$00,$00
13395  62C0  02 79 00              BYTE $02,$79,$00,$01,$75,$00,$01,$7D
13396  62C8  00 00 7D              BYTE $00,$00,$7D,$00,$00,$55,$00,$01
13397  62D0  FA 40 01              BYTE $FA,$40,$01,$FA,$40,$01,$EA,$40
13398  62D8  01 EA 40              BYTE $01,$EA,$40,$00,$7A,$40,$00,$79
13399  62E0  00 00 79              BYTE $00,$00,$79,$00,$01,$E9,$00,$01
13400  62E8  E9 00 01              BYTE $E9,$00,$01,$E9,$00,$01,$E4,$00
13401  62F0  01 54 00              BYTE $01,$54,$00,$01,$E5,$00,$01,$E9
13402  62F8  40 00 5A              BYTE $40,$00,$5A,$40,$00,$05,$00,$00
13403  6300             
13404  6300             @          
13405  6300             INCBIN     "YOURSPRITE.SPT",25,28,TRUE       ; PUNCHING TO THE RIGHT
13406  6300             @          
13407  6300  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13408  6308  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13409  6310  00 00 05              BYTE $00,$00,$05,$50,$00,$05,$50,$00
13410  6318  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$D4
13411  6320  00 03 F4              BYTE $00,$03,$F4,$00,$03,$D4,$00,$00
13412  6328  69 00 01              BYTE $69,$00,$01,$AB,$40,$01,$6F,$40
13413  6330  01 6F 40              BYTE $01,$6F,$40,$01,$9F,$40,$01,$9F
13414  6338  40 01 9F              BYTE $40,$01,$9F,$40,$01,$9D,$00,$00
13415  6340  00 6D 80              BYTE $00,$6D,$80,$00,$5D,$40,$00,$7D
13416  6348  40 00 7D              BYTE $40,$00,$7D,$00,$00,$55,$00,$01
13417  6350  AF 40 01              BYTE $AF,$40,$01,$AF,$40,$01,$AB,$40
13418  6358  01 AB 40              BYTE $01,$AB,$40,$01,$AD,$00,$00,$6D
13419  6360  00 00 6D              BYTE $00,$00,$6D,$00,$00,$6B,$40,$00
13420  6368  6B 40 00              BYTE $6B,$40,$00,$6B,$40,$00,$1B,$40
13421  6370  00 15 40              BYTE $00,$15,$40,$00,$5B,$40,$01,$6B
13422  6378  40 01 A5              BYTE $40,$01,$A5,$00,$00,$50,$00,$00
13423  6380  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13424  6388  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13425  6390  00 00 05              BYTE $00,$00,$05,$50,$00,$05,$50,$00
13426  6398  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$D4
13427  63A0  00 03 F4              BYTE $00,$03,$F4,$00,$03,$D4,$00,$00
13428  63A8  69 00 D6              BYTE $69,$00,$D6,$97,$40,$E9,$6D,$40
13429  63B0  25 6B 40              BYTE $25,$6B,$40,$00,$6F,$40,$00,$59
13430  63B8  40 00 9F              BYTE $40,$00,$9F,$40,$00,$9D,$00,$00
13431  63C0  00 6D 80              BYTE $00,$6D,$80,$00,$5D,$40,$00,$7D
13432  63C8  40 00 7D              BYTE $40,$00,$7D,$00,$00,$55,$00,$01
13433  63D0  AF 40 01              BYTE $AF,$40,$01,$AF,$40,$01,$AB,$40
13434  63D8  01 AB 40              BYTE $01,$AB,$40,$01,$AD,$00,$00,$6D
13435  63E0  00 00 6D              BYTE $00,$00,$6D,$00,$00,$6B,$40,$00
13436  63E8  6B 40 00              BYTE $6B,$40,$00,$6B,$40,$00,$1B,$40
13437  63F0  00 15 40              BYTE $00,$15,$40,$00,$5B,$40,$01,$6B
13438  63F8  40 01 A5              BYTE $40,$01,$A5,$00,$00,$50,$00,$00
13439  6400             
13440  6400             @          
13441  6400             INCBIN     "YOURSPRITE.SPT",29,32,TRUE       ; PUNCHING TO THE LEFT
13442  6400             @          
13443  6400  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13444  6408  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13445  6410  00 00 05              BYTE $00,$00,$05,$50,$00,$01,$50,$00
13446  6418  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$F4
13447  6420  00 03 D4              BYTE $00,$03,$D4,$00,$00,$D4,$00,$00
13448  6428  69 00 31              BYTE $69,$00,$31,$A7,$40,$35,$9F,$40
13449  6430  1D 9F 40              BYTE $1D,$9F,$40,$7D,$9F,$40,$7F,$5F
13450  6438  40 17 FF              BYTE $40,$17,$FF,$40,$01,$FD,$00,$00
13451  6440  01 7A 40              BYTE $01,$7A,$40,$03,$7A,$40,$03,$6F
13452  6448  40 01 AB              BYTE $40,$01,$AB,$40,$01,$59,$40,$01
13453  6450  A7 40 01              BYTE $A7,$40,$01,$AB,$40,$01,$AB,$40
13454  6458  01 AB 40              BYTE $01,$AB,$40,$01,$AD,$00,$00,$6D
13455  6460  00 00 6D              BYTE $00,$00,$6D,$00,$00,$6B,$40,$00
13456  6468  6B 40 00              BYTE $6B,$40,$00,$6B,$40,$00,$1B,$40
13457  6470  00 15 00              BYTE $00,$15,$00,$00,$5B,$40,$01,$6B
13458  6478  40 01 A5              BYTE $40,$01,$A5,$00,$00,$54,$00,$00
13459  6480             
13460  6480             @          
13461  6480             INCBIN     "YOURSPRITE.SPT",33,34,TRUE       ; FIGHTING
13462  6480             @          
13463  6480  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13464  6488  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13465  6490  00 00 00              BYTE $00,$00,$00,$55,$00,$00,$54,$00
13466  6498  01 7C 00              BYTE $01,$7C,$00,$01,$74,$00,$01,$FC
13467  64A0  00 01 7C              BYTE $00,$01,$7C,$00,$01,$70,$00,$06
13468  64A8  90 00 1D              BYTE $90,$00,$1D,$A4,$C0,$1F,$65,$C0
13469  64B0  1F 67 40              BYTE $1F,$67,$40,$1F,$67,$D0,$1F,$5F
13470  64B8  D0 1F FD              BYTE $D0,$1F,$FD,$40,$07,$F4,$00,$00
13471  64C0  27 90 00              BYTE $27,$90,$00,$17,$50,$00,$17,$D0
13472  64C8  00 07 D0              BYTE $00,$07,$D0,$00,$05,$50,$00,$1F
13473  64D0  A5 00 1F              BYTE $A5,$00,$1F,$97,$C0,$1E,$7F,$40
13474  64D8  1E A7 C2              BYTE $1E,$A7,$C2,$07,$A5,$CA,$07,$51
13475  64E0  DA 07 90              BYTE $DA,$07,$90,$78,$1E,$90,$50,$1E
13476  64E8  90 00 1E              BYTE $90,$00,$1E,$90,$00,$1E,$40,$00
13477  64F0  15 40 00              BYTE $15,$40,$00,$1E,$50,$00,$1E,$94
13478  64F8  00 05 A4              BYTE $00,$05,$A4,$00,$00,$50,$00,$00
13479  6500  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13480  6508  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13481  6510  00 00 00              BYTE $00,$00,$00,$55,$00,$00,$54,$00
13482  6518  01 7C 00              BYTE $01,$7C,$00,$01,$74,$00,$01,$FC
13483  6520  00 01 7C              BYTE $00,$01,$7C,$00,$01,$70,$00,$06
13484  6528  90 00 1D              BYTE $90,$00,$1D,$A4,$C0,$1F,$65,$C0
13485  6530  1F 67 40              BYTE $1F,$67,$40,$1F,$67,$D0,$1F,$5F
13486  6538  D0 1F FD              BYTE $D0,$1F,$FD,$40,$07,$F4,$00,$00
13487  6540  27 90 01              BYTE $27,$90,$01,$17,$50,$06,$17,$D0
13488  6548  1E 07 D0              BYTE $1E,$07,$D0,$7D,$05,$51,$75,$1F
13489  6550  A5 D5 1F              BYTE $A5,$D5,$1F,$97,$D4,$1E,$7F,$50
13490  6558  1E F5 40              BYTE $1E,$F5,$40,$07,$F5,$00,$07,$54
13491  6560  00 07 90              BYTE $00,$07,$90,$00,$1E,$90,$00,$1E
13492  6568  90 00 1E              BYTE $90,$00,$1E,$90,$00,$1E,$40,$00
13493  6570  15 40 00              BYTE $15,$40,$00,$1E,$50,$00,$1E,$94
13494  6578  00 05 A4              BYTE $00,$05,$A4,$00,$00,$50,$00,$00
13495  6580             
13496  6580             @          
13497  6580             INCBIN     "YOURSPRITE.SPT",35,38,TRUE       ; KICKING TO THE RIGHT
13498  6580             @          
13499  6580  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13500  6588  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13501  6590  00 00 00              BYTE $00,$00,$00,$55,$00,$00,$15,$00
13502  6598  00 3D 40              BYTE $00,$3D,$40,$00,$1D,$40,$00,$3F
13503  65A0  40 00 3D              BYTE $40,$00,$3D,$40,$00,$0D,$40,$00
13504  65A8  06 90 03              BYTE $06,$90,$03,$1A,$74,$03,$59,$F4
13505  65B0  01 D9 F4              BYTE $01,$D9,$F4,$07,$D9,$F4,$07,$F5
13506  65B8  F4 01 7F              BYTE $F4,$01,$7F,$F4,$00,$1F,$D0,$00
13507  65C0  00 06 D8              BYTE $00,$06,$D8,$00,$05,$D4,$00,$07
13508  65C8  D4 00 07              BYTE $D4,$00,$07,$D0,$00,$05,$50,$00
13509  65D0  5A F4 03              BYTE $5A,$F4,$03,$D6,$F4,$01,$FD,$B4
13510  65D8  93 DA B4              BYTE $93,$DA,$B4,$A7,$5A,$D0,$A7,$45
13511  65E0  D0 2D 06              BYTE $D0,$2D,$06,$D0,$05,$06,$B4,$00
13512  65E8  06 B4 00              BYTE $06,$B4,$00,$06,$B4,$00,$01,$B4
13513  65F0  00 01 54              BYTE $00,$01,$54,$00,$05,$B4,$00,$16
13514  65F8  B4 00 1A              BYTE $B4,$00,$1A,$50,$00,$05,$00,$00
13515  6600  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13516  6608  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13517  6610  00 00 00              BYTE $00,$00,$00,$55,$00,$00,$15,$00
13518  6618  00 3D 40              BYTE $00,$3D,$40,$00,$1D,$40,$00,$3F
13519  6620  40 00 3D              BYTE $40,$00,$3D,$40,$00,$0D,$40,$00
13520  6628  06 90 03              BYTE $06,$90,$03,$1A,$74,$03,$59,$F4
13521  6630  01 D9 F4              BYTE $01,$D9,$F4,$07,$D9,$F4,$07,$F5
13522  6638  F4 01 7F              BYTE $F4,$01,$7F,$F4,$00,$1F,$D0,$00
13523  6640  40 06 D8              BYTE $40,$06,$D8,$90,$05,$D4,$B4,$07
13524  6648  D4 7D 07              BYTE $D4,$7D,$07,$D0,$5D,$45,$50,$57
13525  6650  5A F4 17              BYTE $5A,$F4,$17,$D6,$F4,$05,$FD,$B4
13526  6658  01 5F B4              BYTE $01,$5F,$B4,$00,$5F,$D0,$00,$15
13527  6660  D0 00 06              BYTE $D0,$00,$06,$D0,$00,$06,$B4,$00
13528  6668  06 B4 00              BYTE $06,$B4,$00,$06,$B4,$00,$01,$B4
13529  6670  00 01 54              BYTE $00,$01,$54,$00,$05,$B4,$00,$16
13530  6678  B4 00 1A              BYTE $B4,$00,$1A,$50,$00,$05,$00,$00
13531  6680             
13532  6680             @          
13533  6680             INCBIN     "YOURSPRITE.SPT",39,42,TRUE       ; KICKING TO THE LEFT
13534  6680             @          
13535  6680  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13536  6688  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13537  6690  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13538  6698  00 00 00              BYTE $00,$00,$00,$40,$00,$00,$55,$00
13539  66A0  00 D5 40              BYTE $00,$D5,$40,$00,$3D,$55,$00,$55
13540  66A8  55 5A FF              BYTE $55,$5A,$FF,$D5,$5A,$57,$F5,$55
13541  66B0  00 D6 95              BYTE $00,$D6,$95,$00,$15,$55,$00,$3A
13542  66B8  75 00 05              BYTE $75,$00,$05,$96,$00,$00,$00,$00
13543  66C0             
13544  66C0             @          
13545  66C0             INCBIN     "YOURSPRITE.SPT",43,43,TRUE       ; UNUSED
13546  66C0             @          
13547  66C0  00 05 50              BYTE $00,$05,$50,$00,$05,$50,$00,$17
13548  66C8  C0 00 17              BYTE $C0,$00,$17,$40,$00,$17,$C0,$00
13549  66D0  1F C0 00              BYTE $1F,$C0,$00,$17,$C0,$00,$69,$00
13550  66D8  01 D6 97              BYTE $01,$D6,$97,$01,$79,$6B,$01,$E9
13551  66E0  58 01 F9              BYTE $58,$01,$F9,$00,$05,$65,$00,$25
13552  66E8  F6 00 55              BYTE $F6,$00,$55,$AF,$00,$65,$A8,$00
13553  66F0  66 B4 00              BYTE $66,$B4,$00,$65,$D0,$00,$67,$40
13554  66F8  00 6C 00              BYTE $00,$6C,$00,$00,$00,$00,$00,$00
13555  6700  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13556  6708  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13557  6710  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13558  6718  00 00 00              BYTE $00,$00,$00,$50,$00,$00,$55,$00
13559  6720  00 15 40              BYTE $00,$15,$40,$00,$01,$50,$00,$00
13560  6728  55 5A 00              BYTE $55,$5A,$00,$15,$5A,$54,$05,$5A
13561  6730  55 16 95              BYTE $55,$16,$95,$05,$55,$55,$00,$5A
13562  6738  75 00 15              BYTE $75,$00,$15,$96,$00,$00,$00,$00
13563  6740  00 05 50              BYTE $00,$05,$50,$00,$05,$50,$00,$17
13564  6748  C0 00 17              BYTE $C0,$00,$17,$40,$00,$17,$C0,$00
13565  6750  1F C0 00              BYTE $1F,$C0,$00,$17,$C0,$00,$69,$00
13566  6758  01 D6 97              BYTE $01,$D6,$97,$01,$79,$6B,$01,$E9
13567  6760  58 01 F9              BYTE $58,$01,$F9,$00,$05,$65,$00,$25
13568  6768  F6 40 55              BYTE $F6,$40,$55,$AF,$50,$65,$A8,$D4
13569  6770  66 B4 34              BYTE $66,$B4,$34,$65,$D0,$00,$67,$40
13570  6778  00 6C 00              BYTE $00,$6C,$00,$00,$00,$00,$00,$00
13571  6780             
13572  6780             @          
13573  6780             INCBIN     "YOURSPRITE.SPT",44,46,TRUE       ; SWIMMING TO THE RIGHT
13574  6780             @          
13575  6780  05 50 00              BYTE $05,$50,$00,$05,$50,$00,$03,$D4
13576  6788  00 01 D4              BYTE $00,$01,$D4,$00,$03,$D4,$00,$03
13577  6790  F4 00 03              BYTE $F4,$00,$03,$D4,$00,$00,$69,$00
13578  6798  D6 97 40              BYTE $D6,$97,$40,$E9,$6D,$40,$25,$6B
13579  67A0  40 00 6F              BYTE $40,$00,$6F,$40,$00,$59,$50,$00
13580  67A8  9F 58 00              BYTE $9F,$58,$00,$FA,$55,$00,$2A,$59
13581  67B0  00 1E 99              BYTE $00,$1E,$99,$00,$07,$59,$00,$01
13582  67B8  D9 00 00              BYTE $D9,$00,$00,$39,$00,$00,$00,$00
13583  67C0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13584  67C8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13585  67D0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13586  67D8  00 00 00              BYTE $00,$00,$00,$00,$00,$01,$00,$00
13587  67E0  55 00 01              BYTE $55,$00,$01,$57,$00,$55,$7C,$A5
13588  67E8  55 55 A5              BYTE $55,$55,$A5,$57,$FF,$55,$5F,$D5
13589  67F0  56 97 00              BYTE $56,$97,$00,$55,$54,$00,$5D,$AC
13590  67F8  00 96 50              BYTE $00,$96,$50,$00,$00,$00,$00,$00
13591  6800  05 50 00              BYTE $05,$50,$00,$05,$50,$00,$03,$D4
13592  6808  00 01 D4              BYTE $00,$01,$D4,$00,$03,$D4,$00,$03
13593  6810  F4 00 03              BYTE $F4,$00,$03,$D4,$00,$00,$69,$00
13594  6818  D6 97 40              BYTE $D6,$97,$40,$E9,$6D,$40,$25,$6B
13595  6820  40 00 6F              BYTE $40,$00,$6F,$40,$00,$59,$50,$01
13596  6828  9F 58 05              BYTE $9F,$58,$05,$FA,$55,$17,$2A,$59
13597  6830  1C 1E 99              BYTE $1C,$1E,$99,$00,$07,$59,$00,$01
13598  6838  D9 00 00              BYTE $D9,$00,$00,$39,$00,$00,$00,$00
13599  6840  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13600  6848  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13601  6850  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13602  6858  00 00 00              BYTE $00,$00,$00,$00,$00,$05,$00,$00
13603  6860  55 00 01              BYTE $55,$00,$01,$54,$00,$05,$40,$A5
13604  6868  55 00 A5              BYTE $55,$00,$A5,$54,$00,$A5,$50,$15
13605  6870  56 94 55              BYTE $56,$94,$55,$55,$55,$50,$5D,$A5
13606  6878  00 96 54              BYTE $00,$96,$54,$00,$00,$00,$00,$00
13607  6880             
13608  6880             @          
13609  6880             INCBIN     "YOURSPRITE.SPT",47,50,TRUE       ; SWIMMING TO THE LEFT
13610  6880             @          
13611  6880  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13612  6888  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13613  6890  00 00 01              BYTE $00,$00,$01,$54,$00,$01,$54,$00
13614  6898  05 F0 00              BYTE $05,$F0,$00,$05,$D0,$00,$05,$F0
13615  68A0  00 07 F0              BYTE $00,$07,$F0,$00,$05,$F2,$00,$1A
13616  68A8  40 95 75              BYTE $40,$95,$75,$A5,$E5,$5E,$5A,$D0
13617  68B0  7A 59 80              BYTE $7A,$59,$80,$7E,$64,$80,$59,$50
13618  68B8  00 7D 80              BYTE $00,$7D,$80,$00,$1D,$80,$00,$00
13619  68C0  9E 40 00              BYTE $9E,$40,$00,$5D,$40,$00,$5F,$40
13620  68C8  00 1F 40              BYTE $00,$1F,$40,$00,$15,$40,$00,$7E
13621  68D0  90 00 7E              BYTE $90,$00,$7E,$90,$00,$7A,$90,$00
13622  68D8  7A 90 00              BYTE $7A,$90,$00,$1E,$90,$00,$1E,$40
13623  68E0  00 1E 40              BYTE $00,$1E,$40,$00,$7A,$40,$00,$7A
13624  68E8  40 00 7A              BYTE $40,$00,$7A,$40,$00,$79,$00,$00
13625  68F0  55 00 00              BYTE $55,$00,$00,$79,$40,$00,$7A,$50
13626  68F8  00 16 90              BYTE $00,$16,$90,$00,$01,$40,$00,$00
13627  6900             
13628  6900             @          
13629  6900             INCBIN     "YOURSPRITE.SPT",51,52,TRUE       ; PLAYER (GUN TO THE RIGHT)
13630  6900             @          
13631  6900  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13632  6908  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13633  6910  00 00 00              BYTE $00,$00,$00,$15,$40,$00,$15,$40
13634  6918  00 0F 50              BYTE $00,$0F,$50,$00,$07,$50,$00,$0F
13635  6920  50 00 0F              BYTE $50,$00,$0F,$D0,$00,$8F,$50,$56
13636  6928  01 A4 5B              BYTE $01,$A4,$5B,$5A,$5D,$07,$A5,$B5
13637  6930  02 65 AD              BYTE $02,$65,$AD,$02,$19,$BD,$00,$05
13638  6938  65 00 02              BYTE $65,$00,$02,$7D,$00,$02,$74,$00
13639  6940  00 01 B6              BYTE $00,$01,$B6,$00,$01,$75,$00,$01
13640  6948  F5 00 01              BYTE $F5,$00,$01,$F4,$00,$01,$54,$00
13641  6950  06 BD 00              BYTE $06,$BD,$00,$06,$BD,$00,$06,$AD
13642  6958  00 06 AD              BYTE $00,$06,$AD,$00,$06,$B4,$00,$01
13643  6960  B4 00 01              BYTE $B4,$00,$01,$B4,$00,$01,$AD,$00
13644  6968  01 AD 00              BYTE $01,$AD,$00,$01,$AD,$00,$00,$6D
13645  6970  00 00 55              BYTE $00,$00,$55,$00,$01,$6D,$00,$05
13646  6978  AD 00 06              BYTE $AD,$00,$06,$94,$00,$01,$40,$00
13647  6980             
13648  6980             @          
13649  6980             INCBIN     "YOURSPRITE.SPT",53,54,TRUE       ; PLAYER (GUN TO THE LEFT)
13650  6980             @          
13651  6980  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13652  6988  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13653  6990  00 00 03              BYTE $00,$00,$03,$AA,$C0,$03,$AA,$C0
13654  6998  03 96 C0              BYTE $03,$96,$C0,$03,$96,$C0,$00,$00
13655  69A0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13656  69A8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13657  69B0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13658  69B8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13659  69C0             
13660  69C0             @          
13661  69C0             INCBIN     "YOURSPRITE.SPT",55,55,TRUE       ; ENEMY BULLET
13662  69C0             @          
13663  69C0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13664  69C8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13665  69D0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13666  69D8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13667  69E0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13668  69E8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13669  69F0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13670  69F8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13671  6A00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13672  6A08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13673  6A10  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13674  6A18  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13675  6A20  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13676  6A28  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13677  6A30  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13678  6A38  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13679  6A40  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13680  6A48  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13681  6A50  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13682  6A58  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13683  6A60  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13684  6A68  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13685  6A70  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13686  6A78  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13687  6A80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13688  6A88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13689  6A90  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13690  6A98  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13691  6AA0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13692  6AA8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13693  6AB0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13694  6AB8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13695  6AC0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13696  6AC8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13697  6AD0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13698  6AD8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13699  6AE0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13700  6AE8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13701  6AF0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13702  6AF8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13703  6B00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13704  6B08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13705  6B10  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13706  6B18  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13707  6B20  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13708  6B28  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13709  6B30  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13710  6B38  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13711  6B40  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13712  6B48  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13713  6B50  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13714  6B58  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13715  6B60  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13716  6B68  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13717  6B70  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13718  6B78  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13719  6B80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13720  6B88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13721  6B90  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13722  6B98  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13723  6BA0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13724  6BA8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13725  6BB0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13726  6BB8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13727  6BC0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13728  6BC8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13729  6BD0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13730  6BD8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13731  6BE0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13732  6BE8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13733  6BF0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13734  6BF8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13735  6C00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13736  6C08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13737  6C10  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13738  6C18  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13739  6C20  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13740  6C28  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13741  6C30  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13742  6C38  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13743  6C40  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13744  6C48  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13745  6C50  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13746  6C58  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13747  6C60  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13748  6C68  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13749  6C70  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13750  6C78  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13751  6C80             
13752  6C80             @          
13753  6C80             INCBIN     "YOURSPRITE.SPT",56,66,TRUE       ; UNUSED
13754  6C80             @          
13755  6C80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13756  6C88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13757  6C90  05 40 00              BYTE $05,$40,$00,$05,$50,$00,$0D,$50
13758  6C98  00 07 50              BYTE $00,$07,$50,$00,$0F,$50,$00,$05
13759  6CA0  50 00 0D              BYTE $50,$00,$0D,$50,$00,$05,$F0,$A4
13760  6CA8  05 C0 A4              BYTE $05,$C0,$A4,$03,$90,$07,$01,$D4
13761  6CB0  0E 67 64              BYTE $0E,$67,$64,$05,$57,$69,$0D,$AD
13762  6CB8  65 01 55              BYTE $65,$01,$55,$F9,$00,$06,$E9,$00
13763  6CC0  00 0E FC              BYTE $00,$0E,$FC,$00,$0E,$EC,$00,$0A
13764  6CC8  E4 00 0D              BYTE $E4,$00,$0D,$E4,$00,$01,$E4,$00
13765  6CD0  0D 54 00              BYTE $0D,$54,$00,$0E,$95,$00,$0F,$A5
13766  6CD8  00 0E D9              BYTE $00,$0E,$D9,$00,$0F,$A5,$00,$0E
13767  6CE0  94 00 03              BYTE $94,$00,$03,$A4,$00,$03,$E4,$00
13768  6CE8  03 A9 00              BYTE $03,$A9,$00,$03,$E5,$00,$03,$A9
13769  6CF0  00 00 E5              BYTE $00,$00,$E5,$00,$00,$54,$00,$03
13770  6CF8  F4 00 0F              BYTE $F4,$00,$0F,$D4,$00,$05,$40,$00
13771  6D00             
13772  6D00             @          
13773  6D00             INCBIN     "YOURSPRITE.SPT",67,68,TRUE       ; ENEMY SHOOTING LEFT
13774  6D00             @          
13775  6D00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13776  6D08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13777  6D10  00 00 00              BYTE $00,$00,$00,$00,$00,$01,$50,$00
13778  6D18  01 54 00              BYTE $01,$54,$00,$03,$54,$00,$01,$D4
13779  6D20  00 03 D4              BYTE $00,$03,$D4,$00,$01,$74,$00,$03
13780  6D28  54 00 01              BYTE $54,$00,$01,$69,$00,$00,$7A,$40
13781  6D30  00 E9 40              BYTE $00,$E9,$40,$00,$FA,$50,$03,$B9
13782  6D38  90 03 BE              BYTE $90,$03,$BE,$50,$03,$BA,$90,$00
13783  6D40  02 7E 00              BYTE $02,$7E,$00,$02,$7A,$00,$01,$55
13784  6D48  00 03 79              BYTE $00,$03,$79,$00,$00,$79,$00,$03
13785  6D50  55 00 03              BYTE $55,$00,$03,$A5,$40,$03,$E9,$40
13786  6D58  03 B6 40              BYTE $03,$B6,$40,$03,$E9,$40,$03,$A5
13787  6D60  00 00 E9              BYTE $00,$00,$E9,$00,$00,$F9,$00,$00
13788  6D68  EA 40 00              BYTE $EA,$40,$00,$F9,$40,$00,$EA,$40
13789  6D70  00 39 40              BYTE $00,$39,$40,$00,$15,$00,$00,$FD
13790  6D78  00 03 F5              BYTE $00,$03,$F5,$00,$01,$50,$00,$00
13791  6D80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13792  6D88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13793  6D90  00 00 00              BYTE $00,$00,$00,$00,$00,$05,$40,$00
13794  6D98  05 50 00              BYTE $05,$50,$00,$0D,$50,$00,$07,$50
13795  6DA0  00 0F 50              BYTE $00,$0F,$50,$00,$05,$D4,$00,$0D
13796  6DA8  55 00 05              BYTE $55,$00,$05,$A9,$40,$05,$E6,$40
13797  6DB0  00 E9 50              BYTE $00,$E9,$50,$00,$BA,$50,$00,$EE
13798  6DB8  90 00 EF              BYTE $90,$00,$EF,$64,$00,$EE,$94,$00
13799  6DC0  FB E4 00              BYTE $FB,$E4,$00,$EB,$94,$1F,$BB,$D0
13800  6DC8  85 1D 59              BYTE $85,$1D,$59,$79,$19,$96,$79,$04
13801  6DD0  E9 54 03              BYTE $E9,$54,$03,$B9,$40,$03,$E6,$40
13802  6DD8  03 A9 00              BYTE $03,$A9,$00,$03,$E5,$00,$03,$99
13803  6DE0  00 0F A6              BYTE $00,$0F,$A6,$40,$0E,$96,$40,$0E
13804  6DE8  59 90 0B              BYTE $59,$90,$0B,$9A,$50,$0D,$4E,$94
13805  6DF0  1E 43 64              BYTE $1E,$43,$64,$15,$43,$D5,$F5,$00
13806  6DF8  D4 3F 40              BYTE $D4,$3F,$40,$39,$0F,$00,$3D,$00
13807  6E00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13808  6E08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13809  6E10  00 00 00              BYTE $00,$00,$00,$00,$00,$01,$50,$00
13810  6E18  01 54 00              BYTE $01,$54,$00,$03,$54,$00,$01,$D4
13811  6E20  00 03 D4              BYTE $00,$03,$D4,$00,$01,$74,$00,$03
13812  6E28  55 00 01              BYTE $55,$00,$01,$59,$40,$01,$66,$40
13813  6E30  00 E9 40              BYTE $00,$E9,$40,$00,$E6,$40,$03,$99
13814  6E38  00 03 A6              BYTE $00,$03,$A6,$40,$0E,$56,$40,$00
13815  6E40  99 40 3A              BYTE $99,$40,$3A,$7E,$40,$19,$39,$50
13816  6E48  85 1F 79              BYTE $85,$1F,$79,$74,$1D,$55,$30,$05
13817  6E50  E9 00 00              BYTE $E9,$00,$00,$FA,$40,$00,$E9,$40
13818  6E58  00 FA 40              BYTE $00,$FA,$40,$03,$E9,$40,$03,$FA
13819  6E60  40 03 ED              BYTE $40,$03,$ED,$40,$0F,$7A,$40,$0E
13820  6E68  7E 40 0D              BYTE $7E,$40,$0D,$BA,$40,$3E,$4F,$90
13821  6E70  39 4E 90              BYTE $39,$4E,$90,$05,$03,$D0,$F5,$03
13822  6E78  54 7D 00              BYTE $54,$7D,$00,$74,$1D,$01,$F4,$00
13823  6E80             
13824  6E80             @          
13825  6E80             INCBIN     "YOURSPRITE.SPT",69,74,TRUE       ; ENEMY RUNNING LEFT
13826  6E80             @          
13827  6E80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13828  6E88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13829  6E90  05 40 00              BYTE $05,$40,$00,$15,$40,$00,$15,$C0
13830  6E98  00 17 40              BYTE $00,$17,$40,$00,$17,$C0,$00,$15
13831  6EA0  40 00 15              BYTE $40,$00,$15,$C0,$00,$3D,$40,$00
13832  6EA8  0D 40 00              BYTE $0D,$40,$00,$1B,$00,$00,$5D,$00
13833  6EB0  00 6B 00              BYTE $00,$6B,$00,$01,$AF,$00,$01,$6E
13834  6EB8  C0 01 BE              BYTE $C0,$01,$BE,$C0,$01,$AE,$C0,$00
13835  6EC0  00 FE C0              BYTE $00,$FE,$C0,$00,$EE,$C0,$00,$6E
13836  6EC8  80 00 6D              BYTE $80,$00,$6D,$C0,$00,$6D,$00,$00
13837  6ED0  55 C0 01              BYTE $55,$C0,$01,$5A,$C0,$01,$6B,$C0
13838  6ED8  01 9E C0              BYTE $01,$9E,$C0,$01,$6B,$C0,$00,$5A
13839  6EE0  C0 00 6B              BYTE $C0,$00,$6B,$00,$00,$6F,$00,$01
13840  6EE8  AB 00 01              BYTE $AB,$00,$01,$6F,$00,$01,$AB,$00
13841  6EF0  01 6C 00              BYTE $01,$6C,$00,$00,$54,$00,$00,$7F
13842  6EF8  00 00 5F              BYTE $00,$00,$5F,$C0,$00,$05,$40,$00
13843  6F00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13844  6F08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13845  6F10  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$01,$50
13846  6F18  00 05 50              BYTE $00,$05,$50,$00,$05,$70,$00,$05
13847  6F20  D0 00 05              BYTE $D0,$00,$05,$F0,$00,$17,$50,$00
13848  6F28  55 70 01              BYTE $55,$70,$01,$6A,$50,$01,$9B,$50
13849  6F30  05 6B 00              BYTE $05,$6B,$00,$05,$AE,$00,$06,$BB
13850  6F38  00 19 FB              BYTE $00,$19,$FB,$00,$16,$BB,$00,$00
13851  6F40  BC 00 5B              BYTE $BC,$00,$5B,$AC,$00,$1F,$BB,$D0
13852  6F48  85 6D 65              BYTE $85,$6D,$65,$74,$6D,$96,$64,$15
13853  6F50  6B 10 01              BYTE $6B,$10,$01,$6E,$C0,$01,$9B,$C0
13854  6F58  00 6A C0              BYTE $00,$6A,$C0,$00,$5B,$C0,$00,$66
13855  6F60  C0 01 9A              BYTE $C0,$01,$9A,$F0,$01,$96,$B0,$06
13856  6F68  65 B0 05              BYTE $65,$B0,$05,$A6,$E0,$16,$B1,$70
13857  6F70  19 C1 B4              BYTE $19,$C1,$B4,$57,$C1,$54,$17,$00
13858  6F78  5F 6C 01              BYTE $5F,$6C,$01,$FC,$7C,$00,$F0,$00
13859  6F80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13860  6F88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13861  6F90  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$05,$40
13862  6F98  00 15 40              BYTE $00,$15,$40,$00,$15,$C0,$00,$17
13863  6FA0  40 00 17              BYTE $40,$00,$17,$C0,$00,$1D,$40,$00
13864  6FA8  55 C0 01              BYTE $55,$C0,$01,$65,$40,$01,$99,$40
13865  6FB0  01 6B 00              BYTE $01,$6B,$00,$01,$9B,$00,$00,$66
13866  6FB8  C0 01 9A              BYTE $C0,$01,$9A,$C0,$01,$95,$B0,$00
13867  6FC0  66 6C 01              BYTE $66,$6C,$01,$BD,$AC,$05,$6C,$64
13868  6FC8  85 1D 6D              BYTE $85,$1D,$6D,$F4,$0C,$55,$74,$00
13869  6FD0  6B 50 01              BYTE $6B,$50,$01,$AF,$00,$01,$6B,$00
13870  6FD8  01 AF 00              BYTE $01,$AF,$00,$01,$6B,$C0,$01,$AF
13871  6FE0  C0 01 7B              BYTE $C0,$01,$7B,$C0,$01,$AD,$F0,$01
13872  6FE8  BD B0 01              BYTE $BD,$B0,$01,$AE,$70,$06,$F1,$BC
13873  6FF0  06 B1 6C              BYTE $06,$B1,$6C,$07,$C0,$50,$15,$C0
13874  6FF8  5F 1D 00              BYTE $5F,$1D,$00,$7D,$1F,$40,$74,$00
13875  7000             
13876  7000             @          
13877  7000             INCBIN     "YOURSPRITE.SPT",75,80,TRUE       ; ENEMY RUNNING RIGHT
13878  7000             @          
13879  7000  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13880  7008  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$01
13881  7010  50 00 05              BYTE $50,$00,$05,$50,$00,$05,$70,$00
13882  7018  05 D0 00              BYTE $05,$D0,$00,$05,$F0,$00,$05,$50
13883  7020  00 05 70              BYTE $00,$05,$70,$00,$0F,$50,$00,$03
13884  7028  50 1A 06              BYTE $50,$1A,$06,$C0,$1A,$17,$40,$D0
13885  7030  19 D9 B0              BYTE $19,$D9,$B0,$69,$D5,$50,$59,$7A
13886  7038  70 6F 55              BYTE $70,$6F,$55,$40,$6B,$90,$00,$00
13887  7040  3F B0 00              BYTE $3F,$B0,$00,$3B,$B0,$00,$1B,$A0
13888  7048  00 1B 70              BYTE $00,$1B,$70,$00,$1B,$40,$00,$15
13889  7050  70 00 56              BYTE $70,$00,$56,$B0,$00,$5A,$F0,$00
13890  7058  67 B0 00              BYTE $67,$B0,$00,$5A,$F0,$00,$16,$B0
13891  7060  00 1A C0              BYTE $00,$1A,$C0,$00,$1B,$C0,$00,$6A
13892  7068  C0 00 5B              BYTE $C0,$00,$5B,$C0,$00,$6A,$C0,$00
13893  7070  5B 00 00              BYTE $5B,$00,$00,$15,$00,$00,$1F,$C0
13894  7078  00 17 F0              BYTE $00,$17,$F0,$00,$01,$50,$00,$00
13895  7080             
13896  7080             @          
13897  7080             INCBIN     "YOURSPRITE.SPT",81,82,TRUE       ; ENEMY SHOOTING RIGHT
13898  7080             @          
13899  7080  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13900  7088  00 3C 05              BYTE $00,$3C,$05,$40,$3C,$05,$50,$14
13901  7090  0D 50 14              BYTE $0D,$50,$14,$07,$50,$18,$0F,$50
13902  7098  25 05 D0              BYTE $25,$05,$D0,$19,$4D,$54,$06,$55
13903  70A0  65 05 95              BYTE $65,$05,$95,$99,$01,$5B,$A5,$00
13904  70A8  6F 99 00              BYTE $6F,$99,$00,$3E,$64,$00,$1E,$99
13905  70B0  00 39 5B              BYTE $00,$39,$5B,$00,$05,$FF,$00,$17
13906  70B8  FD 00 1F              BYTE $FD,$00,$1F,$F5,$00,$55,$55,$00
13907  70C0  00 15 55              BYTE $00,$15,$55,$01,$6F,$DD,$06,$BF
13908  70C8  FD 1A F7              BYTE $FD,$1A,$F7,$FD,$1B,$F7,$7D,$1B
13909  70D0  D5 FD 1B              BYTE $D5,$FD,$1B,$4D,$F4,$1B,$36,$E4
13910  70D8  06 5B 90              BYTE $06,$5B,$90,$05,$6E,$40,$05,$BD
13911  70E0  00 16 F4              BYTE $00,$16,$F4,$00,$16,$E4,$00,$01
13912  70E8  90 00 05              BYTE $90,$00,$05,$40,$00,$15,$40,$00
13913  70F0  55 00 00              BYTE $55,$00,$00,$14,$00,$00,$00,$00
13914  70F8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13915  7100             
13916  7100             @          
13917  7100             INCBIN     "YOURSPRITE.SPT",83,84,TRUE       ; DEAD SPRITE TO LEFT
13918  7100             @          
13919  7100  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13920  7108  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$01
13921  7110  50 00 05              BYTE $50,$00,$05,$50,$00,$05,$70,$00
13922  7118  05 D0 00              BYTE $05,$D0,$00,$05,$F0,$00,$05,$50
13923  7120  00 05 70              BYTE $00,$05,$70,$0F,$0F,$50,$17,$03
13924  7128  50 1D 06              BYTE $50,$1D,$06,$C0,$17,$17,$40,$64
13925  7130  1A D9 94              BYTE $1A,$D9,$94,$6B,$D5,$50,$5B,$BA
13926  7138  40 6F B5              BYTE $40,$6F,$B5,$40,$6B,$B0,$00,$00
13927  7140  3F B0 00              BYTE $3F,$B0,$00,$3B,$B0,$00,$1B,$A0
13928  7148  00 1B 70              BYTE $00,$1B,$70,$00,$1B,$40,$00,$15
13929  7150  70 00 56              BYTE $70,$00,$56,$B0,$00,$5A,$F0,$00
13930  7158  67 B0 00              BYTE $67,$B0,$00,$5A,$F0,$00,$16,$B0
13931  7160  00 1A C0              BYTE $00,$1A,$C0,$00,$1B,$C0,$00,$6A
13932  7168  C0 00 5B              BYTE $C0,$00,$5B,$C0,$00,$6A,$C0,$00
13933  7170  5B 00 00              BYTE $5B,$00,$00,$15,$00,$00,$1F,$C0
13934  7178  00 17 F0              BYTE $00,$17,$F0,$00,$01,$50,$00,$00
13935  7180  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13936  7188  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$01
13937  7190  50 00 05              BYTE $50,$00,$05,$50,$00,$05,$70,$00
13938  7198  05 D0 00              BYTE $05,$D0,$00,$05,$F0,$00,$05,$50
13939  71A0  00 05 70              BYTE $00,$05,$70,$00,$0F,$50,$00,$03
13940  71A8  50 00 06              BYTE $50,$00,$06,$C0,$00,$17,$40,$00
13941  71B0  1A D9 97              BYTE $1A,$D9,$97,$6B,$D5,$57,$5B,$BA
13942  71B8  57 6F B5              BYTE $57,$6F,$B5,$40,$6B,$B0,$00,$00
13943  71C0  3F B0 00              BYTE $3F,$B0,$00,$3B,$B0,$00,$1B,$A0
13944  71C8  00 1B 70              BYTE $00,$1B,$70,$00,$1B,$40,$00,$15
13945  71D0  70 00 56              BYTE $70,$00,$56,$B0,$00,$5A,$F0,$00
13946  71D8  67 B0 00              BYTE $67,$B0,$00,$5A,$F0,$00,$16,$B0
13947  71E0  00 1A C0              BYTE $00,$1A,$C0,$00,$1B,$C0,$00,$6A
13948  71E8  C0 00 5B              BYTE $C0,$00,$5B,$C0,$00,$6A,$C0,$00
13949  71F0  5B 00 00              BYTE $5B,$00,$00,$15,$00,$00,$1F,$C0
13950  71F8  00 17 F0              BYTE $00,$17,$F0,$00,$01,$50,$00,$00
13951  7200             
13952  7200             @          
13953  7200             INCBIN     "YOURSPRITE.SPT",85,88,TRUE       ; ENEMY ATTACK TO RIGHT
13954  7200             @          
13955  7200  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13956  7208  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13957  7210  05 40 00              BYTE $05,$40,$00,$05,$50,$00,$0D,$50
13958  7218  00 07 50              BYTE $00,$07,$50,$00,$0F,$50,$00,$05
13959  7220  50 F0 0D              BYTE $50,$F0,$0D,$50,$D4,$05,$F0,$74
13960  7228  05 C0 D4              BYTE $05,$C0,$D4,$03,$90,$19,$01,$D4
13961  7230  16 67 A4              BYTE $16,$67,$A4,$05,$57,$E9,$01,$AE
13962  7238  E5 01 5E              BYTE $E5,$01,$5E,$F9,$00,$0E,$E9,$00
13963  7240  00 0E FC              BYTE $00,$0E,$FC,$00,$0E,$EC,$00,$0A
13964  7248  E4 00 0D              BYTE $E4,$00,$0D,$E4,$00,$01,$E4,$00
13965  7250  0D 54 00              BYTE $0D,$54,$00,$0E,$95,$00,$0F,$A5
13966  7258  00 0E D9              BYTE $00,$0E,$D9,$00,$0F,$A5,$00,$0E
13967  7260  94 00 03              BYTE $94,$00,$03,$A4,$00,$03,$E4,$00
13968  7268  03 A9 00              BYTE $03,$A9,$00,$03,$E5,$00,$03,$A9
13969  7270  00 00 E5              BYTE $00,$00,$E5,$00,$00,$54,$00,$03
13970  7278  F4 00 0F              BYTE $F4,$00,$0F,$D4,$00,$05,$40,$00
13971  7280  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13972  7288  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13973  7290  05 40 00              BYTE $05,$40,$00,$05,$50,$00,$0D,$50
13974  7298  00 07 50              BYTE $00,$07,$50,$00,$0F,$50,$00,$05
13975  72A0  50 00 0D              BYTE $50,$00,$0D,$50,$00,$05,$F0,$00
13976  72A8  05 C0 00              BYTE $05,$C0,$00,$03,$90,$00,$01,$D4
13977  72B0  D6 67 A4              BYTE $D6,$67,$A4,$D5,$57,$E9,$D5,$AE
13978  72B8  E5 01 5E              BYTE $E5,$01,$5E,$F9,$00,$0E,$E9,$00
13979  72C0  00 0E FC              BYTE $00,$0E,$FC,$00,$0E,$EC,$00,$0A
13980  72C8  E4 00 0D              BYTE $E4,$00,$0D,$E4,$00,$01,$E4,$00
13981  72D0  0D 54 00              BYTE $0D,$54,$00,$0E,$95,$00,$0F,$A5
13982  72D8  00 0E D9              BYTE $00,$0E,$D9,$00,$0F,$A5,$00,$0E
13983  72E0  94 00 03              BYTE $94,$00,$03,$A4,$00,$03,$E4,$00
13984  72E8  03 A9 00              BYTE $03,$A9,$00,$03,$E5,$00,$03,$A9
13985  72F0  00 00 E5              BYTE $00,$00,$E5,$00,$00,$54,$00,$03
13986  72F8  F4 00 0F              BYTE $F4,$00,$0F,$D4,$00,$05,$40,$00
13987  7300             
13988  7300             @          
13989  7300             INCBIN     "YOURSPRITE.SPT",89,92,TRUE       ; ENEMY ATTACK TO LEFT
13990  7300             @          
13991  7300  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13992  7308  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13993  7310  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13994  7318  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13995  7320  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13996  7328  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13997  7330  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13998  7338  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13999  7340  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14000  7348  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14001  7350  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14002  7358  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14003  7360  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14004  7368  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14005  7370  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14006  7378  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14007  7380             
14008  7380             @          
14009  7380             INCBIN     "YOURSPRITE.SPT",93,94,TRUE       ; UNUSED
14010  7380             @          
14011  7380  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14012  7388  00 00 05              BYTE $00,$00,$05,$40,$00,$05,$50,$00
14013  7390  0D 50 00              BYTE $0D,$50,$00,$07,$50,$20,$0F,$50
14014  7398  10 05 D0              BYTE $10,$05,$D0,$34,$0D,$54,$19,$05
14015  73A0  64 26 55              BYTE $64,$26,$55,$98,$05,$5B,$A4,$05
14016  73A8  5F 98 01              BYTE $5F,$98,$01,$7E,$64,$00,$DE,$98
14017  73B0  00 79 58              BYTE $00,$79,$58,$00,$05,$FC,$00,$17
14018  73B8  F0 00 1F              BYTE $F0,$00,$1F,$F0,$00,$55,$50,$00
14019  73C0  00 55 54              BYTE $00,$55,$54,$05,$BF,$74,$1A,$FF
14020  73C8  F4 6B DF              BYTE $F4,$6B,$DF,$F4,$6F,$DD,$F4,$6F
14021  73D0  57 F4 6D              BYTE $57,$F4,$6D,$37,$D0,$6C,$DB,$90
14022  73D8  19 6E 40              BYTE $19,$6E,$40,$15,$B9,$00,$16,$F4
14023  73E0  00 5B D0              BYTE $00,$5B,$D0,$00,$5B,$90,$00,$06
14024  73E8  40 00 15              BYTE $40,$00,$15,$00,$00,$55,$00,$00
14025  73F0  54 00 00              BYTE $54,$00,$00,$50,$00,$00,$00,$00
14026  73F8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14027  7400             
14028  7400             @          
14029  7400             INCBIN     "YOURSPRITE.SPT",95,96,TRUE       ; DEAD SPRITE TO LEFT
14030  7400             @          
14031  7400  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14032  7408  00 3C 05              BYTE $00,$3C,$05,$40,$3C,$05,$50,$14
14033  7410  0D 50 14              BYTE $0D,$50,$14,$07,$50,$18,$0F,$50
14034  7418  25 05 D0              BYTE $25,$05,$D0,$19,$4D,$54,$06,$55
14035  7420  65 05 95              BYTE $65,$05,$95,$99,$01,$5B,$A5,$00
14036  7428  6F 99 00              BYTE $6F,$99,$00,$3E,$64,$00,$1E,$99
14037  7430  00 39 5B              BYTE $00,$39,$5B,$00,$05,$FF,$00,$17
14038  7438  FD 00 1F              BYTE $FD,$00,$1F,$F5,$00,$55,$55,$00
14039  7440  00 15 55              BYTE $00,$15,$55,$01,$6F,$DD,$06,$BF
14040  7448  FD 1A F7              BYTE $FD,$1A,$F7,$FD,$1B,$F7,$7D,$1B
14041  7450  D5 FD 1B              BYTE $D5,$FD,$1B,$4D,$F4,$1B,$36,$E4
14042  7458  06 5B 90              BYTE $06,$5B,$90,$05,$6E,$40,$05,$BD
14043  7460  00 16 F4              BYTE $00,$16,$F4,$00,$16,$E4,$00,$01
14044  7468  90 00 05              BYTE $90,$00,$05,$40,$00,$15,$40,$00
14045  7470  55 00 00              BYTE $55,$00,$00,$14,$00,$00,$00,$00
14046  7478  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14047  7480             
14048  7480             @          
14049  7480             INCBIN     "YOURSPRITE.SPT",97,98,TRUE       ; DEAD SPRITE TO LEFT
14050  7480             @          
14051  7480  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14052  7488  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14053  7490  54 00 01              BYTE $54,$00,$01,$55,$00,$01,$55,$00
14054  7498  01 55 00              BYTE $01,$55,$00,$01,$DD,$00,$00,$74
14055  74A0  00 01 FD              BYTE $00,$01,$FD,$00,$05,$55,$C0,$16
14056  74A8  76 F0 1A              BYTE $76,$F0,$1A,$56,$B0,$66,$56,$EC
14057  74B0  5A 6A BC              BYTE $5A,$6A,$BC,$6A,$6A,$AC,$AA,$99
14058  74B8  BB 69 9A              BYTE $BB,$69,$9A,$6F,$A6,$9A,$6B,$00
14059  74C0  A6 6F A5              BYTE $A6,$6F,$A5,$A5,$6B,$5F,$67,$DF
14060  74C8  88 5F 67              BYTE $88,$5F,$67,$C4,$01,$55,$00,$06
14061  74D0  AA C0 1A              BYTE $AA,$C0,$1A,$AA,$B0,$16,$AA,$F0
14062  74D8  1A 66 B0              BYTE $1A,$66,$B0,$16,$9A,$F0,$15,$9A
14063  74E0  B0 06 9A              BYTE $B0,$06,$9A,$C0,$05,$9B,$C0,$06
14064  74E8  9A C0 05              BYTE $9A,$C0,$05,$9B,$C0,$06,$9A,$C0
14065  74F0  05 9B C0              BYTE $05,$9B,$C0,$01,$45,$00,$07,$DF
14066  74F8  40 1F 47              BYTE $40,$1F,$47,$D0,$1D,$01,$D0,$00
14067  7500  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14068  7508  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14069  7510  54 00 01              BYTE $54,$00,$01,$55,$00,$01,$55,$00
14070  7518  01 55 00              BYTE $01,$55,$00,$01,$DD,$00,$00,$74
14071  7520  00 05 FD              BYTE $00,$05,$FD,$00,$15,$55,$C0,$59
14072  7528  75 B0 5A              BYTE $75,$B0,$5A,$56,$F0,$66,$56,$BC
14073  7530  9A 6A AC              BYTE $9A,$6A,$AC,$AA,$6A,$BC,$A6,$99
14074  7538  AF 96 9A              BYTE $AF,$96,$9A,$6B,$A5,$9A,$6F,$00
14075  7540  66 6B 5F              BYTE $66,$6B,$5F,$66,$5F,$05,$A5,$F4
14076  7548  85 02 A9              BYTE $85,$02,$A9,$F4,$01,$55,$00,$06
14077  7550  AA C0 19              BYTE $AA,$C0,$19,$AA,$B0,$16,$99,$F0
14078  7558  1A B7 B0              BYTE $1A,$B7,$B0,$16,$F6,$C0,$16,$B7
14079  7560  C0 19 F6              BYTE $C0,$19,$F6,$C0,$06,$B7,$C0,$05
14080  7568  F5 00 06              BYTE $F5,$00,$06,$B7,$40,$05,$D7,$D0
14081  7570  06 91 D0              BYTE $06,$91,$D0,$01,$41,$40,$07,$D0
14082  7578  00 1F 50              BYTE $00,$1F,$50,$00,$1D,$00,$00,$00
14083  7580  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14084  7588  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14085  7590  54 00 01              BYTE $54,$00,$01,$55,$00,$01,$55,$00
14086  7598  01 55 00              BYTE $01,$55,$00,$01,$DD,$00,$00,$74
14087  75A0  00 01 FD              BYTE $00,$01,$FD,$C0,$05,$55,$B0,$15
14088  75A8  75 EC 1A              BYTE $75,$EC,$1A,$56,$BC,$66,$56,$AC
14089  75B0  5A 6A BC              BYTE $5A,$6A,$BC,$6A,$6A,$AF,$9A,$9A
14090  75B8  6B 69 9A              BYTE $6B,$69,$9A,$6F,$A5,$99,$6B,$00
14091  75C0  F5 E9 99              BYTE $F5,$E9,$99,$50,$F5,$99,$52,$1F
14092  75C8  5A 1F 6A              BYTE $5A,$1F,$6A,$80,$00,$55,$40,$03
14093  75D0  AA 90 0E              BYTE $AA,$90,$0E,$AA,$64,$0F,$66,$94
14094  75D8  0E DE A4              BYTE $0E,$DE,$A4,$03,$9F,$94,$03,$DE
14095  75E0  94 03 9F              BYTE $94,$03,$9F,$64,$03,$DE,$90,$00
14096  75E8  5F 50 01              BYTE $5F,$50,$01,$DE,$90,$07,$D7,$50
14097  75F0  07 46 90              BYTE $07,$46,$90,$01,$41,$40,$00,$07
14098  75F8  D0 00 05              BYTE $D0,$00,$05,$F4,$00,$00,$74,$00
14099  7600             
14100  7600             @          
14101  7600             INCBIN     "YOURSPRITE.SPT",99,104,TRUE      ; ENEMY FRONT WALKING
14102  7600             @          
14103  7600  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14104  7608  00 00 54              BYTE $00,$00,$54,$00,$01,$6F,$00,$05
14105  7610  FA C0 07              BYTE $FA,$C0,$07,$AB,$C0,$06,$6A,$C0
14106  7618  05 AB C0              BYTE $05,$AB,$C0,$01,$5F,$00,$01,$A9
14107  7620  00 01 FD              BYTE $00,$01,$FD,$00,$05,$AB,$C0,$15
14108  7628  AE F0 1A              BYTE $AE,$F0,$1A,$6A,$B0,$66,$6A,$AC
14109  7630  5A 6A BC              BYTE $5A,$6A,$BC,$6A,$9D,$6C,$5A,$9D
14110  7638  AB 69 9B              BYTE $AB,$69,$9B,$6F,$A6,$9E,$5B,$00
14111  7640  A7 6F A6              BYTE $A7,$6F,$A6,$A7,$DB,$55,$A7,$D5
14112  7648  85 E5 A5              BYTE $85,$E5,$A5,$6D,$E5,$55,$6D,$55
14113  7650  AB 54 16              BYTE $AB,$54,$16,$AA,$F0,$19,$AA,$B0
14114  7658  16 DA F0              BYTE $16,$DA,$F0,$1B,$D6,$B0,$16,$DA
14115  7660  F0 1B D6              BYTE $F0,$1B,$D6,$B0,$06,$DA,$C0,$07
14116  7668  D7 C0 06              BYTE $D7,$C0,$06,$DA,$C0,$07,$D7,$C0
14117  7670  06 DA C0              BYTE $06,$DA,$C0,$01,$45,$00,$07,$DF
14118  7678  40 07 DF              BYTE $40,$07,$DF,$40,$06,$9A,$40,$00
14119  7680  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14120  7688  00 00 54              BYTE $00,$00,$54,$00,$01,$6F,$00,$05
14121  7690  FA C0 07              BYTE $FA,$C0,$07,$AB,$C0,$06,$6A,$C0
14122  7698  05 AB C0              BYTE $05,$AB,$C0,$05,$5F,$00,$01,$A9
14123  76A0  00 01 FD              BYTE $00,$01,$FD,$00,$06,$6B,$C0,$1A
14124  76A8  6A F0 16              BYTE $6A,$F0,$16,$6A,$B0,$5A,$6A,$AC
14125  76B0  66 6A BC              BYTE $66,$6A,$BC,$5A,$9E,$6C,$6A,$9B
14126  76B8  9B 9A 9B              BYTE $9B,$9A,$9B,$DB,$65,$9B,$5B,$00
14127  76C0  66 6B F5              BYTE $66,$6B,$F5,$A7,$5B,$F6,$6A,$5C
14128  76C8  85 55 A9              BYTE $85,$55,$A9,$7D,$01,$55,$7D,$06
14129  76D0  AA 94 1A              BYTE $AA,$94,$1A,$AA,$F0,$16,$A6,$B0
14130  76D8  1A BA F0              BYTE $1A,$BA,$F0,$16,$F6,$B0,$19,$B6
14131  76E0  F0 06 F6              BYTE $F0,$06,$F6,$B0,$05,$B6,$40,$06
14132  76E8  F5 D0 05              BYTE $F5,$D0,$05,$B3,$D0,$06,$F3,$40
14133  76F0  05 B5 00              BYTE $05,$B5,$00,$05,$50,$00,$07,$D0
14134  76F8  00 07 D0              BYTE $00,$07,$D0,$00,$01,$40,$00,$00
14135  7700  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14136  7708  00 00 54              BYTE $00,$00,$54,$00,$01,$6F,$00,$05
14137  7710  FA C0 07              BYTE $FA,$C0,$07,$AB,$C0,$06,$6A,$C0
14138  7718  05 AB C0              BYTE $05,$AB,$C0,$01,$5F,$00,$01,$A9
14139  7720  00 01 FD              BYTE $00,$01,$FD,$00,$05,$6B,$C0,$16
14140  7728  6A F0 19              BYTE $6A,$F0,$19,$6A,$B0,$66,$6A,$EC
14141  7730  5A 69 7C              BYTE $5A,$69,$7C,$6A,$9D,$AC,$9A,$9B
14142  7738  5B 69 9F              BYTE $5B,$69,$9F,$6F,$A6,$5B,$5B,$00
14143  7740  A7 55 65              BYTE $A7,$55,$65,$67,$7D,$55,$A7,$7D
14144  7748  85 F5 A5              BYTE $85,$F5,$A5,$55,$F5,$55,$00,$56
14145  7750  AA C0 1A              BYTE $AA,$C0,$1A,$AB,$B0,$16,$EA,$F0
14146  7758  1B 9A B0              BYTE $1B,$9A,$B0,$16,$D6,$F0,$17,$DA
14147  7760  B0 16 D6              BYTE $B0,$16,$D6,$F0,$1D,$DB,$C0,$1F
14148  7768  56 C0 1F              BYTE $56,$C0,$1F,$5B,$C0,$07,$5A,$C0
14149  7770  01 1B C0              BYTE $01,$1B,$C0,$00,$15,$00,$00,$1F
14150  7778  40 00 1F              BYTE $40,$00,$1F,$40,$00,$05,$00,$00
14151  7780             
14152  7780             @          
14153  7780             INCBIN     "YOURSPRITE.SPT",105,110,TRUE     ; ENEMY BACK WALKING
14154  7780             
14155  7780             ;===============================================================================
14156  7780             ;  LEVEL DATA
14157  7780             ;===============================================================================
14158  7780             
14159  7780             $8000
14160  7780             MAP_MEM
14161  7780             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FBK - MAP (22X21).BIN"
14162  7780             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FTEXTMULTICOLOR - MAP (22X21).BIN"
14163  7780             
14164  7780             ;INCBIN"MAPS2025/HOTEL3L - MAP (16X10).BIN"
14165  7780  00 2E 15              BYTE $00,$2E,$15,$29,$00,$2E,$29,$00,$2E,$00,$29,$00,$2E,$29,$15,$29
14166  7790  26 25 19              BYTE $26,$25,$19,$29,$25,$26,$25,$25,$26,$25,$29,$25,$26,$29,$15,$29
14167  77A0  28 2B 18              BYTE $28,$2B,$18,$29,$00,$00,$00,$28,$2B,$27,$29,$28,$2B,$29,$15,$29
14168  77B0  08 08 1A              BYTE $08,$08,$1A,$08,$08,$2F,$04,$08,$08,$08,$08,$08,$08,$08,$1A,$08
14169  77C0  2D 2D 17              BYTE $2D,$2D,$17,$2D,$0B,$01,$2D,$1E,$1D,$1F,$2D,$2D,$2D,$2D,$17,$2D
14170  77D0  24 24 16              BYTE $24,$24,$16,$0C,$03,$06,$24,$1C,$1B,$20,$23,$12,$13,$23,$16,$23
14171  77E0  22 22 0D              BYTE $22,$22,$0D,$02,$07,$0E,$22,$22,$22,$22,$22,$22,$22,$22,$22,$22
14172  77F0  14 14 05              BYTE $14,$14,$05,$14,$14,$0F,$0F,$2A,$10,$11,$2A,$0F,$14,$14,$14,$14
14173  7800  21 21 21              BYTE $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
14174  7810  21 21 21              BYTE $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
14175  7820             
14176  7820             
14177  7820             ; HOTEL MAP COLORS
14178  7820             ATTRIBUTE_MEM 
14179  7820             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FBK - CHARATTRIBS_L1.BIN"
14180  7820             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FTEXTMULTICOLOR - CHARATTRIBS_L1.BIN"
14181  7820             
14182  7820             ;INCBIN"MAPS2025/HOTEL3L - CHARATTRIBS_L1.BIN"
14183  7820  03 0A 0A              BYTE $03,$0A,$0A,$0A,$0A,$3E,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E
14184  7830  0E 0E 0E              BYTE $0E,$0E,$0E,$0E,$1E,$0A,$0A,$0A,$1E,$0B,$0A,$0A,$0A,$0A,$0A,$0A
14185  7840  0A 0A 0A              BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E,$0C
14186  7850  0C 0C 1E              BYTE $0C,$0C,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$18,$0C,$0C,$08,$0C,$0C,$0C
14187  7860  0B 0E 0E              BYTE $0B,$0E,$0E,$0E,$0C,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$0A
14188  7870  0A 0A 0A              BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E,$0E
14189  7880  0E 0E 0E              BYTE $0E,$0E,$0E,$0E,$0E,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
14190  7890  0A 0A 0A              BYTE $0A,$0A,$0A,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$0A,$0A,$0D,$0D
14191  78A0  0D 0D 0D              BYTE $0D,$0D,$0D,$0A,$0A,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$0A,$8C,$8C
14192  78B0  8C 8C 8C              BYTE $8C,$8C,$8C,$0A,$0E,$09,$0E,$09,$0E,$09,$0E,$0A,$09,$0E,$09,$0E
14193  78C0  0E 0C 0C              BYTE $0E,$0C,$0C,$0C,$0E,$0E,$0E,$0A,$0E,$0E,$0A,$0A,$0A,$0A,$0A,$0E
14194  78D0  0E 0A 0A              BYTE $0E,$0A,$0A,$0A,$0A,$0A,$0B,$0A,$0A,$0B,$0A,$0A,$0A,$0A,$0F,$0F
14195  78E0  0E 0A 0A              BYTE $0E,$0A,$0A,$0A,$0A,$0D,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$1E,$0E,$0E
14196  78F0  0C 0C 0C              BYTE $0C,$0C,$0C,$0C,$0B,$0B,$0C,$0A,$0D,$0A,$0A,$0E,$0E,$0E,$0A,$0A
14197  7900  0A 0E 0E              BYTE $0A,$0E,$0E,$0C,$0C,$0A,$0E,$0E,$0E,$0E,$0C,$0C,$0A,$0A,$0A,$0A
14198  7910  0A 0A 0A              BYTE $0A,$0A,$0A,$0A,$0E,$0C,$0B,$0B,$0B
14199  7919             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FBK - TILES.BIN"
14200  7919             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FTEXTMULTICOLOR - TILES.BIN"
14201  7919             
14202  7919             ;INCBIN"MAPS2025/HOTEL3L - TILES.BIN"
14203  7919             
14204  7919             TILE_MEM
14205  7919  00 01 00              BYTE $00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14206  7929  02 03 04              BYTE $02,$03,$04,$05,$06,$06,$05,$07,$06,$05,$08,$09,$05,$0A,$06,$0B
14207  7939  0C 0D 0E              BYTE $0C,$0D,$0E,$05,$0C,$0F,$05,$10,$0E,$05,$11,$12,$05,$13,$12,$14
14208  7949  06 15 06              BYTE $06,$15,$06,$05,$06,$16,$05,$17,$0E,$05,$11,$12,$05,$13,$12,$18
14209  7959  19 19 19              BYTE $19,$19,$19,$05,$01,$01,$05,$1A,$01,$05,$1B,$01,$05,$1C,$1D,$1D
14210  7969  1E 1F 06              BYTE $1E,$1F,$06,$05,$20,$21,$05,$22,$23,$05,$24,$25,$05,$1C,$26,$27
14211  7979  28 06 06              BYTE $28,$06,$06,$29,$2A,$06,$06,$29,$18,$18,$18,$2B,$18,$18,$18,$2B
14212  7989  2C 2D 18              BYTE $2C,$2D,$18,$18,$2E,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14
14213  7999  2F 30 30              BYTE $2F,$30,$30,$31,$32,$33,$34,$35,$36,$37,$38,$37,$39,$3A,$3B,$3C
14214  79A9  3D 3E 3E              BYTE $3D,$3E,$3E,$3F,$40,$41,$41,$42,$41,$41,$40,$42,$43,$43,$44,$45
14215  79B9  3D 3E 3E              BYTE $3D,$3E,$3E,$3F,$40,$46,$47,$48,$49,$4A,$40,$4B,$4C,$43,$44,$4D
14216  79C9  4E 4F 50              BYTE $4E,$4F,$50,$51,$06,$52,$53,$54,$55,$16,$06,$54,$56,$15,$06,$54
14217  79D9  06 06 57              BYTE $06,$06,$57,$58,$06,$59,$06,$5A,$5B,$5C,$18,$5D,$5E,$0D,$18,$5D
14218  79E9  18 18 18              BYTE $18,$18,$18,$5F,$18,$18,$60,$61,$14,$62,$63,$18,$14,$5F,$64,$18
14219  79F9  18 18 18              BYTE $18,$18,$18,$2B,$18,$18,$18,$2B,$14,$14,$14,$2B,$14,$14,$14,$2B
14220  7A09  65 65 65              BYTE $65,$65,$65,$66,$67,$67,$67,$68,$69,$6A,$25,$6B,$6C,$6D,$6E,$6F
14221  7A19  65 70 71              BYTE $65,$70,$71,$71,$72,$73,$74,$75,$76,$77,$78,$78,$79,$7A,$7A,$7A
14222  7A29  7B 7B 7C              BYTE $7B,$7B,$7C,$7D,$7E,$74,$7F,$72,$78,$78,$80,$81,$7A,$7A,$7A,$82
14223  7A39  06 83 84              BYTE $06,$83,$84,$84,$06,$85,$86,$87,$88,$89,$8A,$8A,$8B,$8C,$8C,$8C
14224  7A49  84 84 8D              BYTE $84,$84,$8D,$06,$8E,$86,$8F,$06,$8A,$8A,$90,$91,$8C,$8C,$8C,$92
14225  7A59  93 65 65              BYTE $93,$65,$65,$65,$67,$67,$67,$67,$6A,$25,$6A,$25,$6D,$6E,$6D,$6E
14226  7A69  94 95 96              BYTE $94,$95,$96,$97,$98,$99,$9A,$97,$94,$95,$96,$40,$98,$99,$9A,$40
14227  7A79  94 95 96              BYTE $94,$95,$96,$9B,$98,$99,$9A,$9B,$94,$95,$9C,$40,$9D,$9E,$9F,$A0
14228  7A89  94 95 96              BYTE $94,$95,$96,$9B,$98,$99,$9A,$9B,$94,$95,$96,$9B,$98,$99,$9A,$9B
14229  7A99  94 95 96              BYTE $94,$95,$96,$A1,$98,$99,$9A,$A1,$94,$95,$96,$A1,$98,$99,$9A,$40
14230  7AA9  94 95 96              BYTE $94,$95,$96,$A2,$98,$99,$9A,$A3,$94,$95,$96,$A2,$98,$99,$9A,$A3
14231  7AB9  94 95 96              BYTE $94,$95,$96,$A4,$98,$99,$9A,$A5,$94,$95,$96,$A6,$98,$99,$9A,$40
14232  7AC9  A7 A8 A9              BYTE $A7,$A8,$A9,$A7,$AA,$AA,$AA,$AA,$AB,$AB,$AC,$AC,$AD,$AD,$AD,$AD
14233  7AD9  06 AE AF              BYTE $06,$AE,$AF,$B0,$06,$AA,$AA,$AA,$0C,$B1,$AC,$AC,$0C,$B2,$AD,$AD
14234  7AE9  B3 B3 B3              BYTE $B3,$B3,$B3,$B4,$06,$06,$06,$06,$B5,$B6,$B6,$B7,$B8,$B9,$B9,$BA
14235  7AF9  BB BC BC              BYTE $BB,$BC,$BC,$BC,$BD,$BD,$BD,$BD,$BD,$BD,$BE,$BF,$BD,$BD,$AF,$C0
14236  7B09  B3 B3 B3              BYTE $B3,$B3,$B3,$B4,$06,$06,$06,$06,$C1,$C2,$C3,$06,$C4,$C5,$C6,$06
14237  7B19  AF B0 C7              BYTE $AF,$B0,$C7,$06,$AA,$AA,$AA,$C8,$AC,$AC,$C9,$CA,$AD,$AD,$CB,$CC
14238  7B29  18 18 18              BYTE $18,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14,$CD,$CD,$CD,$CD
14239  7B39  18 18 18              BYTE $18,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14
14240  7B49  06 06 06              BYTE $06,$06,$06,$06,$06,$06,$06,$06,$40,$CE,$CF,$18,$CF,$18,$18,$18
14241  7B59  06 06 06              BYTE $06,$06,$06,$06,$06,$06,$06,$06,$18,$18,$18,$18,$18,$18,$18,$18
14242  7B69  D0 D1 D0              BYTE $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$D3,$D2,$D3,$D2,$D2,$D3,$D2,$D3
14243  7B79  D0 D1 D0              BYTE $D0,$D1,$D0,$D1,$D2,$D4,$D5,$D6,$D6,$D2,$D6,$D2,$D6,$D2,$D6,$D2
14244  7B89  A1 A1 A1              BYTE $A1,$A1,$A1,$A1,$40,$D7,$40,$D8,$D9,$DA,$97,$97,$DB,$DC,$DD,$DD
14245  7B99  A1 A1 A1              BYTE $A1,$A1,$A1,$A1,$D8,$40,$DE,$40,$97,$97,$DF,$E0,$DD,$DD,$E1,$E2
14246  7BA9  A1 E3 E4              BYTE $A1,$E3,$E4,$A1,$D8,$E3,$E4,$40,$97,$E3,$E4,$97,$D8,$E3,$E4,$A1
14247  7BB9  65 65 65              BYTE $65,$65,$65,$65,$72,$E5,$72,$72,$40,$E6,$E7,$40,$44,$E8,$E9,$44
14248  7BC9  A1 A1 A1              BYTE $A1,$A1,$A1,$A1,$01,$EA,$EB,$40,$EC,$ED,$EE,$EF,$44,$F0,$F1,$44
14249  7BD9  06 06 06              BYTE $06,$06,$06,$F2,$06,$06,$06,$F2,$06,$06,$06,$F2,$06,$06,$06,$F2
14250  7BE9  F3 B4 4F              BYTE $F3,$B4,$4F,$4F,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
14251  7BF9  00 F4 F5              BYTE $00,$F4,$F5,$00,$40,$F6,$F7,$40,$00,$F8,$F8,$40,$00,$00,$00,$00
14252  7C09  19 19 19              BYTE $19,$19,$19,$19,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14253  7C19             
14254  7C19             ;*******************************************************************************
14255  7C19             ;                          BACK ALLEY MAP
14256  7C19             ;*******************************************************************************
14257  7C19             
14258  7C19             ;CHARSET_DATA
14259  7C19             ;* = $4800
14260  7C19             MAP2_CHAR_MEM 
14261  7C19             
14262  7C19             *=$8000
14263  8000             MAP2_MEM
14264  8000  25 00 02              BYTE $25,$00,$02,$02,$02,$02,$02,$20,$00,$25,$00,$00,$24,$00,$00,$25
14265  8010  00 00 00              BYTE $00,$00,$00,$01,$1F,$03,$1F,$03,$21,$00,$00,$00,$23,$23,$00,$00
14266  8020  00 00 22              BYTE $00,$00,$22,$00,$02,$02,$02,$02,$02,$20,$22,$00,$00,$23,$23,$00
14267  8030  0A 25 08              BYTE $0A,$25,$08,$0D,$00,$01,$1F,$04,$1F,$03,$21,$0D,$00,$00,$23,$23
14268  8040  00 0A 00              BYTE $00,$0A,$00,$07,$0E,$06,$06,$06,$05,$06,$06,$06,$0E,$19,$1A,$10
14269  8050  0F 0F 26              BYTE $0F,$0F,$26,$27,$0F,$12,$11,$13,$11,$12,$16,$17,$18,$11,$11,$11
14270  8060  11 12 13              BYTE $11,$12,$13,$11,$11,$12,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
14271  8070  15 15 15              BYTE $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
14272  8080  15 15 15              BYTE $15,$15,$15,$15,$15,$15,$15,$15,$1E,$1B,$1E,$1E,$1E,$1B,$1E,$1E
14273  8090  1E 1B 1E              BYTE $1E,$1B,$1E,$1E,$15,$15,$15,$15,$1E,$1D,$1C,$1D,$1C,$1D,$1C,$1D
14274  80A0  1C 1D 1C              BYTE $1C,$1D,$1C,$1D,$1C,$1D,$1C,$1D,$1C,$1D
14275  80AA             
14276  80AA             ;COLOR_DATA
14277  80AA             ATTRIBUTE2_MEM 
14278  80AA  03 0C 0A              BYTE $03,$0C,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E,$0A,$0A,$0A,$0A
14279  80BA  0A 0A 0A              BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$09,$0B
14280  80CA  0B 0B 0B              BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0E,$0E
14281  80DA  0E 0A 0A              BYTE $0E,$0A,$0A,$0A,$0A,$0A,$0A,$0F,$0A,$0A,$0A,$0F,$0A,$0F,$0F,$0A
14282  80EA  0A 0A 0A              BYTE $0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0E,$0E,$0E,$0B
14283  80FA  0E 0B 0B              BYTE $0E,$0B,$0B,$0B,$0E,$0B,$0B,$0B,$0E,$0B,$0B,$0B,$0E,$0B,$0B,$0B
14284  810A  0B 0B 0B              BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
14285  811A  0B 0B 0B              BYTE $0B,$0B,$0B,$1A,$1A,$1A,$1A,$1A,$1A,$1F,$1A,$1F,$1A,$1A,$1A,$1E
14286  812A  1E 1E 1E              BYTE $1E,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$1A,$1A,$1A,$1A,$1E,$1E,$1E,$1E
14287  813A  1E 1A 1A              BYTE $1E,$1A,$1A,$1A,$1E,$1A,$1E,$1E,$1E,$1A,$0E,$0E,$5E,$0E,$0D,$0D
14288  814A  5E 5E 5E              BYTE $5E,$5E,$5E,$5E,$5E,$5E,$5E,$5E,$0E,$0C,$0D,$0E,$0E,$0E,$0E,$0E
14289  815A  0E 0E 0E              BYTE $0E,$0E,$0E,$0B,$0B,$0A,$0A,$09,$09,$09,$09,$09,$0E,$0E,$0F,$0E
14290  816A  0E 0E 0A              BYTE $0E,$0E,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0A,$0E,$0A
14291  817A  0A 0E 0A              BYTE $0A,$0E,$0A,$0A,$0E,$0A,$0E,$0E,$0E,$09,$0E,$0E,$0E,$0E,$0E,$0E
14292  818A  0E 0E 0E              BYTE $0E,$0E,$0E,$0E,$0F,$0B,$0B,$09,$0E,$0E,$0E,$0C,$0C,$0A,$09,$09
14293  819A  0D 0E 0E              BYTE $0D,$0E,$0E,$0E,$0C,$0C,$0A
14294  81A1             
14295  81A1             
14296  81A1             ;TILES_DATA
14297  81A1             TILE2_MEM
14298  81A1  00 01 00              BYTE $00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14299  81B1  02 03 04              BYTE $02,$03,$04,$05,$02,$02,$06,$07,$02,$03,$04,$05,$02,$02,$06,$07
14300  81C1  08 09 0A              BYTE $08,$09,$0A,$0B,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F,$02,$03,$10,$05
14301  81D1  02 03 10              BYTE $02,$03,$10,$05,$02,$02,$10,$05,$02,$03,$10,$05,$02,$03,$10,$05
14302  81E1  11 12 13              BYTE $11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$18,$15,$1C,$1D,$18
14303  81F1  1E 1F 20              BYTE $1E,$1F,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D
14304  8201  2E 2F 2F              BYTE $2E,$2F,$2F,$30,$31,$32,$32,$33,$31,$32,$32,$33,$34,$35,$35,$36
14305  8211  37 38 38              BYTE $37,$38,$38,$39,$3A,$3B,$3B,$3C,$3A,$3B,$3D,$3C,$3A,$3E,$3F,$3C
14306  8221  37 40 41              BYTE $37,$40,$41,$39,$3A,$42,$43,$3C,$3A,$3B,$3D,$3C,$3A,$3E,$3F,$3C
14307  8231  44 45 46              BYTE $44,$45,$46,$47,$44,$45,$46,$47,$44,$45,$46,$47,$44,$45,$46,$47
14308  8241  48 49 49              BYTE $48,$49,$49,$4A,$49,$4B,$49,$4A,$49,$49,$48,$4A,$49,$49,$49,$4A
14309  8251  44 44 44              BYTE $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44
14310  8261  44 4C 44              BYTE $44,$4C,$44,$44,$44,$4C,$44,$44,$44,$4C,$44,$44,$4D,$4E,$44,$44
14311  8271  44 4C 44              BYTE $44,$4C,$44,$44,$44,$4C,$44,$44,$44,$4C,$44,$44,$44,$4C,$44,$44
14312  8281  4F 50 51              BYTE $4F,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E
14313  8291  5F 60 61              BYTE $5F,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$5D,$6D
14314  82A1  4F 6E 51              BYTE $4F,$6E,$51,$6F,$53,$70,$55,$71,$57,$72,$59,$5A,$5B,$6C,$5D,$5E
14315  82B1  73 73 73              BYTE $73,$73,$73,$73,$74,$74,$74,$74,$74,$74,$74,$74,$75,$76,$76,$77
14316  82C1  73 73 73              BYTE $73,$73,$73,$73,$74,$74,$74,$74,$74,$74,$74,$74,$78,$78,$78,$78
14317  82D1  73 73 73              BYTE $73,$73,$73,$73,$74,$74,$74,$74,$74,$79,$74,$74,$7A,$7B,$7A,$7A
14318  82E1  73 73 73              BYTE $73,$73,$73,$73,$74,$74,$74,$74,$74,$74,$74,$74,$74,$74,$74,$74
14319  82F1  7C 04 7C              BYTE $7C,$04,$7C,$04,$7D,$7C,$04,$7C,$7C,$04,$7C,$04,$04,$7C,$04,$7C
14320  8301  73 73 7E              BYTE $73,$73,$7E,$7F,$74,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$8A
14321  8311  7F 7F 7F              BYTE $7F,$7F,$7F,$7F,$8B,$8C,$8B,$8C,$86,$86,$8D,$8E,$8F,$90,$91,$92
14322  8321  7F 93 94              BYTE $7F,$93,$94,$94,$82,$95,$74,$74,$96,$97,$74,$74,$8F,$90,$39,$98
14323  8331  99 9A 9A              BYTE $99,$9A,$9A,$9A,$9B,$9C,$9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4,$A5,$A6
14324  8341  9A 9A 9A              BYTE $9A,$9A,$9A,$A7,$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AB,$AF,$AF,$B0,$B1
14325  8351  B2 B2 B2              BYTE $B2,$B2,$B2,$B2,$B3,$B4,$B5,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3
14326  8361  B6 B6 B6              BYTE $B6,$B6,$B6,$B6,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7
14327  8371  B6 B6 B6              BYTE $B6,$B6,$B6,$B8,$B7,$B7,$B9,$BA,$B7,$B9,$BA,$B7,$B9,$BA,$B7,$B7
14328  8381  B2 B2 B2              BYTE $B2,$B2,$B2,$B2,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3
14329  8391  02 03 04              BYTE $02,$03,$04,$05,$02,$BB,$BC,$07,$02,$BD,$BE,$05,$02,$BF,$C0,$07
14330  83A1  02 C1 C2              BYTE $02,$C1,$C2,$C3,$C4,$C5,$C6,$C7,$C8,$C9,$CA,$CB,$02,$CC,$C2,$C3
14331  83B1  02 CD CE              BYTE $02,$CD,$CE,$CF,$02,$D0,$D1,$D2,$02,$D0,$CE,$C3,$02,$D3,$D1,$D4
14332  83C1  00 D5 D6              BYTE $00,$D5,$D6,$D7,$44,$4C,$00,$D8,$44,$4C,$00,$00,$00,$4C,$00,$00
14333  83D1  D9 DA D9              BYTE $D9,$DA,$D9,$DB,$DC,$DD,$DC,$DE,$D9,$DA,$D9,$DF,$DC,$DD,$DC,$E0
14334  83E1  00 00 00              BYTE $00,$00,$00,$00,$00,$44,$44,$00,$00,$44,$44,$00,$00,$E1,$E2,$44
14335  83F1  00 00 00              BYTE $00,$00,$00,$00,$00,$E3,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14336  8401  E4 60 61              BYTE $E4,$60,$61,$62,$E5,$64,$55,$E6,$57,$E7,$E8,$E9,$5B,$88,$EA,$EB
14337  8411  EC 60 61              BYTE $EC,$60,$61,$62,$ED,$EE,$EF,$71,$F0,$E9,$F1,$F2,$F3,$F4,$91,$F5
14338  8421  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14339  8431  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14340  8441             
14341  8441             DEBUGGER   BYTE 1
14342  8441             
14343  8441             
14344  8441             

******* 400 Label(s) *******
$8000 = $7780 
. = $3618 
` = $35F4 
` = $3697 
ActiveTimer = $35D9 
addrhi = $0DBE 
addrlo = $0DBD 
ADMIN_TEST_DISPLAY = $3B96 
admintest = $3888 
ALLEYMAP_LINE_LOOKUP_HI = $23B6 
ALLEYMAP_LINE_LOOKUP_LO = $23A0 
ANIM_CLIMB_POLE = $3629 
ANIM_ENEMY_ATTACK_LEFT = $3671 
ANIM_ENEMY_ATTACK_RIGHT = $366D 
ANIM_ENEMY_BULLET = $3683 
ANIM_ENEMY_CLIMB_ROPE = $367F 
ANIM_ENEMY_FIRING_LEFT = $3669 
ANIM_ENEMY_FIRING_RIGHT = $3665 
ANIM_ENEMY_IDLE = $3654 
ANIM_ENEMY_LEFT_DEAD = $367A 
ANIM_ENEMY_RIGHT_DEAD = $3675 
ANIM_ENEMY_WALK_D = $3660 
ANIM_ENEMY_WALK_L = $365C 
ANIM_ENEMY_WALK_R = $3658 
ANIM_NPC1 = $3687 
ANIM_NPC2 = $368B 
ANIM_NPC3 = $368F 
ANIM_NPC4 = $3693 
ANIM_PLAYER_FALL = $3626 
ANIM_PLAYER_IDLE = $3618 
ANIM_PLAYER_JUMP = $362E 
ANIM_PLAYER_KICK_L = $3647 
ANIM_PLAYER_KICK_R = $3643 
ANIM_PLAYER_PUNCH_L = $3637 
ANIM_PLAYER_PUNCH_R = $3633 
ANIM_PLAYER_SHOOT_LEFT = $363F 
ANIM_PLAYER_SHOOT_RIGHT = $363B 
ANIM_PLAYER_SWIM_L = $3650 
ANIM_PLAYER_SWIM_R = $364C 
ANIM_PLAYER_WALK_L = $3621 
ANIM_PLAYER_WALK_R = $361C 
AnimateSprite = $3456 
AnimateStreetLight = $0E13 
AnimateTiles = $0DE0 
AnimationRoutine = $0BBD 
animLevel = $1032 
AnimScreenControl = $0E2F 
ApplyGravity = $11F8 
ATTRIB_ADDRESS = $2349 
ATTRIB_ADDRESS = $236E 
ATTRIBUTE_MEM = $7820 
ATTRIBUTE2_MEM = $80AA 
BIT_TABLE = $3C6D 
buffer_index = $3198 
BUTTON_ACTION = $3C6C 
BUTTON_PRESSED = $3C6B 
ChangeEnAnimState = $1AA9 
ChangeEnemyStage = $1A9B 
ChangeEnemyState = $1A80 
ChangePlayerState = $11D1 
CheckBlockUnder = $0A15 
checkdown = $1019 
checkdownright = $101C 
checkleft = $101A 
CheckMoveDown = $0977 
CheckMoveLeft = $08BD 
CheckMoveRight = $091A 
CheckMoveUp = $09C5 
checkright = $101B 
checkup = $1018 
checkupleft = $184F 
checkupright = $184E 
clear_chsetdata = $0DC7 
ClearChsetMemory = $0DBF 
ClearColorRam = $20D5 
clearing = $0DCB 
ClearScreen1 = $20AD 
ClearScreen2 = $20C1 
COLLIDER_ATTR = $0AC2 
COLOR_LINE_OFFSET_TABLE_HI = $2186 
COLOR_LINE_OFFSET_TABLE_LO = $216D 
ColorShiftDown = $2C26 
ColorShiftLeft = $29C0 
ColorShiftRight = $2B38 
ColorShiftUp = $2BB2 
continue_copy2 = $0C7C 
continue_copyalley = $0C46 
continue_copyanim = $0E04 
copy_alley_tiles = $0CB2 
copy_lights = $0E25 
copy_loopanimate = $0DF4 
copy_loopforalley = $0C36 
copy_loopset2 = $0C6C 
copy_outer_loop = $0C95 
CopyChars = $0F39 
CopyHorizontalBuffer = $30F5 
CopyLeftBuffer = $3199 
CopyRightBuffer = $30F5 
CopyToBuffer = $20E9 
CopyVerticalBuffer = $302A 
CURRENT_LEVEL = $236D 
DetectKeyPress = $0BF2 
detectScreen = $1FE9 
DetectSprite = $1390 
DisableEnemySprite = $1A3D 
display = $0E88 
DisplayByte = $2016 
DisplayNewSprite = $1357 
DisplaySpriteInfo = $3884 
DisplaySpriteInfoNow = $3888 
DisplayText = $2054 
done = $0C8A 
done2 = $0C54 
doneanim = $0E12 
DrawDownBuffer = $2CD0 
DrawDownColor = $2D28 
DrawLeftBuffer = $2D48 
DrawLeftColor = $2E40 
DrawMap = $21D1 
DrawRightBuffer = $2EB9 
DrawRightColor = $2FB1 
DrawTile = $221F 
DrawUpBuffer = $2C9A 
DrawUpColor = $2D0C 
ENANIM_STATE = $1F6D 
ENEMY_BULLETS = $1F93 
ENEMY_COLLIDER_ATTR = $3883 
ENEMY_DATA = $1F67 
ENEMY_DISTANCE = $35DD 
ENEMY_FALL_POS = $1F84 
ENEMY_FALL_SPEED_TABLE = $1F85 
ENEMY_FALLFLAG = $1F6C 
ENEMY_HIT = $35DE 
ENEMY_JUMP_POS = $1F6E 
ENEMY_JUMP_TABLE = $1F6F 
ENEMY_JUMP_TABLE_SIZE = $1F83 
ENEMY_JUMPUPLEFT = $1F6B 
ENEMY_JUMPUPRIGHT = $1F6A 
ENEMY_SPEED = $1F92 
ENEMY_SPRITE_CHAR_POS_X = $35EF 
ENEMY_SPRITE_CHAR_POS_Y = $3610 
ENEMY_SPRITE_DELTA_TRIM_X = $35F7 
ENEMY_SPRITE_POS_X = $35DF 
ENEMY_SPRITE_POS_X_DELTA = $35E7 
ENEMY_SPRITE_POS_X_EXTEND = $35FF 
ENEMY_SPRITE_POS_Y = $3600 
ENEMY_SPRITE_POS_Y_DELTA = $3608 
ENEMY_STATE = $1F67 
ENEMY_STATE_JUMPTABLE = $1A46 
ENEMY_SUBSTAGE = $1F69 
ENEMY_SUBSTAGE_JUMPTABLE = $1A66 
ENEMY_SUBSTATE = $1F68 
ENEMY_TIMER = $1F90 
ENEMY_TIMER2 = $1F91 
EnemyActionState = $1B71 
EnemyCheckBlockUnder = $37ED 
EnemyCheckMoveDown = $3751 
EnemyCheckMoveLeft = $3697 
EnemyCheckMoveRight = $36F4 
EnemyCheckMoveUp = $379D 
ENEMYCOLCHAR = $0AC4 
EnemyCountDown = $35DB 
ENEMYDOWNCAP = $1F8F 
EnemyFireCD = $35DC 
EnemyFireRightTimer = $1BF6 
EnemyRandomTimer = $1AFF 
EnemySetup = $1860 
EnemyState_Framework = $1F48 
EnemyStateAttackLeft = $1D37 
EnemyStateAttackRight = $1D19 
EnemyStateBullet = $1BC4 
EnemyStateFiringLeft = $1CC7 
EnemyStateFiringRight = $1C9B 
EnemyStateIdle = $1BD8 
EnemyStateJump = $1E60 
EnemyStateKickL = $1F1D 
EnemyStateKickR = $1EF2 
EnemyStateLeftDead = $1D76 
EnemyStatePunchL = $1DC9 
EnemyStatePunchR = $1D97 
EnemyStateRightDead = $1D55 
EnemyStateRope = $1DF9 
EnemyStateWalkDown = $1CF1 
EnemyStateWalkL = $1C73 
EnemyStateWalkR = $1B9C 
EnemyTestBlocking = $3853 
EnemyTimer = $35DA 
EnemyToCharPos = $330E 
EnemytoPlayerCollision = $1AE2 
EnemyVisible = $1B5B 
FetchBufferLineAddress = $1FE7 
FetchPlayfieldLineAddress = $1FC1 
FILE_LENGTH_TABLE = $0DB8 
file_not_found = $0D51 
filehi = $0DA2 
filelo = $0DA1 
FILENAME_TABLE_HI = $0DB2 
FILENAME_TABLE_LO = $0DAD 
filename1 = $0D57 
filename2 = $0D65 
filename3 = $0D72 
filename4 = $0D82 
filename5 = $0D91 
FIRE_LEFT = $1F95 
FIRE_RIGHT = $1F94 
FiringHoldCD = $1F96 
FiringHoldState = $1C5C 
flength = $0DA0 
FlipBits = $3362 
GAME_PANEL_DISPLAY = $3AC8 
gamedeve.net/blog/949/entry-2250107-a-c64-game-step-7' = $1F6E 
gamescore = $102D 
GetLineAddress = $1FDD 
GetScreenLineAddress = $1FE2 
HORIZONTAL_BUFFER = $3244 
HORIZONTAL_COLOR_BUFFER = $325A 
hotelchars = $0DB7 
IDLE_VAR = $1330 
InitEnemyAnim = $3529 
InitRasterIRQ = $0AC6 
InitSpriteAnim = $34FD 
IrqGlitchCatcher = $0B39 
IrqScoreBoard = $0B98 
IrqTopScreen = $0AF2 
JOY_NW = $3C6A 
JOY_X = $3C67 
JOY_Y = $3C68 
JoyButton = $0F0F 
JoystickReady = $10AE 
last_part2 = $0C7F 
last_partalley = $0C49 
last_partofanim = $0E07 
LOAD_ADDRESS_TABLE_HI = $0DA8 
LOAD_ADDRESS_TABLE_LO = $0DA3 
Load_AlleyTiles = $0CB4 
Load_Tiles = $0C97 
LoadAlleyMap = $0C22 
LoadAlleyTiles = $0CA8 
LoadChsetFromDisk = $0CC5 
LoadChsetFromDisk2 = $0D0B 
LoadColors = $0C04 
LoadColorsLoop = $0C06 
LoadHotelMap = $0C55 
LoadNewTiles = $0C8B 
LoadScreen = $0C13 
LoadScreenLoop = $0C15 
LSP_GAME_SWITCH = $3556 
MainLoop = $08A8 
MAP_ADDRESS = $2372 
MAP_CHAR_MEM = $3C75 
MAP_LINE_LOOKUP_HI = $2374 
MAP_LINE_LOOKUP_LO = $2374 
MAP_MEM = $7780 
MAP2_CHAR_MEM = $7C19 
MAP2_MEM = $8000 
MAP2025_LINE_LOOKUP_HI = $238A 
MAP2025_LINE_LOOKUP_LO = $2374 
maptwoloaded = $1034 
MoveBulletLeft = $1A15 
MoveBulletRight = $19ED 
MoveEnemyDown = $1964 
MoveEnemyLeft = $18FF 
MoveEnemyRight = $1896 
MoveEnemyUp = $19B8 
MovePlayerDown = $1143 
MovePlayerLeft = $1104 
MovePlayerRight = $10BE 
MovePlayerUp = $117D 
MoveSpriteDown = $3436 
MoveSpriteLeft = $33BD 
MoveSpriteRight = $33EF 
MoveSpriteUp = $341B 
NE_DIR = $3C69 
no_key = $0C03 
PLAYER_DIRECTION = $1F98 
PLAYER_JUMP_POS = $1852 
PLAYER_JUMP_TABLE = $1853 
PLAYER_JUMPCOUNT = $364B 
PLAYER_SPEED = $185E 
PLAYER_STATE = $1850 
PLAYER_STATE_JUMPTABLE = $11B5 
PLAYER_SUBSTATE = $1851 
PLAYER_TIMER = $185D 
PlayerInit = $1035 
PlayerStateFloating = $172B 
PlayerStateIdle = $1230 
PlayerStateJump = $17BE 
PlayerStateKickLeft = $15AF 
PlayerStateKickRight = $158C 
PlayerStatePole = $15D2 
PlayerStatePunchLeft = $14CB 
PlayerStatePunchRight = $1488 
PlayerStateShootLeft = $1552 
PlayerStateShootRight = $150F 
PlayerStateSwimL = $16EB 
PlayerStateSwimR = $16AB 
PlayerStateWalkLeft = $142D 
PlayerStateWalkRight = $13AE 
PlayertoEnemyCollis = $1331 
PlotATile = $0E4F 
plotdigit = $0EA3 
PRG_START = $0810 
ReadCharsetAddress = $0F8A 
ReadJoystick = $0EAE 
RepositionSprite = $3386 
ResetEnemytoPlayerVertical = $1ACD 
RIVER_ANIM1_HI = $101E 
RIVER_ANIM1_LO = $101D 
RIVER_ANIM2_HI = $1020 
RIVER_ANIM2_LO = $101F 
RIVER_ANIM3_HI = $1022 
RIVER_ANIM3_LO = $1021 
RIVER_ANIM4_HI = $1024 
RIVER_ANIM4_LO = $1023 
riverAnimation = $0F8F 
riverAnimation2 = $0FED 
RSP_GAME_SWITCH = $3555 
SCORE_CHAR_MEM = $5800 
SCORE_LINE_OFFSET_TABLE_HI = $21B8 
SCORE_LINE_OFFSET_TABLE_LO = $219F 
ScoreBoard = $0E5A 
SCREEN_LINE_OFFSET_TABLE_HI = $2122 
SCREEN_LINE_OFFSET_TABLE_LO = $2109 
Screen_Setup = $083A 
SCREEN1_LINE_OFFSET_TABLE_HI = $2122 
SCREEN1_LINE_OFFSET_TABLE_LO = $2109 
SCREEN2_LINE_OFFSET_TABLE_HI = $2154 
SCREEN2_LINE_OFFSET_TABLE_LO = $213B 
SCROLL_FIX_SKIP = $3243 
ScrollDown = $25AA 
ScrollLeft = $25F2 
ScrollRight = $264B 
ScrollUp = $255D 
SetEnemyFiringLeft = $1B51 
SetEnemyFiringRight = $1B50 
SetEnemyLeft = $1B52 
SetEnemyRight = $1B47 
SetEnemyState = $1ABF 
SetSpriteImage = $34F1 
ShiftCharsDown = $27B2 
ShiftCharsLeft = $28BF 
ShiftCharsRight = $2A38 
ShiftCharsUp = $26A5 
sloop = $0E8C 
SPRITE_ANIM_COUNT = $35B9 
SPRITE_ANIM_PLAY = $35C1 
SPRITE_ANIM_TIMER = $35B1 
SPRITE_ANIMATION = $35C9 
SPRITE_CHAR_POS_X = $3578 
SPRITE_CHAR_POS_Y = $3599 
SPRITE_CONSOLE_TEXT = $39F7 
SPRITE_DELTA_TRIM_X = $3580 
SPRITE_DEPTH = $355F 
SPRITE_DIRECTION_X = $35A1 
SPRITE_DIRECTION_Y = $35A9 
SPRITE_IS_ACTIVE = $3560 
SPRITE_POS_X = $3568 
SPRITE_POS_X_DELTA = $3570 
SPRITE_POS_X_EXTEND = $3588 
SPRITE_POS_Y = $3589 
SPRITE_POS_Y_DELTA = $3591 
Sprite_Setup = $0892 
SPRITE_STACK = $3557 
SPRITE_Y_ADJUST = $0AC5 
SpriteToCharPos = $32C0 
StartAlleyMap = $1399 
StartHotelMap = $1218 
SwapScreens = $1F99 
System_Setup = $082C 
TestBlocking = $0A81 
TILE_ADDRESS = $2370 
TILE_DATA = $0AC3 
TILE_MEM = $7919 
TILE_NUMBER_LOOKUP_HI = $240D 
TILE_NUMBER_LOOKUP_LO = $23CC 
TILE2_MEM = $81A1 
TILE2_NUMBER_LOOKUP_HI = $248E 
TILE2_NUMBER_LOOKUP_LO = $244D 
TileDraw = $22ED 
TileMap = $229F 
UpdateEnemy = $1887 
UpdateEnemyState = $1AAF 
UpdatePlayer = $109F 
UpdatePlayerState = $11E7 
UpdateScroll = $24CF 
UpdateTimers = $0BE6 
VERTICAL_BUFFER = $3270 
VERTICAL_COLOR_BUFFER = $3298 
VIC_DATA_INCLUDES = $3C75 
WaitFrame = $0BD7 
WaitToFireCD = $1F97 
WaterAnimation = $0F6B 
waterSpeed = $1840 
waterSpeed = $185F 
WhichKey = $0E43 
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = $21D1 
ZP1 = $1025 
ZP2 = $1027 
ZP3 = $1029 
ZP4 = $102B 

******* 135 Unused label(s) *******
$8000
.
@adjY
@adjY
@beginCount
@beginMoveRoutine
@blockedLeft
@blockedLeft
@blockedRight
@blockedRight
@blocking
@blocking
@blockingUnder
@blockingUnder
@bodySprite0
@butPress
@butPress
@butPress
@butPress
@buttonAction
@buttonNotPressed
@buttonTest
@cantMove
@cantMoveUp
@changeSpriteColor
@check_left
@checkbelow240
@checkdiagonals
@checkFloor
@checkJoyJumping
@checkJoystick
@checkLeft
@checkLeft
@checkLeft2
@checkLeft2
@checkRight
@checkRight
@checkUp
@checkUp
@checkUp2
@checkUp2
@checkUpLeft
@checkWater
@checkWaterCollis
@checkWaterUp
@clearLoop
@clearLoop
@clearLoop
@contAnim
@contJump
@contLeftCheck
@contRightCheck
@copy_screen1
@CopyCharactersDone
@copyfm1
@copyFm1
@copyFm1
@copyFm1
@copyfm2
@copyFm2
@copyFm2
@copyFm2
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop1
@copyloop1
@copyloop1
@copyloop1
@copyloop1
@copyloop2
@copyloop2
@copyloop2
@copyloop2
@copyloop2
@copyloop2
@decNoChange
@deltaFinished
@deltaLess
@done
@done
@done
@done
@done
@done
@done
@done
@done
@done
@doneJoy
@doneJoy
@doneJoy
@doneJoy
@doorEntrance
@doorEntrance
@doorEntrance
@down
@down
@down
@down
@down
@downBlocked
@downBlocked
@downCheck
@downCheck
@downCheck2
@downCheck2
@downDone
@downDone
@downMove
@downMove
@downMove
@downScroll
@downScroll
@drawloop
@drawloop
@end
@end
@end
@end
@end
@end
@end_enemytimer
@endClimb
@endMarkerReached
@enemyCDReached
@enemymovesdownPole
@enemyTimerComplete
@enterhoteldoor
@exit
@exitFloating
@exitKey
@exitLeft
@exitLoop
@exitLoop
@exitPoleClimb
@exitRight
@exitRightIdle
@exitStage
@falling
@fetchtile
@fetchtile
@fetchTile
@fireholdDone
@fix_done
@fix_down
@fix_frame
@fix_left
@fix_right
@fix_up
@foundCouch
@foundCouch
@fr_0
@fr_1
@fr_2
@fr_3
@fr_4
@fr_5
@fr_6
@fr_7
@frame0
@frame0
@frame0
@frame0
@frame1
@frame1
@frame2
@frame2
@frame3
@frame4
@frame4
@frame4
@frame5
@frame5
@frame6
@frame6
@frame7
@frame7
@frame7
@frame7
@goFloor
@goingDown
@goingUp
@goLadder
@goLeft
@goRight
@goRopeClimb
@horizCheck
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@incTimer
@inlineLoop
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@joyCheck
@joyCheck
@joyCheck
@joychkOnPole
@joyready
@jumpBlocked
@jumpComplete
@jumpContinue
@jumping
@jumping
@jumping
@jumping
@jumpOn
@lastDigit
@left
@left
@left
@left
@left
@left
@leftDone
@leftDone
@leftenemyIsDown
@leftJump
@leftMove
@leftMove
@leftWaterMove
@less
@level2colors
@level2leftcolors
@level2leftiles
@level2leftmap
@level2rightcolors
@level2tilemap
@level2tilemap
@leveltworightmap
@leveltwovertmap
@lineBreak
@loadalleymap2
@loadmapanimate
@loop
@loop
@loop1
@map2collisfound
@missedLeftPunch
@missedLeftShot
@missedRightPunch
@missedRightShot
@moveBulletLeft
@moveBulletRight
@moveDownPole
@moveDownPole
@moveEnSprite
@moveLeft
@moveLeft
@moveRight
@moveRight
@movespritedown
@moveSpriteUp
@moveUp
@movingDirLeftSprite
@movingDirRightSprite
@new_tile
@newtile
@newtile
@newtile
@newTile
@NextLine
@noAdjustY
@noAdjustY
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjY
@noAdjY
@noAdjY
@noAdjY
@noAdjY
@noAdjY
@noAdjY
@noAdjY
@noChangeInExtendedFlag
@noChangeInExtendedFlag
@nodownMove
@noEnemyCollis
@noEnemyCollis
@noExtendedX
@noExtendedX
@nolevel2colors
@noPoleFound
@noRope
@notFound
@notile2load
@PageBoundryNotReached
@playerCanJump
@playerIsFalling
@playerNotFalling
@poleFound
@poleNotAbove
@poleNotBelow
@pressUpLeft
@pressUpRight
@readyToFire
@reset_delta
@reset_delta
@reset_delta
@resetDelta
@resetJump
@resetLoop
@resetPing
@resetPong
@resetvertPos
@returnClear
@returnClear
@right
@right
@right
@right
@right
@right
@rightCheck2
@rightCheck2
@rightDone
@rightDone
@rightenemyIsDown
@rightJump
@rightMove
@rightMove
@rightWaterMove
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running2
@score
@screen1
@screen1
@screen1
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2_scene1
@screen2_scene2
@scroll
@scroll
@scroll
@scroll
@scroll
@scroll
@scroll
@scrollingDown
@scrollingUp
@scrollLeft
@scrollLeft
@scrollRight
@scrollRight
@scrollwater1
@scrollwater2
@secondSprite
@setBodySprite0
@setHeadSprite0
@setImage
@shiftPixelsRight
@shootToLeft
@shootToRight
@skipalleymap
@skipalleymap
@skipalleymap2
@skipLeftGravity
@skiplevel2leftcolors
@skiplevel2leftmap
@skiplevel2rightcolors
@skiplevel2tiles
@skipmap2collis
@skipRightGravity
@skiptile2load
@special_under
@special_under
@spriteFallCheck
@spriteFalls
@spriteHit
@start
@start
@start
@start
@stillFalling
@stopClimb
@store2
@store5
@testDown
@testDownRight
@testLeft
@testRight
@testUp
@testUpLeft
@tileloop
@tileloop
@tileloop
@timerCheck
@timernotFound
@underCheck
@underCheck
@undercheck2
@undercheck2
@up
@up
@up
@up
@upBlocked
@upBlocked
@update
@update
@update
@updateSlowTimer
@upDone
@upDone
@upMove
@upMove
@upScroll
@upScroll
@verifyLeftPosition
@verifyRightPosition
@vert_check
@vert_check
@vertCheck
@vertCheck
@vertCheck
@vertCheck
@WaitStep2
@waitToFire
@writeDigit
@zerocheck
`
`
ANIM_NPC2
ANIM_NPC3
ANIM_NPC4
ANIM_PLAYER_FALL
AnimateStreetLight
AnimateTiles
AnimationRoutine
AnimScreenControl
ATTRIB_ADDRESS
ATTRIB_ADDRESS
ChangeEnAnimState
ChangeEnemyStage
ClearColorRam
ClearScreen1
ClearScreen2
CopyChars
CopyRightBuffer
CURRENT_LEVEL
DetectKeyPress
DisableEnemySprite
DisplayNewSprite
DisplaySpriteInfo
ENEMY_DATA
ENEMY_FALL_POS
ENEMY_FALL_SPEED_TABLE
ENEMY_FALLFLAG
ENEMY_JUMP_POS
ENEMY_JUMP_TABLE
ENEMY_JUMP_TABLE_SIZE
ENEMY_JUMPUPLEFT
ENEMY_JUMPUPRIGHT
ENEMY_SPRITE_CHAR_POS_X
ENEMY_SPRITE_DELTA_TRIM_X
ENEMY_TIMER2
EnemyCheckMoveLeft
EnemyCheckMoveRight
EnemyRandomTimer
EnemyState_Framework
EnemyStateAttackLeft
EnemyStateAttackRight
EnemyStateBullet
EnemyStateIdle
EnemyStateJump
EnemyStateKickL
EnemyStateKickR
EnemyStatePunchL
EnemyStatePunchR
EnemyStateRope
EnemyStateWalkL
EnemyStateWalkR
EnemyToCharPos
EnemytoPlayerCollision
FetchBufferLineAddress
filename1
filename2
filename3
filename4
filename5
FlipBits
GAME_PANEL_DISPLAY
gamedeve.net/blog/949/entry-2250107-a-c64-game-step-7'
InitEnemyAnim
JOY_NW
Load_AlleyTiles
LoadAlleyMap
LoadAlleyTiles
LoadChsetFromDisk2
LoadColors
LoadScreen
LSP_GAME_SWITCH
MAP_LINE_LOOKUP_HI
MAP_LINE_LOOKUP_LO
MAP_MEM
MAP2_MEM
MoveBulletLeft
MoveBulletRight
MoveEnemyUp
PLAYER_JUMPCOUNT
PLAYER_SPEED
PLAYER_TIMER
PlayerStateFloating
PlayerStateIdle
PlayerStateJump
PlayerStateKickLeft
PlayerStateKickRight
PlayerStatePole
PlayerStatePunchLeft
PlayerStatePunchRight
PlayerStateShootLeft
PlayerStateShootRight
PlayerStateSwimL
PlayerStateSwimR
PlayerStateWalkLeft
PlayerStateWalkRight
PlotATile
PRG_START
ReadCharsetAddress
RepositionSprite
RIVER_ANIM1_HI
RIVER_ANIM1_LO
RIVER_ANIM2_HI
RIVER_ANIM2_LO
RIVER_ANIM4_HI
RIVER_ANIM4_LO
riverAnimation
riverAnimation2
RSP_GAME_SWITCH
SCORE_CHAR_MEM
SCREEN_LINE_OFFSET_TABLE_HI
SCREEN_LINE_OFFSET_TABLE_LO
Screen_Setup
SetEnemyFiringLeft
SetEnemyFiringRight
SetEnemyState
SPRITE_CONSOLE_TEXT
SPRITE_DIRECTION_X
SPRITE_DIRECTION_Y
Sprite_Setup
SPRITE_Y_ADJUST
System_Setup
TILE_ADDRESS
TILE_DATA
VIC_DATA_INCLUDES
WaterAnimation
waterSpeed
WhichKey
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
ZP1
ZP2
ZP3
ZP4

******* 214 Variable(s) *******
alleymap  = $4802
BOTTOM_DRAW_LINE  = $0011
charload  = $4802
CHRADR1  = $4E18
CHRADR2  = $4AC8
CHRADR3  = $4C58
CHRADR4  = $4F58
CIA_PRA  = $DD00
CIA1_TIMA_HI  = $DC05
CIA1_TIMA_LO  = $DC04
CIA1_TIMB_HI  = $DC07
CIA1_TIMB_LO  = $DC06
COLL_CLEAR  = $0000
COLL_COUCH  = $0080
COLL_DOOR  = $0050
COLL_FLOOR  = $0010
COLL_POLE  = $0030
COLL_ROPE  = $0030
COLL_STAIR  = $0020
COLL_WATER  = $0040
COLOR_BLACK  = $0000
COLOR_BLUE  = $0006
COLOR_BROWN  = $0009
COLOR_CYAN  = $0003
COLOR_GREEN  = $0005
COLOR_GREY1  = $000B
COLOR_GREY2  = $000C
COLOR_GREY3  = $000F
COLOR_LTBLUE  = $000E
COLOR_LTGREEN  = $000D
COLOR_LTRED  = $000A
COLOR_MEM  = $D800
COLOR_ORANGE  = $0008
COLOR_RED  = $0002
COLOR_VIOLET  = $0004
COLOR_WHITE  = $0001
COLOR_YELLOW  = $0007
CONSOLE_DISPLAY  = $3884
CONSOLE_TEXT  = $39F7
CURRENT_BUFFER  = $0027
CURRENT_SCREEN  = $0025
ENEMY_DOWN_CAP  = $000F
ENEMY_LEFT_CAP  = $0003
ENEMY_RIGHT_CAP  = $0032
ENEMY_SPRITE_DELTA_OFFSET_X  = $0008
ENEMY_SPRITE_DELTA_OFFSET_Y  = $000E
ENEMY_STATE_ATTACK_LEFT  = $0016
ENEMY_STATE_ATTACK_RIGHT  = $0014
ENEMY_STATE_FIRING_LEFT  = $001E
ENEMY_STATE_FIRING_RIGHT  = $001C
ENEMY_STATE_IDLE  = $0000
ENEMY_STATE_JUMP  = $000A
ENEMY_STATE_KICK_L  = $0012
ENEMY_STATE_KICK_R  = $0010
ENEMY_STATE_LEFT_DEAD  = $001A
ENEMY_STATE_PUNCH_L  = $000E
ENEMY_STATE_PUNCH_R  = $000C
ENEMY_STATE_RIGHT_DEAD  = $0018
ENEMY_STATE_ROPE  = $0008
ENEMY_STATE_WALK_D  = $0006
ENEMY_STATE_WALK_L  = $0004
ENEMY_STATE_WALK_R  = $0002
ENEMY_SUBSTAGE_RUNNING  = $0001
ENEMY_SUBSTATE_ENTER  = $0000
ENEMY_SUBSTATE_RUNNING  = $0001
ENEMY_UP_CAP  = $0004
ENMAP_X_DELTA  = $0036
ENMAP_X_POS  = $0034
ENMAP_Y_DELTA  = $0037
ENMAP_Y_POS  = $0035
INT_CONTROL  = $DC0D
JOY_2  = $DC00
LEVEL_1_MAP  = $E000
MAP_DOWN_LIMIT  = $000A
MAP_POS_ADDRESS  = $002E
MAP_RIGHT_LIMIT  = $0011
MAP_X_DELTA  = $0032
MAP_X_POS  = $0030
MAP_Y_DELTA  = $0033
MAP_Y_POS  = $0031
NUMBER_OF_SPRITES_DIV_4  = $0003
PARAM1  = $0003
PARAM2  = $0004
PARAM3  = $0005
PARAM4  = $0006
PARAM5  = $0007
PLAYER_DOWN_CAP  = $000A
PLAYER_LEFT_CAP  = $0009
PLAYER_RIGHT_CAP  = $0011
PLAYER_STATE_FLOATING  = $0018
PLAYER_STATE_IDLE  = $0000
PLAYER_STATE_JUMP  = $001A
PLAYER_STATE_KICK_LEFT  = $0010
PLAYER_STATE_KICK_RIGHT  = $000E
PLAYER_STATE_POLE  = $0012
PLAYER_STATE_PUNCH_LEFT  = $0008
PLAYER_STATE_PUNCH_RIGHT  = $0006
PLAYER_STATE_SHOOT_LEFT  = $000C
PLAYER_STATE_SHOOT_RIGHT  = $000A
PLAYER_STATE_SWIM_L  = $0016
PLAYER_STATE_SWIM_R  = $0014
PLAYER_STATE_WALK_LEFT  = $0004
PLAYER_STATE_WALK_RIGHT  = $0002
PLAYER_SUBSTATE_ENTER  = $0000
PLAYER_SUBSTATE_RUNNING  = $0001
PLAYER_UP_CAP  = $0004
PORT_A  = $DC00
PROC_PORT  = $0001
SCORE_SCREEN  = $5800
SCREEN1_MEM  = $4000
SCREEN2_MEM  = $4400
SCROLL_COUNT_X  = $0029
SCROLL_COUNT_Y  = $002A
SCROLL_DIRECTION  = $002C
SCROLL_DOWN  = $0004
SCROLL_LEFT  = $0002
SCROLL_MOVING  = $002D
SCROLL_RIGHT  = $0001
SCROLL_SPEED  = $002B
SCROLL_STOP  = $0000
SCROLL_UP  = $0003
SLOW_TIMER  = $0009
SPRITE_0_PTR  = $43F8
SPRITE_1_PTR  = $43F9
SPRITE_2_PTR  = $43FA
SPRITE_3_PTR  = $43FB
SPRITE_4_PTR  = $43FC
SPRITE_5_PTR  = $43FD
SPRITE_6_PTR  = $43FE
SPRITE_7_PTR  = $43FF
SPRITE_BASE  = $0070
SPRITE_DELTA_OFFSET_X  = $0008
SPRITE_DELTA_OFFSET_Y  = $000E
SPRITE_POINTER_BASE  = $43F8
SPRITE_POINTER_BASE1  = $43F8
SPRITE_POINTER_BASE2  = $47F8
SPRITE_POINTER_BASE3  = $47F8
tgt_c64  = $0001
TILE_DEPTH1  = $0010
TILE_DEPTH10  = $00A0
TILE_DEPTH11  = $00B0
TILE_DEPTH12  = $00C0
TILE_DEPTH13  = $00D0
TILE_DEPTH14  = $00E0
TILE_DEPTH15  = $00F0
TILE_DEPTH16  = $0100
TILE_DEPTH17  = $0110
TILE_DEPTH18  = $0120
TILE_DEPTH19  = $0130
TILE_DEPTH2  = $0020
TILE_DEPTH20  = $0140
TILE_DEPTH21  = $0150
TILE_DEPTH3  = $0030
TILE_DEPTH4  = $0040
TILE_DEPTH5  = $0050
TILE_DEPTH6  = $0060
TILE_DEPTH7  = $0070
TILE_DEPTH8  = $0080
TILE_DEPTH9  = $0090
TILE2_DEPTH1  = $0011
TILE2_DEPTH10  = $00AA
TILE2_DEPTH11  = $00BB
TILE2_DEPTH12  = $00CC
TILE2_DEPTH13  = $00DD
TILE2_DEPTH14  = $00EE
TILE2_DEPTH15  = $00FF
TILE2_DEPTH16  = $0110
TILE2_DEPTH17  = $0121
TILE2_DEPTH18  = $0132
TILE2_DEPTH19  = $0143
TILE2_DEPTH2  = $0022
TILE2_DEPTH20  = $0154
TILE2_DEPTH21  = $0165
TILE2_DEPTH3  = $0033
TILE2_DEPTH4  = $0044
TILE2_DEPTH5  = $0055
TILE2_DEPTH6  = $0066
TILE2_DEPTH7  = $0077
TILE2_DEPTH8  = $0088
TILE2_DEPTH9  = $0099
tilesload  = $8000
TIMER  = $0008
TYPE_LOOP  = $00FF
TYPE_PING_PONG  = $00FD
TYPE_PLAY_ONCE  = $00FE
VIC_BACKGROUND_COLOR  = $D021
VIC_BANK  = $DD00
VIC_BORDER_COLOR  = $D020
VIC_CHARSET_MULTICOLOR_1  = $D022
VIC_CHARSET_MULTICOLOR_2  = $D023
VIC_CHARSET_MULTICOLOR_3  = $D024
VIC_CONTROL  = $D016
VIC_INTERRUPT_CONTROL  = $D01A
VIC_MASK_IRQ  = $D019
VIC_MEMORY_CONTROL  = $D018
VIC_RASTER_LINE  = $D012
VIC_SCREEN_CONTROL  = $D011
VIC_SCREEN_CONTROL_X  = $D016
VIC_SCREEN_CONTROL_Y  = $D011
VIC_SPRITE_COLOR  = $D027
VIC_SPRITE_ENABLE  = $D015
VIC_SPRITE_MULTICOLOR  = $D01C
VIC_SPRITE_MULTICOLOR_1  = $D025
VIC_SPRITE_MULTICOLOR_2  = $D026
VIC_SPRITE_X_EXTEND  = $D010
VIC_SPRITE_X_POS  = $D000
VIC_SPRITE_Y_POS  = $D001
WPARAM1  = $000A
WPARAM2  = $000C
WPARAM3  = $000E
ZEROPAGE_POINTER_1  = $0017
ZEROPAGE_POINTER_2  = $0019
ZEROPAGE_POINTER_3  = $0021
ZEROPAGE_POINTER_4  = $0023
******* -391 Unused variables(s) *******
alleymap
charload
CIA_PRA
CIA1_TIMA_HI
CIA1_TIMA_LO
CIA1_TIMB_HI
CIA1_TIMB_LO
COLL_CLEAR
COLOR_GREY3
COLOR_LTBLUE
COLOR_LTGREEN
COLOR_ORANGE
COLOR_RED
COLOR_VIOLET
CONSOLE_DISPLAY
CONSOLE_TEXT
ENEMY_LEFT_CAP
ENEMY_RIGHT_CAP
ENEMY_SPRITE_DELTA_OFFSET_X
ENEMY_SPRITE_DELTA_OFFSET_Y
ENEMY_STATE_ATTACK_LEFT
ENEMY_STATE_ATTACK_RIGHT
ENEMY_STATE_FIRING_LEFT
ENEMY_STATE_FIRING_RIGHT
ENEMY_STATE_KICK_L
ENEMY_STATE_KICK_R
ENEMY_STATE_LEFT_DEAD
ENEMY_STATE_PUNCH_L
ENEMY_STATE_PUNCH_R
ENEMY_STATE_RIGHT_DEAD
ENEMY_SUBSTATE_ENTER
ENEMY_SUBSTATE_RUNNING
ENMAP_X_DELTA
ENMAP_X_POS
MAP_DOWN_LIMIT
MAP_RIGHT_LIMIT
NUMBER_OF_SPRITES_DIV_4
PARAM5
PLAYER_STATE_KICK_LEFT
PLAYER_STATE_KICK_RIGHT
PLAYER_STATE_PUNCH_LEFT
PLAYER_STATE_PUNCH_RIGHT
PORT_A
SCROLL_SPEED
SPRITE_0_PTR
SPRITE_1_PTR
SPRITE_2_PTR
SPRITE_3_PTR
SPRITE_4_PTR
SPRITE_5_PTR
SPRITE_6_PTR
SPRITE_7_PTR
SPRITE_DELTA_OFFSET_X
SPRITE_POINTER_BASE
SPRITE_POINTER_BASE1
SPRITE_POINTER_BASE2
SPRITE_POINTER_BASE3
tgt_c64
TILE_DEPTH1
TILE_DEPTH10
TILE_DEPTH11
TILE_DEPTH12
TILE_DEPTH13
TILE_DEPTH14
TILE_DEPTH15
TILE_DEPTH16
TILE_DEPTH17
TILE_DEPTH18
TILE_DEPTH19
TILE_DEPTH2
TILE_DEPTH20
TILE_DEPTH21
TILE_DEPTH3
TILE_DEPTH4
TILE_DEPTH5
TILE_DEPTH6
TILE_DEPTH7
TILE_DEPTH8
TILE_DEPTH9
TILE2_DEPTH1
TILE2_DEPTH10
TILE2_DEPTH11
TILE2_DEPTH12
TILE2_DEPTH13
TILE2_DEPTH14
TILE2_DEPTH15
TILE2_DEPTH16
TILE2_DEPTH17
TILE2_DEPTH18
TILE2_DEPTH19
TILE2_DEPTH2
TILE2_DEPTH20
TILE2_DEPTH21
TILE2_DEPTH3
TILE2_DEPTH4
TILE2_DEPTH5
TILE2_DEPTH6
TILE2_DEPTH7
TILE2_DEPTH8
TILE2_DEPTH9
tilesload
VIC_CHARSET_MULTICOLOR_3
VIC_CONTROL
VIC_MASK_IRQ
VIC_SPRITE_X_POS
VIC_SPRITE_Y_POS
WPARAM2
WPARAM3

