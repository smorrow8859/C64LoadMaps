00001  0000                        ;===============================================================================
00002  0001             ; COMMODORE 64: "HOTEL MAP"
00003  0001             ;
00004  0001             ; FILE: PROJECT 12-13: "ENEMY ATTACKS"
00005  0001             ;===============================================================================
00006  0001                        
00007  0001             ; BUGS FOUND: WHEN SCROLLING THE SCREEN, SOMETIMES THE WALL DETECTION IS NOT FOUND
00008  0001             ; AND SPRITE PASSES THROUGH IT.
00009  0001             
00010  0001             ; SPRITE ANIMATION LOOPING IS OFF. THE ANIMATION IS RUNNING FAST
00011  0001             ; SPRITE IDLE ANIMATION IS NOT SHOWING.
00012  0001             ;===============================================================================
00013  0001             ; SCROLLING MAP EXAMPLE 1 - C64 YOUTUBE GAME PROJECT
00014  0001             ; 2016/17 - PETER 'SIG' HEWETT AKA RETROROMICON (CONTRIBUTIONS)
00015  0001             ; ADDITIONAL CODING BY STEVE MORROW
00016  0001             ;===============================================================================
00017  0001             OPERATOR   CALC        ; IMPORTANT - CALCULATIONS ARE MADE BEFORE HI/LO BYTES
00018  0001                        ;             IN PRECIDENCE (FOR EXPRESSIONS AND TABLES)
00019  0001             ;===============================================================================
00020  0001             ; DEFINITIONS
00021  0001             ;===============================================================================
00022  0001             ;===============================================================================
00023  0001             ; VIC II REGISTER INCLUDE FILE
00024  0001             ;===============================================================================
00025  0001             ; PETER 'SIG' HEWETT AKA RETROROMICON
00026  0001             ; - 2016
00027  0001             ;===============================================================================
00028  0001             
00029  0001             ; VIC II REGISTERS
00030  0001             VIC_SPRITE_X_POS =  $D000        ; INCREMENT BY 2 BYTES FOR THE NEXT SPRITE X POS
00031  0001             VIC_SPRITE_Y_POS =  $D001        ; INCREMENT BY 2 BYTES FOR THE NEXT SPRITE Y POS
00032  0001             VIC_SPRITE_X_EXTEND =  $D010        ; BITS #0 - 7 : EXTENDED X BIT FOR SPRITES 0-7
00033  0001             
00034  0001             VIC_SCREEN_CONTROL_Y =  $D011
00035  0001             VIC_SCREEN_CONTROL =  $D011        ; SCREEN CONTROL REGISTER 1
00036  0001                        ; BITS #0-#2: VERTICAL RASTER SCROLL
00037  0001                        ; BIT #3 : SCREEN HEIGHT 0 = 24 ROWS 1 = 25 ROWS
00038  0001                        ; BIT #4 : 0 = SCREEN OFF  1 = SCREEN ON (NORMAL FUNCTION)
00039  0001                        ; BIT #5 : 0 = TEXT MODE ; 1 = BITMAP MODE
00040  0001                        ; BIT #6 : 1 = EXTENDED BACKGROUND MODE ON
00041  0001                        ; BIT #7 : READ CURRENT RASTER LINE (BIT #8)
00042  0001                        ;          WRITE: RASTER LINE TO GENERATE INTERRUPT AT (BIT #8)
00043  0001                        ;
00044  0001             
00045  0001             VIC_RASTER_LINE =  $D012        ; READ: CURRENT RASTER LINE (BITS #0-#7)
00046  0001                        ; WRITE: RASTER LINE TO GENERATE INTERRUPT AT (BITS #0-#7).
00047  0001                        
00048  0001             VIC_SPRITE_ENABLE =  $D015        ; (53269) SET BITS 0-8 TO ENABLE REPECTIVE SPRITE
00049  0001             
00050  0001             VIC_SCREEN_CONTROL_X =  $D016
00051  0001             VIC_CONTROL =  $D016        ; SCREEN CONTROL REGISTER 2
00052  0001                        ; BITS #0-#2 : HORIZONTAL RASTER SCROLL
00053  0001                        ; BIT #3 : SCREEN WIDTH ; 0 = 38 COLS 1 = 40 COLS
00054  0001                        ; BIT #4 : 1 = MULTICOLOR MODE ON
00055  0001                        ; DEFAULT : $C8 (%11001000)
00056  0001                        
00057  0001             VIC_MEMORY_CONTROL =  $D018        ; MEMORY SETUP REGISTER BITS
00058  0001                        ; BITS #1-#3 IN TEXT MODE ARE A POINTER
00059  0001                        ; TO CHARACTER MEMORY RELATIVE TO VIC_BANK ($DD00)
00060  0001                        ;       %000, 0 : $0000-$07FF
00061  0001                        ;       %001, 1 : $0800-$0FFF
00062  0001                        ;       %010, 2 : $1000-$17FF
00063  0001                        ;       %011, 3 : $1800-$1FFF
00064  0001                        ;       %100, 4 : $2000-$27FF
00065  0001                        ;       %101, 5 : $2800-$2FFF
00066  0001                        ;       %110, 6 : $3000-$37FF
00067  0001                        ;       %111, 7 : $3800-$3FFF
00068  0001                        ; VALUES %010 AND %011 IN VIC BANK #0 AND #2
00069  0001                        ; SELECT CHARACTER ROM INSTEAD
00070  0001                        ;
00071  0001                        ; IN BITMAP MODE, POINTER TO BITMAP MEMORY
00072  0001                        ; (BIT #13) RELATIVE TO VIC_BANK ADDRESS ($DD00)
00073  0001                        ;       %0XX, 0 : $0000-$1FFFF
00074  0001                        ;       %1XX, 4 : $2000-$3FFFF
00075  0001                        ;
00076  0001                        ; BITS #4-#7 : POINTER TO SCREEN MEMORY (BITS #10-#13)
00077  0001                        ; RELATIVE TO VIC_BANK ADDRESS ($DD00)
00078  0001                        ;       %0000, 0  : $0000 - $03FF
00079  0001                        ;       %0001, 1  : $0400 - $07FF
00080  0001                        ;       %0010, 2  : $0800 - $0BFF
00081  0001                        ;       %0011, 3  : $0C00 - $0FFF
00082  0001                        ;       %0100, 4  : $1000 - $13FF
00083  0001                        ;       %0101, 5  : $1400 - $17FF
00084  0001                        ;       %0110, 6  : $1800 - $1BFF
00085  0001                        ;       %0111, 7  : $1C00 - $1FFF
00086  0001                        ;       %1000, 8  : $2000 - $23FF
00087  0001                        ;       %1001, 9  : $2400 - $27FF
00088  0001                        ;       %1010, 10 : $2800 - $2BFF
00089  0001                        ;       %1011, 11 : $2C00 - $2FFF
00090  0001                        ;       %1100, 12 : $3000 - $33FF
00091  0001                        ;       %1101, 13 : $3400 - $37FF
00092  0001                        ;       %1110, 14 : $3800 - $3BFF
00093  0001                        ;       %1111, 15 : $3C00 - $3FFF
00094  0001             
00095  0001             VIC_MASK_IRQ =  $D019
00096  0001             
00097  0001             VIC_INTERRUPT_CONTROL =  $D01A        ; (53274) INTERRUPT CONTROL REGISTER
00098  0001                        ;  BIT #0 1 = RASTER INTERUPT ENABLED
00099  0001                        ;  BIT #1 1 = SPRITE - BACKGROUND COLLISION INTERUPT ENABLED
00100  0001                        ;  BIT #2 1 = SPRITE - SPRITE COLLISION INTERRUPT ENABLED
00101  0001                        ;  BIT #3 1 = LIGHT PEN INTERRUPT ENABLED
00102  0001             
00103  0001             VIC_SPRITE_MULTICOLOR =  $D01C        ; (53276) SPRITE MULTICOLOR MODE REGISTER
00104  0001                        ;  #BIT - SET INDIVIDUAL SPRITES TO MULTICOLOR
00105  0001                        ;  BIT #X = 0 - SPRITEX IS SINGLE COLOR 1 = SPRITE X IS MULTICOLOR
00106  0001                        ;
00107  0001             
00108  0001             VIC_BORDER_COLOR =  $D020        ; (53280) BORDER COLOR
00109  0001             VIC_BACKGROUND_COLOR =  $D021        ; (53281) BACKGROUND COLOR
00110  0001             VIC_CHARSET_MULTICOLOR_1 = $D022        ; (53282) EXTRA BACKGROUND COLOR 1 - MULTICOLOR 1
00111  0001             VIC_CHARSET_MULTICOLOR_2 = $D023        ; (53283) EXTRA BACKGROUND COLOR 2 - MULTICOLOR 2
00112  0001             VIC_CHARSET_MULTICOLOR_3 = $D024        ; (53284) EXTRA BACKGROUND COLOR 3
00113  0001             VIC_SPRITE_MULTICOLOR_1 =  $D025        ; (53285) SPRITE EXTRA COLOR 1
00114  0001             VIC_SPRITE_MULTICOLOR_2 =  $D026        ; (53286) SPRITE EXTRA COLOR 2
00115  0001             VIC_SPRITE_COLOR =  $D027        ; (53287) SPRITE COLOR ($D027 - $D02E = SPRITES 0 - 7)
00116  0001             
00117  0001             ; CIA REGISTERS
00118  0001             PORT_A     = $DC00        ; CIA PORT A - JOYSTICK #2
00119  0001             JOY_2      = $DC00        ; KEYBOARD MATRIX COLUMNS AND JOYSTICK #2
00120  0001                        ; READ BITS:
00121  0001                        ;       BIT #0 0 = PORT 2 JOYSTICK UP PRESSED
00122  0001                        ;       BIT #1 0 = PORT 2 JOYSTICK DOWN PRESSED
00123  0001                        ;       BIT #2 0 = PORT 2 JOYSTICK LEFT PRESSED
00124  0001                        ;       BIT #3 0 = PORT 2 JOYSTICK RIGHT PRESSED
00125  0001                        ;       BIT #4 0 = PORT 2 JOYSTICK FIRE PRESSED
00126  0001                        ; WRITE BITS:
00127  0001                        ;       BIT #X : 0 = SELECT KEYBOARD MATRIX COLUMN #X
00128  0001                        ;       BIT #6-#7 : PADLE SELECTION %01 = PADDLE 1; #10 = PADDLE #2
00129  0001             
00130  0001                        
00131  0001             INT_CONTROL = $DC0D        ; INTERRUPT CONTROL AND STATUS REGISTER
00132  0001                        ; READ BITS
00133  0001                        ;   #0 - 1 = TIMER A UNDERFLOW OCCURRED
00134  0001                        ;   #1 - 1 = TIMER B UNDERFLOW OCCURRED
00135  0001                        ;   #2 - 1 = TOD IS EQUAL TO ALARM TIME
00136  0001                        ;   #3 - 1 = A COMPLETE BYTE HAS BEEN RECEIVED INTO OR
00137  0001                        ;            SENT FROM SERIAL SHIFT REGISTER
00138  0001                        ;   #4 - SIGNAL LEVEL ON FLAG PIN, DATASETTE INPUT
00139  0001                        ;   #7 - AN INTERRUPT HAS BEEN GENERATED
00140  0001                        ;
00141  0001                        ; WRITE BITS
00142  0001                        ;   #0 - 1 = ENABLE INTERRUPTS GENERATED BY TIMER A UNDERFLOW
00143  0001                        ;   #1 - 1 = ENABLE INTERRUPTS GENERATED BY TIMER B UNDERFLOW
00144  0001                        ;   #2 - 1 = ENABLE TOD ALARM INTERRUPT
00145  0001                        ;   #3 - 1 = ENABLE INTERRUPTS GENERATED BY A BYTE HAVING BEEN
00146  0001                        ;                        RECIEVED/SENT VIA SERIAL SHIFT REGISTER
00147  0001                        ;   #4 - 1 = ENABLE INTERRUPTS GENERATED BY POSITIVY EDGE ON FLAG PIN
00148  0001                        ;   #7 - FILL BIT ; BITS #0-#6 THAT ARE SET TO 1, GET THEIR VALUES FROM
00149  0001                        ;        THIS BIT; BITS #0-#6, THAT ARE SET TO 0, ARE LEFT UNCHANGED
00150  0001             
00151  0001             VIC_BANK   = $DD00
00152  0001             CIA_PRA    = $DD00        ; CIA#2 - PORT_A, SERIAL BUS ACCESS
00153  0001                        ; BITS #0-#1 : VIC BANK VALUES
00154  0001                        ;       %00 - BANK #3 - $C000 - $FFFF
00155  0001                        ;       %01 - BANK #2 - $8000 - $BFFF
00156  0001                        ;       %10 - BANK #1 - $4000 - $7FFF
00157  0001                        ;       %11 - BANK #0 - $0000 - $3FFF
00158  0001                        ; BIT #2 - RS232 TXD LINE, OUTPUT BIT
00159  0001                        ; BIT #3 - SERIAL BUS ATN OUT; 0 = HIGH; 1 = LOW
00160  0001                        ; BIT #4 - SERIAL BUS CLOCK OUT; 0 - HIGH; 1 = LOW
00161  0001                        ; BIT #5 - SERIAL BUS DATA OUT; 0 - LOW ; 1 = HIGH
00162  0001                        ; BIT #6 - SERIAL BUS CLOCK IN; 0 = LOW; 1 = HIGH
00163  0001                        ; BIT #7 - SERIAL BUS DATA IN; 0 = LOW; 1 = HIGH
00164  0001                        
00165  0001             ;-------------------------------------------------------------------------------
00166  0001             ; ZERO PAGE
00167  0001             ;-------------------------------------------------------------------------------
00168  0001             PROC_PORT  = $0001
00169  0001             ; BITS #0 - #2 : CONFIGURATION FOR MEMORY AREAS $A000-$BFFF,
00170  0001                        ; $D000-$DFFF AND $E000-$FFFF
00171  0001             ;       VALUES :  %X00 :  RAM VISIBLE IN ALL 3 AREAS
00172  0001             ;                 %X01 :  RAM VISIBLE AT $A000-$BFFF AND $E000-$FFFF
00173  0001             ;                 %X10 :  RAM VISIBLE AT $A000-$BFFF ; KERNAL ROM VISIBLE AT $E000-$FFFF
00174  0001             ;                 %X11 :  BASIC ROM VISIBLE AT $A000-$BFFF; KERNAL ROM VISIBLE AT $E000-$FFFF
00175  0001             ;                 %1XX :  I/O AREA VISIBLE AT $D000-$DFFF (EXCEPT FOR THE VALUE %100, SEE ABOVE)
00176  0001             ;
00177  0001             ; BIT #3 : DATASETTE OUTPUT SIGNAL LEVEL
00178  0001             ; BIT #4 : DATASETTE BUTTON STATUS;  0 = ONE OR MORE OF PLAY,RECORD,FFWD OR REW PRESSED
00179  0001             ;                                    1 = NO BUTTON PRESSED
00180  0001             ; BIT #5 : DATASETTE MOTOR CONTROL; 0 = ON; 1 = OFF
00181  0001             ;
00182  0001             ; DEFAULT: #$37, %00110111
00183  0001             ;-------------------------------------------------------------------------------
00184  0001             ; COLORS
00185  0001             ;-------------------------------------------------------------------------------
00186  0001             COLOR_BLACK = 0
00187  0001             COLOR_WHITE = 1
00188  0001             COLOR_RED  = 2
00189  0001             COLOR_CYAN = 3
00190  0001             COLOR_VIOLET = 4
00191  0001             COLOR_GREEN = 5
00192  0001             COLOR_BLUE = 6
00193  0001             COLOR_YELLOW = 7
00194  0001             COLOR_ORANGE = 8
00195  0001             COLOR_BROWN = 9
00196  0001             COLOR_LTRED = 10
00197  0001             COLOR_GREY1 = 11
00198  0001             COLOR_GREY2 = 12
00199  0001             COLOR_LTGREEN = 13
00200  0001             COLOR_LTBLUE = 14
00201  0001             COLOR_GREY3 = 15
00202  0001             ;===============================================================================
00203  0001             ; CBM PRG STUDIO MACROS
00204  0001             ;===============================================================================
00205  0001             ; - PETER 'SIG' HEWETT
00206  0001             ; 2016
00207  0001             ;-------------------------------------------------------------------------------
00208  0001             ;  HELPER MACROS TO SHORTEN REPEDATIVE TASKS AND MAKE MORE READABLE CODE
00209  0001             ;-------------------------------------------------------------------------------
00210  0001             ;-------------------------------------------------------------------------------
00211  0001             ; LOADPOINTER
00212  0001             ;-------------------------------------------------------------------------------
00213  0001             ; USAGE :
00214  0001             ; LOADPOINTER <ZEROPAGE_POINTER>, <LABEL>
00215  0001             ;
00216  0001             ; LOADS THE ADDRESS OF <LABEL> INTO <ZEROPAGE_POINTER>
00217  0001             ; NOTE : THE LABLE MUST BE AN ABSOLUTE ADDRESS
00218  0001             ;-------------------------------------------------------------------------------
00219  0001             
00220  0001             DEFM       LOADPOINTER
00221  0001                        LDA #</2
00222  0001                        STA /1     ; ZEROPAGE_POINTER_1
00223  0001                        LDA #>/2
00224  0001                        STA /1 + 1 ; ZEROPAGE_POINTER_1 + 1
00225  0001             
00226  0001                        ENDM
00227  0001             
00228  0001             ;-------------------------------------------------------------------------------
00229  0001             ; COPY POINTER
00230  0001             ;-------------------------------------------------------------------------------
00231  0001             ; USAGE :
00232  0001             ; COPYPOINTER <SOURCE POINTER>, <DEST POINTER>
00233  0001             ;
00234  0001             ; COPIES THE CONTENTS OF ONE POINTER TO ANOTHER
00235  0001             ;-------------------------------------------------------------------------------
00236  0001             
00237  0001             DEFM       COPYPOINTER
00238  0001                        LDA /1     ; ZEROPAGE_POINTER_1
00239  0001                        STA /2     ; ZEROPAGE_POINTER_2
00240  0001                        LDA /1 + 1 ; ZEROPAGE_POINTER_1 + 1
00241  0001                        STA /2 + 1 ; ZEROPAGE_POINTER_2 + 1
00242  0001                        
00243  0001                        ENDM
00244  0001             
00245  0001             ;-------------------------------------------------------------------------------
00246  0001             ; ADD POINTER
00247  0001             ;-------------------------------------------------------------------------------
00248  0001             ; USAGE :
00249  0001             ; ADDPOINTER <POINTER ADDRESS>, <AMOUNT - 00 - FF>
00250  0001             ;
00251  0001             ; ADDS AN IMMEDIATE 1 BYTE AMOUNT TO A POINTER
00252  0001             ;-------------------------------------------------------------------------------
00253  0001             DEFM       ADDPOINTER
00254  0001                        LDA /1
00255  0001                        CLC
00256  0001                        ADC #/2
00257  0001                        STA /1
00258  0001                        LDA /1 + 1
00259  0001                        ADC #0
00260  0001                        STA /1 + 1
00261  0001             
00262  0001                        ENDM
00263  0001             ;-------------------------------------------------------------------------------
00264  0001             ;-------------------------------------------------------------------------------
00265  0001             ; SAVE REGISTERS
00266  0001             ;-------------------------------------------------------------------------------
00267  0001             ; USAGE :
00268  0001             ; SAVEREGS
00269  0001             ;
00270  0001             ; SAVES THE CONTENTS OF A X AND Y ONTO THE STACK
00271  0001             ;-------------------------------------------------------------------------------
00272  0001             DEFM       SAVEREGS
00273  0001                        PHA             ; SAVE A
00274  0001                        TXA
00275  0001                        PHA             ; SAVE X
00276  0001                        TYA
00277  0001                        PHA             ; SAVE Y
00278  0001                        ENDM
00279  0001             
00280  0001             ;-------------------------------------------------------------------------------
00281  0001             ; RESTORE REGISTERS
00282  0001             ;-------------------------------------------------------------------------------
00283  0001             ; USAGE:
00284  0001             ; RESTOREREGS
00285  0001             ;
00286  0001             ; PULLS SAVED VALUES OFF THE STACK AND RETURNS THEM TO A X AND Y
00287  0001             ;-------------------------------------------------------------------------------
00288  0001             
00289  0001             DEFM       RESTOREREGS
00290  0001                        PLA
00291  0001                        TAY             ; RESTORE Y
00292  0001                        PLA
00293  0001                        TAX             ; RESTORE X
00294  0001                        PLA             ; RESTORE A
00295  0001                        ENDM
00296  0001             ;===============================================================================
00297  0001             ;===============================================================================
00298  0001             ; CONSTANTS
00299  0001             ;===============================================================================
00300  0001             
00301  0001             CONSOLE_TEXT = SPRITE_CONSOLE_TEXT
00302  0001             CONSOLE_DISPLAY = DISPLAYSPRITEINFO
00303  0001             
00304  0001             
00305  0001             SCREEN1_MEM = $4000                 ; BANK 1 - SCREEN 0 ; $4000
00306  0001             SCREEN2_MEM = $4400                 ; BANK 1 - SCREEN 1 ; $4400
00307  0001             SCORE_SCREEN = $5800                 ; BANK 1 - SCREEN 6 ; $5800
00308  0001             
00309  0001             ;MAP_MEM = $8000
00310  0001             ;ATTRIBUTE_MEM = MAP_MEM + 2
00311  0001             ;TILE_MEM = ATTRIBUTE_MEM + 2
00312  0001             
00313  0001             
00314  0001             ; ****** CURRENT PROJECT *******
00315  0001             ; START $4800: 18432
00316  0001             
00317  0001             ; TOP BLUE BACKGROUND: 18680
00318  0001             ; ROCK STACKED WALL: 19112
00319  0001             ; REGULAR BRICK WALL: 19256
00320  0001             ; POLE FACING TO LEFT: 19304
00321  0001             ; TOP PART OF WALL (BEHIND WINDOW): 19544
00322  0001             ; SOLID WATER PART: 19744, 19888
00323  0001             ; ROCK STACKED WALL: 19864
00324  0001             
00325  0001             CHRADR1    = 19992                      ; MIDDLE OF ROPE
00326  0001             CHRADR2    = 19144                      ; TOP OF WINDOW
00327  0001             CHRADR3    = 20128                      ; TOP WATER TILE: 20288
00328  0001             CHRADR3    = 19544                     ; 20200, 20080: ROCK STACKED WALL
00329  0001             
00330  0001             ; 19544 = TOP PART OF ORANGE (BACKGROUND WALL)
00331  0001             ; 20128 = TOP MIDDLE OF ROPE FACING RIGHT
00332  0001             ; 20144 = TOP PART OF ROPE FACING RIGHT
00333  0001             ; 20192 = CENTER OF ROPE FACING RIGHT
00334  0001             ; 20224 = TOP/CENTER OF ROPE FACING LEFT (TOP PART)
00335  0001             
00336  0001             ; 20320 = TOP OF WATER
00337  0001             CHRADR4    = 20312
00338  0001             
00339  0001             COLOR_MEM  = $D800                   ; COLOR MEM NEVER CHANGES
00340  0001             
00341  0001             SPRITE_POINTER_BASE = SCREEN1_MEM + $3F8 ; LAST 8 BYTES OF SCREEN MEM
00342  0001             
00343  0001             SPRITE_BASE = $70                       ; THE POINTER TO THE FIRST IMAGE#
00344  0001             
00345  0001             SPRITE_0_PTR = SPRITE_POINTER_BASE + 0  ; SPRITE POINTERS
00346  0001             SPRITE_1_PTR = SPRITE_POINTER_BASE + 1
00347  0001             SPRITE_2_PTR = SPRITE_POINTER_BASE + 2
00348  0001             SPRITE_3_PTR = SPRITE_POINTER_BASE + 3
00349  0001             SPRITE_4_PTR = SPRITE_POINTER_BASE + 4
00350  0001             SPRITE_5_PTR = SPRITE_POINTER_BASE + 5
00351  0001             SPRITE_6_PTR = SPRITE_POINTER_BASE + 6
00352  0001             SPRITE_7_PTR = SPRITE_POINTER_BASE + 7
00353  0001             
00354  0001             ; SET MAP WALKING LIMITS
00355  0001             MAP_RIGHT_LIMIT = 17
00356  0001             MAP_DOWN_LIMIT = 10
00357  0001             
00358  0001             ; FARMLIFE
00359  0001             TILE_DEPTH1 = 16
00360  0001             TILE_DEPTH2 = 32
00361  0001             TILE_DEPTH3 = 48
00362  0001             TILE_DEPTH4 = 64
00363  0001             TILE_DEPTH5 = 80
00364  0001             TILE_DEPTH6 = 96
00365  0001             TILE_DEPTH7 = 112
00366  0001             TILE_DEPTH8 = 128
00367  0001             TILE_DEPTH9 = 144
00368  0001             TILE_DEPTH10 = 160
00369  0001             TILE_DEPTH11 = 176
00370  0001             TILE_DEPTH12 = 192
00371  0001             TILE_DEPTH13 = 208
00372  0001             TILE_DEPTH14 = 224
00373  0001             TILE_DEPTH15 = 240
00374  0001             TILE_DEPTH16 = 256
00375  0001             TILE_DEPTH17 = 272
00376  0001             TILE_DEPTH18 = 288
00377  0001             TILE_DEPTH19 = 304
00378  0001             TILE_DEPTH20 = 320
00379  0001             TILE_DEPTH21 = 336
00380  0001             
00381  0001             TILE2_DEPTH1 = 17
00382  0001             TILE2_DEPTH2 = 34
00383  0001             TILE2_DEPTH3 = 51
00384  0001             TILE2_DEPTH4 = 68
00385  0001             TILE2_DEPTH5 = 85
00386  0001             TILE2_DEPTH6 = 102
00387  0001             TILE2_DEPTH7 = 119
00388  0001             TILE2_DEPTH8 = 136
00389  0001             TILE2_DEPTH9 = 153
00390  0001             TILE2_DEPTH10 = 170
00391  0001             TILE2_DEPTH11 = 187
00392  0001             TILE2_DEPTH12 = 204
00393  0001             TILE2_DEPTH13 = 221
00394  0001             TILE2_DEPTH14 = 238
00395  0001             TILE2_DEPTH15 = 255
00396  0001             TILE2_DEPTH16 = 272
00397  0001             TILE2_DEPTH17 = 289
00398  0001             TILE2_DEPTH18 = 306
00399  0001             TILE2_DEPTH19 = 323
00400  0001             TILE2_DEPTH20 = 340
00401  0001             TILE2_DEPTH21 = 357
00402  0001             
00403  0001             SPRITE_DELTA_OFFSET_X = 8               ; OFFSET FROM SPRITE COORDS TO DELTA CHAR COORDS
00404  0001             SPRITE_DELTA_OFFSET_Y = 14
00405  0001             
00406  0001             ENEMY_SPRITE_DELTA_OFFSET_X = 8
00407  0001             ENEMY_SPRITE_DELTA_OFFSET_Y = 14
00408  0001             
00409  0001             NUMBER_OF_SPRITES_DIV_4 = 3           ; THIS IS FOR MY PERSONAL VERSION, WHICH
00410  0001                        ; LOADS SPRITES AND CHARACTERS UNDER IO ROM
00411  0001             LEVEL_1_MAP = $E000                 ;ADDRESS OF LEVEL 1 TILES/CHARSETS
00412  0001             
00413  0001             
00414  0001             ;===============================================================================
00415  0001             ; GAME TIMERS
00416  0001             ;===============================================================================
00417  0001             CIA1_TIMA_LO = $DC04
00418  0001             CIA1_TIMA_HI = $DC05
00419  0001             CIA1_TIMB_LO = $DC06
00420  0001             CIA1_TIMB_HI = $DC07
00421  0001             
00422  0001             ;===============================================================================
00423  0001             ; ZERO PAGE LABELS
00424  0001             ;===============================================================================
00425  0001             
00426  0001             PARAM1     = $03                 ; THESE WILL BE USED TO PASS PARAMETERS TO ROUTINES
00427  0001             PARAM2     = $04                 ; WHEN YOU CAN'T USE REGISTERS OR OTHER REASONS
00428  0001             PARAM3     = $05
00429  0001             PARAM4     = $06                 ; ESSENTIALLY, THINK OF THESE AS EXTRA DATA REGISTERS
00430  0001             
00431  0001             PARAM5     = $07
00432  0001             
00433  0001             TIMER      = $08                  ; TIMERS - FAST AND SLOW, UPDATED EVERY FRAME
00434  0001             SLOW_TIMER = $09
00435  0001             
00436  0001             WPARAM1    = $0A                ; WORD LENGTH PARAMS. SAME AS ABOVE ONLY ROOM FOR 2
00437  0001             WPARAM2    = $0C                ; BYTES (OR AN ADDRESS)
00438  0001             WPARAM3    = $0E
00439  0001             
00440  0001             ;---------------------------- $11 - $16 AVAILABLE
00441  0001             
00442  0001             ZEROPAGE_POINTER_1 = $17
00443  0001             ZEROPAGE_POINTER_2 = $19
00444  0001             ZEROPAGE_POINTER_3 = $21
00445  0001             ZEROPAGE_POINTER_4 = $23
00446  0001             
00447  0001             CURRENT_SCREEN = $25       ; POINTER TO CURRENT FRONT SCREEN
00448  0001             CURRENT_BUFFER = $27       ; POINTER TO CURRENT BACK BUFFER
00449  0001             
00450  0001             SCROLL_COUNT_X = $29       ; CURRENT HARDWARE SCROLL VALUE
00451  0001             SCROLL_COUNT_Y = $2A
00452  0001             SCROLL_SPEED = $2B       ; SCROLL SPEED (NOT IMPLEMENTED YET)
00453  0001             SCROLL_DIRECTION = $2C       ; DIRECTION WE ARE SCROLLING IN
00454  0001             SCROLL_MOVING = $2D       ; ARE WE MOVING? (SET TO DIRECTION OF SCROLLING)
00455  0001                        ; THIS IS FOR RESETTING BACK TO START FRAMES
00456  0001             
00457  0001                        ; ALL DATA IS FOR THE TOP LEFT CORNER OF THE VISIBLE MAP AREA
00458  0001             MAP_POS_ADDRESS = $2E       ; (2 BYTES) POINTER TO CURRENT ADDRESS IN THE LEVEL MAP
00459  0001             MAP_X_POS  = $30       ; CURRENT MAP X POSITION (IN TILES)
00460  0001             MAP_Y_POS  = $31       ; CURRENT MAP Y POSITION (IN TILES)
00461  0001             MAP_X_DELTA = $32       ; MAP SUB TILE DELTA (IN CHARACTERS)
00462  0001             MAP_Y_DELTA = $33       ; MAP SUB TILE DELTA (IN CHARACTERS)
00463  0001             
00464  0001             ENMAP_X_POS = $34       ; CURRENT MAP X POSITION (IN TILES)
00465  0001             ENMAP_Y_POS = $35       ; CURRENT MAP Y POSITION (IN TILES)
00466  0001             ENMAP_X_DELTA = $36       ; MAP SUB TILE DELTA (IN CHARACTERS)
00467  0001             ENMAP_Y_DELTA = $37       ; MAP SUB TILE DELTA (IN CHARACTERS)
00468  0001             
00469  0001             
00470  0001             
00471  0001             ;===============================================================================
00472  0001             ; BASIC KICKSTART
00473  0001             ;===============================================================================
00474  0001             KICKSTART
00475  0001             ; SYS CALL TO START THE PROGRAM - 10 SYS (2064)
00476  0001             
00477  0001             ;*=$0801
00478  0001             
00479  0001             ;        BYTE $0E,$08,$0A,$00,$9E,$20,$28,$32,$30,$36,$34,$29,$00,$00,$00
00480  0001             
00481  0001             ;===============================================================================
00482  0001             ; START OF GAME PROJECT
00483  0001             ;===============================================================================
00484  0001             *=$0810
00485  0810             
00486  0810             PRG_START
00487  0810  A9 00                 LDA #0                          ; TURN OFF SPRITES
00488  0812  8D 15 D0              STA VIC_SPRITE_ENABLE
00489  0815             
00490  0815  AD 11 D0              LDA VIC_SCREEN_CONTROL          ; TURN SCREEN OFF WITH BIT 4
00491  0818  29 E0                 AND #%11100000                  ; MASK OUT BIT 4 - SCREEN ON/OFF
00492  081A  8D 11 D0              STA VIC_SCREEN_CONTROL          ; SAVE BACK - SETTING BIT 4 TO OFF
00493  081D             
00494  081D             ;===============================================================================
00495  081D             ; SETUP VIC BANK MEMORY
00496  081D             ;===============================================================================
00497  081D             
00498  081D                        ; TO SET THE VIC BANK WE HAVE TO CHANGE THE FIRST 2 BITS IN THE
00499  081D                        ; CIA 2 REGISTER. SO WE WANT TO BE CAREFUL AND ONLY CHANGE THE
00500  081D                        ; BITS WE NEED TO.
00501  081D             
00502  081D  AD 00 DD              LDA VIC_BANK            ; FETCH THE STATUS OF CIA 2 ($DD00)
00503  0820  29 FC                 AND #%11111100          ; MASK FOR BITS 2-8
00504  0822  09 02                 ORA #%00000010          ; THE FIRST 2 BITS ARE YOUR DESIRED VIC BANK VALUE
00505  0824                        ; IN THIS CASE BANK 1 ($4000 - $7FFF)
00506  0824  8D 00 DD              STA VIC_BANK
00507  0827                        
00508  0827             
00509  0827             ;===============================================================================
00510  0827             ; CHARACTER SET ENABLE: SCREEN MEMORY
00511  0827             ;===============================================================================
00512  0827                        ; WITHIN THE VIC BANK WE CAN SET WHERE WE WANT OUR SCREEN AND CHARACTER
00513  0827                        ; SET MEMORY TO BE USING THE VIC_MEMORY_CONTROL AT $D018
00514  0827                        ; IT IS IMPORTANT TO NOTE THAT THE VALUES GIVEN ARE RELATIVE TO THE START
00515  0827                        ; ADDRESS OF THE VIC BANK YOU ARE USING.
00516  0827                        
00517  0827  A9 02                 LDA #%00000010   ; BITS 1-3 (001) = CHARACTER MEMORY 2 : $0800 - $0FFF
00518  0829                        ; BITS 4-7 (000) = SCREEN MEMORY 0 : $0000 - $03FF
00519  0829             
00520  0829  8D 18 D0              STA VIC_MEMORY_CONTROL
00521  082C             
00522  082C                        ; BECAUSE THESE ARE RELATIVE TO THE VIC BANKS BASE ADDRESS (BANK 1 = $4000)
00523  082C                        ; THIS GIVES US A BASE SCREEN MEMORY ADDRESS OF $4000 AND A BASE
00524  082C                        ; CHARACTER SET MEMORY OF $4800
00525  082C                        ;
00526  082C                        ; SPRITE POINTERS ARE THE LAST 8 BYTES OF SCREEN MEMORY (25 * 40 = 1000 AND
00527  082C                        ; YET EACH SCREEN RESERVES 1024 BYTES). SO SPRITE POINTERS START AT
00528  082C                        ; $4000 + $3F8.
00529  082C             
00530  082C                        ; AFTER ALLOCTION OF VIC MEMORY FOR SCREEN, BACKBUFFER, SCOREBOARD, AND
00531  082C                        ; 2 CHARACTER SETS , ARRANGED TO ONE SOLID BLOCK OF MEM,
00532  082C                        ; SPRITE DATA STARTS AT $5C00 - GIVING THE INITIAL IMAGE A POINTER VALUE OF $70
00533  082C                        ; AND ALLOWING FOR UP TO 144 SPRITE IMAGES
00534  082C             
00535  082C             
00536  082C             ;===============================================================================
00537  082C             ; SYSTEM INITIALIZATION
00538  082C             ;===============================================================================
00539  082C             
00540  082C             SYSTEM_SETUP 
00541  082C             
00542  082C                        ; HERE IS WHERE WE COPY LEVEL 1 DATA FROM THE START SETUP TO UNDER
00543  082C                        ; $E000 SO WE CAN USE IT LATER WHEN THE GAME RESETS.
00544  082C                        ; A LITTLE BANK SWITCHING IS INVOLVED HERE.
00545  082C  78                    SEI
00546  082D             
00547  082D                        ; HERE YOU LOAD AND STORE THE PROCESSOR PORT ($0001), THEN USE
00548  082D                        ; IT TO TURN OFF LORAM (BASIC), HIRAM (KERNAL), CHAREN (CHARACTER ROM)
00549  082D                        ; THEN USE A ROUTINE TO COPY YOUR SPRITE AND CHARACTER MEM UNDER THERE
00550  082D                        ; BEFORE RESTORING THE ORIGINAL VALUE OF $0001 AND TURNING INTERRUPTS
00551  082D                        ; BACK ON.
00552  082D             
00553  082D  A5 01                 LDA PROC_PORT                   ; STORE RAM SETUP
00554  082F  85 03                 STA PARAM1
00555  0831             
00556  0831  A9 30                 LDA #%00110000                  ; SWITCH OUT BASIC, KERNAL, CHAREN, IO
00557  0833  85 01                 STA PROC_PORT
00558  0835             
00559  0835                        ; WHEN THE GAME STARTS, LEVEL 1 TILES AND CHARACTERS ARE STORED IN PLACE TO RUN,
00560  0835                        ; HOWEVER, WHEN THE GAME RESETS WE WILL NEED TO RESTORE THESE LEVELS INTACT.
00561  0835                        ; SO WE'RE SAVING THEM AWAY TO LOAD LATER UNDER THE KERNAL AT $E000-$EFFF (4K)
00562  0835                        ; TO DO THIS WE NEED TO DO SOME BANK SWITCHING, COPY DATA, THEN RESTORE AS
00563  0835                        ; WE MAY USE THE KERNAL LATER FOR SOME THINGS.
00564  0835             
00565  0835  A5 03                 LDA PARAM1                      ; RESTORE RAM SETUP
00566  0837  85 01                 STA PROC_PORT
00567  0839  58                    CLI
00568  083A             
00569  083A             ;===============================================================================
00570  083A             ; SCREEN SETUP
00571  083A             ;===============================================================================
00572  083A             
00573  083A             SCREEN_SETUP 
00574  083A  A9 00                 LDA #COLOR_BLACK
00575  083C  8D 21 D0              STA VIC_BACKGROUND_COLOR
00576  083F  A9 0C                 LDA #COLOR_GREY2
00577  0841  8D 22 D0              STA VIC_CHARSET_MULTICOLOR_1
00578  0844  A9 0B                 LDA #COLOR_GREY1
00579  0846  8D 23 D0              STA VIC_CHARSET_MULTICOLOR_2
00580  0849             
00581  0849             
00582  0849             
00583  0849  A9 00                 LDA #<SCREEN1_MEM
00584  084B  85 25                 STA CURRENT_SCREEN
00585  084D  A9 40                 LDA #>SCREEN1_MEM
00586  084F  85 26                 STA CURRENT_SCREEN + 1
00587  0851             
00588  0851             
00589  0851             
00590  0851  A9 00                 LDA #<SCREEN2_MEM
00591  0853  85 27                 STA CURRENT_BUFFER
00592  0855  A9 44                 LDA #>SCREEN2_MEM
00593  0857  85 28                 STA CURRENT_BUFFER + 1
00594  0859             
00595  0859             
00596  0859             ; LOAD IN HOTEL: CHARS, MAP, ATTRIBS & TILES
00597  0859             ; FROM OUR DISK IMAGE
00598  0859             
00599  0859  A2 00                 LDX #0
00600  085B  20 C5 0C              JSR LOADCHSETFROMDISK
00601  085E                        ;LDX #1
00602  085E                        ;JSR LOADCHSETFROMDISK
00603  085E                        ;LDX #2
00604  085E                        ;JSR LOADCHSETFROMDISK
00605  085E                        ;LDX #3
00606  085E                        ;JSR LOADCHSETFROMDISK
00607  085E                        
00608  085E                        ;JSR LOADHOTELTILESFROMDISK
00609  085E             
00610  085E                        ;JSR LOADHOTELMAP
00611  085E                        ;JSR LOADNEWTILES
00612  085E             
00613  085E  A2 03                 LDX #3                        ; (129,26=DEFAULT), 61
00614  0860  A0 02                 LDY #2                          ; , 27
00615  0862             
00616  0862  20 CB 21              JSR DRAWMAP                     ; DRAW THE LEVEL MAP (SCREEN1)
00617  0865                        ; AND INITIALIZE IT
00618  0865             
00619  0865  20 E3 20              JSR COPYTOBUFFER                ; COPY TO THE BACKBUFFER(SCREEN2)
00620  0868             
00621  0868             
00622  0868             ;*******************************************************************************
00623  0868             ;               TURN OFF 2ND SCREEN STATS DISPLAY (FOR NOW)
00624  0868             ;******************************************************************************'
00625  0868             
00626  0868                        ;LOADPOINTER ZEROPAGE_POINTER_1, CONSOLE_TEXT
00627  0868             
00628  0868             
00629  0868  A9 90                 LDA #<ADMIN_TEST_DISPLAY
00630  086A  85 17                 STA ZEROPAGE_POINTER_1
00631  086C  A9 3B                 LDA #>ADMIN_TEST_DISPLAY
00632  086E  85 18                 STA ZEROPAGE_POINTER_1 + 1
00633  0870             
00634  0870                        ;LOADPOINTER ZEROPAGE_POINTER_1, GAME_PANEL_DISPLAY
00635  0870             
00636  0870  A9 00                 LDA #0                          ; PARAM1 CONTAINS X SCREEN COORD (COLUMN)
00637  0872  85 03                 STA PARAM1
00638  0874  A9 13                 LDA #19                         ; PARAM2 CONTAINS Y SCREEN COORD (ROW)
00639  0876  85 04                 STA PARAM2
00640  0878  A9 01                 LDA #COLOR_WHITE                ; PARAM3 CONTAINS THE COLOR TO USE
00641  087A  85 05                 STA PARAM3
00642  087C  20 4E 20              JSR DISPLAYTEXT                 ; THEN WE DISPLAY THE STATS PANEL
00643  087F                        
00644  087F  20 D7 0B              JSR WAITFRAME
00645  0882  20 C6 0A              JSR INITRASTERIRQ               ; SETUP RASTER INTERRUPTS
00646  0885  20 D7 0B              JSR WAITFRAME
00647  0888             
00648  0888                        
00649  0888  A9 1B                 LDA #%00011011                  ; DEFAULT (Y SCROLL = 3 BY DEFAULT)
00650  088A  8D 11 D0              STA VIC_SCREEN_CONTROL
00651  088D  A9 00                 LDA #COLOR_BLACK
00652  088F  8D 20 D0              STA VIC_BORDER_COLOR
00653  0892             
00654  0892             
00655  0892             
00656  0892             ;===============================================================================
00657  0892             ;  SPRITE SETUP
00658  0892             ;===============================================================================
00659  0892             
00660  0892             
00661  0892             SPRITE_SETUP 
00662  0892  A9 00                 LDA #0
00663  0894  8D 15 D0              STA VIC_SPRITE_ENABLE           ; TURN ALL SPRITES OFF
00664  0897  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; CLEAR ALL EXTENDED X BITS
00665  089A  8D 82 35              STA SPRITE_POS_X_EXTEND         ; IN REGISTERS AND DATA
00666  089D             
00667  089D  20 2F 10              JSR PLAYERINIT
00668  08A0  20 5A 18              JSR ENEMYSETUP
00669  08A3             
00670  08A3  A9 FF                 LDA #%11111111                  ; TURN ON SPRITES 0 1 AND 7
00671  08A5  8D 15 D0              STA VIC_SPRITE_ENABLE
00672  08A8             
00673  08A8             
00674  08A8             
00675  08A8             ;===============================================================================
00676  08A8             ;  MAIN LOOP
00677  08A8             ;===============================================================================
00678  08A8             MAINLOOP
00679  08A8  20 D7 0B              JSR WAITFRAME                   ; WAIT FOR THE VERTICAL BLANK PERIOD
00680  08AB  20 E6 0B              JSR UPDATETIMERS
00681  08AE  20 99 10              JSR UPDATEPLAYER                 ; PLAYER ANIMATION, ETC.
00682  08B1  20 C9 24              JSR UPDATESCROLL
00683  08B4  20 81 18              JSR UPDATEENEMY                  ; ENEMY ANIMATION, ETC.
00684  08B7  20 82 38              JSR DISPLAYSPRITEINFONOW              ; DISPLAY SIMPLE DEBUG INFO
00685  08BA                        ;JSR ANIMATESTREETLIGHT
00686  08BA  4C A8 08              JMP MAINLOOP
00687  08BD             
00688  08BD             ;===============================================================================
00689  08BD             ; FILES IN GAME PROJECT
00690  08BD             ;===============================================================================
00691  08BD             `;============================================================================== 
00692  08BD             ; COLLISION ROUTINES
00693  08BD             ;===============================================================================
00694  08BD             ; PETER 'SIG' HEWETT
00695  08BD             ; - 2016,2017
00696  08BD             ;-------------------------------------------------------------------------------
00697  08BD             ; ROUTINES DEALING WITH COLLISIONS BETWEEN GAME OBJECTS
00698  08BD             ;
00699  08BD             ;===============================================================================
00700  08BD             ; SPRITE TO BACKGROUND CHARACTERS
00701  08BD             ;===============================================================================
00702  08BD             ; CHECKS TO SEE IF THE SPRITE IS COLLIDING WITH A BACKGROUND CHARACTER.
00703  08BD             ; MANY OF THESE CHECKS WILL BE 'FORWARD LOOKING' (ESPECIALLY IN MOVEMENT CHECKS)
00704  08BD             ; WE WILL BE LOOKING TO WHERE THE SPRITE WILL BE, NOT WHERE IT IS, AND THEN
00705  08BD             ; LETTING THE SPRITE HANDLING ROUTINES UPDATE THE POSITIONS AND DELTAS FOR US
00706  08BD             ; IF WE MOVE.
00707  08BD             ;
00708  08BD             ; THE ORIGINAL 'FRAMEWORK CODE' WORKED AGAINST A SINGLE SCREEN AND RETURNED A SIMPLE
00709  08BD             ; 1 FOR BLOCKED AND 0 FOR CLEAR. WE NEED A MUCH BETTER SYSTEM FOR THE GAME ENGINE
00710  08BD             ; THAT WILL HANDLE DOUBLE BUFFERED SCREENS AS WELL AS CALCULATING SCREEN SCROLLING.
00711  08BD             ; IT WILL ALSO NEED TO RETURN MORE INFORMATION DEALING WITH DIFFERENT TYPES OF BLOCKS
00712  08BD             ;
00713  08BD             ;
00714  08BD             ;===============================================================================
00715  08BD             ; CHECK MOVE LEFT
00716  08BD             ;-------------------------------------------------------------------------------
00717  08BD             ; CHECKS AHEAD TO SEE IF THIS SPRITE CAN LOVE LEFT, OF IT'S GOING TO BE STOPPED
00718  08BD             ; BY A BLOCKING CHARACTER
00719  08BD             ;
00720  08BD             ; X = SPRITE WE WANT TO CHECK FOR
00721  08BD             ;
00722  08BD             ; RETURNS A = 0 WE CAN MOVE OR A = 1 WE ARE BLOCKED
00723  08BD             ;
00724  08BD             ; MODIFIES A, Y, PARAM1, PARAM2
00725  08BD             ; X REGISTER IS LEFT INTACT
00726  08BD             ;-------------------------------------------------------------------------------
00727  08BD             
00728  08BD             CHECKMOVELEFT 
00729  08BD  BD 72 35              LDA SPRITE_CHAR_POS_X,X                 ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
00730  08C0  85 03                 STA PARAM1
00731  08C2  BD 93 35              LDA SPRITE_CHAR_POS_Y,X                 ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
00732  08C5  85 04                 STA PARAM2
00733  08C7             
00734  08C7  BD 6A 35              LDA SPRITE_POS_X_DELTA,X                ; LOAD X POS DELTA
00735  08CA  38                    SEC
00736  08CB  E5 29                 SBC SCROLL_COUNT_X                      ; ADJUST THE DELTA FOR SCROLLING LEFT/RIGHT
00737  08CD  10 02                 BPL @NOADJX                             ; CHECK TO SEE IF DELTA WRAPS TO -1 ($FF)
00738  08CF             
00739  08CF  C6 03                 DEC PARAM1                              ; IF THE DELTA WRAPS, ADJUST THE X CHAR POSITION
00740  08D1             
00741  08D1             ; HERE WE ARE CHECKING THE SPRITE AS IT CONTACTS A TILE MOVING TO THE LEFT
00742  08D1             ; (GENERATING A COLLISION). WHEN A COLLISION OCCURS ("SPRITE IS FLUSH"),
00743  08D1             ; GO TO SUBROUTINE @CHECKLEFT.
00744  08D1             
00745  08D1             
00746  08D1             @NOADJX
00747  08D1  29 07                 AND #%0111                              ; MASK THE DELTA VALUE BACK TO A 0-7 VALUE
00748  08D3  C9 00                 CMP #0                                  ; CHECK X DELTA TO SEE IF THE SPRITE IS 'FLUSH'
00749  08D5  F0 03                 BEQ @CHECKLEFT                          ; IF IT IS, CONTINUE
00750  08D7  A9 00                 LDA #0                                  ; ELSE RETURN WITH A 'CLEAR' CODE
00751  08D9  60                    RTS
00752  08DA             
00753  08DA             @CHECKLEFT 
00754  08DA  BD 8B 35              LDA SPRITE_POS_Y_DELTA,X                ; LOAD THE SPRITE DELTA Y POS
00755  08DD  38                    SEC                                     ; SUBTRACT THE CURRENT Y SCROLL
00756  08DE  E5 2A                 SBC SCROLL_COUNT_Y
00757  08E0  10 02                 BPL @NOADJY                             ; IF IT WRAPS, DECREMENT THE Y CHAR POSITION
00758  08E2             
00759  08E2  C6 04                 DEC PARAM2
00760  08E4             @NOADJY
00761  08E4  29 07                 AND #%0111                              ; MASK BACK TO A 0-7 VALUE
00762  08E6  F0 10                 BEQ @CHECKLEFT2                         ; IF ADJUSTED DELTA Y IS 0, WE ONLY NEED TO CHECK 2
00763  08E8                        ; CHARACTERS
00764  08E8             
00765  08E8                        ; IF NOT WE NEED TO CHECK 3 CHARACTERS
00766  08E8             
00767  08E8  A4 04                 LDY PARAM2                              ; LOAD ADJUSTED Y CHAR POSITION (SCREEN LINE)
00768  08EA  C8                    INY                                     ; INCREMENT BY ONE LINE
00769  08EB             
00770  08EB  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS           ; USE SCREEN_ROUTINES HELPER TO FETCH THE ADDRESS
00771  08EE             
00772  08EE  A4 03                 LDY PARAM1                              ; FETCH SPRITES X POSITION
00773  08F0  88                    DEY                                     ; SUB 1 CHARACTER (LEFT)
00774  08F1             
00775  08F1  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; FETCH THE CHARACTER FROM SCREEN MEMORY
00776  08F3             
00777  08F3  20 81 0A              JSR TESTBLOCKING                        ; TEST FOR A BLOCKING CHARACTER
00778  08F6  D0 1F                 BNE @BLOCKEDLEFT
00779  08F8                        
00780  08F8                        ; OTHERWISE CHECK THE OTHER 2 CHARACTERS
00781  08F8             @CHECKLEFT2 
00782  08F8  A4 04                 LDY PARAM2                              ; FETCH THE SPRITE Y CHAR POSITION
00783  08FA  88                    DEY                                     ; GO ONE LINE UP
00784  08FB  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS
00785  08FE             
00786  08FE  A4 03                 LDY PARAM1
00787  0900  88                    DEY                                     ; ONE CHAR LEFT
00788  0901             
00789  0901             
00790  0901  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
00791  0903  20 81 0A              JSR TESTBLOCKING
00792  0906  D0 0F                 BNE @BLOCKEDLEFT
00793  0908             
00794  0908  98                    TYA
00795  0909  18                    CLC
00796  090A  69 28                 ADC #40
00797  090C  A8                    TAY
00798  090D                        
00799  090D  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
00800  090F  20 81 0A              JSR TESTBLOCKING
00801  0912  D0 03                 BNE @BLOCKEDLEFT
00802  0914                        
00803  0914  A9 00                 LDA #0
00804  0916  60                    RTS
00805  0917                        
00806  0917             @BLOCKEDLEFT 
00807  0917  A9 01                 LDA #1
00808  0919  60                    RTS
00809  091A             
00810  091A             
00811  091A             
00812  091A             ;===============================================================================
00813  091A             ; CHECK MOVE RIGHT
00814  091A             ;-------------------------------------------------------------------------------
00815  091A             ; BASED ON THE PREVIOUS 'CANMOVERIGHT' ROUTINE. IT CHECKS AHEAD TO SEE IF THERE
00816  091A             ; ARE GOING TO BE BLOCKING CHARACTERS IN THE DIRECTION WE WANT TO MOVE.
00817  091A             ;
00818  091A             ; THIS VERSION CHECKS THE APPROPRIATE FRONT SCREEN AND RETURNS A CODE. 0 FOR
00819  091A             ; CLEAR OR 1-255 FOR
00820  091A             ; ANY SPECIAL ACTION THAT CAN OR MUST BE TAKEN.
00821  091A             ;
00822  091A             ; X = SPRITE TO CHECK AGAINST
00823  091A             ;
00824  091A             ; MODIFIES Y, PARAM1, PARAM2
00825  091A             ;
00826  091A             ; RETURNS A = BLOCKING CODE
00827  091A             ; X REGISTER IS LEFT INTACT
00828  091A             ;-------------------------------------------------------------------------------
00829  091A             
00830  091A             
00831  091A             CHECKMOVERIGHT 
00832  091A             
00833  091A  BD 72 35              LDA SPRITE_CHAR_POS_X,X         ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
00834  091D  85 03                 STA PARAM1
00835  091F  BD 93 35              LDA SPRITE_CHAR_POS_Y,X         ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
00836  0922  85 04                 STA PARAM2
00837  0924             
00838  0924  BD 6A 35              LDA SPRITE_POS_X_DELTA,X        ; FETCH X DELTA
00839  0927  38                    SEC
00840  0928  E5 29                 SBC SCROLL_COUNT_X              ; SUBTRACT THE SCROLL COUNT
00841  092A  10 02                 BPL @NOADJX
00842  092C                        
00843  092C  C6 03                 DEC PARAM1                      ; INCREMENT PARAM1
00844  092E             
00845  092E             @NOADJX
00846  092E  29 07                 AND #%0111                      ; MASK BACK TO A RANGE OF 0-7 ; NO ADJUSTMENT IS NEEDED
00847  0930  C9 02                 CMP #2                          ; IS NEW DELTA = 0?
00848  0932  F0 03                 BEQ @CHECKRIGHT                 ; IF SO, WE CAN CHECK RIGHT
00849  0934  A9 00                 LDA #0                          ; OTHERWISE GIVE A CLEAR CODE AND CARRY ON
00850  0936  60                    RTS
00851  0937             
00852  0937             
00853  0937             @CHECKRIGHT 
00854  0937  BD 8B 35              LDA SPRITE_POS_Y_DELTA,X        ; LOAD THE Y DELTA
00855  093A  38                    SEC
00856  093B  E5 2A                 SBC SCROLL_COUNT_Y              ; ADJUST BY THE CURRENT Y SCROLL VALUE
00857  093D  10 02                 BPL @NOADJY                     ; IF THE DELTA GOES BELOW 0 ADJUST Y POSITION
00858  093F             
00859  093F  C6 04                 DEC PARAM2
00860  0941             
00861  0941             @NOADJY
00862  0941  29 07                 AND #%0111                      ; MASK ADJUSTED DELTA VALUE BACK TO 0 - 7
00863  0943                        ; IF Y DELTA IS 0, WE ARE FLUSH ON THE Y AXIS, SO ONLY
00864  0943  F0 10                 BEQ @RIGHTCHECK2                ; CHECK 2 CHARACTERS
00865  0945                        ; OTHERWISE WE ARE OVERLAPPING, SO WE NEED TO CHECK 3
00866  0945  A4 04                 LDY PARAM2                      ; FETCH THE SPRITES Y CHARACTER POSITION
00867  0947  C8                    INY                             ; ADD 1 (ONE CHARACTER LINE DOWN)
00868  0948                        
00869  0948  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THAT SCREEN LINE
00870  094B             
00871  094B  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES X POSITION AND STORE IT IN Y
00872  094D  C8                    INY                             ; ADD 1 CHARACTER (RIGHT)
00873  094E  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE SCREEN CHARACTER
00874  0950  20 81 0A              JSR TESTBLOCKING                ; SEE IF IT'S A BLOCKING CHARACTER
00875  0953  D0 1F                 BNE @BLOCKEDRIGHT               ; RETURN IF IT IS
00876  0955             
00877  0955             @RIGHTCHECK2 ; CHECK THE 2 CHARACTERS TO THE RIGHT OF THE SPRITE
00878  0955  A4 04                 LDY PARAM2
00879  0957  88                    DEY                             ; SUBTRACT ONE (ONE CHARACTER DOWN)
00880  0958                        
00881  0958  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THAT LINE
00882  095B                        
00883  095B  A4 03                 LDY PARAM1                      ; LOAD THE ADJUSTED X CHARACTER POSITION IN Y
00884  095D  C8                    INY                             ; ADD ONE CHARACTER TO THE RIGHT
00885  095E             
00886  095E  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE CHARACTER
00887  0960  20 81 0A              JSR TESTBLOCKING                ; TEST THE CHARACTER FOR BLOCKING
00888  0963  D0 0F                 BNE @BLOCKEDRIGHT               ; EXIT AND RETURN THE CODE IF BLOCKING
00889  0965             
00890  0965  98                    TYA                             ; ADD #40 TO THE CURRENT X POSITION
00891  0966  18                    CLC                             ; THIS IS THE SAME AS GOING DOWN ONE BLOCK
00892  0967  69 28                 ADC #40
00893  0969  A8                    TAY
00894  096A  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; LOAD THE CHARACTER TO CHECKMOVEDOWN
00895  096C  20 81 0A              JSR TESTBLOCKING                ; TEST IT
00896  096F  D0 03                 BNE @BLOCKEDRIGHT               ; RETURN THE CODE IF BLOCKING
00897  0971             
00898  0971  A9 00                 LDA #0                          ; ELSE RETURN WITH A 'CLEAR' CODE
00899  0973  60                    RTS
00900  0974             
00901  0974             @BLOCKEDRIGHT 
00902  0974  A9 01                 LDA #1
00903  0976  60                    RTS
00904  0977                        
00905  0977             
00906  0977             
00907  0977             ;===============================================================================
00908  0977             ; CHECK MOVE DOWN
00909  0977             ;-------------------------------------------------------------------------------
00910  0977             ;
00911  0977             ; X = SPRITE WE WANT TO CHECK FOR
00912  0977             ;
00913  0977             ; RETURNS : A = 0 WE MOVE OR A = 1 WE ARE BLOCKED
00914  0977             ;
00915  0977             ; MODIFIES : Y,PARAM1, PARAM2
00916  0977             ;            X IS LEFT INTACT
00917  0977             ;-------------------------------------------------------------------------------
00918  0977             
00919  0977             CHECKMOVEDOWN 
00920  0977             
00921  0977  BD 72 35              LDA SPRITE_CHAR_POS_X,X                 ; FETCH THE SPRITES X CHARACTER COORD
00922  097A  85 03                 STA PARAM1                              ; PARAM1 WILL HOLD THE ADJUSTED Y COORD
00923  097C  BD 93 35              LDA SPRITE_CHAR_POS_Y,X                 ; FETCH THE SPRITES Y CHARACTER COORD
00924  097F  85 04                 STA PARAM2                              ; PARAM2 WILL HOLD THE ADJUSTED Y COORD
00925  0981             
00926  0981             
00927  0981                        ; ADJUST THE Y DELTA AND POS Y VALUES
00928  0981  BD 8B 35              LDA SPRITE_POS_Y_DELTA,X                ; LOAD THE DELTA Y
00929  0984  38                    SEC
00930  0985  E5 2A                 SBC SCROLL_COUNT_Y                      ; SUBTRACT THE Y SCROLL COUNT
00931  0987  10 02                 BPL @NOADJUSTY                          ; IF IT'S LESS THAN 0, ADJUST Y POS
00932  0989             
00933  0989  C6 04                 DEC PARAM2
00934  098B             
00935  098B             
00936  098B             @NOADJUSTY 
00937  098B  29 07                 AND #%0111                              ; MASK BACK TO 0-7 VALUE
00938  098D                        ; IF ADJUSTED DELTA Y IS 0, WE ARE FLUSH
00939  098D  F0 03                 BEQ @DOWNCHECK                          ; AND DO A CHARACTER CHECK
00940  098F  A9 00                 LDA #0                                  ; ELSE RETURN A CLEAR CODE
00941  0991  60                    RTS
00942  0992                        
00943  0992             
00944  0992             @DOWNCHECK 
00945  0992  BD 6A 35              LDA SPRITE_POS_X_DELTA,X                ; CHECK THE X DELTA, IF IT'S FLUSH (0) WE ONLY
00946  0995  38                    SEC
00947  0996  E5 29                 SBC SCROLL_COUNT_X
00948  0998  10 02                 BPL @NOADJX
00949  099A             
00950  099A  C6 03                 DEC PARAM1
00951  099C             
00952  099C             @NOADJX
00953  099C  29 07                 AND #%0111                              ; (MASK AT 0-7 PIXELS)
00954  099E  F0 10                 BEQ @DOWNCHECK2                         ; NEED TO CHECK 2 CHARACTERS
00955  09A0             
00956  09A0  A4 04                 LDY PARAM2                              ; LOAD THE ADJUSTED Y CHARACTER LINE
00957  09A2  C8                    INY                                     ; INCREMENT TO ONE LINE DOWN
00958  09A3  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS
00959  09A6                        ; LOAD SPRITE X CHAR POSITION
00960  09A6  A4 03                 LDY PARAM1
00961  09A8  C8                    INY                                     ; INC X POS (LEFT CHARACTER)
00962  09A9  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; FETCH THE CHARACTER
00963  09AB             
00964  09AB  20 81 0A              JSR TESTBLOCKING
00965  09AE  D0 12                 BNE @DOWNBLOCKED
00966  09B0             
00967  09B0             @DOWNCHECK2 
00968  09B0  A4 04                 LDY PARAM2                              ; LOAD SPRITE Y CHAR COORD
00969  09B2  C8                    INY                                     ; INCREMENT DOWN ONE LINE
00970  09B3  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS           ;SAVES DATA IN ZEROPPAGE_POINTER_1
00971  09B6                        
00972  09B6  A4 03                 LDY PARAM1
00973  09B8  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
00974  09BA             
00975  09BA  20 81 0A              JSR TESTBLOCKING
00976  09BD  D0 03                 BNE @DOWNBLOCKED
00977  09BF             
00978  09BF  A9 00                 LDA #0
00979  09C1  60                    RTS
00980  09C2             
00981  09C2             @DOWNBLOCKED 
00982  09C2  A9 01                 LDA #1
00983  09C4  60                    RTS
00984  09C5             
00985  09C5             
00986  09C5             ;===============================================================================
00987  09C5             ; CHECK MOVE UP
00988  09C5             ;-------------------------------------------------------------------------------
00989  09C5             ; CHECKS AHEAD TO SEE IF THIS SPRITE CAN MOVE UP, OR IF IT'S GOING TO BE STOPPED
00990  09C5             ; BY A BLOCKING CHARACTER
00991  09C5             ;
00992  09C5             ; X = SPRITE WE WANT TO CHECK FOR
00993  09C5             ;
00994  09C5             ; RETURNS A = 0 WE CAN MOVE OR A = 1 WE ARE BLOCKED
00995  09C5             ;
00996  09C5             ; MODIFIES Y,PARAM1,PARAM2
00997  09C5             ;-------------------------------------------------------------------------------
00998  09C5             
00999  09C5             CHECKMOVEUP 
01000  09C5  BD 72 35              LDA SPRITE_CHAR_POS_X,X                 ; LOAD SPRITES X CHARACTER POS
01001  09C8  85 03                 STA PARAM1                              ; ADJUSTED X CHAR POS WILL BE IN PARAM1
01002  09CA  BD 93 35              LDA SPRITE_CHAR_POS_Y,X                 ; ADJUSTED Y CHARACTER POS
01003  09CD  85 04                 STA PARAM2                              ; LOAD SPRITES Y CHARACTER POS
01004  09CF             
01005  09CF  BD 8B 35              LDA SPRITE_POS_Y_DELTA,X                ; LOAD SPRITES Y DELTA
01006  09D2  38                    SEC                                     ; SUBTRACT Y SCROLL VALUE
01007  09D3  E5 2A                 SBC SCROLL_COUNT_Y
01008  09D5  10 02                 BPL @NOADJY                             ; IF IT WRAPS PAST 0 - ADJUST Y CHAR POS
01009  09D7             
01010  09D7  C6 04                 DEC PARAM2
01011  09D9             
01012  09D9             @NOADJY
01013  09D9  29 07                 AND #%0111                              ; MASK BACK TO A VALUE OF 0-7
01014  09DB  F0 03                 BEQ @CHECKUP                            ; IF IT'S 0 - WE ARE FLUSH AND DO A CHECK
01015  09DD  A9 00                 LDA #0                                  ; OTHERWISE RETURN WITH A 'CLEAR' CODE
01016  09DF  60                    RTS
01017  09E0             
01018  09E0             @CHECKUP
01019  09E0  BD 6A 35              LDA SPRITE_POS_X_DELTA,X                ; LOAD THE SPRITE X DELTA VALUE
01020  09E3  38                    SEC
01021  09E4  E5 29                 SBC SCROLL_COUNT_X                      ; SUBTRACT CURRENT SCROLL X VALUE
01022  09E6  10 02                 BPL @NOADJX                             ; IF IT WRAPS PAST 0 - ADJUST THE X CHAR POS
01023  09E8             
01024  09E8  C6 03                 DEC PARAM1
01025  09EA             
01026  09EA             @NOADJX    
01027  09EA  29 07                 AND #%0111                              ; MASK BACK TO A 0-7 VALUE
01028  09EC  F0 11                 BEQ @CHECKUP2                           ; IF WE ARE NOT FLUSH WE NEED TO CHECK 2 CHARACTERS
01029  09EE             
01030  09EE  A4 04                 LDY PARAM2                              ; FETCH THE ADJUSTED SPRITE Y CHAR COORD
01031  09F0  88                    DEY                                     ; SUBTRACT 2 LINES (UP)
01032  09F1  88                    DEY
01033  09F2  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS
01034  09F5             
01035  09F5  A4 03                 LDY PARAM1                              ; LOAD ADJUSTED X CHARACTER POS
01036  09F7  C8                    INY                                     ; INC X BY 1 (ONE CHAR RIGHT)
01037  09F8  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
01038  09FA                        
01039  09FA             
01040  09FA  20 81 0A              JSR TESTBLOCKING
01041  09FD  D0 13                 BNE @UPBLOCKED
01042  09FF             
01043  09FF             
01044  09FF             @CHECKUP2
01045  09FF  A4 04                 LDY PARAM2                              ; LOAD THE ADJUSTED SPRITE CHAR Y POSITION
01046  0A01  88                    DEY                                     ; DECREMENT (GO UP) BY 2 LINES
01047  0A02  88                    DEY
01048  0A03  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS
01049  0A06             
01050  0A06  A4 03                 LDY PARAM1                              ; LOAD ADJUSTED X CHARACTER POSITION
01051  0A08             
01052  0A08  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
01053  0A0A  20 81 0A              JSR TESTBLOCKING
01054  0A0D  D0 03                 BNE @UPBLOCKED
01055  0A0F             
01056  0A0F  A9 00                 LDA #0
01057  0A11  60                    RTS
01058  0A12             
01059  0A12             @UPBLOCKED 
01060  0A12  A9 01                 LDA #1
01061  0A14  60                    RTS
01062  0A15             
01063  0A15             
01064  0A15             
01065  0A15             ;===============================================================================
01066  0A15             ; CHECK BLOCK UNDER
01067  0A15             ;-------------------------------------------------------------------------------
01068  0A15             ; CHECK THE BLOCK UNDER THE SPRITE FOR COLLISION (USEFULL FOR THINGS LIKE
01069  0A15             ; ROPES AND CHESTS)
01070  0A15             ;-------------------------------------------------------------------------------
01071  0A15             
01072  0A15             CHECKBLOCKUNDER 
01073  0A15  BD 72 35              LDA SPRITE_CHAR_POS_X,X         ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
01074  0A18  85 03                 STA PARAM1
01075  0A1A             
01076  0A1A  BD 93 35              LDA SPRITE_CHAR_POS_Y,X         ; SPRITE_STACK_Y
01077  0A1D  85 04                 STA PARAM2                      ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
01078  0A1F             
01079  0A1F  AD 6A 35              LDA SPRITE_POS_X_DELTA          ; FETCH X DELTA
01080  0A22  38                    SEC
01081  0A23  E5 29                 SBC SCROLL_COUNT_X              ; SUBTRACT THE SCROLL COUNT
01082  0A25  18                    CLC
01083  0A26  69 03                 ADC #3
01084  0A28  10 02                 BPL @NOADJX                     ; IF IT'S 0 OR GREATER, DON'T ADJUST X POSITION
01085  0A2A  C6 03                 DEC PARAM1                      ; OTHERWISE SUBTRACT 1
01086  0A2C             
01087  0A2C             @NOADJX
01088  0A2C  29 07                 AND #%0111                      ; MASK DELTA BACK TO A VALUE BETWEEN 0-7
01089  0A2E  F0 00                 BEQ @ADJY                       ; WE ARE FLUSH ON THE X AXIS - DO CHECK ON Y
01090  0A30                        ; OTHERWISE ?? I COULD DO ANOTHER SET OF LOOKUPS
01091  0A30                        ; BASED ON 'NON FLUSH'
01092  0A30             
01093  0A30             
01094  0A30             @ADJY
01095  0A30  AD 8B 35              LDA SPRITE_POS_Y_DELTA          ; FETCH THE Y DELTA
01096  0A33  38                    SEC
01097  0A34  E5 2A                 SBC SCROLL_COUNT_Y
01098  0A36  10 02                 BPL @NOADJY
01099  0A38  C6 04                 DEC PARAM2
01100  0A3A             
01101  0A3A             @NOADJY
01102  0A3A  29 07                 AND #%0111                      ; IF WE ARE FLUSH ON Y WE ONLY NEED TO CHECK 2 CHARACTERS
01103  0A3C  F0 17                 BEQ @UNDERCHECK2                ; OTHERWISE WE NEED TO CHECK 3
01104  0A3E             
01105  0A3E             @UNDERCHECK 
01106  0A3E             
01107  0A3E             ; PARAM2 - POINTS TO WHERE THE SCREEN MEMORY WILL BE GRABBING THE Y REGISTER AT.
01108  0A3E             ; SO FOR EXAMPLE: IF PARAM2 = 2 THEN THE SUBROUTINE FETCHPLAYFIELDLINEADDRESS
01109  0A3E             ; WILL BE THEN POINTING TO SCREEN2_LINE_OFFSET_TABLE_LO,Y WHICH USES THE TABLE EXACTLY AT
01110  0A3E             ; SCREEN2_LINE_OFFSET_TABLE_LO WHICH READS AS <BYTE SCREEN2_MEM + X, Y
01111  0A3E             ; THEREFORE IT TRANSLATE TO POINT TO BYTE <SCREEN2_MEM + 40 (SINCE THIS IS 2ND ON THE LIST.)
01112  0A3E             
01113  0A3E             ; THEN <SCREEN2_MEM + 40 WOULD BE SAVED IN ZERO_PAGE_POINTER_1 & ZERO_PAGE_POINTER_1 + 1
01114  0A3E             
01115  0A3E  A4 04                 LDY PARAM2                      ; FETCH THE ADJUSTED Y POSITION
01116  0A40  C8                    INY                             ; ADD ONE LINE (DOWN) - ; SPRITE_STACK_Y, Y
01117  0A41                        
01118  0A41  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THE SCREEN LINE
01119  0A44                        ; RETURNED IN ZEROPAGE_POINTER_1
01120  0A44  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES ADJUSTED X CHARACTER POSITION
01121  0A46             
01122  0A46  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE SCREEN CHARACTER
01123  0A48  8D C4 0A              STA ENEMYCOLCHAR
01124  0A4B  20 81 0A              JSR TESTBLOCKING
01125  0A4E  D0 2D                 BNE @BLOCKINGUNDER              ; EXIT IF ITS A BLOCKING CHAR (SHOULDN'T BE)
01126  0A50                        ; TO-DO EXIT IF IT'S A SPECIAL CHARACTER TO KEEP
01127  0A50                        ; OUR 'LAST TEST' INTACT
01128  0A50  AD C2 0A              LDA COLLIDER_ATTR
01129  0A53  D0 2B                 BNE @SPECIAL_UNDER               ; A SPECIAL BLOCK IS UNDER US - EXIT
01130  0A55             
01131  0A55             @UNDERCHECK2 
01132  0A55  A4 04                 LDY PARAM2                      ; FETCH THE ADJUSTED Y POSITION
01133  0A57  88                    DEY                             ; ONE LINE UP
01134  0A58  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THE SCREEN LINE
01135  0A5B                        ; RETURNED IN ZEROPAGE_POINTER_1
01136  0A5B  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES ADJUSTED X CHARACTER POSITION
01137  0A5D  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; SCREEN DATA AT SCREEN_LINE_OFFSET_TABLE_LO (SCREEN MEMORY)
01138  0A5F  8D C4 0A              STA ENEMYCOLCHAR
01139  0A62  20 81 0A              JSR TESTBLOCKING
01140  0A65  D0 16                 BNE @BLOCKINGUNDER
01141  0A67  AD C2 0A              LDA COLLIDER_ATTR
01142  0A6A  D0 14                 BNE @SPECIAL_UNDER
01143  0A6C             
01144  0A6C  98                    TYA
01145  0A6D  18                    CLC
01146  0A6E  69 28                 ADC #40
01147  0A70  A8                    TAY
01148  0A71  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
01149  0A73  D0 08                 BNE @BLOCKINGUNDER
01150  0A75  AD C2 0A              LDA COLLIDER_ATTR
01151  0A78  D0 06                 BNE @SPECIAL_UNDER
01152  0A7A  A9 00                 LDA #0
01153  0A7C  60                    RTS
01154  0A7D             @BLOCKINGUNDER 
01155  0A7D  A9 01                 LDA #1
01156  0A7F  60                    RTS
01157  0A80             @SPECIAL_UNDER ; RETURN THE 'SPECIAL - NOT 1 OR 2'
01158  0A80  60                    RTS
01159  0A81             
01160  0A81             ;===============================================================================
01161  0A81             ; TEST CHARACTER FOR BLOCKING
01162  0A81             ;===============================================================================
01163  0A81             ; ORIGINALLY WE HAD A SIMPLE CHECK FOR BLOCKING CHARACTERS > 128. USING CHARPAD
01164  0A81             ; WE CAN TEST FOR ATTRIBUTES WE ENCODE IN THE UPPER HALF BYTE OF THE COLOR INFO
01165  0A81             ; NOTE : IT SEEMS YOU CAN'T READ THIS BACK DIRECTLY FROM COLOR RAM, BUT WE CAN
01166  0A81             ;        LOOK IT UP EASILY ENOUGH GIVEN THE CHARACTER NUMBER.
01167  0A81             ;
01168  0A81             ; A = CHARACTER NUMBER WE'RE CHECKING AGAINST
01169  0A81             ; RETURNS: A = 0 OR 1 (CLEAR - BLOCKED) AND STORES THE COLLISON ATTRIBUTE
01170  0A81             ; SO WE CAN TEST AGAINST IT
01171  0A81             ;
01172  0A81             ; MODIFIES A
01173  0A81             ; RESTORES X, Y
01174  0A81             ;-------------------------------------------------------------------------------
01175  0A81             ; COLLIDER CODES
01176  0A81             ;-------------------------------------------------------------------------------
01177  0A81             COLL_CLEAR = $00
01178  0A81             COLL_FLOOR = $10
01179  0A81             COLL_STAIR = $20
01180  0A81             COLL_POLE  = $30
01181  0A81             COLL_WATER = $40
01182  0A81             COLL_DOOR  = $50
01183  0A81             COLL_COUCH = $80
01184  0A81                        
01185  0A81             
01186  0A81             TESTBLOCKING 
01187  0A81                        
01188  0A81  8D C2 0A              STA COLLIDER_ATTR       ; SAVE THE INFO PASSED TO US, WE NEED TO USE A
01189  0A84                        ;STA ENEMY_COLLIDER_ATTR
01190  0A84  8A                    TXA                     ; STORE X AND Y ON THE STACK
01191  0A85  48                    PHA                     ; THE ROUTINES WE GO BACK TO NEED THESE INTACT
01192  0A86  98                    TYA
01193  0A87  48                    PHA
01194  0A88             
01195  0A88  A9 00                 LDA #0
01196  0A8A  AE C2 0A              LDX COLLIDER_ATTR       ; LOAD THE CHARACTER NUMBER IN X
01197  0A8D             
01198  0A8D  AD 2E 10              LDA MAPTWOLOADED
01199  0A90  D0 06                 BNE @MAP2COLLISFOUND
01200  0A92             
01201  0A92             
01202  0A92  BD 20 78              LDA ATTRIBUTE_MEM,X     ; FETCH THE ATTRIBUTE
01203  0A95  4C 9B 0A              JMP @SKIPMAP2COLLIS
01204  0A98             
01205  0A98             @MAP2COLLISFOUND 
01206  0A98  BD AA 80              LDA ATTRIBUTE2_MEM,X     ; FETCH THE ATTRIBUTE
01207  0A9B             
01208  0A9B             @SKIPMAP2COLLIS 
01209  0A9B  29 F0                 AND #%11110000          ; MASK THE COLOR INFO - LEAVING THE ATTRIBUTE
01210  0A9D  8D C2 0A              STA COLLIDER_ATTR       ; STORE IT SO THE REST OF THE PROGRAM CAN USE IT
01211  0AA0  F0 12                 BEQ @RETURNCLEAR        ; 0 IS ALWAYS CLEAR - SO RETURN
01212  0AA2  C9 30                 CMP #COLL_POLE
01213  0AA4  F0 0E                 BEQ @RETURNCLEAR        ; ROPES ($30) DON'T BLOCK
01214  0AA6  C9 40                 CMP #COLL_WATER
01215  0AA8  F0 0A                 BEQ @RETURNCLEAR
01216  0AAA  C9 80                 CMP #COLL_COUCH
01217  0AAC  F0 06                 BEQ @RETURNCLEAR
01218  0AAE  C9 50                 CMP #COLL_DOOR
01219  0AB0  F0 02                 BEQ @RETURNCLEAR
01220  0AB2  D0 07                 BNE @BLOCKING           ; BLOCKING CHARACTER  (COMMENT OUT TO PREVENT BLOCKING)
01221  0AB4             
01222  0AB4             
01223  0AB4             @RETURNCLEAR 
01224  0AB4  68                    PLA                     ; RESTORE X AND Y OFF THE STACK
01225  0AB5  A8                    TAY
01226  0AB6  68                    PLA
01227  0AB7  AA                    TAX
01228  0AB8             
01229  0AB8  A9 00                 LDA #0                  ; RETURN 0 - A CLEAR CODE
01230  0ABA  60                    RTS
01231  0ABB             
01232  0ABB             @BLOCKING
01233  0ABB                        ; ATM ONLY BASIC COLLIDE INFO - IF NOT 0, WE'RE BLOCKING
01234  0ABB  68                    PLA                     ; RESTORE X AND Y FROM THE STACK
01235  0ABC  A8                    TAY
01236  0ABD  68                    PLA
01237  0ABE  AA                    TAX
01238  0ABF             
01239  0ABF  A9 01                 LDA #1                  ; SET TO BLOCKING AND RETURN
01240  0AC1  60                    RTS
01241  0AC2             
01242  0AC2             COLLIDER_ATTR ; A PLACE TO STORE OUR ATTRIBUTE, AND READ IT LATER IF NEEDED
01243  0AC2  00                    BYTE 0
01244  0AC3             
01245  0AC3  00         TILE_DATA  BYTE 0
01246  0AC4  00         ENEMYCOLCHAR BYTE 0
01247  0AC5             
01248  0AC5  00         SPRITE_Y_ADJUST BYTE 0
01249  0AC6             
01250  0AC6             
01251  0AC6             ;===============================================================================
01252  0AC6             ; RASTER INTERRUPTS
01253  0AC6             ;===============================================================================
01254  0AC6             ; PETER 'SIG' HEWETT
01255  0AC6             ; - 2016
01256  0AC6             ; A CHAIN OF RASTER IRQ'S AND ROUTINES FOR INSTALLING/REMOVING THEM
01257  0AC6             ;-------------------------------------------------------------------------------
01258  0AC6             ;-------------------------------------------------------------------------------
01259  0AC6             ; INSTALL RASTER IRQ
01260  0AC6             ;-------------------------------------------------------------------------------
01261  0AC6             
01262  0AC6             INITRASTERIRQ 
01263  0AC6  78                    SEI                     ; STOP ALL INTERRUPTS
01264  0AC7  A5 01                 LDA PROC_PORT
01265  0AC9                        
01266  0AC9  A9 7F                 LDA #$7F                ; DISABLE CIA #1 GENERATING TIMER IRQS
01267  0ACB  8D 0D DC              STA INT_CONTROL         ; WHICH ARE USED BY THE SYSTEM TO FLASH CURSOR, ETC.
01268  0ACE             
01269  0ACE  A9 01                 LDA #$01                ; TELL THE VIC WE WANT TO GENERATE RASTER IRQS
01270  0AD0                        ; NOTE - BY DIRECTLY WRITING #$01 AND NOT SETTING BITS
01271  0AD0                        ; WE ARE ALSO TURNING OFF SPRITE/SPRITE SPRITE/BACKGROUND
01272  0AD0                        ; AND LIGHT PEN INTERRUPTS.. BUT THOSE ARE RATHER SHITE ANYWAYS
01273  0AD0                        ; AND WON'T BE MISSED
01274  0AD0             
01275  0AD0  8D 1A D0              STA VIC_INTERRUPT_CONTROL
01276  0AD3             
01277  0AD3  A9 32                 LDA #$32                ; NUMBER OF THE RASTERLINE WE WANT THE IRQ TO OCCUR AT
01278  0AD5  8D 12 D0              STA VIC_RASTER_LINE     ; WE USED THIS FOR WAITFRAME, REMEMBER? READING GIVES THE CURRENT
01279  0AD8                        ; RASTER LINE, WRITING SETS THE LINE FOR A RASTER INTERRUPT TO OCCUR
01280  0AD8             
01281  0AD8                        
01282  0AD8  AD 11 D0              LDA VIC_SCREEN_CONTROL  ; FETCH THE VIC_SCREEN_CONTROL
01283  0ADB  29 7F                 AND #%01111111          ; MASK THE SURROUNDING BITS
01284  0ADD  8D 11 D0              STA VIC_SCREEN_CONTROL
01285  0AE0                        ; SET THE IRQ VECTOR TO POINT TO OUR ROUTINE
01286  0AE0  A9 F2                 LDA #<IRQTOPSCREEN
01287  0AE2  8D 14 03              STA $0314
01288  0AE5  A9 0A                 LDA #>IRQTOPSCREEN
01289  0AE7  8D 15 03              STA $0315
01290  0AEA                        ; ACKNOWLEGE ANY PENDING CIA TIMER INTERRUPTS
01291  0AEA                        ; JUST TO BE 100% SAFE
01292  0AEA  AD 0D DC              LDA $DC0D
01293  0AED  AD 0D DD              LDA $DD0D
01294  0AF0             
01295  0AF0  58                    CLI                     ; TURN INTERRUPTS BACK ON
01296  0AF1  60                    RTS
01297  0AF2             
01298  0AF2             ;===============================================================================
01299  0AF2             ; IRQ - TOP SCREEN
01300  0AF2             ;===============================================================================
01301  0AF2             ; IRQ SET TO THE VERY TOP OF THE VISIBLE SCREEN (IN BORDER) GOOD FOR SCREEN
01302  0AF2             ; SETUP AND TIMERS
01303  0AF2             ;-------------------------------------------------------------------------------
01304  0AF2             
01305  0AF2             ; RASTER LINE 50
01306  0AF2             
01307  0AF2             
01308  0AF2             IRQTOPSCREEN 
01309  0AF2  78                    SEI                    ; ACKNOWLEDGE VIC IRQ
01310  0AF3  AD 19 D0              LDA $D019
01311  0AF6  8D 19 D0              STA $D019
01312  0AF9                        ; INSTALL GLITCH IRQ
01313  0AF9  A9 39                 LDA #<IRQGLITCHCATCHER
01314  0AFB  8D 14 03              STA $0314
01315  0AFE  A9 0B                 LDA #>IRQGLITCHCATCHER
01316  0B00  8D 15 03              STA $0315
01317  0B03                        
01318  0B03  A9 BF                 LDA #$BF
01319  0B05  8D 12 D0              STA $D012
01320  0B08             
01321  0B08             @START
01322  0B08  A5 26                 LDA CURRENT_SCREEN + 1          ; HI BYTE OF THE CURRENT SCREEN
01323  0B0A  C9 44                 CMP #>SCREEN2_MEM               ; COMPARE TO START OF SCREEN2
01324  0B0C  F0 08                 BEQ @SCREEN2
01325  0B0E             
01326  0B0E  A9 02                 LDA #%00000010                  ; SET VIC TO SCREEN0, CHARSET 1, 18
01327  0B10  8D 18 D0              STA VIC_MEMORY_CONTROL
01328  0B13             
01329  0B13  4C 1B 0B              JMP @SCROLL
01330  0B16             
01331  0B16             @SCREEN2
01332  0B16             ;        LDA MAPTWOLOADED
01333  0B16             ;        BNE @ALLEYSET
01334  0B16             
01335  0B16             
01336  0B16  A9 12                 LDA #18                  ; SET VIC TO SCREEN1, CHARSET 1, 18
01337  0B18  8D 18 D0              STA VIC_MEMORY_CONTROL
01338  0B1B             
01339  0B1B             ;@ALLEYSET
01340  0B1B             ;        LDA #30
01341  0B1B             ;        STA VIC_MEMORY_CONTROL
01342  0B1B             
01343  0B1B             @SCROLL
01344  0B1B                        ;JSR RIVERANIMATION2
01345  0B1B             ;        JSR WATERANIMATION
01346  0B1B             ;        JSR FLOATDOWN
01347  0B1B             
01348  0B1B             ;SCREEN HARDWARE SCROLL (VERT)
01349  0B1B  AD 11 D0              LDA VIC_SCREEN_CONTROL_Y        ; TAKE THE CURRENT VALUES
01350  0B1E  29 F8                 AND #%11111000                  ; MASK OUT THE SCROLL VALUES
01351  0B20  05 2A                 ORA SCROLL_COUNT_Y              ; OR IN THE SCROLL COUNT (BITS 0-2 - Y SCROLL VALUE)
01352  0B22  8D 11 D0              STA VIC_SCREEN_CONTROL_Y        ; SAVE THE UPDATED INFO IN THE REGISTERS
01353  0B25             
01354  0B25             ;SCREEN HARDWARE SCROLL (HORIZ)
01355  0B25  AD 16 D0              LDA VIC_SCREEN_CONTROL_X        ; TAKE THE CURRENT VALUES (SET AT IRQSCOREBOARD)
01356  0B28  29 F8                 AND #%11111000                  ; MASK OUT THE LOWER 4 BITS (SCREEN COLS AND SCROLL)
01357  0B2A  05 29                 ORA SCROLL_COUNT_X              ; OR IN THE SCROLL COUNT (BITS 0-2 - X SCROLL VALUE)
01358  0B2C  8D 16 D0              STA VIC_SCREEN_CONTROL_X        ; SAVE THE UPDATED INFO
01359  0B2F                        
01360  0B2F  20 A8 0E              JSR READJOYSTICK
01361  0B32  20 09 0F              JSR JOYBUTTON
01362  0B35                        ;JSR ANIMATESTREETLIGHT
01363  0B35                        
01364  0B35  58                    CLI
01365  0B36                        ;JSR DETECTKEYPRESS
01366  0B36  4C 31 EA              JMP $EA31
01367  0B39             
01368  0B39             
01369  0B39             ;===============================================================================
01370  0B39             ; IRQ GLITCHCATCHER
01371  0B39             ;===============================================================================
01372  0B39             ; FORCE BADLINE, BLACK OUT CHARACTER GARBLE FROM SCROLL, AND ADJUST TIMING GLITCHES
01373  0B39             ;-------------------------------------------------------------------------------
01374  0B39             
01375  0B39             ; RASTER LINE 191
01376  0B39             
01377  0B39             
01378  0B39             IRQGLITCHCATCHER 
01379  0B39  78                    SEI
01380  0B3A                        ; ACKNOWLEDGE VIC IRQ
01381  0B3A  AD 19 D0              LDA $D019
01382  0B3D  8D 19 D0              STA $D019
01383  0B40                        ; INSTALL SCROLLER IRQ
01384  0B40  A9 98                 LDA #<IRQSCOREBOARD
01385  0B42  8D 14 03              STA $0314
01386  0B45  A9 0B                 LDA #>IRQSCOREBOARD
01387  0B47  8D 15 03              STA $0315
01388  0B4A                        
01389  0B4A                        ; NR OF RASTERLINE WE WANT THE NEXT IRQ TO OCCUR AT
01390  0B4A  A9 C7                 LDA #$C7                 ; SCOREBOARD APPEARS 8 RASTER LINES AFTER THE GLITCH CATCHER
01391  0B4C  8D 12 D0              STA $D012
01392  0B4F             
01393  0B4F  A5 2A                 LDA SCROLL_COUNT_Y
01394  0B51  F0 2D                 BEQ @FR_0
01395  0B53  C9 07                 CMP #7
01396  0B55  F0 28                 BEQ @FR_7
01397  0B57  C9 01                 CMP #1
01398  0B59  F0 17                 BEQ @FR_1
01399  0B5B  C9 02                 CMP #2
01400  0B5D  F0 13                 BEQ @FR_2
01401  0B5F  C9 03                 CMP #3
01402  0B61  F0 11                 BEQ @FR_3
01403  0B63  C9 04                 CMP #4
01404  0B65  F0 10                 BEQ @FR_4
01405  0B67  C9 05                 CMP #5
01406  0B69  F0 0D                 BEQ @FR_5
01407  0B6B  C9 06                 CMP #6
01408  0B6D  F0 0B                 BEQ @FR_6
01409  0B6F             
01410  0B6F  4C 80 0B              JMP @START
01411  0B72             
01412  0B72             @FR_1
01413  0B72             @FR_2
01414  0B72  EA                    NOP
01415  0B73  EA                    NOP
01416  0B74             @FR_3
01417  0B74  EA                    NOP
01418  0B75  EA                    NOP
01419  0B76  EA                    NOP
01420  0B77             @FR_4
01421  0B77  EA                    NOP
01422  0B78             @FR_5
01423  0B78  EA                    NOP
01424  0B79  EA                    NOP
01425  0B7A             @FR_6
01426  0B7A  EA                    NOP
01427  0B7B  EA                    NOP
01428  0B7C  EA                    NOP
01429  0B7D  EA                    NOP
01430  0B7E  EA                    NOP
01431  0B7F             @FR_7
01432  0B7F  EA                    NOP
01433  0B80             @FR_0
01434  0B80             
01435  0B80             @START
01436  0B80                        
01437  0B80  A9 66                 LDA #102                          ; SET VIC TO SCREEN 6, CHARSET 2
01438  0B82  8D 18 D0              STA VIC_MEMORY_CONTROL
01439  0B85  A9 57                 LDA #%01010111                          ; SET Y TO SCROLL 7 TO FORCE BADLINE TO EVERY FRAME
01440  0B87  8D 11 D0              STA VIC_SCREEN_CONTROL_Y                ; SET EXTENDED BACKGROUND MODE
01441  0B8A  A9 D0                 LDA #%11010000
01442  0B8C  8D 16 D0              STA VIC_SCREEN_CONTROL_X                ; X SCROLL TO 0 / MULTICOLOR ON / 38 COLS
01443  0B8F                        ; IF YOU SET MULTICOLOR AND EXTENDED BACKGROUND
01444  0B8F                        ; YOU GET AN ILLEGAL MODE THAT SETS EVERYTHING TO
01445  0B8F                        ; BLACK
01446  0B8F  A9 00                 LDA #COLOR_BLACK
01447  0B91  8D 21 D0              STA VIC_BACKGROUND_COLOR
01448  0B94  58                    CLI
01449  0B95  4C 31 EA              JMP $EA31
01450  0B98             
01451  0B98             ;===============================================================================
01452  0B98             ; RQ - BOTTOM SCREEN / SCOREBOARD
01453  0B98             ;===============================================================================
01454  0B98             ; IRQ AT THE TOP OF THE SCOREBOARD
01455  0B98             
01456  0B98             ; RASTER LINE 199
01457  0B98             
01458  0B98             IRQSCOREBOARD 
01459  0B98  78                    SEI                        ; ACKNOWLEDGE VIC IRQ
01460  0B99  AD 19 D0              LDA $D019
01461  0B9C  8D 19 D0              STA $D019
01462  0B9F             
01463  0B9F  A9 F2                 LDA #<IRQTOPSCREEN
01464  0BA1  8D 14 03              STA $0314
01465  0BA4  A9 0A                 LDA #>IRQTOPSCREEN
01466  0BA6                        ; INSTALL SCROLLER IRQ
01467  0BA6             
01468  0BA6             ;        LDA #<ANIMATIONROUTINE
01469  0BA6             ;        STA $0314
01470  0BA6             ;        LDA #>ANIMATIONROUTINE
01471  0BA6  8D 15 03              STA $0315
01472  0BA9                        
01473  0BA9             ; NR OF RASTERLINE WE WANT THE NEXT IRQ TO OCCUR AT
01474  0BA9  A9 10                 LDA #$10
01475  0BAB  8D 12 D0              STA $D012
01476  0BAE             
01477  0BAE  A9 10                 LDA #%00010000                          ; RESTORE TO Y SCROLL = 0
01478  0BB0  8D 11 D0              STA VIC_SCREEN_CONTROL_Y                ; BE AWARE THAT :
01479  0BB3                        ; BIT #0-2 = VERTICAL SCROLL
01480  0BB3                        ; BIT #3 = SCREEN HEIGHT (0 = 24 ROWS)
01481  0BB3                        ; BIT #4 = SCREEN ON/OFF
01482  0BB3                        ; BIT #5 = TEXT/BITMAP (0 = TEXT)
01483  0BB3                        ; BIT #6 = EXTENDED BACKGROUND ON/OFF
01484  0BB3                        ; BIT #7 = READ/WRITE CURRENT RASTER LINE BIT #8
01485  0BB3                        ; SO '3' IS THE DEFAULT VERT SCROLL LOCATION
01486  0BB3  A9 D0                 LDA #%11010000
01487  0BB5  8D 16 D0              STA VIC_SCREEN_CONTROL_X                ; SET SCREEN TO DEFAULT
01488  0BB8                        ; BIT #3 CONTROLS SCREEN WIDTH (0 = 38 COLS)
01489  0BB8                        ; BIT #4 CONTROLS MULTICOLOR (0 = OFF)
01490  0BB8             
01491  0BB8             
01492  0BB8                        ;JSR ENEMYRANDOMTIMER
01493  0BB8                        
01494  0BB8  58                    CLI
01495  0BB9  4C 31 EA              JMP $EA31
01496  0BBC             
01497  0BBC  60                    RTS
01498  0BBD             
01499  0BBD             ANIMATIONROUTINE 
01500  0BBD  78                    SEI                        ; ACKNOWLEDGE VIC IRQ
01501  0BBE  AD 19 D0              LDA $D019
01502  0BC1  8D 19 D0              STA $D019
01503  0BC4             
01504  0BC4             ;        LDX #129
01505  0BC4             ;        JSR WATERANIMATION
01506  0BC4                        
01507  0BC4                        ; INSTALL SCROLLER IRQ
01508  0BC4  A9 F2                 LDA #<IRQTOPSCREEN
01509  0BC6  8D 14 03              STA $0314
01510  0BC9  A9 0A                 LDA #>IRQTOPSCREEN
01511  0BCB  8D 15 03              STA $0315
01512  0BCE                        
01513  0BCE             ;                                 ; NR OF RASTERLINE WE WANT THE NEXT IRQ TO OCCUR AT
01514  0BCE             
01515  0BCE  A9 50                 LDA #80
01516  0BD0  8D 12 D0              STA $D012
01517  0BD3             
01518  0BD3             @END_ENEMYTIMER 
01519  0BD3  58                    CLI
01520  0BD4  4C 31 EA              JMP $EA31
01521  0BD7             ;===============================================================================
01522  0BD7             ; GAME CORE ROUTINES
01523  0BD7             ;===============================================================================
01524  0BD7             ; CORE ROUTINES FOR THE FRAMEWORK - PETER 'SIG' HEWETT
01525  0BD7             ; 2016
01526  0BD7             ;-------------------------------------------------------------------------------
01527  0BD7             ; WAIT FOR THE RASTER TO REACH LINE $F8 - IF IT'S ALEADY THERE, WAIT FOR
01528  0BD7             ; THE NEXT SCREEN BLANK. THIS PREVENTS MISTIMINGS IF THE CODE RUNS TOO FAST
01529  0BD7             
01530  0BD7             WAITFRAME
01531  0BD7  AD 12 D0              LDA VIC_RASTER_LINE         ; FETCH THE CURRENT RASTER LINE
01532  0BDA  C9 F8                 CMP #$F8                    ; WAIT HERE TILL L
01533  0BDC  F0 F9                 BEQ WAITFRAME
01534  0BDE                        
01535  0BDE             @WAITSTEP2 
01536  0BDE  AD 12 D0              LDA VIC_RASTER_LINE
01537  0BE1  C9 F8                 CMP #$F8
01538  0BE3  D0 F9                 BNE @WAITSTEP2
01539  0BE5  60                    RTS
01540  0BE6             
01541  0BE6             ;-------------------------------------------------------------------------------
01542  0BE6             ; UPDATE TIMERS
01543  0BE6             ;-------------------------------------------------------------------------------
01544  0BE6             ; 2 BASIC TIMERS - A FAST TIMER THAT IS UPDATED EVERY FRAME,
01545  0BE6             ; AND A SLOW_TIMER UPDATED EVERY 16 FRAMES
01546  0BE6             ;-------------------------------------------------------------------------------
01547  0BE6             
01548  0BE6             UPDATETIMERS 
01549  0BE6  E6 08                 INC TIMER                       ; INCREMENT TIMER BY 1
01550  0BE8  A5 08                 LDA TIMER
01551  0BEA  29 0F                 AND #$0F                        ; CHECK IF IT'S EQUAL TO 16
01552  0BEC  F0 01                 BEQ @UPDATESLOWTIMER            ; IF SO WE UPDATE SLOW_TIMER
01553  0BEE  60                    RTS
01554  0BEF             
01555  0BEF             @UPDATESLOWTIMER 
01556  0BEF  E6 09                 INC SLOW_TIMER                  ; INCREMENT SLOW TIMER
01557  0BF1  60                    RTS
01558  0BF2             
01559  0BF2             DETECTKEYPRESS 
01560  0BF2  A9 FE                 LDA #%11111110         ; PULL ROW 0 LOW (SPACE IS IN ROW 0, BIT 4)
01561  0BF4  8D 00 DC              STA $DC00
01562  0BF7  AD 01 DC              LDA $DC01              ; READ COLUMN
01563  0BFA  29 10                 AND #%00010000         ; BIT 4 = 0 WHEN SPACE IS PRESSED
01564  0BFC  D0 05                 BNE NO_KEY             ; IF BIT IS 1, NOT PRESSED
01565  0BFE             
01566  0BFE  A9 01                 LDA #1
01567  0C00  8D 20 D0              STA $D020              ; CHANGE BORDER COLOR IF SPACE IS PRESSED
01568  0C03             
01569  0C03             NO_KEY
01570  0C03  60                    RTS
01571  0C04             
01572  0C04             
01573  0C04             LOADCOLORS 
01574  0C04  A2 00                 LDX #0
01575  0C06             LOADCOLORSLOOP 
01576  0C06                        ;LDA COLOR_DATA, X
01577  0C06  BD AA 80              LDA ATTRIBUTE2_MEM,X
01578  0C09  9D 00 D8              STA $D800,X  ; WRITE TO COLOR RAM
01579  0C0C  E8                    INX
01580  0C0D  EC E8 03              CPX $03E8    ; 1000 BYTES
01581  0C10  D0 F4                 BNE LOADCOLORSLOOP
01582  0C12  60                    RTS
01583  0C13             
01584  0C13             LOADSCREEN 
01585  0C13  A2 00                 LDX #0
01586  0C15             LOADSCREENLOOP 
01587  0C15                        ;LDA SCREEN_DATA, X
01588  0C15  BD 19 79              LDA TILE_MEM,X
01589  0C18  9D 00 04              STA $0400,X  ; WRITE TO SCREEN RAM
01590  0C1B  E8                    INX
01591  0C1C  EC E8 03              CPX $03E8    ; 1000 BYTES (40X25 SCREEN)
01592  0C1F  D0 F4                 BNE LOADSCREENLOOP
01593  0C21  60                    RTS
01594  0C22             
01595  0C22             ; LOAD IN OUR CHARACTER SETS:
01596  0C22             
01597  0C22             ; = 0: HOTEL
01598  0C22             ; = 1: ALLEYWAY
01599  0C22             LOADALLEYMAP 
01600  0C22  A2 00                 LDX #0                      ; INITIALIZE PAGE COUNTER TO 0
01601  0C24  A0 00                 LDY #0                      ; INITIALIZE BYTE COUNTER WITHIN PAGE TO 0
01602  0C26             
01603  0C26             
01604  0C26             ; = 0 - HOTEL MAP
01605  0C26             ; = 1 - ALLEYWAY MAP
01606  0C26             
01607  0C26             ;        LDA MAPTWOLOADED
01608  0C26             ;        BNE @LOADALLEYMAP2          ;  = 1: LOAD ALLEYWAY MAP
01609  0C26             
01610  0C26             ;        LDA #<MAP_CHAR_MEM
01611  0C26             ;        STA ZEROPAGE_POINTER_4
01612  0C26             ;        LDA #>MAP_CHAR_MEM
01613  0C26             ;        STA ZEROPAGE_POINTER_4 + 1
01614  0C26             ;        JMP @SKIPALLEYMAP
01615  0C26             
01616  0C26             @LOADALLEYMAP2 
01617  0C26  A9 19                 LDA #<MAP2_CHAR_MEM
01618  0C28  85 23                 STA ZEROPAGE_POINTER_4
01619  0C2A  A9 7C                 LDA #>MAP2_CHAR_MEM
01620  0C2C  85 24                 STA ZEROPAGE_POINTER_4 + 1
01621  0C2E             
01622  0C2E             ; MAP2_CHAR_MEM: AT $7C29 (31785), 41, 124
01623  0C2E             
01624  0C2E             @SKIPALLEYMAP2 
01625  0C2E  A9 00                 LDA #0
01626  0C30  85 19                 STA ZEROPAGE_POINTER_2       ; INITIALIZE LOW BYTE OF THE POINTER (START ADDRESS LOW BYTE)
01627  0C32  A9 7C                 LDA #124
01628  0C34  85 1A                 STA ZEROPAGE_POINTER_2 + 1   ; INITIALIZE HIGH BYTE OF THE POINTER (START ADDRESS HIGH BYTE)
01629  0C36             
01630  0C36             COPY_LOOPFORALLEY 
01631  0C36  B1 23                 LDA (ZEROPAGE_POINTER_4),Y         ; LOAD BYTE FROM MAP2_CHAR_MEM
01632  0C38  91 19                 STA (ZEROPAGE_POINTER_2),Y  ; STORE IT IN THE ADDRESS POINTED BY ZEROPAGE_POINTER_2 + Y
01633  0C3A  C8                    INY                          ; INCREMENT Y (MOVE TO THE NEXT BYTE)
01634  0C3B             
01635  0C3B  D0 09                 BNE CONTINUE_COPYALLEY            ; IF Y IS NOT ZERO, CONTINUE COPYING
01636  0C3D             
01637  0C3D  E6 1A                 INC ZEROPAGE_POINTER_2 + 1   ; IF Y IS ZERO, INCREMENT THE HIGH BYTE OF THE POINTER
01638  0C3F  E6 24                 INC ZEROPAGE_POINTER_4 + 1
01639  0C41  E8                    INX                          ; INCREMENT X (PAGE COUNTER)
01640  0C42             
01641  0C42  E0 08                 CPX #8                     ; CHECK IF 7 FULL PAGES (1792 BYTES) HAVE BEEN COPIED
01642  0C44  F0 03                 BEQ LAST_PARTALLEY                ; IF SO, HANDLE THE REMAINING 240 BYTES
01643  0C46             
01644  0C46             CONTINUE_COPYALLEY 
01645  0C46  4C 36 0C              JMP COPY_LOOPFORALLEY                ; JUMP BACK TO CONTINUE COPYING
01646  0C49             
01647  0C49             LAST_PARTALLEY 
01648  0C49  A9 00                 LDA #0                       ; RESET Y TO 0 FOR THE LAST PART
01649  0C4B  A0 00                 LDY #0                       ; RESET Y TO 0 FOR BYTE COPY (COPY THE REMAINING 240 BYTES)
01650  0C4D                        
01651  0C4D                        ; COPY THE REMAINING 240 BYTES
01652  0C4D                        ; NOTE: WE ARE ALREADY AT $4800 + 1792 BYTES, SO COPY THE LAST 240 BYTES
01653  0C4D  E0 09                 CPX #9                     ; ENSURE WE'RE BEYOND THE 7 FULL PAGES
01654  0C4F  90 03                 BCC DONE2                     ; IF DONE COPYING 2032 BYTES, WE EXIT
01655  0C51             
01656  0C51                        ; WE COPY THE LAST 240 BYTES
01657  0C51                        ; WE CAN NOW JUMP BACK INTO COPYING THE FINAL 240 BYTES.
01658  0C51  4C 36 0C              JMP COPY_LOOPFORALLEY              ; CONTINUE COPYING FROM THE LAST REMAINING BYTES
01659  0C54                        
01660  0C54             DONE2
01661  0C54  60                    RTS
01662  0C55             
01663  0C55             
01664  0C55             LOADHOTELMAP 
01665  0C55  A2 00                 LDX #0                      ; INITIALIZE PAGE COUNTER TO 0
01666  0C57  A0 00                 LDY #0                      ; INITIALIZE BYTE COUNTER WITHIN PAGE TO 0
01667  0C59             
01668  0C59             
01669  0C59             ; = 0 - HOTEL MAP
01670  0C59             ; = 1 - ALLEYWAY MAP
01671  0C59             
01672  0C59  A9 6F                 LDA #<MAP_CHAR_MEM
01673  0C5B  85 23                 STA ZEROPAGE_POINTER_4
01674  0C5D  A9 3C                 LDA #>MAP_CHAR_MEM
01675  0C5F  85 24                 STA ZEROPAGE_POINTER_4 + 1
01676  0C61  4C 64 0C              JMP @SKIPALLEYMAP
01677  0C64             
01678  0C64             ; 0, $48
01679  0C64             
01680  0C64             @SKIPALLEYMAP 
01681  0C64  A9 00                 LDA #0
01682  0C66  85 19                 STA ZEROPAGE_POINTER_2       ; INITIALIZE LOW BYTE OF THE POINTER (START ADDRESS LOW BYTE)
01683  0C68  A9 7C                 LDA #124
01684  0C6A  85 1A                 STA ZEROPAGE_POINTER_2 + 1   ; INITIALIZE HIGH BYTE OF THE POINTER (START ADDRESS HIGH BYTE)
01685  0C6C             
01686  0C6C             COPY_LOOPSET2 
01687  0C6C  B1 23                 LDA (ZEROPAGE_POINTER_4),Y         ; LOAD BYTE FROM MAP2_CHAR_MEM
01688  0C6E  91 19                 STA (ZEROPAGE_POINTER_2),Y  ; STORE IT IN THE ADDRESS POINTED BY ZEROPAGE_POINTER_2 + Y
01689  0C70  C8                    INY                          ; INCREMENT Y (MOVE TO THE NEXT BYTE)
01690  0C71             
01691  0C71  D0 09                 BNE CONTINUE_COPY2            ; IF Y IS NOT ZERO, CONTINUE COPYING
01692  0C73             
01693  0C73  E6 1A                 INC ZEROPAGE_POINTER_2 + 1   ; IF Y IS ZERO, INCREMENT THE HIGH BYTE OF THE POINTER
01694  0C75  E6 24                 INC ZEROPAGE_POINTER_4 + 1
01695  0C77  E8                    INX                          ; INCREMENT X (PAGE COUNTER)
01696  0C78             
01697  0C78  E0 07                 CPX #$07                     ; CHECK IF 7 FULL PAGES (1792 BYTES) HAVE BEEN COPIED
01698  0C7A  F0 03                 BEQ LAST_PART2                ; IF SO, HANDLE THE REMAINING 240 BYTES
01699  0C7C             
01700  0C7C             CONTINUE_COPY2 
01701  0C7C  4C 6C 0C              JMP COPY_LOOPSET2                ; JUMP BACK TO CONTINUE COPYING
01702  0C7F             
01703  0C7F             LAST_PART2 
01704  0C7F  A9 00                 LDA #0                       ; RESET Y TO 0 FOR THE LAST PART
01705  0C81  A0 00                 LDY #0                       ; RESET Y TO 0 FOR BYTE COPY (COPY THE REMAINING 240 BYTES)
01706  0C83                        
01707  0C83                        ; COPY THE REMAINING 240 BYTES
01708  0C83                        ; NOTE: WE ARE ALREADY AT $4800 + 1792 BYTES, SO COPY THE LAST 240 BYTES
01709  0C83  E0 09                 CPX #$09                     ; ENSURE WE'RE BEYOND THE 7 FULL PAGES
01710  0C85  90 03                 BCC DONE                     ; IF DONE COPYING 2032 BYTES, WE EXIT
01711  0C87             
01712  0C87                        ; WE COPY THE LAST 240 BYTES
01713  0C87                        ; WE CAN NOW JUMP BACK INTO COPYING THE FINAL 240 BYTES.
01714  0C87  4C 6C 0C              JMP COPY_LOOPSET2              ; CONTINUE COPYING FROM THE LAST REMAINING BYTES
01715  0C8A                        
01716  0C8A             DONE
01717  0C8A  60                    RTS                          ; RETURN FROM SUBROUTINE                       ; RETURN FROM SUBROUTINE
01718  0C8B             
01719  0C8B             
01720  0C8B             LOADNEWTILES 
01721  0C8B  A2 00                 LDX #0
01722  0C8D                        
01723  0C8D             ; SET UP ZERO-PAGE POINTER
01724  0C8D  A9 19                 LDA #<TILE_MEM
01725  0C8F  85 19                 STA ZEROPAGE_POINTER_2
01726  0C91  A9 79                 LDA #>TILE_MEM
01727  0C93  85 1A                 STA ZEROPAGE_POINTER_2 + 1
01728  0C95             
01729  0C95             ; COPY 512 BYTES FROM TILESDATA TO ZERO-PAGE ($20 - $220)
01730  0C95             
01731  0C95             COPY_OUTER_LOOP 
01732  0C95  A0 00                 LDY #0
01733  0C97             
01734  0C97             
01735  0C97             LOAD_TILES 
01736  0C97  B1 19                 LDA (ZEROPAGE_POINTER_2),Y
01737  0C99  99 20 00              STA $20,Y
01738  0C9C  C8                    INY
01739  0C9D  C0 10                 CPY #$10        ; 16 BYTES PER INNER LOOP (32 * 16 BYTES = 512 TOTAL)
01740  0C9F  D0 F6                 BNE LOAD_TILES
01741  0CA1  E6 1A                 INC ZEROPAGE_POINTER_2 + 1
01742  0CA3  C0 10                 CPY #$10        ; IF 256 BYTES HAVE BEEN COPIED (16 * 16), BREAK
01743  0CA5  D0 EE                 BNE COPY_OUTER_LOOP
01744  0CA7  60                    RTS
01745  0CA8             
01746  0CA8             LOADALLEYTILES 
01747  0CA8  A2 00                 LDX #0
01748  0CAA                        
01749  0CAA             ; SET UP ZERO-PAGE POINTER
01750  0CAA  A9 A1                 LDA #<TILE2_MEM
01751  0CAC  85 19                 STA ZEROPAGE_POINTER_2
01752  0CAE  A9 81                 LDA #>TILE2_MEM
01753  0CB0  85 1A                 STA ZEROPAGE_POINTER_2 + 1
01754  0CB2             
01755  0CB2             ; COPY 512 BYTES FROM TILESDATA TO ZERO-PAGE ($20 - $220)
01756  0CB2             
01757  0CB2             COPY_ALLEY_TILES 
01758  0CB2  A0 00                 LDY #0
01759  0CB4             
01760  0CB4             
01761  0CB4             LOAD_ALLEYTILES 
01762  0CB4  B1 19                 LDA (ZEROPAGE_POINTER_2),Y
01763  0CB6  99 20 00              STA 32,Y
01764  0CB9  C8                    INY
01765  0CBA  C0 16                 CPY #22        ; 16 BYTES PER INNER LOOP (32 * 16 BYTES = 512 TOTAL)
01766  0CBC  D0 D9                 BNE LOAD_TILES
01767  0CBE  E6 1A                 INC ZEROPAGE_POINTER_2 + 1
01768  0CC0  C0 16                 CPY #22        ; IF 256 BYTES HAVE BEEN COPIED (16 * 16), BREAK
01769  0CC2  D0 EE                 BNE COPY_ALLEY_TILES
01770  0CC4  60                    RTS
01771  0CC5             
01772  0CC5             ; TOMORROW 4/24/25: HOMEWORK
01773  0CC5             
01774  0CC5             ; INSTEAD OF REFERENCING THE TABLES IN MAIN.ASM
01775  0CC5             ; WE WE NOW ACCESS THE MEMORY ADDRESSES!
01776  0CC5             
01777  0CC5             ; SET UP ATTRIBUTE = $5600
01778  0CC5             ; SET UP MAP_MEM = $8000
01779  0CC5             ; SET UP TILE_MEM = $9000
01780  0CC5             
01781  0CC5             LOADCHSETFROMDISK 
01782  0CC5  BD A3 0D              LDA LOAD_ADDRESS_TABLE_LO,X
01783  0CC8  8D BD 0D              STA ADDRLO
01784  0CCB  BD A8 0D              LDA LOAD_ADDRESS_TABLE_HI,X
01785  0CCE  8D BE 0D              STA ADDRHI
01786  0CD1             
01787  0CD1  BD B8 0D              LDA FILE_LENGTH_TABLE,X
01788  0CD4  8D A0 0D              STA FLENGTH
01789  0CD7             
01790  0CD7  BD AD 0D              LDA FILENAME_TABLE_LO,X    ; READ FILENAME(X)
01791  0CDA  8D A1 0D              STA FILELO
01792  0CDD             
01793  0CDD  BD B2 0D              LDA FILENAME_TABLE_HI,X    ; READ FILENAME(X)
01794  0CE0  8D A2 0D              STA FILEHI
01795  0CE3             
01796  0CE3  BD A0 0D              LDA FLENGTH,X
01797  0CE6  AE A1 0D              LDX FILELO
01798  0CE9  AC A2 0D              LDY FILEHI
01799  0CEC  20 BD FF              JSR $FFBD           ; SETNAM
01800  0CEF             
01801  0CEF  A9 00                 LDA #$00            ; LOGICAL FILE NUMBER
01802  0CF1  A2 08                 LDX #$08            ; DEVICE 8 (TYPICAL FOR DISK DRIVE)
01803  0CF3  A0 00                 LDY #$00            ; SECONDARY ADDRESS (USED FOR LOADING)
01804  0CF5  20 BA FF              JSR $FFBA           ; SETLFS
01805  0CF8             
01806  0CF8  A9 00                 LDA #$00
01807  0CFA  AE BD 0D              LDX ADDRLO
01808  0CFD  AC BE 0D              LDY ADDRHI
01809  0D00             
01810  0D00  20 D5 FF              JSR $FFD5           ; LOAD (KERNAL)
01811  0D03  B0 4C                 BCS FILE_NOT_FOUND
01812  0D05             
01813  0D05             ;        LDA #3
01814  0D05             ;        STA HOTELCHARS
01815  0D05             
01816  0D05  A9 07                 LDA #7
01817  0D07  8D 20 D0              STA 53280
01818  0D0A  60                    RTS
01819  0D0B             
01820  0D0B             LOADCHSETFROMDISK2 
01821  0D0B  BD A3 0D              LDA LOAD_ADDRESS_TABLE_LO,X
01822  0D0E  8D BD 0D              STA ADDRLO
01823  0D11  BD A8 0D              LDA LOAD_ADDRESS_TABLE_HI,X
01824  0D14  8D BE 0D              STA ADDRHI
01825  0D17             
01826  0D17  BD B8 0D              LDA FILE_LENGTH_TABLE,X
01827  0D1A  8D A0 0D              STA FLENGTH
01828  0D1D             
01829  0D1D  BD AD 0D              LDA FILENAME_TABLE_LO,X    ; READ FILENAME(X)
01830  0D20  8D A1 0D              STA FILELO
01831  0D23             
01832  0D23  BD B2 0D              LDA FILENAME_TABLE_HI,X    ; READ FILENAME(X)
01833  0D26  8D A2 0D              STA FILEHI
01834  0D29             
01835  0D29  BD A0 0D              LDA FLENGTH,X
01836  0D2C  AE A1 0D              LDX FILELO
01837  0D2F  AC A2 0D              LDY FILEHI
01838  0D32  20 BD FF              JSR $FFBD           ; SETNAM
01839  0D35             
01840  0D35  A9 00                 LDA #$00            ; LOGICAL FILE NUMBER
01841  0D37  A2 08                 LDX #$08            ; DEVICE 8 (TYPICAL FOR DISK DRIVE)
01842  0D39  A0 00                 LDY #$00            ; SECONDARY ADDRESS (USED FOR LOADING)
01843  0D3B  20 BA FF              JSR $FFBA           ; SETLFS
01844  0D3E             
01845  0D3E  A9 00                 LDA #$00
01846  0D40  AE BD 0D              LDX ADDRLO
01847  0D43  AC BE 0D              LDY ADDRHI
01848  0D46             
01849  0D46  20 D5 FF              JSR $FFD5           ; LOAD (KERNAL)
01850  0D49  B0 06                 BCS FILE_NOT_FOUND
01851  0D4B             
01852  0D4B  A9 07                 LDA #7
01853  0D4D  8D 20 D0              STA 53280
01854  0D50  60                    RTS
01855  0D51             
01856  0D51             FILE_NOT_FOUND 
01857  0D51  A9 02                 LDA #2
01858  0D53  8D 3C D2              STA 53820
01859  0D56  60                    RTS
01860  0D57             
01861  0D57  48 4F 54   FILENAME1  BYTE "HOTELCHARS.BIN"
01862  0D65  48 4F 54   FILENAME2  BYTE "HOTEL4MAP.BIN"
01863  0D72  48 4F 54   FILENAME3  BYTE "HOTEL1ATTRIB.BIN"
01864  0D82  48 4F 54   FILENAME4  BYTE "HOTEL4TILES.BIN"
01865  0D91  41 4C 4C   FILENAME5  BYTE "ALLEY4CHARS.BIN"
01866  0DA0             
01867  0DA0  00         FLENGTH    BYTE 0
01868  0DA1  00         FILELO     BYTE 0
01869  0DA2  00         FILEHI     BYTE 0
01870  0DA3             
01871  0DA3  02 80 20   LOAD_ADDRESS_TABLE_LO BYTE <CHARLOAD,<MAP_MEM,<ATTRIBUTE_MEM,<TILE_MEM,<CHARLOAD
01872  0DA8  48 77 78   LOAD_ADDRESS_TABLE_HI BYTE >CHARLOAD,>MAP_MEM,>ATTRIBUTE_MEM,>TILE_MEM,>CHARLOAD
01873  0DAD             
01874  0DAD             ;FOUR DIFFERENT BYTES TO SELECT THE FILENAME TO LOAD
01875  0DAD  57 65 72   FILENAME_TABLE_LO BYTE <FILENAME1,<FILENAME2,<FILENAME3,<FILENAME4,<FILENAME5
01876  0DB2  0D 0D 0D   FILENAME_TABLE_HI BYTE >FILENAME1,>FILENAME2,>FILENAME3,>FILENAME4,>FILENAME5
01877  0DB7             
01878  0DB7             CHARLOAD   = $4802
01879  0DB7             ALLEYMAP   = $4802
01880  0DB7             TILESLOAD  = $8000
01881  0DB7  00         HOTELCHARS BYTE 0
01882  0DB8  0E 0D 10   FILE_LENGTH_TABLE BYTE 14,13,16,15,15
01883  0DBD             
01884  0DBD  00         ADDRLO     BYTE 0
01885  0DBE  00         ADDRHI     BYTE 0
01886  0DBF             
01887  0DBF             CLEARCHSETMEMORY 
01888  0DBF  A9 02                 LDA #<CHARLOAD
01889  0DC1  85 19                 STA ZEROPAGE_POINTER_2
01890  0DC3  A9 48                 LDA #>CHARLOAD
01891  0DC5  85 1A                 STA ZEROPAGE_POINTER_2 + 1
01892  0DC7             
01893  0DC7  A2 08                 LDX #8
01894  0DC9             CLEAR_CHSETDATA 
01895  0DC9  A0 00                 LDY #0
01896  0DCB             
01897  0DCB             CLEARING
01898  0DCB  A9 00                 LDA #0
01899  0DCD  91 19                 STA (ZEROPAGE_POINTER_2),Y
01900  0DCF  C8                    INY
01901  0DD0  D0 F9                 BNE CLEARING
01902  0DD2             
01903  0DD2  E6 1A                 INC ZEROPAGE_POINTER_2 + 1
01904  0DD4  CA                    DEX
01905  0DD5  E0 06                 CPX #6
01906  0DD7  D0 F0                 BNE CLEAR_CHSETDATA
01907  0DD9  60                    RTS
01908  0DDA             
01909  0DDA             ; ANIMATE A TILE
01910  0DDA             
01911  0DDA             ANIMATETILES 
01912  0DDA  A2 00                 LDX #0                      ; INITIALIZE PAGE COUNTER TO 0
01913  0DDC  A0 00                 LDY #0                      ; INITIALIZE BYTE COUNTER WITHIN PAGE TO 0
01914  0DDE             
01915  0DDE             
01916  0DDE             ; = 0 - HOTEL MAP
01917  0DDE             ; = 1 - ALLEYWAY MAP
01918  0DDE             
01919  0DDE             @LOADMAPANIMATE 
01920  0DDE  A9 19                 LDA #<MAP2_CHAR_MEM
01921  0DE0  85 23                 STA ZEROPAGE_POINTER_4
01922  0DE2  A9 7C                 LDA #>MAP2_CHAR_MEM
01923  0DE4  85 24                 STA ZEROPAGE_POINTER_4 + 1
01924  0DE6             
01925  0DE6             
01926  0DE6  A9 00                 LDA #0
01927  0DE8  85 19                 STA ZEROPAGE_POINTER_2       ; INITIALIZE LOW BYTE OF THE POINTER (START ADDRESS LOW BYTE)
01928  0DEA  A9 48                 LDA #$48
01929  0DEC  85 1A                 STA ZEROPAGE_POINTER_2 + 1   ; INITIALIZE HIGH BYTE OF THE POINTER (START ADDRESS HIGH BYTE)
01930  0DEE             
01931  0DEE             COPY_LOOPANIMATE 
01932  0DEE  B1 23                 LDA (ZEROPAGE_POINTER_4),Y         ; LOAD BYTE FROM MAP2_CHAR_MEM
01933  0DF0  91 19                 STA (ZEROPAGE_POINTER_2),Y  ; STORE IT IN THE ADDRESS POINTED BY ZEROPAGE_POINTER_2 + Y
01934  0DF2  C8                    INY                          ; INCREMENT Y (MOVE TO THE NEXT BYTE)
01935  0DF3             
01936  0DF3  D0 09                 BNE CONTINUE_COPYANIM            ; IF Y IS NOT ZERO, CONTINUE COPYING
01937  0DF5             
01938  0DF5  E6 1A                 INC ZEROPAGE_POINTER_2 + 1   ; IF Y IS ZERO, INCREMENT THE HIGH BYTE OF THE POINTER
01939  0DF7  E6 24                 INC ZEROPAGE_POINTER_4 + 1
01940  0DF9  E8                    INX                          ; INCREMENT X (PAGE COUNTER)
01941  0DFA             
01942  0DFA  E0 08                 CPX #$08                     ; CHECK IF 7 FULL PAGES (1792 BYTES) HAVE BEEN COPIED
01943  0DFC  F0 03                 BEQ LAST_PARTOFANIM                ; IF SO, HANDLE THE REMAINING 240 BYTES
01944  0DFE             
01945  0DFE             CONTINUE_COPYANIM 
01946  0DFE  4C EE 0D              JMP COPY_LOOPANIMATE                ; JUMP BACK TO CONTINUE COPYING
01947  0E01             
01948  0E01             LAST_PARTOFANIM 
01949  0E01  A9 00                 LDA #0                       ; RESET Y TO 0 FOR THE LAST PART
01950  0E03  A0 00                 LDY #0                       ; RESET Y TO 0 FOR BYTE COPY (COPY THE REMAINING 240 BYTES)
01951  0E05                        
01952  0E05                        ; COPY THE REMAINING 240 BYTES
01953  0E05                        ; NOTE: WE ARE ALREADY AT $4800 + 1792 BYTES, SO COPY THE LAST 240 BYTES
01954  0E05  E0 09                 CPX #$09                     ; ENSURE WE'RE BEYOND THE 7 FULL PAGES
01955  0E07  90 03                 BCC DONEANIM                     ; IF DONE COPYING 2032 BYTES, WE EXIT
01956  0E09             
01957  0E09                        ; WE COPY THE LAST 240 BYTES
01958  0E09                        ; WE CAN NOW JUMP BACK INTO COPYING THE FINAL 240 BYTES.
01959  0E09  4C EE 0D              JMP COPY_LOOPANIMATE              ; CONTINUE COPYING FROM THE LAST REMAINING BYTES
01960  0E0C                        
01961  0E0C             DONEANIM
01962  0E0C  60                    RTS
01963  0E0D             
01964  0E0D             ANIMATESTREETLIGHT 
01965  0E0D  A0 00                 LDY #0
01966  0E0F  A9 19                 LDA #<MAP2_CHAR_MEM
01967  0E11  85 23                 STA ZEROPAGE_POINTER_4
01968  0E13  A9 7C                 LDA #>MAP2_CHAR_MEM
01969  0E15  85 24                 STA ZEROPAGE_POINTER_4 + 1
01970  0E17             
01971  0E17  A9 D9                 LDA #217
01972  0E19  85 19                 STA ZEROPAGE_POINTER_2       ; INITIALIZE LOW BYTE OF THE POINTER (START ADDRESS LOW BYTE)
01973  0E1B  A9 48                 LDA #72
01974  0E1D  85 1A                 STA ZEROPAGE_POINTER_2 + 1   ; INITIALIZE HIGH BYTE OF THE POINTER (START ADDRESS HIGH BYTE)
01975  0E1F             
01976  0E1F             COPY_LIGHTS 
01977  0E1F  A9 D9                 LDA #217                     ; LOAD BYTE FROM MAP2_CHAR_MEM
01978  0E21  91 23                 STA (ZEROPAGE_POINTER_4),Y  ; STORE IT IN THE ADDRESS POINTED BY ZEROPAGE_POINTER_2 + Y
01979  0E23  C8                    INY                          ; INCREMENT Y (MOVE TO THE NEXT BYTE)
01980  0E24  C0 08                 CPY #8
01981  0E26  D0 F7                 BNE COPY_LIGHTS            ; IF Y IS NOT ZERO, CONTINUE COPYING
01982  0E28  60                    RTS
01983  0E29             
01984  0E29             ;===============================================================================
01985  0E29             ; ANIMATION TIMER
01986  0E29             ;===============================================================================
01987  0E29             ANIMSCREENCONTROL 
01988  0E29  A5 CB                 LDA $CB
01989  0E2B  C9 3C                 CMP #60
01990  0E2D  D0 0D                 BNE @EXIT
01991  0E2F  18                    CLC
01992  0E30  69 01                 ADC #1
01993  0E32  AD 2C 10              LDA ANIMLEVEL
01994  0E35  8D 2C 10              STA ANIMLEVEL
01995  0E38  8D 20 D0              STA 53280
01996  0E3B  60                    RTS
01997  0E3C             
01998  0E3C             @EXIT
01999  0E3C  60                    RTS
02000  0E3D             
02001  0E3D             WHICHKEY
02002  0E3D  A5 CB                 LDA $CB
02003  0E3F  C9 3C                 CMP #60
02004  0E41  D0 05                 BNE @EXITKEY
02005  0E43  A9 02                 LDA #2
02006  0E45  8D 20 D0              STA 53280
02007  0E48             
02008  0E48             @EXITKEY
02009  0E48  60                    RTS
02010  0E49             
02011  0E49             ;===============================================================================
02012  0E49             ; TILE DISPLAY (FUTURE)
02013  0E49             ;===============================================================================
02014  0E49             PLOTATILE
02015  0E49  A2 46                 LDX #70                        ; (129,26=DEFAULT), 61
02016  0E4B  A0 14                 LDY #20                          ; , 27
02017  0E4D             
02018  0E4D  20 99 22              JSR TILEMAP                     ; DRAW THE LEVEL MAP (SCREEN1)
02019  0E50                        ; AND INITIALIZE IT
02020  0E50             
02021  0E50  20 E3 20              JSR COPYTOBUFFER                ; COPY TO THE BACKBUFFER(SCREEN2)
02022  0E53  60                    RTS
02023  0E54             
02024  0E54             ;===============================================================================
02025  0E54             ; SCORE PANEL DISPLAY
02026  0E54             ;===============================================================================
02027  0E54             SCOREBOARD 
02028  0E54  85 06                 STA PARAM4                                      ; GAMESCORE DATA
02029  0E56  20 D7 1F              JSR GETLINEADDRESS
02030  0E59             
02031  0E59  BD 67 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X                ; FETCH LINE ADDRESS FOR COLOR
02032  0E5C  85 21                 STA ZEROPAGE_POINTER_3
02033  0E5E  BD 80 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
02034  0E61  85 22                 STA ZEROPAGE_POINTER_3 + 1
02035  0E63             
02036  0E63             ;===============================================================================
02037  0E63             ; GAMESCORE COUNTER 0-9 + CARRY BIT (INTO HIGH NYBBLE)
02038  0E63             ;===============================================================================
02039  0E63  F8                    SED
02040  0E64  18                    CLC
02041  0E65  AD 27 10              LDA GAMESCORE                                   ; INCREASE SCORE
02042  0E68  69 01                 ADC #1                                          ; 01,00
02043  0E6A  8D 27 10              STA GAMESCORE
02044  0E6D  AD 28 10              LDA GAMESCORE+1
02045  0E70  69 00                 ADC #0                                          ;00, 00
02046  0E72  8D 28 10              STA GAMESCORE+1
02047  0E75  AD 29 10              LDA GAMESCORE+2
02048  0E78  69 00                 ADC #0
02049  0E7A  8D 29 10              STA GAMESCORE+2
02050  0E7D  D8                    CLD
02051  0E7E  20 82 0E              JSR DISPLAY
02052  0E81  60                    RTS
02053  0E82             
02054  0E82             DISPLAY
02055  0E82  A0 0C                 LDY #12          ;SCREEN OFFSET
02056  0E84  A2 00                 LDX #0          ; SCORE BYTE INDEX
02057  0E86             SLOOP
02058  0E86  BD 27 10              LDA GAMESCORE,X
02059  0E89  48                    PHA
02060  0E8A  29 0F                 AND #$0F        ; COUNT BETWEEN 0-9
02061  0E8C  20 9D 0E              JSR PLOTDIGIT
02062  0E8F             
02063  0E8F  68                    PLA
02064  0E90  4A                    LSR A
02065  0E91  4A                    LSR A
02066  0E92  4A                    LSR A
02067  0E93  4A                    LSR A
02068  0E94  20 9D 0E              JSR PLOTDIGIT
02069  0E97  E8                    INX
02070  0E98  E0 03                 CPX #3
02071  0E9A  D0 EA                 BNE SLOOP
02072  0E9C  60                    RTS
02073  0E9D             
02074  0E9D             PLOTDIGIT
02075  0E9D  18                    CLC
02076  0E9E  69 30                 ADC #48                                      ; WRITE '0' ZERO ON SCREEN
02077  0EA0  91 17                 STA (ZEROPAGE_POINTER_1),Y                   ; WRITE THE CHARACTER CODE
02078  0EA2  A9 03                 LDA #COLOR_CYAN                              ; SET THE COLOR TO BLUE
02079  0EA4  91 21                 STA (ZEROPAGE_POINTER_3),Y                   ; WRITE THE COLOR TO COLOR RAM
02080  0EA6  88                    DEY
02081  0EA7  60                    RTS
02082  0EA8             
02083  0EA8             
02084  0EA8             ;-------------------------------------------------------------------------------
02085  0EA8             ;  READ JOY 2
02086  0EA8             ;-------------------------------------------------------------------------------
02087  0EA8             ; TRYING THIS A DIFFERENT WAY THIS TIME.  RATHER THAN HITTING THE JOYSTICK
02088  0EA8             ; REGISTERS THEN
02089  0EA8             ; DOING SOMETHING EVERY TIME - THE RESULTS WILL BE STORED IN JOY_X AND JOY_Y
02090  0EA8             ; WITH VALUES -1 TO 1 , WITH 0 MEANING 'NO INPUT'
02091  0EA8             ; - I SHOULD BE ABLE TO JUST ADD THIS TO A
02092  0EA8             ; SPRITE FOR A
02093  0EA8             ; SIMPLE MOVE, WHILE STILL BEING ABLE TO DO AN EASY CHECK FOR MORE COMPLICATED
02094  0EA8             ; MOVEMENT LATER ON
02095  0EA8             ;-------------------------------------------------------------------------------
02096  0EA8             
02097  0EA8             
02098  0EA8             READJOYSTICK 
02099  0EA8  A9 00                 LDA #$00                        ; RESET JOY X AND Y VARIABLES
02100  0EAA  8D 61 3C              STA JOY_X
02101  0EAD  8D 62 3C              STA JOY_Y
02102  0EB0  8D 63 3C              STA NE_DIR
02103  0EB3             @TESTUP    ; TEST FOR UP PRESSED
02104  0EB3  AD 12 10              LDA CHECKUP                     ; MASK FOR BIT 0
02105  0EB6  2C 00 DC              BIT JOY_2                       ; TEST BIT 0 FOR PRESS
02106  0EB9  D0 08                 BNE @TESTDOWN
02107  0EBB  A9 FF                 LDA #$FF                        ; SET JOY_Y TO -1 ($FF)
02108  0EBD  8D 62 3C              STA JOY_Y
02109  0EC0  4C D1 0E              JMP @TESTLEFT                   ; CAN'T BE UP AND DOWN
02110  0EC3             
02111  0EC3             @TESTDOWN  ; TEST FOR DOWN
02112  0EC3  AD 13 10              LDA CHECKDOWN                   ; MASK FOR BIT 1
02113  0EC6  2C 00 DC              BIT JOY_2
02114  0EC9  D0 06                 BNE @TESTLEFT
02115  0ECB  A9 01                 LDA #$01                        ; SET JOY_Y TO 1 ($01)
02116  0ECD  8D 62 3C              STA JOY_Y
02117  0ED0  60                    RTS
02118  0ED1             @TESTLEFT  ; TEST FOR LEFT
02119  0ED1  AD 14 10              LDA CHECKLEFT                   ; MASK FOR BIT 2
02120  0ED4  2C 00 DC              BIT JOY_2
02121  0ED7  D0 06                 BNE @TESTRIGHT
02122  0ED9  A9 FF                 LDA #$FF
02123  0EDB  8D 61 3C              STA JOY_X
02124  0EDE  60                    RTS                             ; CAN'T BE LEFT AND RIGHT - NO MORE TESTS
02125  0EDF             
02126  0EDF             @TESTRIGHT ; TEST FOR RIGHT
02127  0EDF  AD 15 10              LDA CHECKRIGHT                  ; MASK FOR BIT 3
02128  0EE2  2C 00 DC              BIT JOY_2
02129  0EE5  D0 06                 BNE @CHECKUPLEFT
02130  0EE7  A9 01                 LDA #$01
02131  0EE9  8D 61 3C              STA JOY_X
02132  0EEC  60                    RTS
02133  0EED             
02134  0EED             @CHECKUPLEFT ; CHECK ZERO = BUTTON PRESSED
02135  0EED  A9 10                 LDA #%00010000
02136  0EEF  2C 00 DC              BIT JOY_2                       ; CHECK ZERO = BUTTON PRESSED
02137  0EF2  D0 06                 BNE @TESTDOWNRIGHT              ; CONTINUE OTHER CHECKS
02138  0EF4             
02139  0EF4             @TESTUPLEFT 
02140  0EF4  A9 01                 LDA #1
02141  0EF6  8D 63 3C              STA NE_DIR
02142  0EF9  60                    RTS
02143  0EFA             
02144  0EFA             @TESTDOWNRIGHT ; TEST FOR RIGHT
02145  0EFA  AD 16 10              LDA CHECKDOWNRIGHT              ; MASK FOR BIT 3
02146  0EFD  2C 00 DC              BIT JOY_2
02147  0F00  D0 06                 BNE @DONE
02148  0F02  A9 02                 LDA #$02
02149  0F04  8D 63 3C              STA NE_DIR
02150  0F07  60                    RTS
02151  0F08             
02152  0F08             @DONE      
02153  0F08  60                    RTS
02154  0F09             
02155  0F09             
02156  0F09             ;-------------------------------------------------------------------------------
02157  0F09             ; JOYSTICK BUTTON PRESSED
02158  0F09             ;-------------------------------------------------------------------------------
02159  0F09             ; NOTIFIES THE STATE OF THE FIRE BUTTON ON JOYSTICK 2.
02160  0F09             ; BUTTON_ACTION IS SET TO ONE ON A SINGLE PRESS
02161  0F09             ; (THAT IS WHEN THE BUTTON IS RELEASED)
02162  0F09             ; BUTTON_PRESSED IS SET TO 1 WHILE THE BUTTON IS HELD DOWN.
02163  0F09             ; SO EITHER A LONG PRESS, OR A SINGLE PRESS CAN BE ACCOUNTED FOR.
02164  0F09             ; TODO I MIGHT PUT A 'PRESS COUNTER' IN HERE TO TEST HOW LONG THE BUTTON IS
02165  0F09             ; DOWN FOR..
02166  0F09             ;-------------------------------------------------------------------------------
02167  0F09             
02168  0F09             
02169  0F09             JOYBUTTON
02170  0F09             
02171  0F09  A9 01                 LDA #1                                  ; CHECKS FOR A PREVIOUS BUTTON ACTION
02172  0F0B  CD 66 3C              CMP BUTTON_ACTION                       ; AND CLEARS IT IF SET
02173  0F0E  D0 05                 BNE @BUTTONTEST
02174  0F10             
02175  0F10  A9 00                 LDA #0
02176  0F12  8D 66 3C              STA BUTTON_ACTION
02177  0F15             
02178  0F15             @BUTTONTEST 
02179  0F15  A9 10                 LDA #$10                                ; TEST BIT #4 IN JOY_2 REGISTER
02180  0F17  2C 00 DC              BIT JOY_2
02181  0F1A  D0 06                 BNE @BUTTONNOTPRESSED
02182  0F1C                        
02183  0F1C  A9 01                 LDA #1                                  ; IF IT'S PRESSED - SAVE THE RESULT
02184  0F1E  8D 65 3C              STA BUTTON_PRESSED                      ; AND RETURN - WE WANT A SINGLE PRESS
02185  0F21  60                    RTS                                     ; SO WE NEED TO WAIT FOR THE RELEASE
02186  0F22             
02187  0F22             @BUTTONNOTPRESSED 
02188  0F22             
02189  0F22  AD 65 3C              LDA BUTTON_PRESSED                      ; AND CHECK TO SEE IF IT WAS PRESSED FIRST
02190  0F25  D0 01                 BNE @BUTTONACTION                       ; IF IT WAS WE GO AND SET BUTTON_ACTION
02191  0F27  60                    RTS
02192  0F28             
02193  0F28             @BUTTONACTION 
02194  0F28  A9 00                 LDA #0
02195  0F2A  8D 65 3C              STA BUTTON_PRESSED
02196  0F2D  A9 01                 LDA #1
02197  0F2F  8D 66 3C              STA BUTTON_ACTION
02198  0F32             
02199  0F32  60                    RTS
02200  0F33             
02201  0F33             
02202  0F33             
02203  0F33             ;-------------------------------------------------------------------------------
02204  0F33             ; COPY CHARACTER SET
02205  0F33             ;-------------------------------------------------------------------------------
02206  0F33             ; COPY THE CUSTOM CHARACTER SET INTO THE VIC MEMORY BANK (2048 BYTES)
02207  0F33             ; ZEROPAGE_POINTER_1 = SOURCE
02208  0F33             ; ZEROPAGE_POINTER_2 = DEST
02209  0F33             ;
02210  0F33             ; RETURNS A,X,Y AND PARAM2 INTACT
02211  0F33             ;-------------------------------------------------------------------------------
02212  0F33             
02213  0F33             
02214  0F33             
02215  0F33             COPYCHARS
02216  0F33                        
02217  0F33             
02218  0F33             
02219  0F33  48                    PHA
02220  0F34  8A                    TXA
02221  0F35  48                    PHA
02222  0F36  98                    TYA
02223  0F37  48                    PHA
02224  0F38             
02225  0F38  A2 00                 LDX #$00                                ; CLEAR X, Y, A AND PARAM2
02226  0F3A  A0 00                 LDY #$00
02227  0F3C  A9 00                 LDA #$00
02228  0F3E  85 04                 STA PARAM2
02229  0F40             @NEXTLINE
02230  0F40             
02231  0F40             ; CHAR_MEM = ZEROPAGE_POINTER_1
02232  0F40             ; LEVEL_1_CHARS = ZEROPAGE_POINTER_2
02233  0F40             
02234  0F40  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; COPY FROM SOURCE TO TARGET
02235  0F42  91 19                 STA (ZEROPAGE_POINTER_2),Y
02236  0F44             
02237  0F44  E8                    INX                                     ; INCREMENT X / Y
02238  0F45  C8                    INY
02239  0F46  E0 08                 CPX #$08                                ; TEST FOR NEXT CHARACTER BLOCK (8 BYTES)
02240  0F48  D0 F6                 BNE @NEXTLINE                           ; COPY NEXT LINE
02241  0F4A  C0 00                 CPY #$00                                ; TEST FOR EDGE OF PAGE (256 WRAPS BACK TO 0)
02242  0F4C  D0 04                 BNE @PAGEBOUNDRYNOTREACHED
02243  0F4E             
02244  0F4E  E6 18                 INC ZEROPAGE_POINTER_1 + 1              ; IF REACHED 256 BYTES, INCREMENT HIGH BYTE
02245  0F50  E6 1A                 INC ZEROPAGE_POINTER_2 + 1              ; OF SOURCE AND TARGET
02246  0F52             
02247  0F52             @PAGEBOUNDRYNOTREACHED 
02248  0F52  E6 04                 INC PARAM2                              ; ONLY COPY 254 CHARACTERS (TO KEEP IRQ VECTORS INTACT)
02249  0F54  A5 04                 LDA PARAM2                              ; IF COPYING TO F000-FFFF BLOCK
02250  0F56  C9 FF                 CMP #255
02251  0F58  F0 05                 BEQ @COPYCHARACTERSDONE
02252  0F5A  A2 00                 LDX #$00
02253  0F5C  4C 40 0F              JMP @NEXTLINE
02254  0F5F             
02255  0F5F             @COPYCHARACTERSDONE 
02256  0F5F             
02257  0F5F             
02258  0F5F             
02259  0F5F  68                    PLA
02260  0F60  A8                    TAY
02261  0F61  68                    PLA
02262  0F62  AA                    TAX
02263  0F63  68                    PLA
02264  0F64             
02265  0F64  60                    RTS
02266  0F65             
02267  0F65             
02268  0F65             ; Y=210 - STONE WALL SCROLLS
02269  0F65             ; Y=186 - BOTTOM OF WATER TILE (TOP PART)
02270  0F65             ; Y=194 (CURRENT)
02271  0F65             
02272  0F65             ;===============================================================================
02273  0F65             ; WATER ANIMATION FRAMES
02274  0F65             ;===============================================================================
02275  0F65             WATERANIMATION 
02276  0F65  AD 1B 10              LDA RIVER_ANIM3_LO
02277  0F68  85 21                 STA ZEROPAGE_POINTER_3
02278  0F6A  AD 1C 10              LDA RIVER_ANIM3_HI
02279  0F6D  85 22                 STA ZEROPAGE_POINTER_3 + 1
02280  0F6F             
02281  0F6F             @CONTANIM
02282  0F6F  A0 00                 LDY #0
02283  0F71  A2 00                 LDX #0
02284  0F73             
02285  0F73             ; STILL LOOPING THE ANIMATION
02286  0F73             @SHIFTPIXELSRIGHT 
02287  0F73             ; GET ALL 8 BITS (128,64,32,16,8,4,2,1)
02288  0F73             
02289  0F73             @STORE2
02290  0F73  B9 58 4C              LDA CHRADR3,Y
02291  0F76  4A                    LSR A
02292  0F77  90 03                 BCC @STORE5
02293  0F79  18                    CLC
02294  0F7A  69 80                 ADC #128                 ; SHIFT PIXELS DOWN
02295  0F7C             ;;
02296  0F7C             @STORE5
02297  0F7C  91 21                 STA (ZEROPAGE_POINTER_3),Y
02298  0F7E  C8                    INY
02299  0F7F             
02300  0F7F             ; THIS COMPARISON CHECKS FOR THE TILE WIDTH + (ALL 4 TILES)
02301  0F7F             ; IN A 4X4 MATRIX. BECAUSE 4 X 4 = 16
02302  0F7F  C0 30                 CPY #48                         ;58
02303  0F81  90 F0                 BCC @SHIFTPIXELSRIGHT
02304  0F83  60                    RTS
02305  0F84             
02306  0F84             READCHARSETADDRESS 
02307  0F84             @SCREEN1
02308  0F84             ;        LDA MAPSCREEN1_CHSET_OFFSET_TABLE_LO,Y  ; USE Y TO LOOKUP THE ADDRESS AND SAVE IT IN
02309  0F84  85 23                 STA ZEROPAGE_POINTER_4                  ; ZEROPAGE_POINTER_1
02310  0F86             ;        LDA MAPSCREEN1_CHSET_OFFSET_TABLE_HI,Y
02311  0F86  85 24                 STA ZEROPAGE_POINTER_4 + 1
02312  0F88  60                    RTS
02313  0F89             
02314  0F89             RIVERANIMATION 
02315  0F89  18                    CLC
02316  0F8A  AD 59 18              LDA WATERSPEED                           ; INCREASE SCORE
02317  0F8D  69 01                 ADC #1                                   ; 01,00
02318  0F8F  8D 59 18              STA WATERSPEED
02319  0F92                        
02320  0F92  AD 59 18              LDA WATERSPEED
02321  0F95  C9 28                 CMP #40
02322  0F97  90 4D                 BCC @EXITLOOP
02323  0F99             
02324  0F99  A5 26                 LDA CURRENT_SCREEN + 1          ; HI BYTE OF THE CURRENT SCREEN
02325  0F9B  C9 44                 CMP #>SCREEN2_MEM               ; COMPARE TO START OF SCREEN2
02326  0F9D  F0 0D                 BEQ @SCREEN2_SCENE1
02327  0F9F             
02328  0F9F  A9 66                 LDA #102                  ; SET VIC TO SCREEN0, CHARSET 1
02329  0FA1  8D 18 D0              STA VIC_MEMORY_CONTROL
02330  0FA4  A9 05                 LDA #5
02331  0FA6  8D 20 D0              STA 53280
02332  0FA9  4C B6 0F              JMP @SCROLLWATER1
02333  0FAC             
02334  0FAC             @SCREEN2_SCENE1 
02335  0FAC  A9 02                 LDA #2                  ; SET VIC TO SCREEN1, CHARSET 1
02336  0FAE  8D 18 D0              STA VIC_MEMORY_CONTROL
02337  0FB1  A9 03                 LDA #3
02338  0FB3  8D 20 D0              STA 53280
02339  0FB6             
02340  0FB6             @SCROLLWATER1 
02341  0FB6  AD 59 18              LDA WATERSPEED
02342  0FB9  C9 50                 CMP #80
02343  0FBB  90 29                 BCC @EXITLOOP
02344  0FBD             
02345  0FBD  A5 26                 LDA CURRENT_SCREEN + 1          ; HI BYTE OF THE CURRENT SCREEN
02346  0FBF  C9 44                 CMP #>SCREEN2_MEM               ; COMPARE TO START OF SCREEN2
02347  0FC1  F0 0D                 BEQ @SCREEN2_SCENE2
02348  0FC3             
02349  0FC3  A9 66                 LDA #102
02350  0FC5  8D 18 D0              STA VIC_MEMORY_CONTROL
02351  0FC8  A9 02                 LDA #2
02352  0FCA  8D 20 D0              STA 53280
02353  0FCD  4C DA 0F              JMP @SCROLLWATER2
02354  0FD0             
02355  0FD0             @SCREEN2_SCENE2 
02356  0FD0  A9 66                 LDA #102                 ; SET VIC TO SCREEN1, CHARSET 1
02357  0FD2  8D 18 D0              STA VIC_MEMORY_CONTROL
02358  0FD5  A9 07                 LDA #7
02359  0FD7  8D 20 D0              STA 53280
02360  0FDA             
02361  0FDA             @SCROLLWATER2 
02362  0FDA  AD 59 18              LDA WATERSPEED
02363  0FDD  C9 78                 CMP #120
02364  0FDF  90 05                 BCC @EXITLOOP
02365  0FE1             
02366  0FE1  A9 00                 LDA #0
02367  0FE3  8D 59 18              STA WATERSPEED
02368  0FE6             
02369  0FE6             @EXITLOOP
02370  0FE6  60                    RTS
02371  0FE7             
02372  0FE7             RIVERANIMATION2 
02373  0FE7  18                    CLC
02374  0FE8  AD 59 18              LDA WATERSPEED                 ; INCREASE SCORE
02375  0FEB  69 01                 ADC #1                         ; 01,00
02376  0FED  8D 59 18              STA WATERSPEED
02377  0FF0                        
02378  0FF0  AD 59 18              LDA WATERSPEED
02379  0FF3  C9 1E                 CMP #30
02380  0FF5  90 18                 BCC @EXITLOOP
02381  0FF7             
02382  0FF7  A9 14                 LDA #20                         ; 20 = $5000 - PARKOUR REDO CHSETNEW1.BIN"
02383  0FF9  8D 18 D0              STA VIC_MEMORY_CONTROL
02384  0FFC                        
02385  0FFC  AD 59 18              LDA WATERSPEED
02386  0FFF  C9 46                 CMP #70
02387  1001  90 0C                 BCC @EXITLOOP
02388  1003             
02389  1003  AD 59 18              LDA WATERSPEED
02390  1006  C9 6E                 CMP #110
02391  1008  90 05                 BCC @EXITLOOP
02392  100A             
02393  100A  A9 00                 LDA #0
02394  100C  8D 59 18              STA WATERSPEED
02395  100F             
02396  100F             @EXITLOOP
02397  100F  60                    RTS
02398  1010             
02399  1010             
02400  1010             ;MAPSCREEN1_CHSET_OFFSET_TABLE_LO
02401  1010             ;        BYTE <MAP_CHAR_MEM
02402  1010             ;        BYTE <MAP_CHAR_MEM + 8
02403  1010             ;        BYTE <MAP_CHAR_MEM + 16
02404  1010             ;        BYTE <MAP_CHAR_MEM + 24
02405  1010             ;        BYTE <MAP_CHAR_MEM + 32
02406  1010             ;        BYTE <MAP_CHAR_MEM + 40
02407  1010             ;        BYTE <MAP_CHAR_MEM + 48
02408  1010             ;        BYTE <MAP_CHAR_MEM + 56
02409  1010             ;        BYTE <MAP_CHAR_MEM + 64
02410  1010             ;        BYTE <MAP_CHAR_MEM + 72
02411  1010             ;        BYTE <MAP_CHAR_MEM + 80
02412  1010             ;        BYTE <MAP_CHAR_MEM + 88
02413  1010             ;        BYTE <MAP_CHAR_MEM + 96
02414  1010             ;        BYTE <MAP_CHAR_MEM + 104
02415  1010             ;        BYTE <MAP_CHAR_MEM + 112
02416  1010             ;        BYTE <MAP_CHAR_MEM + 120
02417  1010             ;        BYTE <MAP_CHAR_MEM + 128
02418  1010             ;        BYTE <MAP_CHAR_MEM + 136
02419  1010             ;        BYTE <MAP_CHAR_MEM + 144
02420  1010             ;        BYTE <MAP_CHAR_MEM + 152
02421  1010             ;        BYTE <MAP_CHAR_MEM + 160
02422  1010             ;        BYTE <MAP_CHAR_MEM + 168
02423  1010             ;        BYTE <MAP_CHAR_MEM + 176
02424  1010             ;        BYTE <MAP_CHAR_MEM + 184
02425  1010             ;        BYTE <MAP_CHAR_MEM + 192
02426  1010             ;        BYTE <MAP_CHAR_MEM + 200
02427  1010             ;        BYTE <MAP_CHAR_MEM + 208
02428  1010             ;        BYTE <MAP_CHAR_MEM + 216
02429  1010             ;        BYTE <MAP_CHAR_MEM + 224
02430  1010             ;        BYTE <MAP_CHAR_MEM + 232
02431  1010             ;        BYTE <MAP_CHAR_MEM + 240
02432  1010             ;        BYTE <MAP_CHAR_MEM + 248
02433  1010             ;        BYTE <MAP_CHAR_MEM + 256
02434  1010             ;        BYTE <MAP_CHAR_MEM + 264
02435  1010             ;        BYTE <MAP_CHAR_MEM + 272
02436  1010             ;        BYTE <MAP_CHAR_MEM + 280
02437  1010             ;        BYTE <MAP_CHAR_MEM + 288
02438  1010             ;        BYTE <MAP_CHAR_MEM + 296
02439  1010             ;        BYTE <MAP_CHAR_MEM + 304
02440  1010             ;        BYTE <MAP_CHAR_MEM + 312
02441  1010             ;        BYTE <MAP_CHAR_MEM + 320        ;40
02442  1010             ;        BYTE <MAP_CHAR_MEM + 328
02443  1010             ;        BYTE <MAP_CHAR_MEM + 336
02444  1010             ;        BYTE <MAP_CHAR_MEM + 344
02445  1010             ;        BYTE <MAP_CHAR_MEM + 352
02446  1010             ;        BYTE <MAP_CHAR_MEM + 360
02447  1010             ;        BYTE <MAP_CHAR_MEM + 368
02448  1010             ;        BYTE <MAP_CHAR_MEM + 376
02449  1010             ;        BYTE <MAP_CHAR_MEM + 384
02450  1010             ;        BYTE <MAP_CHAR_MEM + 392
02451  1010             ;        BYTE <MAP_CHAR_MEM + 400        ;50
02452  1010             ;        BYTE <MAP_CHAR_MEM + 408
02453  1010             ;        BYTE <MAP_CHAR_MEM + 416
02454  1010             ;        BYTE <MAP_CHAR_MEM + 424
02455  1010             ;        BYTE <MAP_CHAR_MEM + 432
02456  1010             ;        BYTE <MAP_CHAR_MEM + 440
02457  1010             ;        BYTE <MAP_CHAR_MEM + 448
02458  1010             ;        BYTE <MAP_CHAR_MEM + 456
02459  1010             ;        BYTE <MAP_CHAR_MEM + 464
02460  1010             ;        BYTE <MAP_CHAR_MEM + 472
02461  1010             ;        BYTE <MAP_CHAR_MEM + 480
02462  1010             ;        BYTE <MAP_CHAR_MEM + 488
02463  1010             ;        BYTE <MAP_CHAR_MEM + 496
02464  1010             ;        BYTE <MAP_CHAR_MEM + 504
02465  1010             ;        BYTE <MAP_CHAR_MEM + 512
02466  1010             ;        BYTE <MAP_CHAR_MEM + 520
02467  1010             ;        BYTE <MAP_CHAR_MEM + 528
02468  1010             ;        BYTE <MAP_CHAR_MEM + 536
02469  1010             ;        BYTE <MAP_CHAR_MEM + 544
02470  1010             ;        BYTE <MAP_CHAR_MEM + 552
02471  1010             ;        BYTE <MAP_CHAR_MEM + 560        ;70
02472  1010             ;        BYTE <MAP_CHAR_MEM + 568
02473  1010             ;        BYTE <MAP_CHAR_MEM + 576
02474  1010             ;        BYTE <MAP_CHAR_MEM + 584
02475  1010             ;        BYTE <MAP_CHAR_MEM + 592
02476  1010             ;        BYTE <MAP_CHAR_MEM + 600
02477  1010             ;        BYTE <MAP_CHAR_MEM + 608
02478  1010             ;        BYTE <MAP_CHAR_MEM + 616
02479  1010             ;        BYTE <MAP_CHAR_MEM + 624
02480  1010             ;        BYTE <MAP_CHAR_MEM + 632
02481  1010             ;        BYTE <MAP_CHAR_MEM + 640
02482  1010             ;        BYTE <MAP_CHAR_MEM + 648
02483  1010             ;        BYTE <MAP_CHAR_MEM + 656
02484  1010             ;        BYTE <MAP_CHAR_MEM + 664
02485  1010             ;        BYTE <MAP_CHAR_MEM + 672
02486  1010             ;        BYTE <MAP_CHAR_MEM + 680
02487  1010             ;        BYTE <MAP_CHAR_MEM + 688
02488  1010             ;        BYTE <MAP_CHAR_MEM + 696
02489  1010             ;        BYTE <MAP_CHAR_MEM + 704
02490  1010             ;        BYTE <MAP_CHAR_MEM + 712
02491  1010             ;        BYTE <MAP_CHAR_MEM + 720        ;90
02492  1010             ;        BYTE <MAP_CHAR_MEM + 728
02493  1010             ;        BYTE <MAP_CHAR_MEM + 736
02494  1010             ;        BYTE <MAP_CHAR_MEM + 744
02495  1010             ;        BYTE <MAP_CHAR_MEM + 752
02496  1010             ;        BYTE <MAP_CHAR_MEM + 760
02497  1010             ;        BYTE <MAP_CHAR_MEM + 768
02498  1010             ;        BYTE <MAP_CHAR_MEM + 776
02499  1010             ;        BYTE <MAP_CHAR_MEM + 784
02500  1010             ;        BYTE <MAP_CHAR_MEM + 792
02501  1010             ;        BYTE <MAP_CHAR_MEM + 800        ;100
02502  1010             ;        BYTE <MAP_CHAR_MEM + 808
02503  1010             ;        BYTE <MAP_CHAR_MEM + 816
02504  1010             ;        BYTE <MAP_CHAR_MEM + 824
02505  1010             ;        BYTE <MAP_CHAR_MEM + 832
02506  1010             ;        BYTE <MAP_CHAR_MEM + 840
02507  1010             ;        BYTE <MAP_CHAR_MEM + 848
02508  1010             ;        BYTE <MAP_CHAR_MEM + 856
02509  1010             ;        BYTE <MAP_CHAR_MEM + 864
02510  1010             ;        BYTE <MAP_CHAR_MEM + 872
02511  1010             ;        BYTE <MAP_CHAR_MEM + 880        ;110
02512  1010             ;        BYTE <MAP_CHAR_MEM + 888
02513  1010             ;        BYTE <MAP_CHAR_MEM + 896
02514  1010             ;        BYTE <MAP_CHAR_MEM + 904
02515  1010             ;        BYTE <MAP_CHAR_MEM + 912
02516  1010             ;        BYTE <MAP_CHAR_MEM + 920
02517  1010             ;        BYTE <MAP_CHAR_MEM + 928
02518  1010             ;        BYTE <MAP_CHAR_MEM + 936
02519  1010             ;        BYTE <MAP_CHAR_MEM + 944
02520  1010             ;        BYTE <MAP_CHAR_MEM + 952
02521  1010             ;        BYTE <MAP_CHAR_MEM + 960        ;120
02522  1010             ;        BYTE <MAP_CHAR_MEM + 968
02523  1010             ;        BYTE <MAP_CHAR_MEM + 976
02524  1010             ;        BYTE <MAP_CHAR_MEM + 984
02525  1010             ;        BYTE <MAP_CHAR_MEM + 992
02526  1010             ;        BYTE <MAP_CHAR_MEM + 1000
02527  1010             ;        BYTE <MAP_CHAR_MEM + 1008
02528  1010             ;        BYTE <MAP_CHAR_MEM + 1016
02529  1010             ;        BYTE <MAP_CHAR_MEM + 1024
02530  1010             ;        BYTE <MAP_CHAR_MEM + 1032
02531  1010             ;        BYTE <MAP_CHAR_MEM + 1040       ;130
02532  1010             ;        BYTE <MAP_CHAR_MEM + 1048
02533  1010             ;        BYTE <MAP_CHAR_MEM + 1056
02534  1010             ;        BYTE <MAP_CHAR_MEM + 1064
02535  1010             ;        BYTE <MAP_CHAR_MEM + 1072
02536  1010             ;        BYTE <MAP_CHAR_MEM + 1080
02537  1010             ;        BYTE <MAP_CHAR_MEM + 1088
02538  1010             ;        BYTE <MAP_CHAR_MEM + 1096
02539  1010             ;        BYTE <MAP_CHAR_MEM + 1104
02540  1010             ;        BYTE <MAP_CHAR_MEM + 1112
02541  1010             ;        BYTE <MAP_CHAR_MEM + 1120       ;140
02542  1010             ;        BYTE <MAP_CHAR_MEM + 1128
02543  1010             ;        BYTE <MAP_CHAR_MEM + 1136
02544  1010             ;        BYTE <MAP_CHAR_MEM + 1144
02545  1010             ;        BYTE <MAP_CHAR_MEM + 1152
02546  1010             ;        BYTE <MAP_CHAR_MEM + 1160
02547  1010             ;        BYTE <MAP_CHAR_MEM + 1168
02548  1010             ;        BYTE <MAP_CHAR_MEM + 1176
02549  1010             ;        BYTE <MAP_CHAR_MEM + 1184
02550  1010             ;        BYTE <MAP_CHAR_MEM + 1192
02551  1010             ;        BYTE <MAP_CHAR_MEM + 1200       ;150
02552  1010             ;        BYTE <MAP_CHAR_MEM + 1208
02553  1010             ;        BYTE <MAP_CHAR_MEM + 1216
02554  1010             ;        BYTE <MAP_CHAR_MEM + 1224
02555  1010             ;        BYTE <MAP_CHAR_MEM + 1232
02556  1010             ;        BYTE <MAP_CHAR_MEM + 1240
02557  1010             ;        BYTE <MAP_CHAR_MEM + 1248
02558  1010             ;        BYTE <MAP_CHAR_MEM + 1256
02559  1010             ;        BYTE <MAP_CHAR_MEM + 1264
02560  1010             ;        BYTE <MAP_CHAR_MEM + 1272
02561  1010             ;        BYTE <MAP_CHAR_MEM + 1280       ;160
02562  1010             ;        BYTE <MAP_CHAR_MEM + 1288
02563  1010             ;        BYTE <MAP_CHAR_MEM + 1296
02564  1010             ;        BYTE <MAP_CHAR_MEM + 1304
02565  1010             ;        BYTE <MAP_CHAR_MEM + 1312
02566  1010             ;        BYTE <MAP_CHAR_MEM + 1320
02567  1010             ;        BYTE <MAP_CHAR_MEM + 1328
02568  1010             ;        BYTE <MAP_CHAR_MEM + 1336
02569  1010             ;        BYTE <MAP_CHAR_MEM + 1344
02570  1010             ;        BYTE <MAP_CHAR_MEM + 1352
02571  1010             ;        BYTE <MAP_CHAR_MEM + 1360       ;170
02572  1010             ;        BYTE <MAP_CHAR_MEM + 1368
02573  1010             ;        BYTE <MAP_CHAR_MEM + 1376
02574  1010             ;        BYTE <MAP_CHAR_MEM + 1384
02575  1010             ;        BYTE <MAP_CHAR_MEM + 1392
02576  1010             ;        BYTE <MAP_CHAR_MEM + 1400
02577  1010             ;        BYTE <MAP_CHAR_MEM + 1408
02578  1010             ;        BYTE <MAP_CHAR_MEM + 1416
02579  1010             ;        BYTE <MAP_CHAR_MEM + 1424
02580  1010             ;        BYTE <MAP_CHAR_MEM + 1432
02581  1010             ;        BYTE <MAP_CHAR_MEM + 1440       ;180
02582  1010             ;        BYTE <MAP_CHAR_MEM + 1448
02583  1010             ;        BYTE <MAP_CHAR_MEM + 1456
02584  1010             ;        BYTE <MAP_CHAR_MEM + 1464
02585  1010             ;        BYTE <MAP_CHAR_MEM + 1472
02586  1010             ;        BYTE <MAP_CHAR_MEM + 1480
02587  1010             ;        BYTE <MAP_CHAR_MEM + 1488
02588  1010             ;        BYTE <MAP_CHAR_MEM + 1496
02589  1010             ;        BYTE <MAP_CHAR_MEM + 1504
02590  1010             ;        BYTE <MAP_CHAR_MEM + 1512
02591  1010             ;        BYTE <MAP_CHAR_MEM + 1520       ;190
02592  1010             ;        BYTE <MAP_CHAR_MEM + 1528
02593  1010             ;        BYTE <MAP_CHAR_MEM + 1536
02594  1010             ;        BYTE <MAP_CHAR_MEM + 1544
02595  1010             ;        BYTE <MAP_CHAR_MEM + 1552
02596  1010             ;        BYTE <MAP_CHAR_MEM + 1560
02597  1010             ;        BYTE <MAP_CHAR_MEM + 1568
02598  1010             ;        BYTE <MAP_CHAR_MEM + 1576
02599  1010             ;        BYTE <MAP_CHAR_MEM + 1584
02600  1010             ;        BYTE <MAP_CHAR_MEM + 1592
02601  1010             ;        BYTE <MAP_CHAR_MEM + 1600       ;200
02602  1010             ;        BYTE <MAP_CHAR_MEM + 1608
02603  1010             ;        BYTE <MAP_CHAR_MEM + 1616
02604  1010             ;        BYTE <MAP_CHAR_MEM + 1624
02605  1010             ;        BYTE <MAP_CHAR_MEM + 1632
02606  1010             ;        BYTE <MAP_CHAR_MEM + 1640
02607  1010             ;        BYTE <MAP_CHAR_MEM + 1648
02608  1010             ;        BYTE <MAP_CHAR_MEM + 1656
02609  1010             ;        BYTE <MAP_CHAR_MEM + 1664
02610  1010             ;        BYTE <MAP_CHAR_MEM + 1672
02611  1010             ;        BYTE <MAP_CHAR_MEM + 1680       ;210
02612  1010             ;        BYTE <MAP_CHAR_MEM + 1688
02613  1010             ;        BYTE <MAP_CHAR_MEM + 1696
02614  1010             ;        BYTE <MAP_CHAR_MEM + 1704
02615  1010             ;        BYTE <MAP_CHAR_MEM + 1712
02616  1010             ;        BYTE <MAP_CHAR_MEM + 1720
02617  1010             ;        BYTE <MAP_CHAR_MEM + 1728
02618  1010             ;        BYTE <MAP_CHAR_MEM + 1736
02619  1010             ;        BYTE <MAP_CHAR_MEM + 1744
02620  1010             ;        BYTE <MAP_CHAR_MEM + 1752
02621  1010             ;        BYTE <MAP_CHAR_MEM + 1760       ;220
02622  1010             ;        BYTE <MAP_CHAR_MEM + 1768
02623  1010             ;        BYTE <MAP_CHAR_MEM + 1776
02624  1010             ;        BYTE <MAP_CHAR_MEM + 1784
02625  1010             ;        BYTE <MAP_CHAR_MEM + 1792
02626  1010             ;        BYTE <MAP_CHAR_MEM + 1800
02627  1010             ;        BYTE <MAP_CHAR_MEM + 1808       ;226
02628  1010             ;        BYTE <MAP_CHAR_MEM + 1816
02629  1010             ;        BYTE <MAP_CHAR_MEM + 1824
02630  1010             ;        BYTE <MAP_CHAR_MEM + 1832
02631  1010             ;        BYTE <MAP_CHAR_MEM + 1840       ;230, 20312
02632  1010             ;        BYTE <MAP_CHAR_MEM + 1848
02633  1010             ;        BYTE <MAP_CHAR_MEM + 1856
02634  1010             ;        BYTE <MAP_CHAR_MEM + 1864
02635  1010             ;        BYTE <MAP_CHAR_MEM + 1872
02636  1010             ;        BYTE <MAP_CHAR_MEM + 1880       ;235
02637  1010             
02638  1010             ;MAPSCREEN1_CHSET_OFFSET_TABLE_HI
02639  1010             ;        BYTE >MAP_CHAR_MEM
02640  1010             ;        BYTE >MAP_CHAR_MEM + 8
02641  1010             ;        BYTE >MAP_CHAR_MEM + 16
02642  1010             ;        BYTE >MAP_CHAR_MEM + 24
02643  1010             ;        BYTE >MAP_CHAR_MEM + 32
02644  1010             ;        BYTE >MAP_CHAR_MEM + 40
02645  1010             ;        BYTE >MAP_CHAR_MEM + 48
02646  1010             ;        BYTE >MAP_CHAR_MEM + 56
02647  1010             ;        BYTE >MAP_CHAR_MEM + 64
02648  1010             ;        BYTE >MAP_CHAR_MEM + 72
02649  1010             ;        BYTE >MAP_CHAR_MEM + 80
02650  1010             ;        BYTE >MAP_CHAR_MEM + 88
02651  1010             ;        BYTE >MAP_CHAR_MEM + 96
02652  1010             ;        BYTE >MAP_CHAR_MEM + 104
02653  1010             ;        BYTE >MAP_CHAR_MEM + 112
02654  1010             ;        BYTE >MAP_CHAR_MEM + 120
02655  1010             ;        BYTE >MAP_CHAR_MEM + 128
02656  1010             ;        BYTE >MAP_CHAR_MEM + 136
02657  1010             ;        BYTE >MAP_CHAR_MEM + 144
02658  1010             ;        BYTE >MAP_CHAR_MEM + 152
02659  1010             ;        BYTE >MAP_CHAR_MEM + 160
02660  1010             ;        BYTE >MAP_CHAR_MEM + 168
02661  1010             ;        BYTE >MAP_CHAR_MEM + 176
02662  1010             ;        BYTE >MAP_CHAR_MEM + 184
02663  1010             ;        BYTE >MAP_CHAR_MEM + 192
02664  1010             ;        BYTE >MAP_CHAR_MEM + 200
02665  1010             ;        BYTE >MAP_CHAR_MEM + 208
02666  1010             ;        BYTE >MAP_CHAR_MEM + 216
02667  1010             ;        BYTE >MAP_CHAR_MEM + 224
02668  1010             ;        BYTE >MAP_CHAR_MEM + 232
02669  1010             ;        BYTE >MAP_CHAR_MEM + 240
02670  1010             ;        BYTE >MAP_CHAR_MEM + 248
02671  1010             ;        BYTE >MAP_CHAR_MEM + 256
02672  1010             ;        BYTE >MAP_CHAR_MEM + 264
02673  1010             ;        BYTE >MAP_CHAR_MEM + 272
02674  1010             ;        BYTE >MAP_CHAR_MEM + 280
02675  1010             ;        BYTE >MAP_CHAR_MEM + 288
02676  1010             ;        BYTE >MAP_CHAR_MEM + 296
02677  1010             ;        BYTE >MAP_CHAR_MEM + 304
02678  1010             ;        BYTE >MAP_CHAR_MEM + 312
02679  1010             ;        BYTE >MAP_CHAR_MEM + 320
02680  1010             ;        BYTE >MAP_CHAR_MEM + 328
02681  1010             ;        BYTE >MAP_CHAR_MEM + 336
02682  1010             ;        BYTE >MAP_CHAR_MEM + 344
02683  1010             ;        BYTE >MAP_CHAR_MEM + 352
02684  1010             ;        BYTE >MAP_CHAR_MEM + 360
02685  1010             ;        BYTE >MAP_CHAR_MEM + 368
02686  1010             ;        BYTE >MAP_CHAR_MEM + 376
02687  1010             ;        BYTE >MAP_CHAR_MEM + 384
02688  1010             ;        BYTE >MAP_CHAR_MEM + 392
02689  1010             ;        BYTE >MAP_CHAR_MEM + 400
02690  1010             ;        BYTE >MAP_CHAR_MEM + 408
02691  1010             ;        BYTE >MAP_CHAR_MEM + 416
02692  1010             ;        BYTE >MAP_CHAR_MEM + 424
02693  1010             ;        BYTE >MAP_CHAR_MEM + 432
02694  1010             ;        BYTE >MAP_CHAR_MEM + 440
02695  1010             ;        BYTE >MAP_CHAR_MEM + 448
02696  1010             ;        BYTE >MAP_CHAR_MEM + 456
02697  1010             ;        BYTE >MAP_CHAR_MEM + 464
02698  1010             ;        BYTE >MAP_CHAR_MEM + 472
02699  1010             ;        BYTE >MAP_CHAR_MEM + 480
02700  1010             ;        BYTE >MAP_CHAR_MEM + 488
02701  1010             ;        BYTE >MAP_CHAR_MEM + 496
02702  1010             ;        BYTE >MAP_CHAR_MEM + 504
02703  1010             ;        BYTE >MAP_CHAR_MEM + 512
02704  1010             ;        BYTE >MAP_CHAR_MEM + 520
02705  1010             ;        BYTE >MAP_CHAR_MEM + 528
02706  1010             ;        BYTE >MAP_CHAR_MEM + 536
02707  1010             ;        BYTE >MAP_CHAR_MEM + 544
02708  1010             ;        BYTE >MAP_CHAR_MEM + 552
02709  1010             ;        BYTE >MAP_CHAR_MEM + 560
02710  1010             ;        BYTE >MAP_CHAR_MEM + 568
02711  1010             ;        BYTE >MAP_CHAR_MEM + 576
02712  1010             ;        BYTE >MAP_CHAR_MEM + 584
02713  1010             ;        BYTE >MAP_CHAR_MEM + 592
02714  1010             ;        BYTE >MAP_CHAR_MEM + 600
02715  1010             ;        BYTE >MAP_CHAR_MEM + 608
02716  1010             ;        BYTE >MAP_CHAR_MEM + 616
02717  1010             ;        BYTE >MAP_CHAR_MEM + 624
02718  1010             ;        BYTE >MAP_CHAR_MEM + 632
02719  1010             ;        BYTE >MAP_CHAR_MEM + 640
02720  1010             ;        BYTE >MAP_CHAR_MEM + 648
02721  1010             ;        BYTE >MAP_CHAR_MEM + 656
02722  1010             ;        BYTE >MAP_CHAR_MEM + 664
02723  1010             ;        BYTE >MAP_CHAR_MEM + 672
02724  1010             ;        BYTE >MAP_CHAR_MEM + 680
02725  1010             ;        BYTE >MAP_CHAR_MEM + 688
02726  1010             ;        BYTE >MAP_CHAR_MEM + 696
02727  1010             ;        BYTE >MAP_CHAR_MEM + 704
02728  1010             ;        BYTE >MAP_CHAR_MEM + 712
02729  1010             ;        BYTE >MAP_CHAR_MEM + 720
02730  1010             ;        BYTE >MAP_CHAR_MEM + 728
02731  1010             ;        BYTE >MAP_CHAR_MEM + 736
02732  1010             ;        BYTE >MAP_CHAR_MEM + 744
02733  1010             ;        BYTE >MAP_CHAR_MEM + 752
02734  1010             ;        BYTE >MAP_CHAR_MEM + 760
02735  1010             ;        BYTE >MAP_CHAR_MEM + 768
02736  1010             ;        BYTE >MAP_CHAR_MEM + 776
02737  1010             ;        BYTE >MAP_CHAR_MEM + 784
02738  1010             ;        BYTE >MAP_CHAR_MEM + 792
02739  1010             ;        BYTE >MAP_CHAR_MEM + 800
02740  1010             ;        BYTE >MAP_CHAR_MEM + 808
02741  1010             ;        BYTE >MAP_CHAR_MEM + 816
02742  1010             ;        BYTE >MAP_CHAR_MEM + 824
02743  1010             ;        BYTE >MAP_CHAR_MEM + 832
02744  1010             ;        BYTE >MAP_CHAR_MEM + 840
02745  1010             ;        BYTE >MAP_CHAR_MEM + 848
02746  1010             ;        BYTE >MAP_CHAR_MEM + 856
02747  1010             ;        BYTE >MAP_CHAR_MEM + 864
02748  1010             ;        BYTE >MAP_CHAR_MEM + 872
02749  1010             ;        BYTE >MAP_CHAR_MEM + 880
02750  1010             ;        BYTE >MAP_CHAR_MEM + 888
02751  1010             ;        BYTE >MAP_CHAR_MEM + 896
02752  1010             ;        BYTE >MAP_CHAR_MEM + 904
02753  1010             ;        BYTE >MAP_CHAR_MEM + 912
02754  1010             ;        BYTE >MAP_CHAR_MEM + 920
02755  1010             ;        BYTE >MAP_CHAR_MEM + 928
02756  1010             ;        BYTE >MAP_CHAR_MEM + 936
02757  1010             ;        BYTE >MAP_CHAR_MEM + 944
02758  1010             ;        BYTE >MAP_CHAR_MEM + 952
02759  1010             ;        BYTE >MAP_CHAR_MEM + 960
02760  1010             ;        BYTE >MAP_CHAR_MEM + 968
02761  1010             ;        BYTE >MAP_CHAR_MEM + 976
02762  1010             ;        BYTE >MAP_CHAR_MEM + 984
02763  1010             ;        BYTE >MAP_CHAR_MEM + 992
02764  1010             ;        BYTE >MAP_CHAR_MEM + 1000
02765  1010             ;        BYTE >MAP_CHAR_MEM + 1008
02766  1010             ;        BYTE >MAP_CHAR_MEM + 1016
02767  1010             ;        BYTE >MAP_CHAR_MEM + 1024
02768  1010             ;        BYTE >MAP_CHAR_MEM + 1032
02769  1010             ;        BYTE >MAP_CHAR_MEM + 1040
02770  1010             ;        BYTE >MAP_CHAR_MEM + 1048
02771  1010             ;        BYTE >MAP_CHAR_MEM + 1056
02772  1010             ;        BYTE >MAP_CHAR_MEM + 1064
02773  1010             ;        BYTE >MAP_CHAR_MEM + 1072
02774  1010             ;        BYTE >MAP_CHAR_MEM + 1080
02775  1010             ;        BYTE >MAP_CHAR_MEM + 1088
02776  1010             ;        BYTE >MAP_CHAR_MEM + 1096
02777  1010             ;        BYTE >MAP_CHAR_MEM + 1104
02778  1010             ;        BYTE >MAP_CHAR_MEM + 1112
02779  1010             ;        BYTE >MAP_CHAR_MEM + 1120
02780  1010             ;        BYTE >MAP_CHAR_MEM + 1128
02781  1010             ;        BYTE >MAP_CHAR_MEM + 1136
02782  1010             ;        BYTE >MAP_CHAR_MEM + 1144
02783  1010             ;        BYTE >MAP_CHAR_MEM + 1152
02784  1010             ;        BYTE >MAP_CHAR_MEM + 1160
02785  1010             ;        BYTE >MAP_CHAR_MEM + 1168
02786  1010             ;        BYTE >MAP_CHAR_MEM + 1176
02787  1010             ;        BYTE >MAP_CHAR_MEM + 1184
02788  1010             ;        BYTE >MAP_CHAR_MEM + 1192
02789  1010             ;        BYTE >MAP_CHAR_MEM + 1200
02790  1010             ;        BYTE >MAP_CHAR_MEM + 1208
02791  1010             ;        BYTE >MAP_CHAR_MEM + 1216
02792  1010             ;        BYTE >MAP_CHAR_MEM + 1224
02793  1010             ;        BYTE >MAP_CHAR_MEM + 1232
02794  1010             ;        BYTE >MAP_CHAR_MEM + 1240
02795  1010             ;        BYTE >MAP_CHAR_MEM + 1248
02796  1010             ;        BYTE >MAP_CHAR_MEM + 1256
02797  1010             ;        BYTE >MAP_CHAR_MEM + 1264
02798  1010             ;        BYTE >MAP_CHAR_MEM + 1272
02799  1010             ;        BYTE >MAP_CHAR_MEM + 1280
02800  1010             ;        BYTE >MAP_CHAR_MEM + 1288
02801  1010             ;        BYTE >MAP_CHAR_MEM + 1296
02802  1010             ;        BYTE >MAP_CHAR_MEM + 1304
02803  1010             ;        BYTE >MAP_CHAR_MEM + 1312
02804  1010             ;        BYTE >MAP_CHAR_MEM + 1320
02805  1010             ;        BYTE >MAP_CHAR_MEM + 1328
02806  1010             ;        BYTE >MAP_CHAR_MEM + 1336
02807  1010             ;        BYTE >MAP_CHAR_MEM + 1344
02808  1010             ;        BYTE >MAP_CHAR_MEM + 1352
02809  1010             ;        BYTE >MAP_CHAR_MEM + 1360
02810  1010             ;        BYTE >MAP_CHAR_MEM + 1368
02811  1010             ;        BYTE >MAP_CHAR_MEM + 1376
02812  1010             ;        BYTE >MAP_CHAR_MEM + 1384
02813  1010             ;        BYTE >MAP_CHAR_MEM + 1392
02814  1010             ;        BYTE >MAP_CHAR_MEM + 1400
02815  1010             ;        BYTE >MAP_CHAR_MEM + 1408
02816  1010             ;        BYTE >MAP_CHAR_MEM + 1416
02817  1010             ;        BYTE >MAP_CHAR_MEM + 1424
02818  1010             ;        BYTE >MAP_CHAR_MEM + 1432
02819  1010             ;        BYTE >MAP_CHAR_MEM + 1440
02820  1010             ;        BYTE >MAP_CHAR_MEM + 1448
02821  1010             ;        BYTE >MAP_CHAR_MEM + 1456
02822  1010             ;        BYTE >MAP_CHAR_MEM + 1464
02823  1010             ;        BYTE >MAP_CHAR_MEM + 1472
02824  1010             ;        BYTE >MAP_CHAR_MEM + 1480
02825  1010             ;        BYTE >MAP_CHAR_MEM + 1488
02826  1010             ;        BYTE >MAP_CHAR_MEM + 1496
02827  1010             ;        BYTE >MAP_CHAR_MEM + 1504
02828  1010             ;        BYTE >MAP_CHAR_MEM + 1512
02829  1010             ;        BYTE >MAP_CHAR_MEM + 1520
02830  1010             ;        BYTE >MAP_CHAR_MEM + 1528
02831  1010             ;        BYTE >MAP_CHAR_MEM + 1536
02832  1010             ;        BYTE >MAP_CHAR_MEM + 1544
02833  1010             ;        BYTE >MAP_CHAR_MEM + 1552
02834  1010             ;        BYTE >MAP_CHAR_MEM + 1560
02835  1010             ;        BYTE >MAP_CHAR_MEM + 1568
02836  1010             ;        BYTE >MAP_CHAR_MEM + 1576
02837  1010             ;        BYTE >MAP_CHAR_MEM + 1584
02838  1010             ;        BYTE >MAP_CHAR_MEM + 1592
02839  1010             ;        BYTE >MAP_CHAR_MEM + 1600
02840  1010             ;        BYTE >MAP_CHAR_MEM + 1608
02841  1010             ;        BYTE >MAP_CHAR_MEM + 1616
02842  1010             ;        BYTE >MAP_CHAR_MEM + 1624
02843  1010             ;        BYTE >MAP_CHAR_MEM + 1632
02844  1010             ;        BYTE >MAP_CHAR_MEM + 1640
02845  1010             ;        BYTE >MAP_CHAR_MEM + 1648
02846  1010             ;        BYTE >MAP_CHAR_MEM + 1656
02847  1010             ;        BYTE >MAP_CHAR_MEM + 1664
02848  1010             ;        BYTE >MAP_CHAR_MEM + 1672
02849  1010             ;        BYTE >MAP_CHAR_MEM + 1680
02850  1010             ;        BYTE >MAP_CHAR_MEM + 1688
02851  1010             ;        BYTE >MAP_CHAR_MEM + 1696
02852  1010             ;        BYTE >MAP_CHAR_MEM + 1704
02853  1010             ;        BYTE >MAP_CHAR_MEM + 1712
02854  1010             ;        BYTE >MAP_CHAR_MEM + 1720
02855  1010             ;        BYTE >MAP_CHAR_MEM + 1728
02856  1010             ;        BYTE >MAP_CHAR_MEM + 1736
02857  1010             ;        BYTE >MAP_CHAR_MEM + 1744
02858  1010             ;        BYTE >MAP_CHAR_MEM + 1752
02859  1010             ;        BYTE >MAP_CHAR_MEM + 1760
02860  1010             ;        BYTE >MAP_CHAR_MEM + 1768
02861  1010             ;        BYTE >MAP_CHAR_MEM + 1776
02862  1010             ;        BYTE >MAP_CHAR_MEM + 1784
02863  1010             ;        BYTE >MAP_CHAR_MEM + 1792
02864  1010             ;        BYTE >MAP_CHAR_MEM + 1800
02865  1010             ;        BYTE >MAP_CHAR_MEM + 1808
02866  1010             ;        BYTE >MAP_CHAR_MEM + 1816
02867  1010             ;        BYTE >MAP_CHAR_MEM + 1824
02868  1010             ;        BYTE >MAP_CHAR_MEM + 1832
02869  1010             ;        BYTE >MAP_CHAR_MEM + 1840
02870  1010             ;        BYTE >MAP_CHAR_MEM + 1848
02871  1010             ;        BYTE >MAP_CHAR_MEM + 1856
02872  1010             ;        BYTE >MAP_CHAR_MEM + 1864
02873  1010             ;        BYTE >MAP_CHAR_MEM + 1872
02874  1010             ;        BYTE >MAP_CHAR_MEM + 1880       ;245
02875  1010             
02876  1010             ;MAPSCREEN2_CHSET_OFFSET_TABLE_LO
02877  1010             ;        BYTE <MAP_CHAR_MEM
02878  1010             ;        BYTE <MAP_CHAR_MEM + 100
02879  1010             ;        BYTE <MAP_CHAR_MEM + 200
02880  1010             ;        BYTE <MAP_CHAR_MEM + 300
02881  1010             ;        BYTE <MAP_CHAR_MEM + 400
02882  1010             ;        BYTE <MAP_CHAR_MEM + 500
02883  1010             ;        BYTE <MAP_CHAR_MEM + 600
02884  1010             ;        BYTE <MAP_CHAR_MEM + 700
02885  1010             ;        BYTE <MAP_CHAR_MEM + 800
02886  1010             ;        BYTE <MAP_CHAR_MEM + 900
02887  1010             ;        BYTE <MAP_CHAR_MEM + 1000
02888  1010             ;        BYTE <MAP_CHAR_MEM + 1100
02889  1010             ;        BYTE <MAP_CHAR_MEM + 1200
02890  1010             ;        BYTE <MAP_CHAR_MEM + 1300
02891  1010             ;        BYTE <MAP_CHAR_MEM + 1400
02892  1010             ;        BYTE <MAP_CHAR_MEM + 1500
02893  1010             ;        BYTE <MAP_CHAR_MEM + 1600
02894  1010             ;        BYTE <MAP_CHAR_MEM + 1700
02895  1010             ;        BYTE <MAP_CHAR_MEM + 1800
02896  1010             ;        BYTE <MAP_CHAR_MEM + 1900
02897  1010             ;        BYTE <MAP_CHAR_MEM + 2000
02898  1010             ;        BYTE <MAP_CHAR_MEM + 2100
02899  1010             ;        BYTE <MAP_CHAR_MEM + 2200
02900  1010             ;        BYTE <MAP_CHAR_MEM + 2300
02901  1010             ;        BYTE <MAP_CHAR_MEM + 2400
02902  1010             ;        BYTE <MAP_CHAR_MEM + 2500
02903  1010             ;        BYTE <MAP_CHAR_MEM + 2600
02904  1010             ;        BYTE <MAP_CHAR_MEM + 2700
02905  1010             ;        BYTE <MAP_CHAR_MEM + 2800
02906  1010             ;        BYTE <MAP_CHAR_MEM + 2900
02907  1010             ;        BYTE <MAP_CHAR_MEM + 3000
02908  1010             ;        BYTE <MAP_CHAR_MEM + 3100
02909  1010             ;        BYTE <MAP_CHAR_MEM + 3200
02910  1010             
02911  1010             ;MAPSCREEN2_CHSET_OFFSET_TABLE_HI
02912  1010             ;        BYTE >MAP_CHAR_MEM
02913  1010             ;        BYTE >MAP_CHAR_MEM + 100
02914  1010             ;        BYTE >MAP_CHAR_MEM + 200
02915  1010             ;        BYTE >MAP_CHAR_MEM + 300
02916  1010             ;        BYTE >MAP_CHAR_MEM + 400
02917  1010             ;        BYTE >MAP_CHAR_MEM + 500
02918  1010             ;        BYTE >MAP_CHAR_MEM + 600
02919  1010             ;        BYTE >MAP_CHAR_MEM + 700
02920  1010             ;        BYTE >MAP_CHAR_MEM + 800
02921  1010             ;        BYTE >MAP_CHAR_MEM + 900
02922  1010             ;        BYTE >MAP_CHAR_MEM + 1000
02923  1010             ;        BYTE >MAP_CHAR_MEM + 1100
02924  1010             ;        BYTE >MAP_CHAR_MEM + 1200
02925  1010             ;        BYTE >MAP_CHAR_MEM + 1300
02926  1010             ;        BYTE >MAP_CHAR_MEM + 1400
02927  1010             ;        BYTE >MAP_CHAR_MEM + 1500
02928  1010             ;        BYTE >MAP_CHAR_MEM + 1600
02929  1010             ;        BYTE >MAP_CHAR_MEM + 1700
02930  1010             ;        BYTE >MAP_CHAR_MEM + 1800
02931  1010             ;        BYTE >MAP_CHAR_MEM + 1900
02932  1010             ;        BYTE >MAP_CHAR_MEM + 2000
02933  1010             ;        BYTE >MAP_CHAR_MEM + 2100
02934  1010             ;        BYTE >MAP_CHAR_MEM + 2200
02935  1010             ;        BYTE >MAP_CHAR_MEM + 2300
02936  1010             ;        BYTE >MAP_CHAR_MEM + 2400
02937  1010             ;        BYTE >MAP_CHAR_MEM + 2500
02938  1010             ;        BYTE >MAP_CHAR_MEM + 2600
02939  1010             ;        BYTE >MAP_CHAR_MEM + 2700
02940  1010             ;        BYTE >MAP_CHAR_MEM + 2800
02941  1010             ;        BYTE >MAP_CHAR_MEM + 2900
02942  1010             ;        BYTE >MAP_CHAR_MEM + 3000
02943  1010             ;        BYTE >MAP_CHAR_MEM + 3100
02944  1010                        
02945  1010             ATTRIB_ADDRESS 
02946  1010  20 78                 WORD ATTRIBUTE_MEM
02947  1012             
02948  1012             CHECKUP
02949  1012  01                    BYTE %0000001
02950  1013             CHECKDOWN
02951  1013  02                    BYTE %0000010
02952  1014             
02953  1014             CHECKLEFT
02954  1014  04                    BYTE %0000100
02955  1015             
02956  1015             CHECKRIGHT 
02957  1015  08                    BYTE %0001000
02958  1016             
02959  1016             CHECKDOWNRIGHT 
02960  1016  0A                    BYTE %0001010
02961  1017             
02962  1017             RIVER_ANIM1_LO 
02963  1017  18                    BYTE <CHRADR1
02964  1018             RIVER_ANIM1_HI 
02965  1018  4E                    BYTE >CHRADR1
02966  1019             
02967  1019             RIVER_ANIM2_LO 
02968  1019  C8                    BYTE <CHRADR2
02969  101A             RIVER_ANIM2_HI 
02970  101A  4A                    BYTE >CHRADR2
02971  101B             
02972  101B             RIVER_ANIM3_LO 
02973  101B  58                    BYTE <CHRADR3
02974  101C             RIVER_ANIM3_HI 
02975  101C  4C                    BYTE >CHRADR3
02976  101D             
02977  101D             RIVER_ANIM4_LO 
02978  101D  58                    BYTE <CHRADR4
02979  101E             RIVER_ANIM4_HI 
02980  101E  4F                    BYTE >CHRADR4
02981  101F             
02982  101F  18 4E      ZP1        WORD CHRADR1
02983  1021  C8 4A      ZP2        WORD CHRADR2
02984  1023  58 4C      ZP3        WORD CHRADR3
02985  1025  58 4F      ZP4        WORD CHRADR4
02986  1027             
02987  1027             GAMESCORE
02988  1027  00 00 00              BYTE 0,0,0,0,0
02989  102C             
02990  102C             ANIMLEVEL
02991  102C  00                    BYTE 0
02992  102D             
02993  102D  00         WATERSPEED BYTE 0
02994  102E             
02995  102E  00         MAPTWOLOADED BYTE 0
02996  102F             
02997  102F             ; CHARS.BIN
02998  102F             
02999  102F             ;MAPS_CHAR_MEM
03000  102F             
03001  102F             ;;CHARSET_DATA
03002  102F             
03003  102F             ;        BYTE $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
03004  102F             ;        BYTE $00,$FC,$FC,$FC,$FC,$FC,$FC,$00,$00,$7F,$7F,$7F,$7F,$7F,$7F,$00
03005  102F             ;        BYTE $00,$1F,$1F,$1F,$1F,$1F,$1F,$00,$AA,$82,$92,$86,$92,$86,$82,$AA
03006  102F             ;        BYTE $CF,$33,$FC,$33,$CF,$FC,$F3,$00,$08,$38,$38,$38,$28,$28,$08,$08
03007  102F             ;        BYTE $00,$FE,$F8,$F8,$E0,$E0,$83,$83,$08,$08,$08,$08,$C8,$C8,$C8,$C8
03008  102F             ;        BYTE $02,$CE,$38,$F8,$20,$E0,$83,$83,$C8,$C8,$C8,$C8,$C8,$C8,$C8,$C8
03009  102F             ;        BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$BF,$BF,$BF,$BF,$BF,$BF,$BF,$BF
03010  102F             ;        BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$00,$BF,$BF,$BF,$BF,$BF,$BF,$BF,$00
03011  102F             ;        BYTE $FE,$FE,$F8,$F8,$E0,$E0,$80,$83,$02,$FE,$F8,$F8,$E0,$E0,$80,$80
03012  102F             ;        BYTE $0F,$0F,$3F,$3F,$FF,$FF,$FF,$FF,$FE,$FE,$F8,$F8,$E0,$E0,$83,$83
03013  102F             ;        BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$8F,$B3,$BC,$B3,$8F,$BC,$B3,$80
03014  102F             ;        BYTE $8F,$B3,$BC,$B3,$8F,$BC,$B3,$00,$FE,$FE,$F8,$F8,$E0,$E0,$83,$83
03015  102F             ;        BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$55,$AA,$55,$00,$00,$00,$00,$00
03016  102F             ;        BYTE $AA,$02,$A8,$00,$20,$20,$80,$80,$02,$02,$08,$08,$20,$20,$80,$80
03017  102F             ;        BYTE $02,$02,$08,$08,$20,$20,$8A,$8A,$00,$00,$00,$00,$00,$00,$AA,$AA
03018  102F             ;        BYTE $00,$33,$FC,$30,$C2,$F2,$F8,$08,$00,$83,$BC,$33,$CF,$FC,$F3,$00
03019  102F             ;        BYTE $A2,$AF,$A2,$80,$8F,$8F,$8F,$8F,$AA,$FF,$AA,$0A,$FE,$FF,$FF,$FF
03020  102F             ;        BYTE $AA,$FE,$A8,$00,$23,$23,$8F,$8F,$80,$80,$8F,$8F,$8F,$8F,$8F,$8F
03021  102F             ;        BYTE $02,$22,$08,$08,$23,$23,$8F,$8F,$00,$00,$3F,$3F,$3F,$3F,$3F,$3F
03022  102F             ;        BYTE $3F,$3F,$FF,$FF,$00,$00,$AA,$AA,$3F,$3F,$3F,$3F,$00,$00,$AA,$AA
03023  102F             ;        BYTE $CC,$33,$FC,$30,$F0,$C0,$C3,$00,$C8,$C8,$C8,$C8,$C8,$C8,$C8,$08
03024  102F             ;        BYTE $0F,$03,$FC,$33,$CF,$FC,$F3,$00,$C8,$C8,$C8,$C8,$C8,$C8,$C8,$C8
03025  102F             ;        BYTE $FF,$FE,$FE,$F8,$F8,$E0,$E3,$83,$8F,$0F,$3F,$3F,$FF,$FF,$FF,$FF
03026  102F             ;        BYTE $8F,$0F,$3F,$FF,$FF,$FF,$FF,$FF,$55,$AA,$A5,$AF,$BF,$BF,$80,$80
03027  102F             ;        BYTE $55,$AA,$55,$FF,$FF,$FF,$00,$00,$55,$AA,$5A,$FE,$FE,$FE,$02,$02
03028  102F             ;        BYTE $BF,$80,$80,$80,$80,$80,$80,$AA,$FE,$C2,$32,$32,$0E,$0E,$02,$AA
03029  102F             ;        BYTE $FF,$C3,$CC,$CC,$F0,$F0,$C0,$EA,$FE,$02,$02,$02,$02,$02,$02,$AA
03030  102F             ;        BYTE $BF,$80,$80,$80,$80,$80,$AA,$BF,$FE,$02,$02,$02,$02,$02,$AA,$FE
03031  102F             ;        BYTE $FF,$C0,$C0,$C0,$C0,$C0,$EA,$FF,$80,$80,$80,$90,$A5,$AA,$AA,$00
03032  102F             ;        BYTE $03,$03,$02,$02,$02,$AA,$AA,$00,$C0,$C0,$40,$40,$40,$AA,$AA,$00
03033  102F             ;        BYTE $02,$02,$02,$0A,$2A,$AA,$AA,$00,$55,$AA,$A5,$AF,$BF,$BF,$80,$80
03034  102F             ;        BYTE $55,$AA,$55,$FF,$FF,$FF,$00,$00,$56,$AA,$6A,$FE,$FE,$FE,$02,$02
03035  102F             ;        BYTE $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
03036  102F             ;        BYTE $02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$AA,$AA
03037  102F             ;        BYTE $00,$00,$00,$00,$00,$00,$AA,$AA,$02,$02,$02,$02,$02,$02,$AA,$AA
03038  102F             ;        BYTE $02,$02,$02,$02,$02,$02,$02,$2A,$AA,$00,$00,$00,$00,$00,$00,$00
03039  102F             ;        BYTE $AA,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$00,$00,$00,$00,$02,$02,$02,$03
03040  102F             ;        BYTE $A0,$80,$80,$80,$00,$00,$00,$00,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E
03041  102F             ;        BYTE $08,$08,$20,$20,$20,$80,$AA,$AA,$2E,$2E,$2E,$2E,$2E,$2E,$AA,$AA
03042  102F             ;        BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$00
03043  102F             ;        BYTE $CA,$C8,$E3,$2F,$2F,$8F,$BF,$80,$AA,$2A,$2A,$02,$F2,$F2,$F2,$02
03044  102F             ;        BYTE $CE,$32,$F2,$38,$CB,$CB,$E0,$E0,$0F,$33,$FC,$33,$CF,$FC,$F3,$00
03045  102F             ;        BYTE $C2,$32,$F2,$F2,$32,$C2,$F2,$02,$CF,$33,$FC,$FC,$32,$C2,$F2,$08
03046  102F             ;        BYTE $C8,$C8,$E0,$2C,$20,$8C,$B0,$80,$CA,$C8,$E0,$23,$2F,$8C,$B3,$80
03047  102F             ;        BYTE $AA,$2A,$EA,$32,$C2,$F2,$F2,$02,$CE,$32,$F2,$38,$CB,$C8,$E3,$20
03048  102F             ;        BYTE $C2,$32,$F2,$32,$C2,$F2,$F2,$02,$00,$00,$00,$00,$02,$02,$02,$08
03049  102F             ;        BYTE $2F,$8F,$BF,$BF,$BF,$BF,$BF,$BF,$F2,$F2,$F2,$F2,$F2,$F2,$F2,$F2
03050  102F             ;        BYTE $08,$08,$20,$2C,$2C,$8C,$BC,$BC,$F2,$F2,$F8,$C8,$CB,$E3,$23,$2F
03051  102F             ;        BYTE $FF,$FC,$FC,$FE,$F2,$F2,$F8,$C8,$8F,$8F,$BF,$3F,$3F,$FF,$FF,$FF
03052  102F             ;        BYTE $FF,$FF,$FF,$FF,$FF,$FC,$FC,$FE,$C8,$E3,$23,$2F,$8F,$8F,$BF,$3F
03053  102F             ;        BYTE $3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$33,$FC,$33,$CF,$FC,$F3,$00
03054  102F             ;        BYTE $00,$C8,$C8,$C8,$C8,$C8,$C8,$08,$AA,$FF,$AA,$00,$FF,$FF,$FF,$FF
03055  102F             ;        BYTE $88,$C8,$88,$08,$C8,$C8,$C8,$C8,$00,$00,$FC,$FC,$FC,$FC,$FC,$FC
03056  102F             ;        BYTE $00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$08,$08,$C8,$C8,$C8,$C8,$C8,$C8
03057  102F             ;        BYTE $FC,$FC,$FC,$FC,$00,$00,$A8,$A8,$FF,$FF,$FF,$FF,$00,$00,$AA,$AA
03058  102F             ;        BYTE $3F,$3F,$3F,$3F,$00,$00,$2A,$2A,$C8,$C8,$C8,$C8,$08,$08,$80,$80
03059  102F             ;        BYTE $00,$33,$FC,$33,$C2,$FA,$F9,$09,$00,$33,$FC,$33,$AA,$55,$55,$00
03060  102F             ;        BYTE $AA,$FF,$AA,$00,$00,$00,$00,$00,$25,$24,$27,$27,$27,$24,$80,$83
03061  102F             ;        BYTE $00,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$FC,$FF,$FF,$FF,$FF,$FC,$00
03062  102F             ;        BYTE $AA,$BB,$BF,$B8,$B8,$3B,$3B,$38,$FF,$C0,$2A,$3F,$FF,$3F,$EA,$00
03063  102F             ;        BYTE $FF,$00,$AA,$FF,$FF,$FF,$AA,$00,$38,$3B,$3B,$3B,$3B,$38,$3A,$00
03064  102F             ;        BYTE $00,$FF,$FF,$FF,$FF,$00,$AA,$00,$00,$CC,$3F,$CC,$AA,$55,$55,$00
03065  102F             ;        BYTE $00,$CC,$3F,$CC,$83,$AF,$6F,$60,$00,$CC,$3F,$CC,$F3,$3F,$CF,$00
03066  102F             ;        BYTE $00,$3F,$FF,$FF,$FF,$FF,$3F,$00,$58,$18,$D8,$D8,$D8,$18,$42,$02
03067  102F             ;        BYTE $FF,$03,$A8,$FC,$FF,$FC,$AB,$00,$AA,$EE,$EE,$2E,$2A,$EC,$EC,$2C
03068  102F             ;        BYTE $2C,$EC,$EC,$EC,$EC,$2C,$AC,$00,$CF,$33,$FC,$33,$C2,$FA,$F9,$09
03069  102F             ;        BYTE $CF,$33,$FC,$33,$AA,$55,$55,$00,$25,$24,$27,$27,$27,$24,$81,$80
03070  102F             ;        BYTE $00,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$FC,$FF,$FF,$FF,$FF,$FC,$00
03071  102F             ;        BYTE $AA,$BB,$BB,$B8,$AA,$3B,$3B,$38,$FF,$C0,$2A,$BF,$FF,$BF,$EA,$00
03072  102F             ;        BYTE $FF,$00,$AA,$FF,$FF,$FF,$AA,$00,$38,$3B,$3B,$3B,$3B,$38,$3A,$00
03073  102F             ;        BYTE $00,$FF,$FF,$FF,$FF,$00,$AA,$00,$CF,$33,$FC,$33,$A3,$6B,$6B,$18
03074  102F             ;        BYTE $00,$0F,$3F,$3F,$3F,$3F,$0F,$00,$08,$C8,$F8,$F8,$F8,$F8,$CE,$02
03075  102F             ;        BYTE $FF,$00,$A8,$FE,$FF,$FE,$A8,$00,$A8,$B8,$B8,$B8,$A8,$20,$2C,$2C
03076  102F             ;        BYTE $2C,$EC,$EC,$EC,$EC,$2C,$A0,$00,$00,$33,$F0,$C3,$CF,$CC,$33,$00
03077  102F             ;        BYTE $0A,$0A,$02,$08,$02,$08,$02,$0A,$AF,$AF,$AF,$AF,$AF,$AF,$AF,$AF
03078  102F             ;        BYTE $A5,$A5,$A5,$A5,$A5,$A5,$A5,$A5,$00,$00,$00,$00,$00,$00,$00,$00
03079  102F             ;        BYTE $0A,$0A,$02,$08,$02,$08,$02,$00,$AF,$AF,$AF,$AF,$AF,$AF,$AF,$00
03080  102F             ;        BYTE $A5,$A5,$A5,$A5,$A5,$A5,$A5,$00,$0F,$33,$3C,$33,$0F,$3C,$33,$00
03081  102F             ;        BYTE $A5,$A5,$A5,$A5,$A5,$A5,$A5,$A5,$0A,$0A,$02,$08,$02,$08,$00,$00
03082  102F             ;        BYTE $AF,$AF,$AF,$AF,$AF,$AF,$00,$00,$A5,$A5,$A5,$A5,$A5,$A5,$00,$00
03083  102F             ;        BYTE $00,$00,$00,$00,$00,$03,$0F,$3F,$00,$00,$00,$00,$00,$00,$00,$00
03084  102F             ;        BYTE $15,$00,$0A,$0A,$20,$23,$23,$00,$00,$08,$08,$08,$20,$23,$23,$00
03085  102F             ;        BYTE $55,$FF,$54,$00,$00,$00,$03,$03,$0C,$0C,$30,$30,$C0,$C0,$00,$AA
03086  102F             ;        BYTE $00,$00,$00,$00,$00,$00,$FF,$AA,$55,$AA,$AA,$AA,$AA,$AA,$AA,$00
03087  102F             ;        BYTE $55,$AA,$A0,$83,$8F,$8C,$8C,$00,$55,$AA,$02,$F0,$FC,$0C,$0C,$00
03088  102F             ;        BYTE $00,$00,$00,$FF,$FF,$FF,$00,$00,$AF,$FF,$EB,$FF,$AF,$FF,$FF,$FF
03089  102F             ;        BYTE $AF,$FF,$EB,$FF,$AF,$FF,$EB,$FF,$AF,$FF,$EB,$FF,$AF,$FF,$00,$00
03090  102F             ;        BYTE $CC,$30,$FC,$30,$CC,$FC,$F0,$00,$25,$20,$23,$23,$23,$20,$2A,$00
03091  102F             ;        BYTE $55,$02,$F2,$32,$F2,$02,$AA,$00,$AC,$FC,$E8,$FC,$AC,$FC,$E8,$FC
03092  102F             ;        BYTE $AC,$FC,$E8,$FC,$AC,$FC,$00,$00,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$00
03093  102F             ;        BYTE $7F,$7F,$7F,$7F,$7F,$7F,$7F,$00,$55,$AA,$80,$82,$88,$88,$88,$88
03094  102F             ;        BYTE $55,$AA,$00,$AA,$00,$FF,$FF,$FF,$55,$AA,$02,$82,$22,$22,$22,$22
03095  102F             ;        BYTE $88,$88,$88,$88,$82,$80,$AA,$00,$FF,$FF,$FF,$00,$AA,$00,$AA,$00
03096  102F             ;        BYTE $22,$22,$22,$22,$82,$02,$AA,$00,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$00
03097  102F             ;        BYTE $3D,$3D,$3D,$3D,$3D,$3D,$3D,$00,$F3,$CC,$3F,$CC,$F3,$3F,$CF,$00
03098  102F             ;        BYTE $15,$2A,$2F,$2C,$2F,$2F,$2A,$00,$54,$A8,$F8,$F8,$38,$F8,$A8,$00
03099  102F             ;        BYTE $54,$08,$C8,$08,$C8,$08,$A8,$00,$55,$AA,$AA,$AA,$AA,$95,$90,$90
03100  102F             ;        BYTE $55,$AA,$AA,$AA,$AA,$55,$01,$01,$54,$A8,$A8,$A8,$A8,$A8,$A8,$A8
03101  102F             ;        BYTE $90,$90,$95,$9F,$9F,$95,$AA,$00,$01,$01,$55,$7D,$7D,$55,$AA,$00
03102  102F             ;        BYTE $A8,$A8,$A8,$A8,$A8,$A8,$A8,$00,$54,$A8,$A8,$A8,$A8,$A8,$A8,$00
03103  102F             ;        BYTE $00,$00,$00,$F0,$F0,$F0,$00,$00,$A3,$F3,$E3,$F3,$A3,$F3,$E3,$F3
03104  102F             ;        BYTE $A0,$F0,$E0,$F0,$A0,$F0,$E0,$F0,$A3,$F3,$E3,$F3,$A3,$F3,$00,$00
03105  102F             ;        BYTE $A0,$F0,$E0,$F0,$A0,$F0,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00
03106  102F             ;        BYTE $00,$00,$00,$00,$03,$0F,$3F,$FF,$03,$0F,$3F,$FF,$FF,$FF,$FF,$FF
03107  102F             ;        BYTE $55,$00,$C8,$08,$20,$20,$20,$00,$55,$00,$CA,$0A,$A0,$A3,$A3,$00
03108  102F             ;        BYTE $00,$CA,$CA,$0A,$A0,$A3,$A3,$00,$00,$C8,$C8,$08,$20,$23,$23,$00
03109  102F             ;        BYTE $00,$88,$88,$08,$20,$20,$23,$03,$00,$4A,$4A,$4A,$C0,$C2,$F2,$30
03110  102F             ;        BYTE $00,$C8,$C8,$08,$20,$20,$20,$00,$00,$00,$00,$03,$03,$03,$03,$03
03111  102F             ;        BYTE $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$3F,$3F
03112  102F             ;        BYTE $03,$03,$03,$03,$03,$57,$FF,$FF,$30,$30,$30,$30,$30,$75,$FF,$FF
03113  102F             ;        BYTE $03,$03,$03,$03,$03,$57,$FF,$FF,$00,$00,$00,$00,$00,$55,$FF,$FF
03114  102F             ;        BYTE $00,$00,$00,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$D5,$FF,$FF
03115  102F             ;        BYTE $00,$00,$00,$00,$00,$50,$FC,$FC,$C0,$C0,$C0,$C0,$C0,$D5,$FF,$FF
03116  102F             ;        BYTE $0C,$0C,$0C,$0C,$0C,$5D,$FF,$FF,$03,$03,$03,$03,$03,$03,$03,$03
03117  102F             ;        BYTE $80,$80,$80,$80,$80,$80,$80,$80,$AA,$FF,$AA,$00,$00,$40,$41,$75
03118  102F             ;        BYTE $FF,$FF,$FF,$32,$0A,$02,$02,$02,$FF,$FF,$FF,$8C,$A0,$40,$40,$40
03119  102F             ;        BYTE $02,$02,$02,$02,$02,$02,$AF,$BF,$40,$40,$40,$40,$40,$40,$F2,$FE
03120  102F             ;        BYTE $00,$00,$00,$00,$00,$40,$41,$45,$00,$00,$00,$00,$00,$00,$50,$54
03121  102F             ;        BYTE $3F,$3F,$0F,$00,$00,$00,$00,$00,$FF,$FF,$FF,$32,$0A,$02,$02,$02
03122  102F             ;        BYTE $FF,$FF,$FF,$8C,$A0,$40,$40,$40,$FC,$FC,$F0,$00,$00,$00,$00,$00
03123  102F             ;        BYTE $02,$02,$02,$02,$02,$02,$AF,$BF,$40,$40,$40,$40,$40,$40,$FA,$FE
03124  102F             ;        BYTE $C0,$30,$F0,$30,$C0,$F0,$F0,$00,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$00
03125  102F             ;        BYTE $FE,$3E,$02,$02,$02,$02,$02,$02,$FC,$F0,$00,$00,$00,$00,$00,$00
03126  102F             ;        BYTE $02,$02,$02,$02,$0A,$2A,$AA,$55,$00,$00,$00,$00,$80,$A0,$A8,$54
03127  102F             ;        BYTE $FC,$FC,$FC,$FC,$10,$00,$00,$00
03128  102F             
03129  102F             ;; CHARSATTRIBS.BIN
03130  102F             ;;COLOR_DATA
03131  102F             ;ATTRIBUTES_MEM
03132  102F             
03133  102F             ;        BYTE $03,$0A,$0A,$0A,$0A,$3E,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E
03134  102F             ;        BYTE $0E,$0E,$0E,$0E,$1E,$0A,$0A,$0A,$0E,$0B,$0A,$0A,$0A,$0A,$0A,$0A
03135  102F             ;        BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E,$1C
03136  102F             ;        BYTE $1C,$1C,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$08,$0C,$0C,$08,$0C,$0C,$0C
03137  102F             ;        BYTE $0B,$0E,$0E,$0E,$0C,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$0A
03138  102F             ;        BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E,$0E
03139  102F             ;        BYTE $0E,$0E,$0E,$0E,$0E,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
03140  102F             ;        BYTE $0A,$0A,$0A,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$0A,$0A,$0D,$0D
03141  102F             ;        BYTE $0D,$0D,$0D,$0A,$0A,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0A,$0C,$0C
03142  102F             ;        BYTE $0C,$0C,$0C,$0A,$0E,$09,$0E,$09,$0E,$09,$0E,$0A,$09,$0E,$09,$0E
03143  102F             ;        BYTE $0E,$0C,$0C,$0C,$0E,$0E,$0E,$0A,$0E,$0E,$0A,$0A,$0A,$0A,$0A,$0E
03144  102F             ;        BYTE $0E,$0A,$0A,$0A,$0A,$0A,$0B,$0A,$0A,$0B,$0A,$0A,$0A,$0A,$0F,$0F
03145  102F             ;        BYTE $0E,$0A,$0A,$0A,$0A,$0D,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$1E,$0E,$0E
03146  102F             ;        BYTE $0C,$0C,$0C,$0C,$0B,$0B,$0C,$0A,$0D,$8A,$8A,$8E,$8E,$0E,$8A,$0A
03147  102F             ;        BYTE $0A,$0E,$0E,$0C,$0C,$0A,$0E,$0E,$0E,$0E,$0C,$0C,$0A,$0A,$0A,$0A
03148  102F             ;        BYTE $0A,$0A,$0A,$0A,$0E,$0C,$0B,$0B,$0B
03149  102F             
03150  102F             ;; TILES.BIN
03151  102F             ;;TILES_DATA
03152  102F             ;TILES_MEM
03153  102F             
03154  102F             ;        BYTE $00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
03155  102F             ;        BYTE $02,$03,$04,$05,$06,$06,$05,$07,$06,$05,$08,$09,$05,$0A,$06,$0B
03156  102F             ;        BYTE $0C,$0D,$0E,$05,$0C,$0F,$05,$10,$0E,$05,$11,$12,$05,$13,$12,$14
03157  102F             ;        BYTE $06,$15,$06,$05,$06,$16,$05,$17,$0E,$05,$11,$12,$05,$13,$12,$18
03158  102F             ;        BYTE $19,$19,$19,$05,$01,$01,$05,$1A,$01,$05,$1B,$01,$05,$1C,$1D,$1D
03159  102F             ;        BYTE $1E,$1F,$06,$05,$20,$21,$05,$22,$23,$05,$24,$25,$05,$1C,$26,$27
03160  102F             ;        BYTE $28,$06,$06,$29,$2A,$06,$06,$29,$18,$18,$18,$2B,$18,$18,$18,$2B
03161  102F             ;        BYTE $2C,$2D,$18,$18,$2E,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14
03162  102F             ;        BYTE $2F,$30,$30,$31,$32,$33,$34,$35,$36,$37,$38,$37,$39,$3A,$3B,$3C
03163  102F             ;        BYTE $3D,$3E,$3E,$3F,$40,$41,$41,$42,$41,$41,$40,$42,$43,$43,$44,$45
03164  102F             ;        BYTE $3D,$3E,$3E,$3F,$40,$46,$47,$48,$49,$4A,$40,$4B,$4C,$43,$44,$4D
03165  102F             ;        BYTE $4E,$4F,$50,$51,$06,$52,$53,$54,$55,$16,$06,$54,$56,$15,$06,$54
03166  102F             ;        BYTE $06,$06,$57,$58,$06,$59,$06,$5A,$5B,$5C,$18,$5D,$5E,$0D,$18,$5D
03167  102F             ;        BYTE $18,$18,$18,$5F,$18,$18,$60,$61,$14,$62,$63,$18,$14,$5F,$64,$18
03168  102F             ;        BYTE $18,$18,$18,$2B,$18,$18,$18,$2B,$14,$14,$14,$2B,$14,$14,$14,$2B
03169  102F             ;        BYTE $65,$65,$65,$66,$67,$67,$67,$68,$69,$6A,$25,$6B,$6C,$6D,$6E,$6F
03170  102F             ;        BYTE $65,$70,$71,$71,$72,$73,$74,$75,$76,$77,$78,$78,$79,$7A,$7A,$7A
03171  102F             ;        BYTE $7B,$7B,$7C,$7D,$7E,$74,$7F,$72,$78,$78,$80,$81,$7A,$7A,$7A,$82
03172  102F             ;        BYTE $06,$83,$84,$84,$06,$85,$86,$87,$88,$89,$8A,$8A,$8B,$8C,$8C,$8C
03173  102F             ;        BYTE $84,$84,$8D,$06,$8E,$86,$8F,$06,$8A,$8A,$90,$91,$8C,$8C,$8C,$92
03174  102F             ;        BYTE $93,$65,$65,$65,$67,$67,$67,$67,$6A,$25,$6A,$25,$6D,$6E,$6D,$6E
03175  102F             ;        BYTE $94,$95,$96,$97,$98,$99,$9A,$97,$94,$95,$96,$40,$98,$99,$9A,$40
03176  102F             ;        BYTE $94,$95,$96,$9B,$98,$99,$9A,$9B,$94,$95,$9C,$40,$9D,$9E,$9F,$A0
03177  102F             ;        BYTE $94,$95,$96,$9B,$98,$99,$9A,$9B,$94,$95,$96,$9B,$98,$99,$9A,$9B
03178  102F             ;        BYTE $94,$95,$96,$A1,$98,$99,$9A,$A1,$94,$95,$96,$A1,$98,$99,$9A,$40
03179  102F             ;        BYTE $94,$95,$96,$A2,$98,$99,$9A,$A3,$94,$95,$96,$A2,$98,$99,$9A,$A3
03180  102F             ;        BYTE $94,$95,$96,$A4,$98,$99,$9A,$A5,$94,$95,$96,$A6,$98,$99,$9A,$40
03181  102F             ;        BYTE $A7,$A8,$A9,$A7,$AA,$AA,$AA,$AA,$AB,$AB,$AC,$AC,$AD,$AD,$AD,$AD
03182  102F             ;        BYTE $06,$AE,$AF,$B0,$06,$AA,$AA,$AA,$0C,$B1,$AC,$AC,$0C,$B2,$AD,$AD
03183  102F             ;        BYTE $B3,$B3,$B3,$B4,$06,$06,$06,$06,$B5,$B6,$B6,$B7,$B8,$B9,$B9,$BA
03184  102F             ;        BYTE $BB,$BC,$BC,$BC,$BD,$BD,$BD,$BD,$BD,$BD,$BE,$BF,$BD,$BD,$AF,$C0
03185  102F             ;        BYTE $B3,$B3,$B3,$B4,$06,$06,$06,$06,$C1,$C2,$C3,$06,$C4,$C5,$C6,$06
03186  102F             ;        BYTE $AF,$B0,$C7,$06,$AA,$AA,$AA,$C8,$AC,$AC,$C9,$CA,$AD,$AD,$CB,$CC
03187  102F             ;        BYTE $18,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14,$CD,$CD,$CD,$CD
03188  102F             ;        BYTE $18,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14
03189  102F             ;        BYTE $06,$06,$06,$06,$06,$06,$06,$06,$40,$CE,$CF,$18,$CF,$18,$18,$18
03190  102F             ;        BYTE $06,$06,$06,$06,$06,$06,$06,$06,$18,$18,$18,$18,$18,$18,$18,$18
03191  102F             ;        BYTE $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$D3,$D2,$D3,$D2,$D2,$D3,$D2,$D3
03192  102F             ;        BYTE $D0,$D1,$D0,$D1,$D2,$D4,$D5,$D6,$D6,$D2,$D6,$D2,$D6,$D2,$D6,$D2
03193  102F             ;        BYTE $A1,$A1,$A1,$A1,$40,$D7,$40,$D8,$D9,$DA,$97,$97,$DB,$DC,$DD,$DD
03194  102F             ;        BYTE $A1,$A1,$A1,$A1,$D8,$40,$DE,$40,$97,$97,$DF,$E0,$DD,$DD,$E1,$E2
03195  102F             ;        BYTE $A1,$E3,$E4,$A1,$D8,$E3,$E4,$40,$97,$E3,$E4,$97,$D8,$E3,$E4,$A1
03196  102F             ;        BYTE $65,$65,$65,$65,$72,$E5,$72,$72,$40,$E6,$E7,$40,$44,$E8,$E9,$44
03197  102F             ;        BYTE $A1,$A1,$A1,$A1,$01,$EA,$EB,$40,$EC,$ED,$EE,$EF,$44,$F0,$F1,$44
03198  102F             ;        BYTE $06,$06,$06,$F2,$06,$06,$06,$F2,$06,$06,$06,$F2,$06,$06,$06,$F2
03199  102F             ;        BYTE $F3,$B4,$4F,$4F,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
03200  102F             ;        BYTE $00,$F4,$F5,$00,$40,$F6,$F7,$40,$00,$F8,$F8,$40,$00,$00,$00,$00
03201  102F             ;        BYTE $19,$19,$19,$19,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
03202  102F             
03203  102F             ;; MAP.BIN
03204  102F             ;;MAP_DATA
03205  102F             ;MAPS_MEM
03206  102F             
03207  102F             ;        BYTE $00,$2E,$15,$29,$00,$2E,$29,$00,$2E,$00,$29,$00,$2E,$29,$15,$29
03208  102F             ;        BYTE $26,$25,$19,$29,$25,$26,$25,$25,$26,$25,$29,$25,$26,$29,$15,$29
03209  102F             ;        BYTE $28,$2B,$18,$29,$00,$00,$00,$28,$2B,$27,$29,$28,$2B,$29,$15,$29
03210  102F             ;        BYTE $08,$08,$1A,$08,$08,$2F,$04,$08,$08,$08,$08,$08,$08,$08,$1A,$08
03211  102F             ;        BYTE $2D,$2D,$17,$2D,$0B,$01,$2D,$1E,$1D,$1F,$2D,$2D,$2D,$2D,$17,$2D
03212  102F             ;        BYTE $24,$24,$16,$0C,$03,$06,$24,$1C,$1B,$20,$23,$12,$13,$23,$16,$23
03213  102F             ;        BYTE $22,$22,$0D,$02,$07,$0E,$22,$22,$22,$22,$22,$22,$22,$22,$22,$22
03214  102F             ;        BYTE $14,$14,$05,$14,$14,$0F,$0F,$2A,$10,$11,$2A,$0F,$14,$14,$14,$14
03215  102F             ;        BYTE $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
03216  102F             ;        BYTE $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
03217  102F             
03218  102F             ;===============================================================================
03219  102F             ; PLAYER SETUP
03220  102F             ;===============================================================================
03221  102F             ;2W THE PLAYER SPRITE HERE CAN MOVE AROUND THE SCREEN ON TOP OF THE TILES
03222  102F             ; AND WHEN THE EDGE IS REACHED, THE SCREEN SCROLLS IN THAT DIRECTION.
03223  102F             ;===============================================================================
03224  102F             
03225  102F             
03226  102F             PLAYERINIT 
03227  102F             
03228  102F             ;-----------------------------------------------------------------------
03229  102F             ; PLAYER HAS A STRANGE SETUP AS IT'S ALWAYS GOING TO BE USING
03230  102F             ; SPRITES 0 AND 1
03231  102F             ; AS WELL AS ALWAYS BEING 'ACTIVE' (USED)
03232  102F             ;-----------------------------------------------------------------------
03233  102F             
03234  102F  A9 00                 LDA #COLOR_BLACK
03235  1031  8D 21 D0              STA VIC_BACKGROUND_COLOR
03236  1034             
03237  1034  A9 FF                 LDA #%11111111                          ; TURN ON MULTICOLOR FOR SPRITES 0 AND 1
03238  1036  8D 1C D0              STA VIC_SPRITE_MULTICOLOR               ; ALSO TURN ALL OTHERS TO SINGLE COLOR
03239  1039             
03240  1039  A9 00                 LDA #COLOR_BLACK
03241  103B  8D 25 D0              STA VIC_SPRITE_MULTICOLOR_1             ; SET SPRITE SHARED MULTICOLOR 1 TO BROWN
03242  103E  A9 0A                 LDA #COLOR_LTRED
03243  1040  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2             ; SET SPRITE SHARED MULTICOLOR 2 TO 'PINK'
03244  1043             
03245  1043  A9 07                 LDA #COLOR_YELLOW
03246  1045  8D 27 D0              STA VIC_SPRITE_COLOR                    ; SET SPRITE 0 COLOR TO YELLOW
03247  1048  A9 06                 LDA #COLOR_BLUE
03248  104A  8D 28 D0              STA VIC_SPRITE_COLOR + 1                ; SET SPRITE 1 COLOR TO ORANGE (BKGROUND SPRITE)
03249  104D             
03250  104D             ;------------------------------------------------------------------------------
03251  104D             ; WE NOW USE A SYSTEM THAT TRACKS THE SPRITE POSITION IN CHARACTER COORDS ON
03252  104D             ; THE SCREEN, SO TO AVOID COSTLY CALCULATIONS EVERY FRAME, WE SET THE SPRITE
03253  104D             ; TO A CHARACTER BORDER INTIALLY AND TRACK ALL MOVEMENT FROM THERE. THAT WAY
03254  104D             ; WE NEED ONLY DO THIS SET OF CALCULATIONS ONCE IN THE LIFETIME OF THE PLAYER.
03255  104D             ;
03256  104D             ; TO INITALLY PLACE THE SPRITE, WE USE 'SPRITETOCHARPOS'
03257  104D             ;------------------------------------------------------------------------------
03258  104D             ; SPRITE X POSITION
03259  104D  A9 16                 LDA #22
03260  104F  85 03                 STA PARAM1                      ; CHAR X POS = 19
03261  1051             
03262  1051  A2 00                 LDX #0
03263  1053  BD 51 35              LDA SPRITE_STACK,X              ; 10,12,10,12,0,0,0,0
03264  1056  85 04                 STA PARAM2                      ; CHAR Y POS = 10
03265  1058  20 BA 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
03266  105B             
03267  105B  A2 01                 LDX #1                          ; SPRITE NUMBER 1
03268  105D  BD 51 35              LDA SPRITE_STACK,X              ; 10,12,10,12,0,0,0,0
03269  1060  85 04                 STA PARAM2
03270  1062  20 BA 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
03271  1065             
03272  1065             ; SPRITE 2 AND 3: ENEMY
03273  1065  A9 01                 LDA #1
03274  1067  85 03                 STA PARAM1                      ; CHAR X POS = 19
03275  1069             
03276  1069  A2 02                 LDX #2
03277  106B  BD 51 35              LDA SPRITE_STACK,X              ; 10,12,10,12,0,0,0,0
03278  106E  85 04                 STA PARAM2                      ; CHAR Y POS = 10
03279  1070  20 BA 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
03280  1073             
03281  1073  A2 03                 LDX #3                          ; SPRITE NUMBER 1
03282  1075  BD 51 35              LDA SPRITE_STACK,X              ; 10,12,10,12,0,0,0,0
03283  1078  85 04                 STA PARAM2
03284  107A  20 BA 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
03285  107D             
03286  107D  A9 01                 LDA #1
03287  107F  85 03                 STA PARAM1                      ; CHAR X POS = 19
03288  1081             
03289  1081  A2 05                 LDX #5
03290  1083  BD 51 35              LDA SPRITE_STACK,X              ; 10,12,10,12,0,0,0,0
03291  1086  85 04                 STA PARAM2                      ; CHAR Y POS = 10
03292  1088  20 BA 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
03293  108B             
03294  108B             ;-------------------------------------------------------------------------------
03295  108B             ; SET SPRITE IMAGES.  THE SPRITES FROM THE MLP SPELUNKER DEMO USED 2 SPRITES
03296  108B             ; OVERLAPPED SO THEY COULD USE AN EXTRA COLOR.  SO OUR MAIN PLAYER SPRITE
03297  108B             ; USES 2 SPRITES (0 AND 1).  THE FIRST WALKING FRAME IMAGE 1, AND IT'S
03298  108B             ; BACKGROUND SPRITE IS IMAGE 8.  WE USE THE SETSPRITEIMAGE SUBROUTINE AS IT
03299  108B             ; WILL UPDATE THE POINTERS FOR BOTH SCREEN1 AND SCREEN2 FOR US.
03300  108B             ;-------------------------------------------------------------------------------
03301  108B             
03302  108B  A9 00                 LDA #PLAYER_STATE_IDLE          ; SET INITIAL STATE (IDLE)
03303  108D  20 CB 11              JSR CHANGEPLAYERSTATE
03304  1090             
03305  1090  A9 01                 LDA #1
03306  1092  8D 5A 35              STA SPRITE_IS_ACTIVE            ; SET SPRITE 0 TO ACTIVE
03307  1095  8D 5B 35              STA SPRITE_IS_ACTIVE + 1        ; SET SPRITE 1 TO ACTIVE
03308  1098  60                    RTS
03309  1099             
03310  1099             
03311  1099             
03312  1099             ;===============================================================================
03313  1099             ; UPDATE PLAYER
03314  1099             ;-------------------------------------------------------------------------------
03315  1099             ; UPDATE THE PLAYER. JOYSTICK CONTROLS ARE UPDATED VIA INTERRUPT SO WE READ THE
03316  1099             ; VALUES FROM JOY_X AND JOY_Y
03317  1099             ;-------------------------------------------------------------------------------
03318  1099             
03319  1099             
03320  1099             
03321  1099             PLAYER_RIGHT_CAP = MAP_RIGHT_LIMIT       ; SPRITE MOVEMENT CAPS
03322  1099             PLAYER_LEFT_CAP = $09                    ; MOVE THE SPRITE, WE SCROLL THE SCREEN
03323  1099             PLAYER_UP_CAP = $04
03324  1099             PLAYER_DOWN_CAP = MAP_DOWN_LIMIT
03325  1099             
03326  1099             
03327  1099             UPDATEPLAYER ; ONLY UPDATE THE PLAYER IF IT'S ACTIVE
03328  1099  AD 5A 35              LDA SPRITE_IS_ACTIVE             ; CHECK AGAINST SPRITE #0 - IS IT ACTIVE?
03329  109C  D0 01                 BNE @UPDATE
03330  109E  60                    RTS
03331  109F             @UPDATE    
03332  109F  A2 00                 LDX #0
03333  10A1  20 50 34              JSR ANIMATESPRITE
03334  10A4  20 E1 11              JSR UPDATEPLAYERSTATE            ;JUMP (PLAYER_STATE_JUMPTABLE)
03335  10A7  60                    RTS
03336  10A8             
03337  10A8             
03338  10A8             
03339  10A8             ;===============================================================================
03340  10A8             ; JOYSTICK TESTING
03341  10A8             ; MOVING: DIRECTION THE CHARACTER IS MOVING IN
03342  10A8             ; SCROLL: CHECK IF THE SCREEN HAS STOPPED SCROLLING
03343  10A8             
03344  10A8             ; JOYSTICKREADY = 0 - THE SCREEN HAS STOPPED SCROLLING
03345  10A8             ; JOYSTICKREADY = 1 - THE SCREEN IS NOW SCROLLING
03346  10A8             ;===============================================================================
03347  10A8             
03348  10A8             
03349  10A8             JOYSTICKREADY 
03350  10A8  A5 2D                 LDA SCROLL_MOVING             ; IF MOVING IS 'STOPPED' WE CAN TEST JOYSTICK
03351  10AA  F0 05                 BEQ @JOYREADY
03352  10AC                        
03353  10AC             ; SCREEN IS STILL SCROLLING           ; IF IT'S MOVING BUT DIRECTION IS STOPPED, WE'RE 'FIXING'
03354  10AC  A5 2C                 LDA SCROLL_DIRECTION          ; > 0 THEN STOP THE CHARACTER DIRECTION MOVEMENT
03355  10AE  D0 01                 BNE @JOYREADY
03356  10B0             
03357  10B0             ; THE SCREEN HAS STOPPED SCROLLING
03358  10B0  60                    RTS
03359  10B1             
03360  10B1             ; THE SCREEN IS NOW SCROLLING
03361  10B1             @JOYREADY
03362  10B1  A9 00                 LDA #SCROLL_STOP                ; RESET SCROLL DIRECTION - IF IT NEEDS TO SCROLL
03363  10B3  85 2C                 STA SCROLL_DIRECTION            ; IT WILL BE UPDATED
03364  10B5             
03365  10B5  A9 00                 LDA #0                          ; SEND CODE FOR JOYSTICK READY
03366  10B7  60                    RTS
03367  10B8             
03368  10B8             
03369  10B8             
03370  10B8             ;===============================================================================
03371  10B8             ; PLAYER WALKS TO THE RIGHT
03372  10B8             ;===============================================================================
03373  10B8             
03374  10B8             
03375  10B8             MOVEPLAYERRIGHT 
03376  10B8  A9 00                 LDA #0
03377  10BA  8D 3D 32              STA SCROLL_FIX_SKIP
03378  10BD  18                    CLC                             ; CLEAR CARRY FLAG BECAUSE I'M PARANOID
03379  10BE             ;===============================================================================
03380  10BE             ; SPRITE HAS NOT REACHED THE RIGHT EDGE SCREEN YET.
03381  10BE             ; SO WE CAN KEEP MOVING THE SPRITE PLAYER TO THE RIGHT.
03382  10BE             ;===============================================================================
03383  10BE  BD 72 35              LDA SPRITE_CHAR_POS_X,X         ; LOAD THE SPRITE CHAR X POSITION
03384  10C1  C9 11                 CMP #PLAYER_RIGHT_CAP           ; CHECK AGAINST THE RIGHT EDGE OF THE SCREEN
03385  10C3  90 25                 BCC @RIGHTMOVE                  ; IF X CHAR POS < CAP - MOVE THE SPRITE, ELSE SCROLL
03386  10C5             
03387  10C5             ;===============================================================================
03388  10C5             ; SPRITE IS AT THE RIGHT EDGE AND THE SCREEN IS SCROLLING,
03389  10C5             ; SO WE CHECK THE
03390  10C5             ; MAP_Y_POS AND MAP_Y_DELTA VARIABLES
03391  10C5             ;===============================================================================
03392  10C5  A5 30                 LDA MAP_X_POS                   ; LOAD THE CURRENT MAP X POSITION
03393  10C7  C9 15                 CMP #21                         ; MAP = 64 TILES WIDE, SCREEN = 10 TILES WIDE
03394  10C9  D0 0E                 BNE @SCROLLRIGHT
03395  10CB  A5 32                 LDA MAP_X_DELTA                 ; EACH TILE IS 4 CHARACTERS WIDE (0-3)
03396  10CD  C9 00                 CMP #0                          ; IF WE HIT THIS LIMIT WE DON'T SCROLL (OR MOVE)
03397  10CF  D0 08                 BNE @SCROLLRIGHT
03398  10D1                        ;AT THIS POINT WE WILL REVERT TO MOVE
03399  10D1  A9 01                 LDA #1
03400  10D3  8D 3D 32              STA SCROLL_FIX_SKIP
03401  10D6  4C EA 10              JMP @RIGHTMOVE
03402  10D9             
03403  10D9             ;===============================================================================
03404  10D9             ; CHECK IF SPRITE HIT ANYTHING WHILE MOVING TO THE RIGHT
03405  10D9             ;===============================================================================
03406  10D9             @SCROLLRIGHT 
03407  10D9  A2 00                 LDX #0
03408  10DB  20 1A 09              JSR CHECKMOVERIGHT              ; COLLISION CHECK AGAINST CHARACTERS
03409  10DE  F0 01                 BEQ @SCROLL                     ; TODO - RETURN THE COLLISION CODE HERE
03410  10E0  60                    RTS
03411  10E1             
03412  10E1             ;===============================================================================
03413  10E1             ; SPRITE DIDN'T HIT ANYTHING SO WE CAN SCROLL THE SCREEN TO THE RIGHT
03414  10E1             ;===============================================================================
03415  10E1             @SCROLL
03416  10E1  A9 01                 LDA #SCROLL_RIGHT               ; SET THE DIRECTION FOR SCROLL AND POST
03417  10E3  85 2C                 STA SCROLL_DIRECTION            ; AND POST SCROLL CHECKS
03418  10E5  85 2D                 STA SCROLL_MOVING
03419  10E7  A9 00                 LDA #0                          ; LOAD 'CLEAR CODE'
03420  10E9  60                    RTS                             ; TODO - ENSURE COLLISION CODE IS RETURNED
03421  10EA             
03422  10EA             ;===============================================================================
03423  10EA             ; SPRITE IS NOT AT THE RIGHT SCREEN EDGE YET.
03424  10EA             ; SO WE CHECK FOR ANY COLLISION WHILE MOVING RIGHT. IF NO COLLISION EXISTS,
03425  10EA             ; WE CAN THEN MOVE THE SPRITE TO THE RIGHT.
03426  10EA             ;===============================================================================
03427  10EA                        
03428  10EA             @RIGHTMOVE 
03429  10EA  A2 00                 LDX #0
03430  10EC  20 1A 09              JSR CHECKMOVERIGHT              ; CHECK AHEAD FOR CHARACTER COLLISION
03431  10EF  D0 0C                 BNE @RIGHTDONE
03432  10F1             
03433  10F1             ;        JSR ENEMYCOLLISION
03434  10F1             @MOVERIGHT 
03435  10F1  A2 00                 LDX #0
03436  10F3  20 E9 33              JSR MOVESPRITERIGHT             ; MOVE SPRITES ONE PIXEL RIGHT
03437  10F6  A2 01                 LDX #1
03438  10F8  20 E9 33              JSR MOVESPRITERIGHT
03439  10FB             
03440  10FB  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
03441  10FD             @RIGHTDONE 
03442  10FD  60                    RTS
03443  10FE             
03444  10FE             
03445  10FE             
03446  10FE             ;===============================================================================
03447  10FE             ; PLAYER WALKS TO THE LEFT
03448  10FE             ;===============================================================================
03449  10FE             
03450  10FE             
03451  10FE             MOVEPLAYERLEFT 
03452  10FE  A9 00                 LDA #0                          ; MAKE SURE SCROLL 'FIX' IS ON
03453  1100  8D 3D 32              STA SCROLL_FIX_SKIP
03454  1103             
03455  1103  BD 72 35              LDA SPRITE_CHAR_POS_X,X           ; CHECK FOR LEFT SIDE MOVEMENT CAP
03456  1106  C9 09                 CMP #PLAYER_LEFT_CAP
03457  1108  B0 1F                 BCS @LEFTMOVE                   ; IF BELOW CAP, WE MOVE THE SPRITE
03458  110A                        ; OTHERWISE WE PREPARE TO SCROLL
03459  110A             
03460  110A             ;===============================================================================
03461  110A             ; IS SPRITE AT THE LEFT EDGE OF THE MAP? (MAP_X_POS)
03462  110A             
03463  110A             ; SPRITE IS AT THE LEFT SCREEN EDGE AND THE SCREEN IS SCROLLING,
03464  110A             ; SO WE CHECK THE
03465  110A             ; MAP_Y_POS AND MAP_Y_DELTA VARIABLES
03466  110A             ;===============================================================================
03467  110A                        ; CHECK FOR EDGE OF MAP FOR SCROLLING
03468  110A  A5 30                 LDA MAP_X_POS                   ; CHECK FOR MAP POS X = 0
03469  110C  D0 0A                 BNE @SCROLLLEFT
03470  110E  A5 32                 LDA MAP_X_DELTA                 ; CHECK FOR MAP DELTA = 0
03471  1110  D0 06                 BNE @SCROLLLEFT
03472  1112                        ; WE'RE AT THE MAPS LEFT EDGE
03473  1112                        ; SO WE REVERT TO SPRITE MOVEMENT ONCE MORE
03474  1112             ;===============================================================================
03475  1112             ; SINCE SPRITE_POS_X,X > 0 WE MOVE THE SPRITE AND NOT THE SCREEN.
03476  1112             ;===============================================================================
03477  1112             
03478  1112             ;        LDA #1
03479  1112             ;        STA SCROLL_FIX_SKIP
03480  1112  BD 62 35              LDA SPRITE_POS_X,X              ; CHECK FOR SPRITE POS > 0 (NOT SPRITE CHAR POS)
03481  1115  10 12                 BPL @LEFTMOVE                   ; SO WE COULD WALK TO THE EDGE OF SCREEN
03482  1117  60                    RTS
03483  1118             
03484  1118             @SCROLLLEFT 
03485  1118                        ;--------------------------------------- SCROLL SCREEN FOR LEFT MOVE
03486  1118  A2 00                 LDX #0
03487  111A  20 BD 08              JSR CHECKMOVELEFT               ; CHECK FOR CHARACTER COLLISION TO THE LEFT
03488  111D  F0 01                 BEQ @SCROLL
03489  111F  60                    RTS                             ; TODO - RETURN COLLISION CODE
03490  1120             
03491  1120             ;===============================================================================
03492  1120             ; SCREEN IS SCROLLING TO THE LEFT
03493  1120             ;===============================================================================
03494  1120             
03495  1120             @SCROLL
03496  1120  A9 02                 LDA #SCROLL_LEFT
03497  1122  85 2C                 STA SCROLL_DIRECTION
03498  1124  85 2D                 STA SCROLL_MOVING
03499  1126  A9 00                 LDA #0                          ; RETURN 'CLEAR CODE'
03500  1128  60                    RTS
03501  1129                        ;---------------------------------------- MOVE THE PLAYER LEFT ONE PIXEL
03502  1129             
03503  1129             ;===============================================================================
03504  1129             ; BEFORE WE CAN MOVE THE SPRITE, WE NEED TO CHECK IF HE COLLIDED INTO A TILE
03505  1129             ;===============================================================================
03506  1129             @LEFTMOVE
03507  1129  A2 00                 LDX #0                          ; CHECK AT THE HEAD OF OUR SPRITE'S BODY
03508  112B  20 BD 08              JSR CHECKMOVELEFT               ; CHECK FOR COLLISIONS WITH CHARACTERS
03509  112E  D0 0C                 BNE @LEFTDONE                   ; TODO RETURN COLLISION CODE
03510  1130             
03511  1130             ;===============================================================================
03512  1130             ; SPRITE IS MOVING TO THE LEFT (SCREEN HAS STOPPED SCROLLING HERE)
03513  1130             ;===============================================================================
03514  1130             @MOVELEFT  
03515  1130             ;        JSR ENEMYCOLLISION
03516  1130  A2 00                 LDX #0
03517  1132  20 B7 33              JSR MOVESPRITELEFT
03518  1135  A2 01                 LDX #1
03519  1137  20 B7 33              JSR MOVESPRITELEFT
03520  113A             
03521  113A  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
03522  113C             @LEFTDONE
03523  113C  60                    RTS
03524  113D             
03525  113D             
03526  113D             
03527  113D             ;===============================================================================
03528  113D             ; PLAYER MOVES DOWN THE SCREEN
03529  113D             ;===============================================================================
03530  113D             
03531  113D             
03532  113D             MOVEPLAYERDOWN 
03533  113D             
03534  113D             ;===============================================================================
03535  113D             ; SPRITE HAS NOT REACHED THE SCREEN BOTTOM.
03536  113D             ; SO WE CAN KEEP MOVING THE SPRITE PLAYER DOWNWARD.
03537  113D             ;===============================================================================
03538  113D  18                    CLC
03539  113E  BD 93 35              LDA SPRITE_CHAR_POS_Y,X
03540  1141  C9 0A                 CMP #PLAYER_DOWN_CAP
03541  1143  90 1E                 BCC @DOWNMOVE
03542  1145             
03543  1145             ;===============================================================================
03544  1145             ; SPRITE IS NOW BELOW THE BOTTOM EDGE SO WE CHECK THE
03545  1145             ; MAP_Y_POS AND MAP_Y_DELTA VARIABLES
03546  1145             ;===============================================================================
03547  1145             
03548  1145  A5 31                 LDA MAP_Y_POS
03549  1147  C9 31                 CMP #49                         ; CHECK FOR BOTTOM OF MAP
03550  1149  D0 07                 BNE @DOWNSCROLL
03551  114B  A5 33                 LDA MAP_Y_DELTA
03552  114D  C9 02                 CMP #02
03553  114F  90 01                 BCC @DOWNSCROLL
03554  1151  60                    RTS
03555  1152             
03556  1152             ;===============================================================================
03557  1152             ; CHECK IF SPRITE HIT ANYTHING WHILE MOVING DOWN
03558  1152             ;===============================================================================
03559  1152             @DOWNSCROLL 
03560  1152  A2 01                 LDX #1                          ; CHECK SPRITE #0
03561  1154  20 77 09              JSR CHECKMOVEDOWN               ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
03562  1157  F0 01                 BEQ @SCROLL                     ; WE ARE NOT BLOCKED = 0
03563  1159  60                    RTS                             ; RETURN WITH CONTENTS OF COLLISON ROUTINE
03564  115A             
03565  115A             ;===============================================================================
03566  115A             ; SPRITE DIDN'T HIT ANYTHING SO WE CAN SCROLL THE SCREEN DOWNWARD
03567  115A             ;===============================================================================
03568  115A             
03569  115A             @SCROLL
03570  115A             ;        LDA SCROLL_COUNT_Y
03571  115A             ;        STA 53286
03572  115A             
03573  115A  A9 04                 LDA #SCROLL_DOWN
03574  115C  85 2C                 STA SCROLL_DIRECTION
03575  115E  85 2D                 STA SCROLL_MOVING
03576  1160  A9 00                 LDA #0                          ; RETURN A CLEAR COLLISION CODE
03577  1162  60                    RTS
03578  1163             
03579  1163             ; SETTING LDX #1 WILL NOT ALLOW THE SINGLE ONE BUTTON PRESSED JUMP
03580  1163             ; THIS IS BECAUSE THE COLLISION DETECTION LOOKS AT THE SPRITE'S HEAD
03581  1163             ; AND NOT HIS FEET. SO THE SPRITE'S HEAD WON'T DETECT ANYTHING SO HE
03582  1163             ; WON'T JUMP.
03583  1163             
03584  1163             ;===============================================================================
03585  1163             ; SPRITE IS NOT AT THE SCREEN BOTTOM EDGE YET.
03586  1163             ; SO WE CHECK FOR ANY COLLISION WHILE MOVING DOWN. IF NO COLLISION EXISTS,
03587  1163             ; WE CAN THEN MOVE THE SPRITE DOWNWARD.
03588  1163             ;===============================================================================
03589  1163             @DOWNMOVE
03590  1163  A2 00                 LDX #0                          ; CHECK SPRITE'S LEG AREA
03591  1165  20 77 09              JSR CHECKMOVEDOWN               ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
03592  1168  D0 0C                 BNE @DOWNDONE                   ; RETUN WITH CONTENTS OF COLLISION CODE
03593  116A             
03594  116A  A2 00                 LDX #0
03595  116C  20 30 34              JSR MOVESPRITEDOWN              ; = 0 SO WE CAN MOVE THE SPRITE DOWN
03596  116F  A2 01                 LDX #1
03597  1171  20 30 34              JSR MOVESPRITEDOWN
03598  1174  A9 00                 LDA #0                          ; RETURN WITH CLEAR CODE
03599  1176             @DOWNDONE
03600  1176  60                    RTS
03601  1177             
03602  1177             
03603  1177             
03604  1177             ;===============================================================================
03605  1177             ; PLAYER MOVES UP THE SCREEN
03606  1177             ;===============================================================================
03607  1177             
03608  1177             
03609  1177             MOVEPLAYERUP 
03610  1177  38                    SEC
03611  1178  BD 93 35              LDA SPRITE_CHAR_POS_Y,X
03612  117B  C9 04                 CMP #PLAYER_UP_CAP
03613  117D  B0 1B                 BCS @UPMOVE
03614  117F             
03615  117F  A5 31                 LDA MAP_Y_POS
03616  1181  D0 08                 BNE @UPSCROLL
03617  1183  18                    CLC
03618  1184  A5 33                 LDA MAP_Y_DELTA
03619  1186  C9 01                 CMP #1
03620  1188  B0 01                 BCS @UPSCROLL
03621  118A  60                    RTS
03622  118B             
03623  118B             @UPSCROLL
03624  118B  A2 00                 LDX #0
03625  118D  20 C5 09              JSR CHECKMOVEUP
03626  1190  F0 01                 BEQ @SCROLL
03627  1192  60                    RTS
03628  1193             
03629  1193             @SCROLL
03630  1193  A9 03                 LDA #SCROLL_UP
03631  1195  85 2C                 STA SCROLL_DIRECTION
03632  1197  85 2D                 STA SCROLL_MOVING
03633  1199  60                    RTS
03634  119A             
03635  119A             @UPMOVE
03636  119A  A2 00                 LDX #0                                  ; CHECK SPRITE 0 (HEAD/BODY)
03637  119C  20 C5 09              JSR CHECKMOVEUP
03638  119F  D0 0B                 BNE @UPDONE
03639  11A1                        
03640  11A1  20 15 34              JSR MOVESPRITEUP                        ; MOVE SPRITE 0(HEAD - TOP)
03641  11A4  A2 01                 LDX #1
03642  11A6  20 15 34              JSR MOVESPRITEUP                        ; MOVE SPRITE 1 (BODY - BOTTOM)
03643  11A9  A9 00                 LDA #0
03644  11AB  60                    RTS
03645  11AC             @UPDONE
03646  11AC  A9 01                 LDA #1
03647  11AE  60                    RTS
03648  11AF             
03649  11AF             
03650  11AF             
03651  11AF             ;===============================================================================
03652  11AF             ; PLAYER STATES
03653  11AF             ;===============================================================================
03654  11AF             ; PLAYER STATES ARE INCREMENTED BY 2 AS THEY ARE INDEXES TO LOOK UP THE ADDRESS
03655  11AF             ; OF THE STATE
03656  11AF             ; CODE ON THE PLAYER_STATE_JUMPTABLE.  AN ADDRESS IS 2 BYTES (1 WORD) EGRO THE
03657  11AF             ; INDEX MUST INCREASE
03658  11AF             ; BY 2 BYTES.
03659  11AF             ;-------------------------------------------------------------------------------
03660  11AF             PLAYER_STATE_IDLE = 0     ; STANDING STILL - AWAITING INPUT
03661  11AF             PLAYER_STATE_WALK_RIGHT = 2     ; WALKING RIGHT
03662  11AF             PLAYER_STATE_WALK_LEFT = 4     ; WALKING LEFT
03663  11AF             PLAYER_STATE_PUNCH_RIGHT = 6    ; PUNCH RIGHT
03664  11AF             PLAYER_STATE_PUNCH_LEFT = 8    ; PUNCH LEFT
03665  11AF             PLAYER_STATE_SHOOT_RIGHT = 10    ; PUNCH RIGHT
03666  11AF             PLAYER_STATE_SHOOT_LEFT = 12   ; PUNCH LEFT
03667  11AF             PLAYER_STATE_KICK_RIGHT = 14    ; KICK RIGHT
03668  11AF             PLAYER_STATE_KICK_LEFT = 16    ; KICK LEFT
03669  11AF             PLAYER_STATE_POLE = 18    ; CLIMBING POLE
03670  11AF             PLAYER_STATE_SWIM_R = 20    ; SWIM RIGHT
03671  11AF             PLAYER_STATE_SWIM_L = 22    ; SWIM LEFT
03672  11AF             PLAYER_STATE_FLOATING = 24    ; FLOATING
03673  11AF             PLAYER_STATE_JUMP = 26    ; JUMPING
03674  11AF             
03675  11AF             PLAYER_SUBSTATE_ENTER = 0     ; WE HAVE JUST ENTERED THIS STATE
03676  11AF             PLAYER_SUBSTATE_RUNNING = 1     ; THIS STATE IS RUNNING NORMALLY
03677  11AF             
03678  11AF             ;===============================================================================
03679  11AF             ; PLAYER STATE JUMPTABLE
03680  11AF             ;===============================================================================
03681  11AF             PLAYER_STATE_JUMPTABLE 
03682  11AF  2A 12                 WORD PLAYERSTATEIDLE
03683  11B1  A8 13                 WORD PLAYERSTATEWALKRIGHT
03684  11B3  27 14                 WORD PLAYERSTATEWALKLEFT
03685  11B5  82 14                 WORD PLAYERSTATEPUNCHRIGHT
03686  11B7  C5 14                 WORD PLAYERSTATEPUNCHLEFT
03687  11B9  09 15                 WORD PLAYERSTATESHOOTRIGHT
03688  11BB  4C 15                 WORD PLAYERSTATESHOOTLEFT
03689  11BD  86 15                 WORD PLAYERSTATEKICKRIGHT
03690  11BF  A9 15                 WORD PLAYERSTATEKICKLEFT
03691  11C1  CC 15                 WORD PLAYERSTATEPOLE
03692  11C3  A5 16                 WORD PLAYERSTATESWIMR
03693  11C5  E5 16                 WORD PLAYERSTATESWIML
03694  11C7  25 17                 WORD PLAYERSTATEFLOATING
03695  11C9  B8 17                 WORD PLAYERSTATEJUMP
03696  11CB             ;===============================================================================
03697  11CB             ; CHANGE PLAYER STATE
03698  11CB             ;===============================================================================
03699  11CB             ; CHANGE A PLAYERS STATE
03700  11CB             ;
03701  11CB             ; A = STATE TO CHANGE TO
03702  11CB             ;
03703  11CB             ; MODIFIES A,X,ZEROPAGE_POINTER_1
03704  11CB             
03705  11CB             ;C64 BRAIN NOTES: PLAYER STATES RECORDED (ANIMATION, IDLE, RUNNING, ETC.).
03706  11CB             ; DATA IS SAVED TO PLAYER_SUBSTATE
03707  11CB             ;-------------------------------------------------------------------------------
03708  11CB             
03709  11CB             CHANGEPLAYERSTATE 
03710  11CB  AA                    TAX                                             ; TRANSFER A TO X
03711  11CC  8E 4A 18              STX PLAYER_STATE                                ; STORE THE NEW PLAYER STATE
03712  11CF  A9 00                 LDA #PLAYER_SUBSTATE_ENTER                      ; SET SUBSTATE TO ENTER
03713  11D1  8D 4B 18              STA PLAYER_SUBSTATE
03714  11D4             
03715  11D4             ;        LDA #1
03716  11D4             ;        STA SPRITE_ANIM_PLAY
03717  11D4             
03718  11D4  BD AF 11              LDA PLAYER_STATE_JUMPTABLE,X                    ; LOOKUP STATE TO CHANGE TO
03719  11D7  85 17                 STA ZEROPAGE_POINTER_1                          ; AND STORE IT IN ZEROPAGE_POINTER_1
03720  11D9             
03721  11D9  BD B0 11              LDA PLAYER_STATE_JUMPTABLE + 1,X
03722  11DC  85 18                 STA ZEROPAGE_POINTER_1 + 1
03723  11DE             
03724  11DE  6C 17 00              JMP (ZEROPAGE_POINTER_1)                        ; JUMP TO STATE (TO SETUP)
03725  11E1                        ; NOTE: THIS IS NOT A JSR.
03726  11E1                        ; THE STATE WILL ACT AS AN EXTENSION OF
03727  11E1                        ; THIS ROUTINE THEN RETURN.
03728  11E1             
03729  11E1             ;===============================================================================
03730  11E1             ; UPDATE PLAYER STATE
03731  11E1             ;-------------------------------------------------------------------------------
03732  11E1             ; UPDATE THE PLAYER BASED ON THEIR STATE
03733  11E1             ;-------------------------------------------------------------------------------
03734  11E1             
03735  11E1             UPDATEPLAYERSTATE 
03736  11E1  AE 4A 18              LDX PLAYER_STATE                        ; LOAD PLAYER STATE
03737  11E4  BD AF 11              LDA PLAYER_STATE_JUMPTABLE,X            ; FETCH THE STATE ADDRESS FROM THE JUMP TABLE
03738  11E7  85 17                 STA ZEROPAGE_POINTER_1                  ; STORE IT IN ZEROPAGE_POINTER_1
03739  11E9  BD B0 11              LDA PLAYER_STATE_JUMPTABLE +1,X
03740  11EC  85 18                 STA ZEROPAGE_POINTER_1 + 1
03741  11EE  6C 17 00              JMP (ZEROPAGE_POINTER_1)                ; JUMP TO THE RIGHT STATE (NOTE - NOT A JSR)
03742  11F1  60                    RTS
03743  11F2             
03744  11F2             
03745  11F2             ;===============================================================================
03746  11F2             ; APPLY GRAVITY
03747  11F2             ;===============================================================================
03748  11F2             ; APPLY GRAVITY TO THE PLAYER - THIS SYSTEM WILL BE TOTALLY REWRITTEN AT SOME
03749  11F2             ; POINT TO APPLY A PROPER GRAVITY TO A PLAYER OR ANY OTHER SPRITE..
03750  11F2             ; BUT FOR NOW IT'S JUST SUPER BASIC
03751  11F2             ;
03752  11F2             ; A RETURNS 0 IF WE MOVED DOWN AND A COLLISION CODE IF WE DIDN'T
03753  11F2             ;-------------------------------------------------------------------------------
03754  11F2             
03755  11F2             
03756  11F2             ;===============================================================================
03757  11F2             ; CHECK IF FLOOR IS FOUND WHILE FALLING
03758  11F2             ;===============================================================================
03759  11F2             APPLYGRAVITY 
03760  11F2             ;===============================================================================
03761  11F2             ; CHECK IF FLOOR WAS FOUND WHILE FALLING
03762  11F2             ;===============================================================================
03763  11F2             @SPRITEFALLCHECK 
03764  11F2  A2 01                 LDX #1                                  ; CHECK AT SPRITE'S FEET
03765  11F4  20 15 0A              JSR CHECKBLOCKUNDER
03766  11F7  AD C2 0A              LDA COLLIDER_ATTR
03767  11FA  C9 10                 CMP #COLL_FLOOR                         ; DOES FLOOR EXIST UNDER US?
03768  11FC  F0 0B                 BEQ @PLAYERNOTFALLING
03769  11FE             
03770  11FE             ;===============================================================================
03771  11FE             ; NO FLOOR EXISTS: CAN SCROLL FREELY
03772  11FE             ;===============================================================================
03773  11FE             @FALLING
03774  11FE  A2 00                 LDX #0
03775  1200  20 3D 11              JSR MOVEPLAYERDOWN
03776  1203  A2 01                 LDX #1
03777  1205  20 3D 11              JSR MOVEPLAYERDOWN
03778  1208  60                    RTS
03779  1209             
03780  1209             ;===============================================================================
03781  1209             ; FLOOR WAS FOUND: STOP SCREEN FROM MOVING
03782  1209             ;===============================================================================
03783  1209             @PLAYERNOTFALLING; 
03784  1209             
03785  1209  20 C7 1A              JSR RESETENEMYTOPLAYERVERTICAL
03786  120C  A9 00                 LDA #0
03787  120E  8D 4C 18              STA PLAYER_JUMP_POS
03788  1211  60                    RTS
03789  1212             
03790  1212             
03791  1212             
03792  1212             STARTHOTELMAP 
03793  1212  A9 00                 LDA #0
03794  1214  8D 2E 10              STA MAPTWOLOADED
03795  1217             
03796  1217                        ;JSR LOADCHSETFROMDISK
03797  1217             
03798  1217  20 55 0C              JSR LOADHOTELMAP
03799  121A  20 8B 0C              JSR LOADNEWTILES
03800  121D             
03801  121D  A9 05                 LDA #5
03802  121F  8D 20 D0              STA 53280
03803  1222             
03804  1222  A2 00                 LDX #0                        ; (129,26=DEFAULT), 61
03805  1224  A0 00                 LDY #0                          ; , 27
03806  1226  20 CB 21              JSR DRAWMAP
03807  1229  60                    RTS
03808  122A             
03809  122A             ;===============================================================================
03810  122A             ; PLAYER STATE IDLE
03811  122A             ;===============================================================================
03812  122A             
03813  122A             PLAYERSTATEIDLE 
03814  122A             ;===============================================================================
03815  122A             ; SET IDLE SPRITE
03816  122A             ;===============================================================================
03817  122A  A9 01                 LDA #1
03818  122C  8D BB 35              STA SPRITE_ANIM_PLAY                    ; PAUSE OUR ANIMATION
03819  122F             
03820  122F  AD 4B 18              LDA PLAYER_SUBSTATE                     ; FIRST RUN PLAYER_SUBSTATE=0
03821  1232  D0 13                 BNE @RUNNING                            ; SET IN CHANGEPLAYERSTATE
03822  1234             
03823  1234             ; THIS IS EXECUTED EVERY TIME SINCE PLAYER_SUBSTATE STARTS AT ZERO.
03824  1234  A2 00                 LDX #0                                  ; LOAD SPRITE NUMBER (0) IN X
03825  1236  A9 12                 LDA #<ANIM_PLAYER_IDLE                  ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
03826  1238  85 17                 STA ZEROPAGE_POINTER_1                  ; BYTE %00000111
03827  123A  A9 36                 LDA #>ANIM_PLAYER_IDLE
03828  123C  85 18                 STA ZEROPAGE_POINTER_1 + 1
03829  123E             
03830  123E  20 F7 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
03831  1241  A5 01                 LDA PLAYER_SUBSTATE_RUNNING             ; PLAYER_SUBSTATE_RUNNING=1
03832  1243  8D 4B 18              STA PLAYER_SUBSTATE                     ; NOW PLAYER_STATE=1, SO WE CAN EXIT
03833  1246  60                    RTS
03834  1247                        
03835  1247             ;===============================================================================
03836  1247             ; GET JOYSTICK TEST
03837  1247             ;===============================================================================
03838  1247             @RUNNING
03839  1247  20 A8 10              JSR JOYSTICKREADY                       ; LDA SCROLL_MOVING, LDA SCROLL_DIRECTION
03840  124A             ;        JSR DISPLAYNEWSPRITE
03841  124A  20 8A 13              JSR DETECTSPRITE
03842  124D                        
03843  124D             ;===============================================================================
03844  124D             ; CHECK IF SPRITE IS ON GROUND (COLL_FLOOR)
03845  124D             ;===============================================================================
03846  124D             ; NOTE: LDX #0 - CHECKS THE SPRITE HEAD AREA (SPRITE 0)
03847  124D             ;       LDX #1 = CHECKS THE SPRITE LEGS AREA (SPRITE 1)
03848  124D             
03849  124D             ; SCREEN HAS STOPPED SCROLLING
03850  124D             
03851  124D             
03852  124D             ; THE @CHKWATER SKIP IS NECESSARY TO PREVENT THE SPRITE FROM
03853  124D             ; JUMPING WHILE IN THE AIR.
03854  124D             
03855  124D             ;===============================================================================
03856  124D             ; SPRITE IS CLIMBING A POLE OR STANDING ABOVE IT
03857  124D             ;===============================================================================
03858  124D             @GOLADDER
03859  124D  A2 01                 LDX #1
03860  124F  20 15 0A              JSR CHECKBLOCKUNDER
03861  1252  C9 30                 CMP #COLL_POLE                          ; CHECK FOR POLE UNDER PLAYER
03862  1254  D0 05                 BNE @CHECKFLOOR
03863  1256             
03864  1256             ; SPRITE IS CLIMBING A LADDER/POLE
03865  1256  A9 12                 LDA #PLAYER_STATE_POLE
03866  1258  4C CB 11              JMP CHANGEPLAYERSTATE
03867  125B             
03868  125B             @CHECKFLOOR 
03869  125B  A2 01                 LDX #1                                  ; CHECK AT SPRITE'S FEET
03870  125D  20 15 0A              JSR CHECKBLOCKUNDER
03871  1260  C9 10                 CMP #COLL_FLOOR
03872  1262  D0 3B                 BNE @CHECKWATER                         ; SPRITE IS NOT ON THE FLOOR
03873  1264             
03874  1264             ;===============================================================================
03875  1264             ; CHECK IF FLOOR IS IS BELOW PLAYER SPRITE
03876  1264             ;-------------------------------------------------------------------------------
03877  1264             ; WHEN THIS IS TURNED ON, THE PLAYER CAN'T JUMP STRAIGHT
03878  1264             ; UP WHEN THE JOYSTICK IS NOT MOVING LEFT/RIGHT.
03879  1264             ;===============================================================================
03880  1264             ; IF CEILING IS ABOVE PLAYER, CAN'T JUMP UP
03881  1264  A2 01                 LDX #1
03882  1266  20 15 0A              JSR CHECKBLOCKUNDER
03883  1269  C9 10                 CMP #COLL_FLOOR                       ; CHECK FOR POLE UNDER PLAYER
03884  126B  D0 18                 BNE @RESETVERTPOS
03885  126D             
03886  126D  A9 00                 LDA #0
03887  126F  8D 4C 18              STA PLAYER_JUMP_POS
03888  1272             
03889  1272             ;        LDX #0
03890  1272             ;        JSR CHECKMOVEUP                     ; CHECK TILE UNDER TOP SPRITE (SPRITE)
03891  1272             ;        BEQ @RESETVERTPOS
03892  1272  60                    RTS
03893  1273             
03894  1273             @DOORENTRANCE 
03895  1273  A9 00                 LDA #0
03896  1275  8D 2E 10              STA MAPTWOLOADED
03897  1278             
03898  1278  20 12 12              JSR STARTHOTELMAP
03899  127B  60                    RTS
03900  127C             
03901  127C             @FOUNDCOUCH 
03902  127C  A9 01                 LDA #1
03903  127E  8D 2E 10              STA MAPTWOLOADED
03904  1281  20 93 13              JSR STARTALLEYMAP
03905  1284  60                    RTS
03906  1285             
03907  1285             ; SPRITE IS ON THE FLOOR, RESET ENEMY TO SAME Y POSITION AS PLAYER
03908  1285             ; BUT OFF THE SCREEN FOR NOW.
03909  1285             
03910  1285             @RESETVERTPOS 
03911  1285  20 C7 1A              JSR RESETENEMYTOPLAYERVERTICAL
03912  1288             
03913  1288             ;===============================================================================
03914  1288             ; SPRITE HAS NOT YET LANDED ON THE FLOOR: STILL FALLING
03915  1288             ;===============================================================================
03916  1288             @GOFLOOR
03917  1288             ;        LDX #1                                  ; CHECK AT SPRITE'S FEET AREA
03918  1288             ;        JSR CHECKBLOCKUNDER
03919  1288             ;        CMP #COLL_FLOOR                         ; DOES FLOOR EXIST UNDER US?
03920  1288             ;        BNE @STILLFALLING                       ; NO, PLAYER KEEPS FALLING
03921  1288             
03922  1288  A9 00                 LDA #0
03923  128A  8D 4C 18              STA PLAYER_JUMP_POS
03924  128D             
03925  128D  A2 00                 LDX #0
03926  128F  20 15 0A              JSR CHECKBLOCKUNDER
03927  1292  C9 80                 CMP #COLL_COUCH
03928  1294  F0 E6                 BEQ @FOUNDCOUCH
03929  1296             
03930  1296  A2 00                 LDX #0
03931  1298  20 15 0A              JSR CHECKBLOCKUNDER
03932  129B  C9 50                 CMP #COLL_DOOR
03933  129D  F0 2E                 BEQ @ENTERHOTELDOOR
03934  129F             
03935  129F             ;===============================================================================
03936  129F             ; CHECK FOR SPRITE FLOATING IN THE WATER
03937  129F             ;===============================================================================
03938  129F             @CHECKWATER 
03939  129F  A2 01                 LDX #1                          ; CHECK AT THE SPRITE'S FEET
03940  12A1  20 15 0A              JSR CHECKBLOCKUNDER             ; FIRST CHECK WE ARE ON A POLE
03941  12A4  C9 40                 CMP #COLL_WATER
03942  12A6  D0 2E                 BNE @CHECKDIAGONALS
03943  12A8             
03944  12A8             ; PLAYER IS ON THE WATER, RESET ENEMY TO SAME Y POSITION AS PLAYER
03945  12A8             ; BUT KEEP ENEMY OFF THE SCREEN DURING THIS TIME.
03946  12A8             
03947  12A8  A9 00                 LDA #0
03948  12AA  A2 02                 LDX #2
03949  12AC  9D 62 35              STA SPRITE_POS_X,X
03950  12AF  A2 03                 LDX #3
03951  12B1  9D 62 35              STA SPRITE_POS_X,X
03952  12B4             
03953  12B4  A2 00                 LDX #0
03954  12B6  BD 83 35              LDA SPRITE_POS_Y,X              ; FIND PLAYER SPRITE Y (HEAD) POS
03955  12B9  A2 02                 LDX #2
03956  12BB  9D 83 35              STA SPRITE_POS_Y,X              ; SET ENEMY HEAD(Y) TO PLAYER Y
03957  12BE  A2 01                 LDX #1
03958  12C0  BD 83 35              LDA SPRITE_POS_Y,X              ; FIND PLAYER SPRITE Y (BODY) POS
03959  12C3  A2 03                 LDX #3
03960  12C5  9D 83 35              STA SPRITE_POS_Y,X              ; SET ENEMY BODY(Y) TO PLAYER Y
03961  12C8             
03962  12C8             ;SPRITE IS FLOATING IN THE RIVER
03963  12C8  A9 18                 LDA #PLAYER_STATE_FLOATING
03964  12CA  4C CB 11              JMP CHANGEPLAYERSTATE
03965  12CD             
03966  12CD             @ENTERHOTELDOOR 
03967  12CD  A9 00                 LDA #0
03968  12CF  8D 2E 10              STA MAPTWOLOADED
03969  12D2  20 12 12              JSR STARTHOTELMAP
03970  12D5  60                    RTS
03971  12D6             
03972  12D6             ;===============================================================================
03973  12D6             ; CHECK IF SPRITE IS PUNCHING RIGHT
03974  12D6             ;===============================================================================
03975  12D6             ;===============================================================================
03976  12D6             ; FLOOR WAS FOUND! COLL_FLOOR = 10
03977  12D6             ; SPRITE IS STANDING ON A FLOOR HERE SO WE CAN TEST THE FIRE BUTTON
03978  12D6             ;-------------------------------------------------------------------------------
03979  12D6             ; BUTTON HAS BEEN PRESSED SO SPRITE CAN JUMP
03980  12D6             ;===============================================================================
03981  12D6             @CHECKDIAGONALS 
03982  12D6             
03983  12D6             ; PREVENTS SPRITE FROM JUMPING UP WHEN A FLOOR IS ABOVE HIM
03984  12D6  A2 00                 LDX #0
03985  12D8  20 15 0A              JSR CHECKBLOCKUNDER
03986  12DB  C9 10                 CMP #COLL_FLOOR                          ; CHECK FOR POLE UNDER PLAYER
03987  12DD  D0 17                 BNE @PLAYERISFALLING
03988  12DF             
03989  12DF             ;===============================================================================
03990  12DF             ; CHECK FOR XBOX CONTROLLER BUTTON PRESS
03991  12DF             ;===============================================================================
03992  12DF  A9 10                 LDA #%00010000                          ; MASK FOR BIT 0
03993  12E1  2C 00 DC              BIT JOY_2                               ; JUMPING (BUTTON PRESSED)
03994  12E4  F0 13                 BEQ @BUTPRESS                           ; CONTINUE OTHER CHECK
03995  12E6             
03996  12E6  AD 48 18              LDA CHECKUPRIGHT
03997  12E9  2C 00 DC              BIT JOY_2                               ; PUNCH RIGHT
03998  12EC  F0 2D                 BEQ @PRESSUPRIGHT
03999  12EE             
04000  12EE             ;===============================================================================
04001  12EE             ; CHECK IF SPRITE IS PUNCHING LEFT
04002  12EE             ;===============================================================================
04003  12EE  AD 49 18              LDA CHECKUPLEFT                         ; MASK FOR BIT 0
04004  12F1  2C 00 DC              BIT JOY_2                               ; JUMPING (BUTTON PRESSED)
04005  12F4  F0 2A                 BEQ @PRESSUPLEFT                        ; PUNCH LEFT
04006  12F6             
04007  12F6             ;===============================================================================
04008  12F6             ; CHECK IF SPRITE IS A LITTLE BELOW THE FLOOR
04009  12F6             ; NOTE: MAKES SPRITE IDLE UP/DOWN WHEN ON SOLID SURFACE
04010  12F6             ;===============================================================================
04011  12F6             ;        LDA SPRITE_CHAR_POS_Y
04012  12F6             ;        CMP #PLAYER_DOWN_CAP - 1                ; = 13: - 1 = 12
04013  12F6             ;        BCC @MOVESPRITEUP
04014  12F6             @PLAYERISFALLING 
04015  12F6  4C 01 13              JMP @STILLFALLING
04016  12F9             ;===============================================================================
04017  12F9             ; CHECK FOR BUTTON PRESS AND PUSHING UP
04018  12F9             ;===============================================================================
04019  12F9             @BUTPRESS
04020  12F9             ;        LDX #0
04021  12F9             ;        JSR CHECKMOVEUP                     ; CHECK TILE UNDER TOP SPRITE (SPRITE)
04022  12F9             ;        BNE @END
04023  12F9             
04024  12F9             
04025  12F9             @PLAYERCANJUMP 
04026  12F9  A9 1A                 LDA #PLAYER_STATE_JUMP                ; GO TO JUMP STATE
04027  12FB  4C CB 11              JMP CHANGEPLAYERSTATE
04028  12FE             
04029  12FE             ;===============================================================================
04030  12FE             ; @HORIZCHECK: SKIPS OVER GRAVITY CHECK SINCE SPRITE IS ON THE FLOOR
04031  12FE             ;===============================================================================
04032  12FE  4C 04 13              JMP @HORIZCHECK                       ; PLAYER HAS LANDED ON TILE (CAN'T FALL)
04033  1301             
04034  1301             ;===============================================================================
04035  1301             ; SPRITE HAS NOT LANDED ON A FLOOR, SO STILL FALLING
04036  1301             ;===============================================================================
04037  1301             @STILLFALLING 
04038  1301  20 F2 11              JSR APPLYGRAVITY
04039  1304             
04040  1304             ;===============================================================================
04041  1304             ; CHECK THE VERTICAL MOVEMENT
04042  1304             ;===============================================================================
04043  1304             ; IS SPRITE MOVING TO THE LEFT OR RIGHT WHILE IN THE AIR?
04044  1304             ;===============================================================================
04045  1304             @HORIZCHECK 
04046  1304  AD 61 3C              LDA JOY_X                               ; HORIZONTAL MOVEMENT
04047  1307  F0 0C                 BEQ @VERTCHECK                          ; CHECK ZERO - HO HORIZONTAL INPUT
04048  1309  30 05                 BMI @LEFT                               ; NEGATIVE = LEFT
04049  130B                        
04050  130B             ;===============================================================================
04051  130B             ; SPRITE HAS MOVED TO THE RIGHT
04052  130B             ;===============================================================================
04053  130B             @RIGHT
04054  130B  A9 02                 LDA #PLAYER_STATE_WALK_RIGHT            ; GO TO WALK STATE RIGHT
04055  130D  4C CB 11              JMP CHANGEPLAYERSTATE
04056  1310             
04057  1310             ;===============================================================================
04058  1310             ; SPRITE HAS MOVED TO THE LEFT
04059  1310             ;===============================================================================
04060  1310             @LEFT
04061  1310  A9 04                 LDA #PLAYER_STATE_WALK_LEFT             ; GO TO WALK STATE LEFT
04062  1312  4C CB 11              JMP CHANGEPLAYERSTATE
04063  1315             
04064  1315             @VERTCHECK 
04065  1315             ;===============================================================================
04066  1315             ; CHECK IF JOYSTICK IS MOVING UP OR DOWN
04067  1315             ;===============================================================================
04068  1315  AD 62 3C              LDA JOY_Y                               ; CHECK VERTICAL JOYSTICK INPUT
04069  1318  F0 0B                 BEQ @END                                ; ZERO MEANS NO INPUT
04070  131A  60                    RTS
04071  131B             
04072  131B             ;===============================================================================
04073  131B             ; SUBROUTINE FOR: SPRITE PUNCHING RIGHT
04074  131B             ;===============================================================================
04075  131B             @PRESSUPRIGHT 
04076  131B             ;        LDA #PLAYER_STATE_PUNCH_RIGHT            ; GO TO JUMP STATE
04077  131B             ;        JMP CHANGEPLAYERSTATE
04078  131B             
04079  131B             ; WHEN A WEAPON IS FOUND, THE SUBROUTINE BELOW CAN BE USED (LATER)
04080  131B             
04081  131B  A9 0A                 LDA #PLAYER_STATE_SHOOT_RIGHT            ; GO TO JUMP STATE
04082  131D  4C CB 11              JMP CHANGEPLAYERSTATE
04083  1320             ;===============================================================================
04084  1320             ; SUBROUTINE FOR: SPRITE PUNCHING LEFT
04085  1320             ;===============================================================================
04086  1320             @PRESSUPLEFT 
04087  1320             ;        LDA #PLAYER_STATE_PUNCH_LEFT            ; GO TO JUMP STATE
04088  1320             ;        JMP CHANGEPLAYERSTATE
04089  1320             
04090  1320             ; WHEN A WEAPON IS FOUND, THE SUBROUTINE BELOW CAN BE USED (LATER)
04091  1320             
04092  1320  A9 0C                 LDA #PLAYER_STATE_SHOOT_LEFT            ; GO TO JUMP STATE
04093  1322  4C CB 11              JMP CHANGEPLAYERSTATE
04094  1325             
04095  1325             @END
04096  1325  A9 00                 LDA #PLAYER_STATE_IDLE            ; GO TO WALK STATE RIGHT
04097  1327  4C CB 11              JMP CHANGEPLAYERSTATE
04098  132A             
04099  132A             IDLE_VAR
04100  132A  00                    BYTE $00
04101  132B             
04102  132B             
04103  132B             ;===============================================================================
04104  132B             ; PLAYER TO ENEMY COLLIS
04105  132B             ;-------------------------------------------------------------------------------
04106  132B             ; CHECK IF PLAYER RUN INTO AN ENEMY
04107  132B             ;===============================================================================
04108  132B             PLAYERTOENEMYCOLLIS 
04109  132B  A9 00                 LDA #0
04110  132D  8D D8 35              STA ENEMY_HIT
04111  1330  A2 03                 LDX #3
04112  1332  A0 01                 LDY #1
04113  1334  BD 62 35              LDA SPRITE_POS_X,X
04114  1337  D9 62 35              CMP SPRITE_POS_X,Y
04115  133A  B0 0F                 BCS @NOENEMYCOLLIS
04116  133C  18                    CLC
04117  133D  6D D7 35              ADC ENEMY_DISTANCE
04118  1340  D9 62 35              CMP SPRITE_POS_X,Y
04119  1343  D0 06                 BNE @NOENEMYCOLLIS
04120  1345             
04121  1345  A9 01                 LDA #1
04122  1347  8D D8 35              STA ENEMY_HIT
04123  134A  60                    RTS
04124  134B             @NOENEMYCOLLIS 
04125  134B  A9 00                 LDA #0
04126  134D  8D D8 35              STA ENEMY_HIT
04127  1350  60                    RTS
04128  1351             
04129  1351             DISPLAYNEWSPRITE 
04130  1351             ; SPRITE 4 DISPLAY
04131  1351  A2 04                 LDX #4                                  ; POINT TO SPRITE 4
04132  1353  A9 7D                 LDA #<ANIM_ENEMY_BULLET                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04133  1355  85 17                 STA ZEROPAGE_POINTER_1
04134  1357  A9 36                 LDA #>ANIM_ENEMY_BULLET
04135  1359  85 18                 STA ZEROPAGE_POINTER_1 + 1
04136  135B  20 F7 34              JSR INITSPRITEANIM
04137  135E             
04138  135E             @RUNNING2
04139  135E  A9 6E                 LDA #110
04140  1360  8D 08 D0              STA 53256                               ; POSITION SPRITE 4 (X)
04141  1363  A9 78                 LDA #120
04142  1365  8D 09 D0              STA 53257                               ; POSITION SPRITE 4 (Y)
04143  1368  A9 09                 LDA #COLOR_BROWN
04144  136A  8D 2B D0              STA 53291
04145  136D             
04146  136D             ; SPRITE 5 DISPLAY
04147  136D  A2 05                 LDX #5                                  ; POINT TO SPRITE 5
04148  136F  A9 7D                 LDA #<ANIM_ENEMY_BULLET                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04149  1371  85 17                 STA ZEROPAGE_POINTER_1
04150  1373  A9 36                 LDA #>ANIM_ENEMY_BULLET
04151  1375  85 18                 STA ZEROPAGE_POINTER_1 + 1
04152  1377  20 F7 34              JSR INITSPRITEANIM
04153  137A             
04154  137A  A9 6E                 LDA #110
04155  137C  8D 0A D0              STA 53258
04156  137F  A9 87                 LDA #135
04157  1381  8D 0B D0              STA 53259
04158  1384  A9 06                 LDA #COLOR_BLUE
04159  1386  8D 2C D0              STA 53292
04160  1389  60                    RTS
04161  138A             
04162  138A             ; SPRITE 6 DISPLAY
04163  138A             ;        LDX #6                                  ; POINT TO SPRITE 6
04164  138A             ;        LDA #<ANIM_NPC3                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04165  138A             ;        STA ZEROPAGE_POINTER_1
04166  138A             ;        LDA #>ANIM_NPC3
04167  138A             ;        STA ZEROPAGE_POINTER_1 + 1
04168  138A             ;        JSR INITSPRITEANIM
04169  138A             
04170  138A             ;        LDA #100
04171  138A             ;        STA 53260
04172  138A             ;        LDA #120
04173  138A             ;        STA 53261
04174  138A             ;        LDA #COLOR_VIOLET
04175  138A             ;        STA 53293
04176  138A             ;        RTS
04177  138A             
04178  138A             ; SPRITE 6 DISPLAY
04179  138A             ;        LDX #7                                  ; POINT TO SPRITE 7
04180  138A             ;        LDA #<ANIM_NPC4                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04181  138A             ;        STA ZEROPAGE_POINTER_1
04182  138A             ;        LDA #>ANIM_NPC4
04183  138A             ;        STA ZEROPAGE_POINTER_1 + 1
04184  138A             ;        JSR INITSPRITEANIM
04185  138A             
04186  138A             ;        LDA #100
04187  138A             ;        STA 53262
04188  138A             ;        LDA #135
04189  138A             ;        STA 53263
04190  138A             ;        LDA #COLOR_BROWN
04191  138A             ;        STA 53294
04192  138A             ;        RTS
04193  138A             
04194  138A             DETECTSPRITE 
04195  138A  AD 1E D0              LDA $D01E ;READ HARDWARE SPRITE/SPRITE COLLISION
04196  138D  4A                    LSR       ; (LSR A FOR TASM USERS) COLLISION FOR SPRITE 1
04197  138E  4A                    LSR
04198  138F  90 01                 BCC @SPRITEHIT
04199  1391  60                    RTS       ;NO COLLISION
04200  1392             @SPRITEHIT 
04201  1392                        ;INC $D020
04202  1392  60                    RTS
04203  1393             
04204  1393             ;===============================================================================
04205  1393             ; PLAYER STATE WALK RIGHT
04206  1393             ;===============================================================================
04207  1393             
04208  1393             STARTALLEYMAP 
04209  1393  A9 01                 LDA #1
04210  1395  8D 2E 10              STA MAPTWOLOADED
04211  1398                        
04212  1398             ;        LDA #6
04213  1398             ;        STA 53280
04214  1398             
04215  1398  20 BF 0D              JSR CLEARCHSETMEMORY
04216  139B             
04217  139B  A2 04                 LDX #4
04218  139D  20 C5 0C              JSR LOADCHSETFROMDISK
04219  13A0             
04220  13A0                        ;JSR LOADCHSETFROMDISK2
04221  13A0                        ;JSR LOADALLEYTILES
04222  13A0                        ;JSR LOADALLEYMAP
04223  13A0             
04224  13A0  A2 00                 LDX #0                        ; (129,26=DEFAULT), 61
04225  13A2  A0 02                 LDY #2                          ; , 27
04226  13A4  20 99 22              JSR TILEMAP
04227  13A7  60                    RTS
04228  13A8             
04229  13A8             
04230  13A8             PLAYERSTATEWALKRIGHT 
04231  13A8  AD 4B 18              LDA PLAYER_SUBSTATE
04232  13AB  D0 13                 BNE @RUNNING
04233  13AD             
04234  13AD  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04235  13AF  A9 16                 LDA #<ANIM_PLAYER_WALK_R                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04236  13B1  85 17                 STA ZEROPAGE_POINTER_1
04237  13B3  A9 36                 LDA #>ANIM_PLAYER_WALK_R
04238  13B5  85 18                 STA ZEROPAGE_POINTER_1 + 1
04239  13B7             
04240  13B7  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04241  13BA  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04242  13BC  8D 4B 18              STA PLAYER_SUBSTATE
04243  13BF  60                    RTS
04244  13C0             
04245  13C0             ;===============================================================================
04246  13C0             ; GET JOYSTICK TEST
04247  13C0             ;===============================================================================
04248  13C0             @RUNNING
04249  13C0  20 A8 10              JSR JOYSTICKREADY                       ; THE SCREEN IS NOW SCROLLING
04250  13C3             
04251  13C3             ;===============================================================================
04252  13C3             ; CHECK IF SPRITE HAS LANDED ON THE FLOOR
04253  13C3             ;===============================================================================
04254  13C3             
04255  13C3             ; SCREEN HAS STOPPED SCROLLING
04256  13C3             @INPUT
04257  13C3             
04258  13C3             ;===============================================================================
04259  13C3             ; NO FLOOR EXISTS YET. SPRITE KEEPS FALLING
04260  13C3             ;===============================================================================
04261  13C3  20 F2 11              JSR APPLYGRAVITY                ; APPLY GRAVITY - IF WE ARE NOT FALLING
04262  13C6             
04263  13C6             ;===============================================================================
04264  13C6             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04265  13C6             ;===============================================================================
04266  13C6             @JOYCHECK
04267  13C6  AD 61 3C              LDA JOY_X
04268  13C9  F0 51                 BEQ @EXITRIGHTIDLE                  ; SCREEN SCROLLS TO RIGHT
04269  13CB             
04270  13CB             ;===============================================================================
04271  13CB             ; SPRITE IS MOVING TO THE RIGHT
04272  13CB             ; SO WE TEST FOR A JUMP HERE (FIRE BUTTON)
04273  13CB             ; THIS ALLOWS THE SPRITE TO RUN AND JUMP AT THE SAME TIME.
04274  13CB             ;===============================================================================
04275  13CB             @RIGHT     
04276  13CB  AD 4C 18              LDA PLAYER_JUMP_POS
04277  13CE  C9 0E                 CMP #14
04278  13D0  B0 19                 BCS @MOVERIGHT
04279  13D2             
04280  13D2             ;===============================================================================
04281  13D2             ; SPRITE CAN JUMP WHILE RUNNING TO THE RIGHT
04282  13D2             ;===============================================================================
04283  13D2             ; COLL_COUCH
04284  13D2  A2 00                 LDX #0
04285  13D4  20 15 0A              JSR CHECKBLOCKUNDER
04286  13D7  C9 80                 CMP #COLL_COUCH
04287  13D9  F0 1E                 BEQ @FOUNDCOUCH
04288  13DB             
04289  13DB  A2 00                 LDX #0
04290  13DD  20 15 0A              JSR CHECKBLOCKUNDER
04291  13E0  C9 50                 CMP #COLL_DOOR
04292  13E2  F0 29                 BEQ @DOORENTRANCE
04293  13E4             
04294  13E4  A9 10                 LDA #%00010000                  ; MASK FOR BIT 0
04295  13E6  2C 00 DC              BIT JOY_2                       ; CHECK ZERO = BUTTON PRESSED
04296  13E9  F0 36                 BEQ @JUMPING                    ; PLAYER CAN JUMP LEFT
04297  13EB             
04298  13EB             @MOVERIGHT 
04299  13EB  A2 00                 LDX #0
04300  13ED  20 B8 10              JSR MOVEPLAYERRIGHT             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
04301  13F0  A2 01                 LDX #1
04302  13F2  20 B8 10              JSR MOVEPLAYERRIGHT             ; USE TWICE FOR DOUBLE SPEED
04303  13F5  20 8A 13              JSR DETECTSPRITE
04304  13F8  60                    RTS
04305  13F9             
04306  13F9             @FOUNDCOUCH 
04307  13F9  A9 01                 LDA #1
04308  13FB  8D 2E 10              STA MAPTWOLOADED
04309  13FE  20 93 13              JSR STARTALLEYMAP
04310  1401  60                    RTS
04311  1402                        
04312  1402             @SKIPRIGHTGRAVITY 
04313  1402  60                    RTS
04314  1403             
04315  1403             @BUTPRESS
04316  1403  A9 01                 LDA #1
04317  1405  8D 61 3C              STA JOY_X
04318  1408  A9 1A                 LDA #PLAYER_STATE_JUMP            ; GO TO WALK STATE RIGHT
04319  140A  4C CB 11              JMP CHANGEPLAYERSTATE
04320  140D             
04321  140D             @DOORENTRANCE 
04322  140D  A9 00                 LDA #0
04323  140F  8D 2E 10              STA MAPTWOLOADED
04324  1412  20 12 12              JSR STARTHOTELMAP
04325  1415  60                    RTS
04326  1416             
04327  1416             ;===============================================================================
04328  1416             ; CHECK SCROLL SCREEN MOVE RIGHT
04329  1416             ;===============================================================================
04330  1416             @EXITRIGHT 
04331  1416  A9 01                 LDA #SCROLL_RIGHT
04332  1418  85 2D                 STA SCROLL_MOVING
04333  141A  85 2C                 STA SCROLL_DIRECTION
04334  141C             
04335  141C             @EXITRIGHTIDLE 
04336  141C  A9 00                 LDA #PLAYER_STATE_IDLE
04337  141E  4C CB 11              JMP CHANGEPLAYERSTATE
04338  1421             
04339  1421             @JUMPING
04340  1421  A9 1A                 LDA #PLAYER_STATE_JUMP
04341  1423  4C CB 11              JMP CHANGEPLAYERSTATE
04342  1426             @SCROLLRIGHT 
04343  1426  60                    RTS
04344  1427             
04345  1427             
04346  1427             
04347  1427             ;===============================================================================
04348  1427             ; PLAYER STATE WALK LEFT
04349  1427             ;===============================================================================
04350  1427             
04351  1427             PLAYERSTATEWALKLEFT 
04352  1427  AD 4B 18              LDA PLAYER_SUBSTATE
04353  142A  D0 13                 BNE @RUNNING
04354  142C             
04355  142C  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04356  142E  A9 1B                 LDA #<ANIM_PLAYER_WALK_L                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04357  1430  85 17                 STA ZEROPAGE_POINTER_1
04358  1432  A9 36                 LDA #>ANIM_PLAYER_WALK_L
04359  1434  85 18                 STA ZEROPAGE_POINTER_1 + 1
04360  1436             
04361  1436             ;===============================================================================
04362  1436             ; IDLE ANIMATION: SPRITE RUNNING IN POSITION
04363  1436             ;===============================================================================
04364  1436  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04365  1439  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04366  143B  8D 4B 18              STA PLAYER_SUBSTATE
04367  143E  60                    RTS
04368  143F             
04369  143F             ;===============================================================================
04370  143F             ; GET JOYSTICK TEST
04371  143F             ;===============================================================================
04372  143F             @RUNNING
04373  143F  20 A8 10              JSR JOYSTICKREADY                       ; SCREEN IS NOW SCROLLING (READS UPDATESCROLL)
04374  1442             
04375  1442             ;===============================================================================
04376  1442             ; CHECK IF SPRITE HAS LANDED ON THE FLOOR
04377  1442             ;===============================================================================
04378  1442             
04379  1442             ; SCREEN HAS STOPPED SCROLLING
04380  1442             
04381  1442             @INPUT
04382  1442             
04383  1442             ;===============================================================================
04384  1442             ; NO FLOOR EXISTS YET. SPRITE KEEPS FALLING
04385  1442             ;===============================================================================
04386  1442  20 F2 11              JSR APPLYGRAVITY                ; APPLY GRAVITY - IF WE ARE NOT FALLING
04387  1445             
04388  1445             ;===============================================================================
04389  1445             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04390  1445             ;===============================================================================
04391  1445             @JOYCHECK
04392  1445  AD 61 3C              LDA JOY_X
04393  1448  F0 27                 BEQ @EXITLEFT                       ; SCREEN SCROLLS TO LEFT
04394  144A             
04395  144A             ;===============================================================================
04396  144A             ; SPRITE IS MOVING TO THE LEFT
04397  144A             ;===============================================================================
04398  144A  AD 4C 18              LDA PLAYER_JUMP_POS
04399  144D  C9 0E                 CMP #14
04400  144F  B0 07                 BCS @MOVELEFT
04401  1451             
04402  1451  A9 10                 LDA #%00010000                  ; MASK FOR BIT 0
04403  1453  2C 00 DC              BIT JOY_2                       ; CHECK ZERO = BUTTON PRESSED
04404  1456  F0 24                 BEQ @JUMPING                    ; PLAYER CAN JUMP LEFT
04405  1458             
04406  1458             @MOVELEFT
04407  1458  A2 00                 LDX #0
04408  145A  20 FE 10              JSR MOVEPLAYERLEFT              ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
04409  145D  A2 01                 LDX #1
04410  145F  20 FE 10              JSR MOVEPLAYERLEFT              ; USE TWICE FOR DOUBLE SPEED
04411  1462  20 8A 13              JSR DETECTSPRITE
04412  1465  60                    RTS
04413  1466             
04414  1466             @SKIPLEFTGRAVITY 
04415  1466  60                    RTS
04416  1467             
04417  1467             @BUTPRESS
04418  1467  A9 FF                 LDA #255
04419  1469  8D 61 3C              STA JOY_X
04420  146C  A9 1A                 LDA #PLAYER_STATE_JUMP            ; GO TO WALK STATE RIGHT
04421  146E  4C CB 11              JMP CHANGEPLAYERSTATE
04422  1471             
04423  1471             ;===============================================================================
04424  1471             ; CHECK SCROLL SCREEN MOVE LEFT
04425  1471             ;===============================================================================
04426  1471             @EXITLEFT
04427  1471  A9 02                 LDA #SCROLL_LEFT
04428  1473  85 2D                 STA SCROLL_MOVING
04429  1475  85 2C                 STA SCROLL_DIRECTION
04430  1477             
04431  1477  A9 00                 LDA #PLAYER_STATE_IDLE
04432  1479  4C CB 11              JMP CHANGEPLAYERSTATE
04433  147C             
04434  147C             @JUMPING
04435  147C  A9 1A                 LDA #PLAYER_STATE_JUMP
04436  147E  4C CB 11              JMP CHANGEPLAYERSTATE
04437  1481             @SCROLLLEFT 
04438  1481  60                    RTS
04439  1482             
04440  1482             
04441  1482             
04442  1482             ;===============================================================================
04443  1482             ; STATE PUNCH RIGHT
04444  1482             ;-------------------------------------------------------------------------------
04445  1482             
04446  1482             ; IMPORTANT: CHECKS WHEN THE PLAYER CAN MOVE LEFT OR RIGHT. NO OTHER STATE OR
04447  1482             ; SUBROUTINE DOES THIS.
04448  1482             
04449  1482             ; THE PLAYER IS STANDING STILL AND WAITING INPUT.
04450  1482             ; POSSIBLE OPTIMIZATIONS WE ARE DOUBLECHECKING CHECKBLOCKUNDER AND CHECKDOWN,
04451  1482             ; WE CAN CHECK ONCE AND STORE THOSE IN A TEMP VARIABLE AND LOOK THEM UP IF NEEDED.
04452  1482             ;===============================================================================
04453  1482             
04454  1482             PLAYERSTATEPUNCHRIGHT 
04455  1482  AD 4B 18              LDA PLAYER_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
04456  1485  D0 13                 BNE @RUNNING
04457  1487             
04458  1487             ;===============================================================================
04459  1487             ; BEGIN PUNNCHING RIGHT ANIMATION
04460  1487             ;===============================================================================
04461  1487  A2 00                 LDX #0
04462  1489  A9 2D                 LDA #<ANIM_PLAYER_PUNCH_R               ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
04463  148B  85 17                 STA ZEROPAGE_POINTER_1
04464  148D  A9 36                 LDA #>ANIM_PLAYER_PUNCH_R
04465  148F  85 18                 STA ZEROPAGE_POINTER_1 + 1
04466  1491             
04467  1491  20 F7 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
04468  1494  A5 01                 LDA PLAYER_SUBSTATE_RUNNING             ; SET THE SUBSTATE TO RUNNING
04469  1496  8D 4B 18              STA PLAYER_SUBSTATE
04470  1499  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
04471  149A             @RUNNING   
04472  149A  20 A8 10              JSR JOYSTICKREADY
04473  149D  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT, WE RETURN
04474  149F  60                    RTS
04475  14A0             
04476  14A0             ;===============================================================================
04477  14A0             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04478  14A0             ;===============================================================================
04479  14A0             @INPUT
04480  14A0  20 2B 13              JSR PLAYERTOENEMYCOLLIS
04481  14A3  AD D8 35              LDA ENEMY_HIT
04482  14A6  F0 06                 BEQ @MISSEDRIGHTPUNCH
04483  14A8  20 4F 1D              JSR ENEMYSTATERIGHTDEAD
04484  14AB  20 C7 1A              JSR RESETENEMYTOPLAYERVERTICAL
04485  14AE             ;        LDA #0
04486  14AE             ;        STA ENEMY_HIT
04487  14AE             
04488  14AE             @MISSEDRIGHTPUNCH 
04489  14AE  A9 0D                 LDA #13
04490  14B0  8D 4C 18              STA PLAYER_JUMP_POS
04491  14B3             
04492  14B3  AD 61 3C              LDA JOY_X
04493  14B6  F0 03                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
04494  14B8  30 01                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
04495  14BA  60                    RTS
04496  14BB             
04497  14BB             @IDLE
04498  14BB  A9 00                 LDA #0
04499  14BD  8D BB 35              STA SPRITE_ANIM_PLAY            ; PAUSE OUR ANIMATION
04500  14C0             
04501  14C0  A9 00                 LDA #PLAYER_STATE_IDLE
04502  14C2  4C CB 11              JMP CHANGEPLAYERSTATE
04503  14C5             
04504  14C5             
04505  14C5             
04506  14C5             ;===============================================================================
04507  14C5             ; STATE PUNCH RIGHT
04508  14C5             ;===============================================================================
04509  14C5             
04510  14C5             PLAYERSTATEPUNCHLEFT 
04511  14C5  AD 4B 18              LDA PLAYER_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
04512  14C8  D0 13                 BNE @RUNNING
04513  14CA             
04514  14CA  A2 00                 LDX #0
04515  14CC  A9 31                 LDA #<ANIM_PLAYER_PUNCH_L               ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
04516  14CE  85 17                 STA ZEROPAGE_POINTER_1
04517  14D0  A9 36                 LDA #>ANIM_PLAYER_PUNCH_L
04518  14D2  85 18                 STA ZEROPAGE_POINTER_1 + 1
04519  14D4             
04520  14D4  20 F7 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
04521  14D7  A5 01                 LDA PLAYER_SUBSTATE_RUNNING             ; SET THE SUBSTATE TO RUNNING
04522  14D9  8D 4B 18              STA PLAYER_SUBSTATE
04523  14DC  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
04524  14DD             
04525  14DD             @RUNNING
04526  14DD  A9 01                 LDA #1
04527  14DF  8D BB 35              STA SPRITE_ANIM_PLAY
04528  14E2             
04529  14E2  20 A8 10              JSR JOYSTICKREADY
04530  14E5  F0 01                 BEQ @INPUT
04531  14E7  60                    RTS
04532  14E8             
04533  14E8             ;===============================================================================
04534  14E8             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04535  14E8             ;===============================================================================
04536  14E8             @INPUT
04537  14E8  20 2B 13              JSR PLAYERTOENEMYCOLLIS
04538  14EB  AD D8 35              LDA ENEMY_HIT
04539  14EE  F0 06                 BEQ @MISSEDLEFTPUNCH
04540  14F0             
04541  14F0             ;        LDA #ENEMY_STATE_LEFT_DEAD
04542  14F0             ;        JSR CHANGEENEMYSTATE
04543  14F0             ;        JSR CHANGEENEMYSTAGE
04544  14F0  20 70 1D              JSR ENEMYSTATELEFTDEAD
04545  14F3  20 C7 1A              JSR RESETENEMYTOPLAYERVERTICAL
04546  14F6             ;        LDA #0
04547  14F6             ;        STA ENEMY_HIT
04548  14F6             
04549  14F6             @MISSEDLEFTPUNCH 
04550  14F6  AD 61 3C              LDA JOY_X
04551  14F9  F0 08                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
04552  14FB  30 06                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
04553  14FD  A9 00                 LDA #PLAYER_STATE_IDLE
04554  14FF  4C CB 11              JMP CHANGEPLAYERSTATE
04555  1502  60                    RTS
04556  1503             
04557  1503             @IDLE
04558  1503  60                    RTS
04559  1504             ;        LDA #0
04560  1504             ;        STA SPRITE_ANIM_PLAY
04561  1504             ;        RTS
04562  1504  A9 00                 LDA #PLAYER_STATE_IDLE
04563  1506  4C CB 11              JMP CHANGEPLAYERSTATE
04564  1509             
04565  1509             
04566  1509             ;===============================================================================
04567  1509             ; PLAYER STATE SHOOT RIGHT
04568  1509             ;-------------------------------------------------------------------------------
04569  1509             
04570  1509             PLAYERSTATESHOOTRIGHT 
04571  1509  AD 4B 18              LDA PLAYER_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
04572  150C  D0 13                 BNE @RUNNING
04573  150E             
04574  150E             ;===============================================================================
04575  150E             ; BEGIN PUNNCHING RIGHT ANIMATION
04576  150E             ;===============================================================================
04577  150E  A2 00                 LDX #0
04578  1510  A9 35                 LDA #<ANIM_PLAYER_SHOOT_RIGHT          ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
04579  1512  85 17                 STA ZEROPAGE_POINTER_1
04580  1514  A9 36                 LDA #>ANIM_PLAYER_SHOOT_RIGHT
04581  1516  85 18                 STA ZEROPAGE_POINTER_1 + 1
04582  1518             
04583  1518  20 F7 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
04584  151B  A5 01                 LDA PLAYER_SUBSTATE_RUNNING             ; SET THE SUBSTATE TO RUNNING
04585  151D  8D 4B 18              STA PLAYER_SUBSTATE
04586  1520  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
04587  1521             @RUNNING   
04588  1521  20 A8 10              JSR JOYSTICKREADY
04589  1524  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT, WE RETURN
04590  1526  60                    RTS
04591  1527             
04592  1527             ;===============================================================================
04593  1527             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04594  1527             ;===============================================================================
04595  1527             @INPUT
04596  1527  20 2B 13              JSR PLAYERTOENEMYCOLLIS
04597  152A  AD D8 35              LDA ENEMY_HIT
04598  152D  F0 06                 BEQ @MISSEDRIGHTSHOT
04599  152F             
04600  152F  20 4F 1D              JSR ENEMYSTATERIGHTDEAD
04601  1532  20 C7 1A              JSR RESETENEMYTOPLAYERVERTICAL
04602  1535             
04603  1535             @MISSEDRIGHTSHOT 
04604  1535  A9 0D                 LDA #13
04605  1537  8D 4C 18              STA PLAYER_JUMP_POS
04606  153A             
04607  153A  AD 61 3C              LDA JOY_X
04608  153D  F0 03                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
04609  153F  30 01                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
04610  1541  60                    RTS
04611  1542             
04612  1542             @IDLE
04613  1542  A9 00                 LDA #0
04614  1544  8D BB 35              STA SPRITE_ANIM_PLAY            ; PAUSE OUR ANIMATION
04615  1547             
04616  1547  A9 00                 LDA #PLAYER_STATE_IDLE
04617  1549  4C CB 11              JMP CHANGEPLAYERSTATE
04618  154C             
04619  154C             
04620  154C             
04621  154C             ;===============================================================================
04622  154C             ; PLAYER STATE SHOOT LEFT
04623  154C             ;-------------------------------------------------------------------------------
04624  154C             
04625  154C             PLAYERSTATESHOOTLEFT 
04626  154C  AD 4B 18              LDA PLAYER_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
04627  154F  D0 13                 BNE @RUNNING
04628  1551             
04629  1551             ;===============================================================================
04630  1551             ; BEGIN PUNNCHING RIGHT ANIMATION
04631  1551             ;===============================================================================
04632  1551  A2 00                 LDX #0
04633  1553  A9 39                 LDA #<ANIM_PLAYER_SHOOT_LEFT            ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
04634  1555  85 17                 STA ZEROPAGE_POINTER_1
04635  1557  A9 36                 LDA #>ANIM_PLAYER_SHOOT_LEFT
04636  1559  85 18                 STA ZEROPAGE_POINTER_1 + 1
04637  155B             
04638  155B  20 F7 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
04639  155E  A5 01                 LDA PLAYER_SUBSTATE_RUNNING             ; SET THE SUBSTATE TO RUNNING
04640  1560  8D 4B 18              STA PLAYER_SUBSTATE
04641  1563  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
04642  1564             @RUNNING   
04643  1564  20 A8 10              JSR JOYSTICKREADY
04644  1567  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT, WE RETURN
04645  1569  60                    RTS
04646  156A             
04647  156A             ;===============================================================================
04648  156A             ; NO JOYSTICK MOVEMEMENT - SET TO IDLE
04649  156A             ;===============================================================================
04650  156A             @INPUT
04651  156A  20 2B 13              JSR PLAYERTOENEMYCOLLIS
04652  156D  AD D8 35              LDA ENEMY_HIT
04653  1570  F0 06                 BEQ @MISSEDLEFTSHOT
04654  1572             
04655  1572  20 4F 1D              JSR ENEMYSTATERIGHTDEAD
04656  1575  20 C7 1A              JSR RESETENEMYTOPLAYERVERTICAL
04657  1578             
04658  1578             @MISSEDLEFTSHOT 
04659  1578  AD 61 3C              LDA JOY_X
04660  157B  F0 08                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
04661  157D  30 06                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
04662  157F  A9 00                 LDA #PLAYER_STATE_IDLE
04663  1581  4C CB 11              JMP CHANGEPLAYERSTATE
04664  1584  60                    RTS
04665  1585             
04666  1585             @IDLE
04667  1585  60                    RTS
04668  1586             
04669  1586             
04670  1586             
04671  1586             ;===============================================================================
04672  1586             ;  STATE KICK RIGHT
04673  1586             ;===============================================================================
04674  1586             
04675  1586             PLAYERSTATEKICKRIGHT 
04676  1586  AD 4B 18              LDA PLAYER_SUBSTATE                     ; TEST FOR FIRST RUN
04677  1589  D0 13                 BNE @RUNNING
04678  158B             
04679  158B             ;===============================================================================
04680  158B             ; BEGIN KICKING RIGHT ANIMATION
04681  158B             ;===============================================================================
04682  158B  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04683  158D  A9 3D                 LDA #<ANIM_PLAYER_KICK_R                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04684  158F  85 17                 STA ZEROPAGE_POINTER_1
04685  1591  A9 36                 LDA #>ANIM_PLAYER_KICK_R
04686  1593  85 18                 STA ZEROPAGE_POINTER_1 + 1
04687  1595             
04688  1595  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04689  1598  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04690  159A  8D 4B 18              STA PLAYER_SUBSTATE
04691  159D  60                    RTS                                     ; STATE CHANGE GOES INTO EFFECT NEXT FRAME
04692  159E             
04693  159E             ;===============================================================================
04694  159E             ; GET JOYSTICK TEST
04695  159E             ;===============================================================================
04696  159E             @RUNNING
04697  159E  20 A8 10              JSR JOYSTICKREADY
04698  15A1  F0 01                 BEQ @IDLE                              ; NOT READY FOR INPUT
04699  15A3  60                    RTS
04700  15A4             
04701  15A4             @IDLE
04702  15A4  A9 00                 LDA #PLAYER_STATE_IDLE
04703  15A6  4C CB 11              JMP CHANGEPLAYERSTATE
04704  15A9                        ;-----------------------------------------------------------------------
04705  15A9             
04706  15A9             
04707  15A9             ;===============================================================================
04708  15A9             ;  STATE KICK LEFT
04709  15A9             ;-------------------------------------------------------------------------------
04710  15A9             ;  PLAYER STATE FOR CLIMBING STAIRS
04711  15A9             ;-------------------------------------------------------------------------------
04712  15A9             
04713  15A9             PLAYERSTATEKICKLEFT 
04714  15A9  AD 4B 18              LDA PLAYER_SUBSTATE                     ; TEST FOR FIRST RUN
04715  15AC  D0 13                 BNE @RUNNING
04716  15AE             
04717  15AE             ;===============================================================================
04718  15AE             ; BEGIN KICKING LEFT ANIMATION
04719  15AE             ;===============================================================================
04720  15AE  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04721  15B0  A9 41                 LDA #<ANIM_PLAYER_KICK_L                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04722  15B2  85 17                 STA ZEROPAGE_POINTER_1
04723  15B4  A9 36                 LDA #>ANIM_PLAYER_KICK_L
04724  15B6  85 18                 STA ZEROPAGE_POINTER_1 + 1
04725  15B8             
04726  15B8  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04727  15BB  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04728  15BD  8D 4B 18              STA PLAYER_SUBSTATE
04729  15C0  60                    RTS                                     ; STATE CHANGE GOES INTO EFFECT NEXT FRAME
04730  15C1             
04731  15C1             ;===============================================================================
04732  15C1             ; GET JOYSTICK TEST
04733  15C1             ;===============================================================================
04734  15C1             @RUNNING
04735  15C1  20 A8 10              JSR JOYSTICKREADY
04736  15C4  F0 01                 BEQ @IDLE                              ; NOT READY FOR INPUT
04737  15C6  60                    RTS
04738  15C7             
04739  15C7             @IDLE
04740  15C7  A9 00                 LDA #PLAYER_STATE_IDLE
04741  15C9  4C CB 11              JMP CHANGEPLAYERSTATE
04742  15CC             
04743  15CC             ;===============================================================================
04744  15CC             ;  PLAYER STATE POLE
04745  15CC             ;  SUBROUTINE IS ONLY CALLED IF "COLL_POLE" IS FOUND
04746  15CC             ;===============================================================================
04747  15CC             
04748  15CC             PLAYERSTATEPOLE 
04749  15CC  AD 4B 18              LDA PLAYER_SUBSTATE                     ; TEST FOR FIRST RUN
04750  15CF  D0 13                 BNE @RUNNING
04751  15D1             
04752  15D1             ;===============================================================================
04753  15D1             ; SET CLIMBING SPRITE
04754  15D1             ;===============================================================================
04755  15D1  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04756  15D3  A9 23                 LDA #<ANIM_CLIMB_POLE                   ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04757  15D5  85 17                 STA ZEROPAGE_POINTER_1
04758  15D7  A9 36                 LDA #>ANIM_CLIMB_POLE
04759  15D9  85 18                 STA ZEROPAGE_POINTER_1 + 1
04760  15DB             
04761  15DB  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04762  15DE  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04763  15E0  8D 4B 18              STA PLAYER_SUBSTATE
04764  15E3  60                    RTS                                     ; CHANGE TAKES EFFECT NEXT FRAME
04765  15E4             
04766  15E4             ;===============================================================================
04767  15E4             ; GET JOYSTICK TEST
04768  15E4             ;===============================================================================
04769  15E4             @RUNNING
04770  15E4  20 A8 10              JSR JOYSTICKREADY
04771  15E7             
04772  15E7             ;===============================================================================
04773  15E7             ; CHECK IF SPRITE IS ON THE POLE
04774  15E7             ;===============================================================================
04775  15E7             @INPUT
04776  15E7  A9 00                 LDA #0
04777  15E9  8D 4C 18              STA PLAYER_JUMP_POS
04778  15EC             
04779  15EC  A9 01                 LDA #1
04780  15EE  8D BB 35              STA SPRITE_ANIM_PLAY                    ; START OUR ANIMATION
04781  15F1             
04782  15F1  A5 07                 LDA COLOR_YELLOW
04783  15F3  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2
04784  15F6             
04785  15F6             ;===============================================================================
04786  15F6             ; SPRITE IS ON THE POLE
04787  15F6             ;===============================================================================
04788  15F6             ; IS SPRITE MOVING TO THE LEFT OR RIGHT?
04789  15F6             ;*******************************************************************************
04790  15F6  A2 00                 LDX #0
04791  15F8  20 15 0A              JSR CHECKBLOCKUNDER
04792  15FB  C9 30                 CMP #COLL_POLE                          ; CHECK FOR POLE UNDER PLAYER
04793  15FD  F0 07                 BEQ @JOYCHKONPOLE
04794  15FF             
04795  15FF  A9 10                 LDA #%00010000                          ; MASK FOR BIT 0
04796  1601  2C 00 DC              BIT JOY_2                               ; CHECK ZERO = JUMPING (BUTTON PRESSED)
04797  1604  F0 45                 BEQ @BUTPRESS                           ; CONTINUE OTHER CHECK
04798  1606             
04799  1606             @JOYCHKONPOLE 
04800  1606  AD 61 3C              LDA JOY_X
04801  1609  F0 61                 BEQ @CHECKJOYSTICK                      ; JOYSTICK NOT MOVING LEFT/RIGHT
04802  160B  30 03                 BMI @LEFT
04803  160D  10 2A                 BPL @RIGHT
04804  160F  60                    RTS
04805  1610             
04806  1610             ;===============================================================================
04807  1610             ; CHECK FOR TILE COLLISION GOING LEFT
04808  1610             ;===============================================================================
04809  1610             @LEFT
04810  1610  A2 01                 LDX #1
04811  1612  20 BD 08              JSR CHECKMOVELEFT
04812  1615  F0 2F                 BEQ @GOLEFT                             ; NOT BLOCKED, LEFT ROUTINE
04813  1617  60                    RTS
04814  1618             
04815  1618             ;===============================================================================
04816  1618             ; POLE WAS FOUND: MOVE SPRITE UP
04817  1618             ;===============================================================================
04818  1618             @EXITPOLECLIMB 
04819  1618  A2 00                 LDX #0
04820  161A  20 15 0A              JSR CHECKBLOCKUNDER
04821  161D  C9 50                 CMP #COLL_DOOR
04822  161F  F0 0F                 BEQ @DOORENTRANCE
04823  1621             
04824  1621  A2 00                 LDX #0
04825  1623  20 77 11              JSR MOVEPLAYERUP
04826  1626  A2 01                 LDX #1
04827  1628  20 77 11              JSR MOVEPLAYERUP
04828  162B             
04829  162B             ;===============================================================================
04830  162B             ; SPRITE HAS FALLEN OFF THE POLE
04831  162B             ;===============================================================================
04832  162B             @NOPOLEFOUND 
04833  162B  A9 00                 LDA #PLAYER_STATE_IDLE
04834  162D  4C CB 11              JMP CHANGEPLAYERSTATE
04835  1630             
04836  1630             @DOORENTRANCE 
04837  1630  A9 00                 LDA #0
04838  1632  8D 2E 10              STA MAPTWOLOADED
04839  1635  20 12 12              JSR STARTHOTELMAP
04840  1638  60                    RTS
04841  1639             
04842  1639             ;===============================================================================
04843  1639             ; CHECK IF SPRITE CAN MOVE TO THE RIGHT
04844  1639             ;===============================================================================
04845  1639             @RIGHT
04846  1639  A2 01                 LDX #1
04847  163B  20 1A 09              JSR CHECKMOVERIGHT
04848  163E  F0 01                 BEQ @GORIGHT                            ; NOT BLOCKED, RIGHT ROUTINE
04849  1640  60                    RTS
04850  1641             
04851  1641             ;===============================================================================
04852  1641             ; CALL SPRITE WALKING RIGHT SUBROUTINE
04853  1641             ;===============================================================================
04854  1641             @GORIGHT
04855  1641  A9 02                 LDA #PLAYER_STATE_WALK_RIGHT
04856  1643  4C CB 11              JMP CHANGEPLAYERSTATE
04857  1646             
04858  1646             ;===============================================================================
04859  1646             ; CALL SPRITE WALKING LEFT SUBROUTINE
04860  1646             ;===============================================================================
04861  1646             @GOLEFT
04862  1646  A9 04                 LDA #PLAYER_STATE_WALK_LEFT
04863  1648  4C CB 11              JMP CHANGEPLAYERSTATE
04864  164B             
04865  164B             @BUTPRESS
04866  164B  A9 1A                 LDA #PLAYER_STATE_JUMP
04867  164D  4C CB 11              JMP CHANGEPLAYERSTATE
04868  1650             
04869  1650             ;===============================================================================
04870  1650             ; IF DELTA=4 PLAYER HAS PASSED THROUGH A TILE
04871  1650             ;===============================================================================
04872  1650             @VERTCHECK 
04873  1650  A2 01                 LDX #1
04874  1652  BD 6A 35              LDA SPRITE_POS_X_DELTA,X
04875  1655  C9 04                 CMP #4                                  ; THEY PASS THROUGH IF DELTA IS 4
04876  1657  F0 13                 BEQ @CHECKJOYSTICK                      ; WE HAVE PASSED COMPLETELY THROUGH THE TILE
04877  1659  90 06                 BCC @DELTAFINISHED                      ; IF LESS THAN 4, SHIFT RIGHT ONE PIXEL
04878  165B             
04879  165B  20 FE 10              JSR MOVEPLAYERLEFT                      ; NOT EQUAL, NOT LESS, MUST BE MORE - SHIFT LEFT ONE
04880  165E  4C 6C 16              JMP @CHECKJOYSTICK
04881  1661             
04882  1661             ;===============================================================================
04883  1661             ; SPRITE IS MOVING TO THE RIGHT
04884  1661             ;===============================================================================
04885  1661             @DELTAFINISHED 
04886  1661  A2 00                 LDX #0
04887  1663  20 B8 10              JSR MOVEPLAYERRIGHT
04888  1666  A2 01                 LDX #1
04889  1668  20 B8 10              JSR MOVEPLAYERRIGHT
04890  166B  60                    RTS
04891  166C             
04892  166C             ;===============================================================================
04893  166C             ; CHECK IF JOYSTICK IS IDLE OR MOVING UP OR DOWN
04894  166C             ;===============================================================================
04895  166C             @CHECKJOYSTICK 
04896  166C  AD 62 3C              LDA JOY_Y                               ; JOYSTICK NOT MOVING UP/DOWN
04897  166F  F0 2E                 BEQ @END
04898  1671  30 03                 BMI @UP
04899  1673  10 17                 BPL @DOWN
04900  1675  60                    RTS
04901  1676             
04902  1676             ;===============================================================================
04903  1676             ; SPRITE IS MOVING UP
04904  1676             ;===============================================================================
04905  1676             @UP
04906  1676  A2 00                 LDX #0
04907  1678  20 15 0A              JSR CHECKBLOCKUNDER
04908  167B  C9 30                 CMP #COLL_POLE                          ; CHECK FOR POLE UNDER PLAYER
04909  167D  D0 0C                 BNE @POLENOTABOVE
04910  167F             
04911  167F  A2 00                 LDX #0
04912  1681  20 77 11              JSR MOVEPLAYERUP
04913  1684  A2 01                 LDX #1
04914  1686  20 77 11              JSR MOVEPLAYERUP
04915  1689  A9 00                 LDA #0
04916  168B             
04917  168B             @POLENOTABOVE 
04918  168B  60                    RTS
04919  168C             
04920  168C             ;===============================================================================
04921  168C             ; SPRITE IS MOVING DOWN
04922  168C             ;===============================================================================
04923  168C             @DOWN
04924  168C             ;        LDX #1
04925  168C             ;        JSR CHECKBLOCKUNDER
04926  168C             ;        CMP #COLL_POLE                          ; CHECK FOR POLE UNDER PLAYER
04927  168C             ;        BNE @POLENOTBELOW
04928  168C             
04929  168C  A2 00                 LDX #0
04930  168E  20 3D 11              JSR MOVEPLAYERDOWN
04931  1691  A2 01                 LDX #1
04932  1693  20 3D 11              JSR MOVEPLAYERDOWN
04933  1696             
04934  1696             @POLENOTBELOW 
04935  1696  60                    RTS
04936  1697             
04937  1697             ;===============================================================================
04938  1697             ; IF DELTA=4 PLAYER HAS PASSED THROUGH A TILE
04939  1697             ;===============================================================================
04940  1697             @ENDCLIMB
04941  1697  AD 6A 35              LDA SPRITE_POS_X_DELTA          ; CHECK IF SPRITE IS PASSING
04942  169A  C9 04                 CMP #4                          ; COMPLETELY THROUGH THE TILE
04943  169C  F0 01                 BEQ @END                        ; YES, THEY PASSED THROUGH
04944  169E  60                    RTS
04945  169F             
04946  169F             @END
04947  169F  A9 00                 LDA #0
04948  16A1  8D BB 35              STA SPRITE_ANIM_PLAY            ; PAUSE OUR ANIMATION
04949  16A4  60                    RTS
04950  16A5             
04951  16A5             
04952  16A5             ;===============================================================================
04953  16A5             ; PLAYER STATE SWIM RIGHT
04954  16A5             ;-------------------------------------------------------------------------------
04955  16A5             
04956  16A5             PLAYERSTATESWIMR 
04957  16A5  AD 4B 18              LDA PLAYER_SUBSTATE
04958  16A8  D0 13                 BNE @RUNNING
04959  16AA             
04960  16AA  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
04961  16AC  A9 46                 LDA #<ANIM_PLAYER_SWIM_R                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
04962  16AE  85 17                 STA ZEROPAGE_POINTER_1
04963  16B0  A9 36                 LDA #>ANIM_PLAYER_SWIM_R
04964  16B2  85 18                 STA ZEROPAGE_POINTER_1 + 1
04965  16B4             
04966  16B4  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
04967  16B7  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
04968  16B9  8D 4B 18              STA PLAYER_SUBSTATE
04969  16BC  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
04970  16BD                        ;-----------------------------------------------------------------------------
04971  16BD             @RUNNING
04972  16BD  A9 01                 LDA #1
04973  16BF  8D BB 35              STA SPRITE_ANIM_PLAY                    ; BEGIN OUR ANIMATION WHEN SET TO ONE
04974  16C2             
04975  16C2  20 A8 10              JSR JOYSTICKREADY
04976  16C5             
04977  16C5             @INPUT
04978  16C5  AD 61 3C              LDA JOY_X
04979  16C8  F0 15                 BEQ @IDLE
04980  16CA  10 03                 BPL @RIGHT
04981  16CC  4C DF 16              JMP @IDLE
04982  16CF             
04983  16CF             @RIGHT
04984  16CF  A2 00                 LDX #0
04985  16D1  20 B8 10              JSR MOVEPLAYERRIGHT             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
04986  16D4  A2 01                 LDX #1
04987  16D6  20 B8 10              JSR MOVEPLAYERRIGHT
04988  16D9  60                    RTS
04989  16DA             
04990  16DA  A9 00                 LDA #PLAYER_STATE_IDLE
04991  16DC  4C CB 11              JMP CHANGEPLAYERSTATE
04992  16DF             
04993  16DF             @IDLE
04994  16DF  A9 00                 LDA #PLAYER_STATE_IDLE
04995  16E1  4C CB 11              JMP CHANGEPLAYERSTATE
04996  16E4             
04997  16E4             @DONEJOY
04998  16E4  60                    RTS
04999  16E5             
05000  16E5             
05001  16E5             ;===============================================================================
05002  16E5             ; PLAYER STATE SWIM LEFT
05003  16E5             ;===============================================================================
05004  16E5             
05005  16E5             PLAYERSTATESWIML 
05006  16E5  AD 4B 18              LDA PLAYER_SUBSTATE
05007  16E8  D0 13                 BNE @RUNNING
05008  16EA             
05009  16EA  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
05010  16EC  A9 4A                 LDA #<ANIM_PLAYER_SWIM_L                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
05011  16EE  85 17                 STA ZEROPAGE_POINTER_1
05012  16F0  A9 36                 LDA #>ANIM_PLAYER_SWIM_L
05013  16F2  85 18                 STA ZEROPAGE_POINTER_1 + 1
05014  16F4             
05015  16F4  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
05016  16F7  A9 01                 LDA #PLAYER_SUBSTATE_RUNNING            ; SET SUBSTATE TO RUNNING
05017  16F9  8D 4B 18              STA PLAYER_SUBSTATE
05018  16FC  60                    RTS                                     ; WAIT TILL NEXT FRAME TO START
05019  16FD                        ;-----------------------------------------------------------------------
05020  16FD             @RUNNING
05021  16FD  A9 01                 LDA #1
05022  16FF  8D BB 35              STA SPRITE_ANIM_PLAY                    ; BEGIN OUR ANIMATION WHEN SET TO ONE
05023  1702             
05024  1702  20 A8 10              JSR JOYSTICKREADY
05025  1705             
05026  1705             @INPUT
05027  1705  AD 61 3C              LDA JOY_X
05028  1708  F0 15                 BEQ @IDLE
05029  170A  30 03                 BMI @LEFT
05030  170C  4C 1F 17              JMP @IDLE
05031  170F             
05032  170F             @LEFT
05033  170F  A2 00                 LDX #0
05034  1711  20 FE 10              JSR MOVEPLAYERLEFT             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
05035  1714  A2 01                 LDX #1
05036  1716  20 FE 10              JSR MOVEPLAYERLEFT
05037  1719  60                    RTS
05038  171A             
05039  171A  A9 00                 LDA #PLAYER_STATE_IDLE
05040  171C  4C CB 11              JMP CHANGEPLAYERSTATE
05041  171F             
05042  171F             @IDLE
05043  171F  A9 00                 LDA #PLAYER_STATE_IDLE
05044  1721  4C CB 11              JMP CHANGEPLAYERSTATE
05045  1724             
05046  1724             @DONEJOY
05047  1724  60                    RTS
05048  1725             
05049  1725             
05050  1725             ;===============================================================================
05051  1725             ;  PLAYER STATE FLOATING
05052  1725             ;===============================================================================
05053  1725             
05054  1725             PLAYERSTATEFLOATING 
05055  1725  A9 01                 LDA #1
05056  1727  8D BB 35              STA SPRITE_ANIM_PLAY            ; PAUSE OUR ANIMATION
05057  172A             
05058  172A  20 A8 10              JSR JOYSTICKREADY
05059  172D             
05060  172D             ;===============================================================================
05061  172D             ; IN WATER: LEFT/RIGHT MOVEMENT
05062  172D             ;===============================================================================
05063  172D             @INPUT
05064  172D  AD 61 3C              LDA JOY_X
05065  1730  30 0E                 BMI @LEFTWATERMOVE
05066  1732  D0 11                 BNE @RIGHTWATERMOVE
05067  1734             
05068  1734             ;===============================================================================
05069  1734             ; IN WATER: UP/DOWN MOVEMENT
05070  1734             ;===============================================================================
05071  1734  AD 62 3C              LDA JOY_Y
05072  1737  F0 11                 BEQ @CHECKWATERCOLLIS           ; NO INPUT, GO TO FLOATING ROUTINE
05073  1739  30 24                 BMI @CHECKWATERUP               ; JOYSTICK GOING UP
05074  173B  10 55                 BPL @DOWN                       ; JOYSTICK GOING DOWN
05075  173D  4C 7B 17              JMP @CHANGESPRITECOLOR
05076  1740             
05077  1740             @LEFTWATERMOVE 
05078  1740  A9 16                 LDA #PLAYER_STATE_SWIM_L
05079  1742  4C CB 11              JMP CHANGEPLAYERSTATE
05080  1745             
05081  1745             @RIGHTWATERMOVE 
05082  1745  A9 14                 LDA #PLAYER_STATE_SWIM_R
05083  1747  4C CB 11              JMP CHANGEPLAYERSTATE
05084  174A             
05085  174A             ;===============================================================================
05086  174A             ; IN WATER: SPRITE RISES TO SURFACE
05087  174A             ;===============================================================================
05088  174A             @CHECKWATERCOLLIS 
05089  174A  A2 00                 LDX #0                                  ; CHECK AT SPRITE'S HEAD
05090  174C  20 15 0A              JSR CHECKBLOCKUNDER                     ; CHECK UNDER THE SPRITE'S FEET
05091  174F  C9 30                 CMP #COLL_POLE                          ; DOES POLE EXIST HERE?
05092  1751  F0 3E                 BEQ @POLEFOUND                            ; POLE/LADDER WAS FOUND
05093  1753             
05094  1753  A2 00                 LDX #0                                  ; CHECK AT SPRITE'S HEAD
05095  1755  20 15 0A              JSR CHECKBLOCKUNDER                     ; CHECK UNDER THE SPRITE'S FEET
05096  1758  C9 40                 CMP #COLL_WATER                         ; WATER TILE WAS FOUND
05097  175A  D0 52                 BNE @END                                ; SPRITE NO LONGER IN WATER
05098  175C  4C 81 17              JMP @GOINGUP                            ; OTHERWISE MOVE HIM UP
05099  175F             
05100  175F             ;===============================================================================
05101  175F             ; IN WATER: CAN ONLY MOVE DOWN WHEN IN WATER
05102  175F             ;===============================================================================
05103  175F             @CHECKWATERUP 
05104  175F  A2 01                 LDX #1
05105  1761  20 C5 09              JSR CHECKMOVEUP                     ; CHECK FEET OF SPRITE
05106  1764  C9 00                 CMP #0                              ; IS SPRITE OUT OF THE WATER?
05107  1766  F0 13                 BEQ @CHANGESPRITECOLOR
05108  1768             
05109  1768  A2 01                 LDX #1
05110  176A  20 C5 09              JSR CHECKMOVEUP                     ; CHECK TILE UNDER TOP SPRITE (SPRITE)
05111  176D  C9 40                 CMP #COLL_WATER                     ; DOES POLE EXIST HERE?
05112  176F  F0 10                 BEQ @GOINGUP                        ; NO POLE FOUND, EXIT ROUTINE
05113  1771             
05114  1771  A2 01                 LDX #1
05115  1773  20 C5 09              JSR CHECKMOVEUP                     ; CHECK FEET OF SPRITE
05116  1776  C9 00                 CMP #0                              ; IS SPRITE OUT OF THE WATER?
05117  1778  D0 07                 BNE @GOINGUP
05118  177A  60                    RTS
05119  177B             
05120  177B             ; SPRITE HAS LEFT THE WATER
05121  177B             @CHANGESPRITECOLOR 
05122  177B  A9 06                 LDA #COLOR_BLUE
05123  177D  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2         ; TURN SPRITE BLUE UNDER WATER
05124  1780             
05125  1780             @EXITFLOATING 
05126  1780  60                    RTS
05127  1781             
05128  1781             @GOINGUP
05129  1781  A9 06                 LDA #COLOR_BLUE
05130  1783  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2
05131  1786             
05132  1786  A2 00                 LDX #0
05133  1788  20 77 11              JSR MOVEPLAYERUP             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
05134  178B  A2 01                 LDX #1
05135  178D  20 77 11              JSR MOVEPLAYERUP             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
05136  1790  60                    RTS
05137  1791             
05138  1791             @POLEFOUND 
05139  1791  60                    RTS
05140  1792             
05141  1792             ;===============================================================================
05142  1792             ; IN WATER: CAN ONLY MOVE DOWN WHEN IN WATER
05143  1792             ;===============================================================================
05144  1792             @DOWN
05145  1792  A2 01                 LDX #1
05146  1794  20 15 0A              JSR CHECKBLOCKUNDER                     ; CHECK TILE UNDER TOP SPRITE (SPRITE)
05147  1797  C9 40                 CMP #COLL_WATER                         ; DOES POLE EXIST HERE?
05148  1799  F0 03                 BEQ @GOINGDOWN
05149  179B  4C AE 17              JMP @END
05150  179E             
05151  179E             @GOINGDOWN 
05152  179E  A9 06                 LDA #6
05153  17A0  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2            ; TURN SPRITE BLUE UNDER WATER
05154  17A3             
05155  17A3  A2 00                 LDX #0
05156  17A5  20 3D 11              JSR MOVEPLAYERDOWN             ; MOVE PLAYER ONE PIXEL ACROSS - A = MOVE? 0 OR 1
05157  17A8  A2 01                 LDX #1
05158  17AA  20 3D 11              JSR MOVEPLAYERDOWN
05159  17AD  60                    RTS
05160  17AE             @END
05161  17AE  A9 0A                 LDA #COLOR_LTRED
05162  17B0  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2
05163  17B3  A9 00                 LDA #PLAYER_STATE_IDLE
05164  17B5  4C CB 11              JMP CHANGEPLAYERSTATE
05165  17B8             
05166  17B8             
05167  17B8             
05168  17B8             ;===============================================================================
05169  17B8             ; PLAYER STATE JUMP
05170  17B8             ;===============================================================================
05171  17B8             
05172  17B8             PLAYERSTATEJUMP 
05173  17B8             
05174  17B8             ; IF PLAYER IS NOT JUMPING (EXECUTING "PLAYERSTATEJUMP"), THEN
05175  17B8             ; THE APPLYGRAVITY ROUTINE STILL WORKS TO BRING THE SPRITE BACK DOWN.
05176  17B8             ;===============================================================================
05177  17B8             ; CHECK IF SPACE ABOVE SPRITE IS OPEN
05178  17B8             ;===============================================================================
05179  17B8             @JUMPING   
05180  17B8             
05181  17B8                        ;JSR LOADCHSETFROMDISK
05182  17B8                        ;JSR LOADFILEINMEMORY
05183  17B8             
05184  17B8             ;        CLC
05185  17B8             ;        ADC #200
05186  17B8             ;        STA GAMESCORE
05187  17B8             
05188  17B8             ;        LDA #20                          ; SET VIC TO SCREEN 6, CHARSET 2
05189  17B8             ;        STA VIC_MEMORY_CONTROL
05190  17B8             
05191  17B8                        ;JSR UPDATETIMERS
05192  17B8             ;        CLC
05193  17B8             ;        LDA GAMESCORE                                   ; INCREASE SCORE
05194  17B8             ;        ADC #1                                          ; 01,00
05195  17B8             ;        STA GAMESCORE
05196  17B8             
05197  17B8  A2 00                 LDX #0
05198  17BA  20 C5 09              JSR CHECKMOVEUP                 ; CHECK FOR TILE ABOVE OUR SPRITE
05199  17BD  F0 0A                 BEQ @CONTJUMP                   ; TILE EXISTS, EXIT SUBROUTINE
05200  17BF             
05201  17BF             
05202  17BF  A9 00                 LDA #0
05203  17C1  8D 4C 18              STA PLAYER_JUMP_POS
05204  17C4             
05205  17C4  A9 00                 LDA #PLAYER_STATE_IDLE
05206  17C6  4C CB 11              JMP CHANGEPLAYERSTATE
05207  17C9             
05208  17C9             ;===============================================================================
05209  17C9             ; CHECK IF POLE IS ABOVE SPRITE
05210  17C9             ;===============================================================================
05211  17C9             @CONTJUMP
05212  17C9  20 A8 10              JSR JOYSTICKREADY
05213  17CC             
05214  17CC             ;===============================================================================
05215  17CC             ; CHECK IF FLOOR IS IS BELOW PLAYER SPRITE
05216  17CC             ;-------------------------------------------------------------------------------
05217  17CC             ; THIS IS USED TO PREVENT PLAYER SPRITE FROM JUMPING UP THROUGH
05218  17CC             ; WALLS WHEN ON LADDER OR THE FLOOR.
05219  17CC             ;===============================================================================
05220  17CC  A2 00                 LDX #0
05221  17CE  20 15 0A              JSR CHECKBLOCKUNDER
05222  17D1  AD C2 0A              LDA COLLIDER_ATTR
05223  17D4  C9 10                 CMP #COLL_FLOOR                 ; DOES FLOOR EXIST UNDER US?
05224  17D6  D0 16                 BNE @CHECKJOYJUMPING
05225  17D8             
05226  17D8  A2 01                 LDX #1
05227  17DA  20 15 0A              JSR CHECKBLOCKUNDER
05228  17DD  AD C2 0A              LDA COLLIDER_ATTR
05229  17E0  C9 10                 CMP #COLL_FLOOR                 ; DOES FLOOR EXIST UNDER US?
05230  17E2  F0 0A                 BEQ @CHECKJOYJUMPING
05231  17E4             
05232  17E4  A9 00                 LDA #0
05233  17E6  8D 4C 18              STA PLAYER_JUMP_POS
05234  17E9  A9 00                 LDA #PLAYER_STATE_IDLE
05235  17EB  4C CB 11              JMP CHANGEPLAYERSTATE
05236  17EE             
05237  17EE             ;===============================================================================
05238  17EE             ; NO FLOOR IS ABOVE PLAYER SPRITE: SO HE CAN JUMP
05239  17EE             ;===============================================================================
05240  17EE             @CHECKJOYJUMPING 
05241  17EE  AD 61 3C              LDA JOY_X
05242  17F1  F0 21                 BEQ @MOVEUP
05243  17F3  30 12                 BMI @LEFTJUMP                   ; CHECK FOR JOYSTICK TO LEFT = 255
05244  17F5  10 03                 BPL @RIGHTJUMP                  ; CHECK FOR JOYSTICK TO RIGHT = 1
05245  17F7  4C 14 18              JMP @MOVEUP
05246  17FA             
05247  17FA             ;===============================================================================
05248  17FA             ; CHECK FOR JUMP TO THE RIGHT
05249  17FA             ;===============================================================================
05250  17FA             @RIGHTJUMP 
05251  17FA  A2 00                 LDX #0
05252  17FC  20 B8 10              JSR MOVEPLAYERRIGHT
05253  17FF  A2 01                 LDX #1
05254  1801  20 B8 10              JSR MOVEPLAYERRIGHT
05255  1804  4C 14 18              JMP @MOVEUP
05256  1807             
05257  1807             ;===============================================================================
05258  1807             ; CHECK FOR JUMP TO THE LEFT
05259  1807             ;===============================================================================
05260  1807             @LEFTJUMP
05261  1807  A2 00                 LDX #0
05262  1809  20 FE 10              JSR MOVEPLAYERLEFT
05263  180C  A2 01                 LDX #1
05264  180E  20 FE 10              JSR MOVEPLAYERLEFT
05265  1811  4C 14 18              JMP @MOVEUP
05266  1814             
05267  1814             ;===============================================================================
05268  1814             ; CAN JUMP UP IF NOTHING IS ABOVE THE SPRITE
05269  1814             ;===============================================================================
05270  1814             ;===============================================================================
05271  1814             ; IF NO FLOOR IS FOUND, SPRITE WILL FALL AT START
05272  1814             ;===============================================================================
05273  1814             @MOVEUP
05274  1814             ;        LDX #1
05275  1814             ;        JSR CHECKBLOCKUNDER
05276  1814             ;        LDA COLLIDER_ATTR
05277  1814             ;        CMP #COLL_FLOOR                 ; DOES FLOOR EXIST UNDER US?
05278  1814             ;        BNE @SPRITEFALLS
05279  1814             
05280  1814  A2 00                 LDX #0
05281  1816  20 77 11              JSR MOVEPLAYERUP
05282  1819             
05283  1819             ;===============================================================================
05284  1819             ; SPRITE JUMPS UP IF < 12
05285  1819             ;===============================================================================
05286  1819  A2 01                 LDX #1
05287  181B  20 C5 09              JSR CHECKMOVEUP                 ; CHECK TILE UNDER TOP SPRITE (SPRITE)
05288  181E  D0 27                 BNE @CANTMOVEUP                ; BLOCKED, CAN'T MOVE PLAYER UP
05289  1820             
05290  1820  AD 4C 18              LDA PLAYER_JUMP_POS             ; FOR PLAYER_JUMP_TABLE,X TO READ UNTIL
05291  1823  C9 0C                 CMP #12                         ; IT FINDS A "0" VALUE. 28 BYTES
05292  1825  B0 03                 BCS @SPRITEFALLS                ; SPRITE IS FALLING ONLY
05293  1827  4C 36 18              JMP @MOVESPRITEUP
05294  182A             
05295  182A             ;===============================================================================
05296  182A             ; SPRITE FALLS DOWN IF < 22
05297  182A             ;===============================================================================
05298  182A             @SPRITEFALLS 
05299  182A  AD 4C 18              LDA PLAYER_JUMP_POS             ; FOR PLAYER_JUMP_TABLE,X TO READ UNTIL
05300  182D  C9 16                 CMP #22                         ; IT FINDS A "0" VALUE. 28 BYTES
05301  182F  90 05                 BCC @MOVESPRITEUP               ; SPRITE IS FALLING ONLY
05302  1831             
05303  1831             ;===============================================================================
05304  1831             ; FLOOR IS FOUND UNDER SPRITE: CLEAR PLAYER_JUMP_POS, APPLY GRAVITY
05305  1831             ;===============================================================================
05306  1831             @RESETJUMP 
05307  1831  A9 00                 LDA #PLAYER_STATE_IDLE
05308  1833  4C CB 11              JMP CHANGEPLAYERSTATE
05309  1836             
05310  1836             ;===============================================================================
05311  1836             ; SPRITE IS NOT BLOCKED AND CAN FREELY JUMP UP
05312  1836             ;===============================================================================
05313  1836             @MOVESPRITEUP 
05314  1836  18                    CLC
05315  1837  69 01                 ADC #1
05316  1839  8D 4C 18              STA PLAYER_JUMP_POS             ; COUNTER TO TRACK TABLE LOOP
05317  183C             
05318  183C  A2 00                 LDX #0
05319  183E  20 77 11              JSR MOVEPLAYERUP
05320  1841  A2 01                 LDX #1
05321  1843  20 77 11              JSR MOVEPLAYERUP
05322  1846  60                    RTS
05323  1847             
05324  1847             @CANTMOVEUP 
05325  1847  60                    RTS
05326  1848             
05327  1848             
05328  1848             
05329  1848             CHECKUPRIGHT 
05330  1848  09                    BYTE %0001001
05331  1849             
05332  1849             CHECKUPLEFT 
05333  1849  05                    BYTE %0000101
05334  184A             
05335  184A             PLAYER_STATE 
05336  184A  00                    BYTE 0
05337  184B             PLAYER_SUBSTATE 
05338  184B  00                    BYTE 0
05339  184C             
05340  184C             PLAYER_JUMP_POS 
05341  184C  00                    BYTE 0
05342  184D             
05343  184D             PLAYER_JUMP_TABLE 
05344  184D  08 07 05              BYTE 8,7,5,3,2,1,1,1,0,0
05345  1857             
05346  1857  00         PLAYER_TIMER BYTE 0
05347  1858  00         PLAYER_SPEED BYTE 0
05348  1859             
05349  1859  00         WATERSPEED BYTE 0
05350  185A             ;===============================================================================
05351  185A             ; PLAYER.ASM  - PLAYER LOGIC
05352  185A             ; PETER 'SIG' HEWETT - RETROROMICON 2017; PLAYER.ASM  - PLAYER LOGIC
05353  185A             ;===============================================================================
05354  185A             ;
05355  185A             ; HANDLING PLAYER AND PLAYER CONTROL LOGIC
05356  185A             ;-------------------------------------------------------------------------------
05357  185A             ; SET SPRITE COLORS/MULITCOLORS
05358  185A             ;-------------------------------------------------------------------------------
05359  185A             
05360  185A             ENEMYSETUP 
05361  185A  A9 FF                 LDA #%11111111                          ; TURN ON MULTICOLOR FOR SPRITES 0 AND 1
05362  185C  8D 1C D0              STA VIC_SPRITE_MULTICOLOR               ; ALSO TURN ALL OTHERS TO SINGLE COLOR
05363  185F             
05364  185F  A9 00                 LDA #COLOR_BLACK
05365  1861  8D 25 D0              STA VIC_SPRITE_MULTICOLOR_1             ; SET SPRITE SHARED MULTICOLOR 1 TO BROWN
05366  1864  A9 0A                 LDA #COLOR_LTRED
05367  1866  8D 26 D0              STA VIC_SPRITE_MULTICOLOR_2             ; SET SPRITE SHARED MULTICOLOR 2 TO 'PINK'
05368  1869             
05369  1869  A9 05                 LDA #COLOR_GREEN
05370  186B  8D 29 D0              STA VIC_SPRITE_COLOR + 2                ; SET SPRITE 0 COLOR TO YELLOW
05371  186E  A9 06                 LDA #COLOR_BLUE
05372  1870  8D 2A D0              STA VIC_SPRITE_COLOR + 3                ; SET SPRITE 1 ORANGE (BKGROUND SPRITE)
05373  1873             
05374  1873             
05375  1873  A9 01                 LDA #1
05376  1875  9D 5A 35              STA SPRITE_IS_ACTIVE,X
05377  1878  E8                    INX
05378  1879  9D 5A 35              STA SPRITE_IS_ACTIVE,X
05379  187C             
05380  187C             ;------------------------------------------------------------------------------
05381  187C             ; WE NOW USE A SYSTEM THAT TRACKS THE SPRITE POSITION IN CHARACTER COORDS ON
05382  187C             ; THE SCREEN, SO TO AVOID COSTLY CALCULATIONS EVERY FRAME, WE SET THE SPRITE
05383  187C             ; TO A CHARACTER BORDER INTIALLY AND TRACK ALL MOVEMENT FROM THERE. THAT WAY
05384  187C             ; WE NEED ONLY DO THIS SET OF CALCULATIONS ONCE IN THE LIFETIME OF THE PLAYER.
05385  187C             ;
05386  187C             ; TO INITALLY PLACE THE SPRITE, WE USE 'SPRITETOCHARPOS'
05387  187C             ;------------------------------------------------------------------------------
05388  187C             ; SET SPRITE IMAGES.  THE SPRITES FROM THE MLP SPELUNKER DEMO USED 2 SPRITES
05389  187C             ; OVERLAPPED SO THEY COULD USE AN EXTRA COLOR.  SO OUR MAIN PLAYER SPRITE
05390  187C             ; USES 2 SPRITES (0 AND 1).  THE FIRST WALKING FRAME IMAGE 1, AND IT'S
05391  187C             ; BACKGROUND SPRITE IS IMAGE 8.  WE USE THE SETSPRITEIMAGE SUBROUTINE AS IT
05392  187C             ; WILL UPDATE THE POINTERS FOR BOTH SCREEN1 AND SCREEN2 FOR US.
05393  187C             ;---------------------------------------------------------------------------
05394  187C  A9 00                 LDA #0
05395  187E  8D 7A 35              STA SPRITE_DELTA_TRIM_X
05396  1881             
05397  1881             
05398  1881             
05399  1881             ;===============================================================================
05400  1881             ; UPDATE PLAYER
05401  1881             ;-------------------------------------------------------------------------------
05402  1881             ; UPDATE THE PLAYER. JOYSTICK CONTROLS ARE UPDATED VIA INTERRUPT SO WE READ THE
05403  1881             ; VALUES FROM JOY_X AND JOY_Y
05404  1881             ;-------------------------------------------------------------------------------
05405  1881             
05406  1881             
05407  1881             ENEMY_RIGHT_CAP = 50                      ; SPRITE MOVEMENT CAPS - AT THIS POINT WE DON'T
05408  1881             ENEMY_LEFT_CAP = $03                      ; MOVE THE SPRITE, WE SCROLL THE SCREEN
05409  1881             ENEMY_UP_CAP = $04
05410  1881             ENEMY_DOWN_CAP = $0F
05411  1881             
05412  1881             UPDATEENEMY 
05413  1881                        ; ONLY UPDATE THE PLAYER IF IT'S ACTIVE
05414  1881  AD 5A 35              LDA SPRITE_IS_ACTIVE              ; CHECK AGAINST SPRITE #0 - IS IT ACTIVE?
05415  1884  D0 01                 BNE @UPDATE
05416  1886  60                    RTS
05417  1887             @UPDATE
05418  1887  A2 02                 LDX #2
05419  1889  20 50 34              JSR ANIMATESPRITE                 ; DISPLAY ANIMATION TO SCREEN
05420  188C  20 A9 1A              JSR UPDATEENEMYSTATE              ; UPDATE PLAYER BY STATE
05421  188F  60                    RTS
05422  1890             
05423  1890             
05424  1890             
05425  1890             ;===============================================================================
05426  1890             ; JOYSTICK / PLAYER MOVE
05427  1890             ;===============================================================================
05428  1890             ; THE OLD SYSTEM OF JOYSTICK MOVEMENT WAS GOING TO BECOME VERY UNWEILDY VERY FAST
05429  1890             ; AND NOT BE VERY
05430  1890             ; GOOD FOR EXPANDING WHAT THE PLAYER CAN DO. I'M TRYING A NEW SYSTEM WHERE THE
05431  1890             ; ROUTINES ARE BROKEN
05432  1890             ; DOWN AND INPUT IS CHECKED IN INDIVIDUAL STATES FOR WHAT THE PLAYER CAN DO AT
05433  1890             ; ANY GIVEN TIME.
05434  1890             ; THE MOVEMENT ROUTINES WILL THEN BE BROKEN DOWN AND CALLED AS NEEDED BY THE
05435  1890             ; STATES.
05436  1890             ; SINCE THE OLD SYSTEM DIDN'T ACTUALLY READ THE JOYSTICK OR SCROLL THE SCREEN
05437  1890             ; (IT READ / SET
05438  1890             ; VARIABLES BY ROUTINES THAT DO) - THIS SHOULD BE FAIRLY WORKABLE.
05439  1890             ;-------------------------------------------------------------------------------
05440  1890             
05441  1890             ;===============================================================================
05442  1890             ; JOYSTICK READY
05443  1890             ;-------------------------------------------------------------------------------
05444  1890             ; THERE ARE TIMES ATM WHEN WE HAVE TO IGNORE JOYSTICK INPUT SO THE SCROLLING CAN
05445  1890             ; 'CATCH UP' AFTER
05446  1890             ; MOVEMENT STOPS. USUALLY FOR A COUPLE OF FRAMES.
05447  1890             ;
05448  1890             ; RETURNS A :  0 = READY   1 = NOT READY
05449  1890             ;
05450  1890             ; MODIFIES A
05451  1890             ;-------------------------------------------------------------------------------
05452  1890             ;===============================================================================
05453  1890             ; MOVE ENEMY RIGHT
05454  1890             ;===============================================================================
05455  1890             ; MOVE THE PLAYER ONE PIXEL TO THE RIGHT IF POSSIBLE, TAKING INTO ACCOUNT
05456  1890             ; SCROLLING, MAP LIMITS
05457  1890             ; AND COLLISION DETECTION AGAINST THE SCREEN
05458  1890             ;
05459  1890             ; RETURNS A: ANY BLOCKING OR SPECIAL CHARACTER TO THE RIGHT, OR 0 IF CLEAR
05460  1890             ;
05461  1890             ;-------------------------------------------------------------------------------
05462  1890             
05463  1890             MOVEENEMYRIGHT 
05464  1890  A9 01                 LDA #1
05465  1892  8D 92 1F              STA PLAYER_DIRECTION
05466  1895  A9 00                 LDA #0
05467  1897  8D 3D 32              STA SCROLL_FIX_SKIP
05468  189A                        ;------------------------------------------ CHECK RIGHT MOVEMENT CAP
05469  189A             
05470  189A  A2 02                 LDX #2
05471  189C  BD 62 35              LDA SPRITE_POS_X,X         ; LOAD THE SPRITE CHAR X POSITION
05472  189F  A0 01                 LDY #1
05473  18A1  18                    CLC
05474  18A2  6D D7 35              ADC ENEMY_DISTANCE
05475  18A5  A0 01                 LDY #1
05476  18A7  D9 62 35              CMP SPRITE_POS_X,Y     ; CHECK AGAINST THE RIGHT EDGE OF THE SCREEN
05477  18AA  90 18                 BCC @RIGHTMOVE                  ; SPRITE X IS < 35
05478  18AC             
05479  18AC             @CONTRIGHTCHECK 
05480  18AC  A5 30                 LDA MAP_X_POS                   ; LOAD THE CURRENT MAP X POSITION
05481  18AE  C9 64                 CMP #100                         ; MAP = 64 TILES WIDE, SCREEN = 10 TILES WIDE
05482  18B0  D0 0C                 BNE @VERIFYRIGHTPOSITION
05483  18B2  A5 32                 LDA MAP_X_DELTA                 ; EACH TILE IS 4 CHARACTERS WIDE (0-3)
05484  18B4  C9 01                 CMP #1                          ; IF WE HIT THIS LIMIT WE DON'T SCROLL (OR MOVE)
05485  18B6  D0 06                 BNE @VERIFYRIGHTPOSITION
05486  18B8                        ;AT THIS POINT WE WILL REVERT TO MOVE
05487  18B8  A9 01                 LDA #1
05488  18BA  8D 3D 32              STA SCROLL_FIX_SKIP
05489  18BD  60                    RTS
05490  18BE             
05491  18BE             @VERIFYRIGHTPOSITION 
05492  18BE  A9 01                 LDA #1                          ; 1 HERE WOULD SET HIM IN MIDDLE
05493  18C0  8D D3 35              STA ACTIVETIMER                 ; BECAUSE 53264 BIT IS SET
05494  18C3  60                    RTS
05495  18C4             
05496  18C4             ;===============================================================================
05497  18C4             ; IF ENEMY TOUCHES A POLE BELOW FEET THEN ENEMY SPRITE
05498  18C4             ; CANNOT MOVE RIGHT ONTO THE LADDER.
05499  18C4             ;===============================================================================
05500  18C4             @RIGHTMOVE 
05501  18C4  A2 02                 LDX #2
05502  18C6  20 15 0A              JSR CHECKBLOCKUNDER        ;WORKS GOOD
05503  18C9  AD C2 0A              LDA COLLIDER_ATTR
05504  18CC  C9 30                 CMP #COLL_POLE
05505  18CE  F0 28                 BEQ @ENEMYMOVESDOWNPOLE
05506  18D0             
05507  18D0             ;===============================================================================
05508  18D0             ; IF ENEMY WAS HIT, SPRITE DOESN'T MOVE RIGHT
05509  18D0             ;===============================================================================
05510  18D0  AD D8 35              LDA ENEMY_HIT
05511  18D3  D0 15                 BNE @RIGHTENEMYISDOWN
05512  18D5             
05513  18D5             ;; HOW FAR WILL SPRITE MOVE WITHIN TIMER?
05514  18D5  20 F0 1B              JSR ENEMYFIRERIGHTTIMER
05515  18D8             
05516  18D8             ;; DON'T MOVE ENEMY TO RIGHT UNTIL FIRE_RIGHT=0
05517  18D8  AD 8E 1F              LDA FIRE_RIGHT
05518  18DB  D0 1A                 BNE @RIGHTDONE
05519  18DD             
05520  18DD  A2 02                 LDX #2
05521  18DF  20 E9 33              JSR MOVESPRITERIGHT             ; MOVE SPRITES ONE PIXEL RIGHT
05522  18E2  A2 03                 LDX #3
05523  18E4  20 E9 33              JSR MOVESPRITERIGHT
05524  18E7             
05525  18E7  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
05526  18E9  60                    RTS
05527  18EA             
05528  18EA             @RIGHTENEMYISDOWN 
05529  18EA  A9 00                 LDA #0
05530  18EC  A2 02                 LDX #2
05531  18EE  9D 62 35              STA SPRITE_POS_X,X
05532  18F1  A2 03                 LDX #3
05533  18F3  9D 62 35              STA SPRITE_POS_X,X
05534  18F6  60                    RTS
05535  18F7             
05536  18F7             @RIGHTDONE 
05537  18F7  60                    RTS
05538  18F8             
05539  18F8             @ENEMYMOVESDOWNPOLE 
05540  18F8  60                    RTS
05541  18F9             
05542  18F9             
05543  18F9             
05544  18F9             ;===============================================================================
05545  18F9             ; MOVE ENEMY LEFT
05546  18F9             ;===============================================================================
05547  18F9             ; MOVE THE PLAYER ONE PIXEL TO THE LEFT IF POSSIBLE, TAKING INTO ACCOUNT
05548  18F9             ; SCROLLING, MAP LIMITS
05549  18F9             ; AND COLLISION DETECTION AGAINST THE SCREEN
05550  18F9             ;
05551  18F9             ; RETURNS A: ANY BLOCKING OR SPECIAL CHARACTER TO THE RIGHT, OR 0 IF CLEAR
05552  18F9             ;-------------------------------------------------------------------------------
05553  18F9             
05554  18F9             MOVEENEMYLEFT 
05555  18F9  A9 02                 LDA #2
05556  18FB  8D 92 1F              STA PLAYER_DIRECTION
05557  18FE  A9 00                 LDA #0                          ; MAKE SURE SCROLL 'FIX' IS ON
05558  1900  8D 3D 32              STA SCROLL_FIX_SKIP
05559  1903             
05560  1903             ;================================================================
05561  1903             ; READ ENEMY SPRITE(HEAD) - SBC #20
05562  1903             ; IF ENEMY SPRITE(HEAD) > PLAYER(1) GOTO @LEFTMOVE
05563  1903             
05564  1903             ; SO IF THE ENEMY SPRITE IS STANDING BEYOND THE PLAYER SPRITE
05565  1903             ; THEN MOVE THE ENEMY TO THE LEFT TOWARD THE PLAYER.
05566  1903             
05567  1903             ; IF SPRITE_POS_X,(2) > SPRITE_POS_X,Y(1)
05568  1903             
05569  1903  A2 02                 LDX #2
05570  1905  BD 62 35              LDA SPRITE_POS_X,X         ; LOAD THE SPRITE CHAR X POSITION
05571  1908  A0 01                 LDY #1
05572  190A  38                    SEC
05573  190B  ED D7 35              SBC ENEMY_DISTANCE
05574  190E  A0 01                 LDY #1
05575  1910  D9 62 35              CMP SPRITE_POS_X,Y     ; CHECK AGAINST THE RIGHT EDGE OF THE SCREEN
05576  1913  B0 0F                 BCS @LEFTMOVE                  ; SPRITE X IS < 35
05577  1915             
05578  1915             @CONTLEFTCHECK 
05579  1915  A5 30                 LDA MAP_X_POS                   ; CHECK FOR MAP POS X = 0
05580  1917  D0 05                 BNE @VERIFYLEFTPOSITION
05581  1919  A5 32                 LDA MAP_X_DELTA                 ; CHECK FOR MAP DELTA = 0
05582  191B  D0 01                 BNE @VERIFYLEFTPOSITION
05583  191D  60                    RTS
05584  191E             
05585  191E             ; SPRITE IS NOW AT THE FAR LEFT HAND CORNER
05586  191E             @VERIFYLEFTPOSITION 
05587  191E  A9 01                 LDA #1
05588  1920  8D D3 35              STA ACTIVETIMER
05589  1923  60                    RTS
05590  1924             
05591  1924             ;===============================================================================
05592  1924             ; IF ENEMY TOUCHES A POLE BELOW FEET THEN ENEMY SPRITE
05593  1924             ; CANNOT MOVE LEFT ONTO THE LADDER.
05594  1924             ;===============================================================================
05595  1924             @LEFTMOVE  
05596  1924  A2 02                 LDX #2
05597  1926  20 15 0A              JSR CHECKBLOCKUNDER             ;WORKS GOOD
05598  1929  AD C2 0A              LDA COLLIDER_ATTR
05599  192C  C9 30                 CMP #COLL_POLE
05600  192E  F0 2D                 BEQ @MOVEDOWNPOLE
05601  1930             
05602  1930             ;===============================================================================
05603  1930             ; IF ENEMY WAS HIT, SPRITE DOESN'T MOVE LEFT
05604  1930             ;===============================================================================
05605  1930  AD D8 35              LDA ENEMY_HIT
05606  1933  D0 15                 BNE @LEFTENEMYISDOWN
05607  1935  20 F0 1B              JSR ENEMYFIRERIGHTTIMER
05608  1938             
05609  1938  AD 8F 1F              LDA FIRE_LEFT
05610  193B  D0 1F                 BNE @LEFTDONE
05611  193D             
05612  193D  A2 02                 LDX #2
05613  193F  20 B7 33              JSR MOVESPRITELEFT
05614  1942  A2 03                 LDX #3
05615  1944  20 B7 33              JSR MOVESPRITELEFT
05616  1947             
05617  1947  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
05618  1949  60                    RTS
05619  194A             
05620  194A             @LEFTENEMYISDOWN 
05621  194A  A9 32                 LDA #50
05622  194C  A2 02                 LDX #2
05623  194E  9D 62 35              STA SPRITE_POS_X,X
05624  1951  A2 03                 LDX #3
05625  1953  9D 62 35              STA SPRITE_POS_X,X
05626  1956  A9 00                 LDA #0
05627  1958  8D 1E D0              STA 53278
05628  195B  60                    RTS
05629  195C             
05630  195C             ; SPRITE HIT A TILE (OTHER THAN THE FLOOR)
05631  195C             @LEFTDONE
05632  195C  60                    RTS
05633  195D             
05634  195D             @MOVEDOWNPOLE 
05635  195D  60                    RTS
05636  195E             
05637  195E             
05638  195E             ;===============================================================================
05639  195E             ; MOVE ENEMY DOWN
05640  195E             ;===============================================================================
05641  195E             ; MOVE THE PLAYER ONE PIXEL DOWN IF POSSIBLE, TAKING INTO ACCOUNT SCROLLING,
05642  195E             ; MAP LIMITS AND COLLISION DETECTION AGAINST THE SCREEN
05643  195E             ;
05644  195E             ; RETURNS A: ANY BLOCKING OR SPECIAL CHARACTER BELOW, OR 0 IF CLEAR
05645  195E             ;
05646  195E             ; MODIFIES X
05647  195E             ;-------------------------------------------------------------------------------
05648  195E             
05649  195E             MOVEENEMYDOWN 
05650  195E  BD 93 35              LDA SPRITE_CHAR_POS_Y,X
05651  1961  C9 0F                 CMP #ENEMY_DOWN_CAP
05652  1963  90 2A                 BCC @DOWNMOVE
05653  1965             
05654  1965  A5 35                 LDA ENMAP_Y_POS
05655  1967  C9 1B                 CMP #$1B
05656  1969  D0 07                 BNE @DOWNSCROLL
05657  196B  A5 37                 LDA ENMAP_Y_DELTA
05658  196D  C9 02                 CMP #02
05659  196F  90 01                 BCC @DOWNSCROLL
05660  1971  60                    RTS
05661  1972             
05662  1972             @DOWNSCROLL 
05663  1972  A2 02                 LDX #2                          ; CHECK SPRITE #2
05664  1974  20 4B 37              JSR ENEMYCHECKMOVEDOWN          ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
05665  1977  F0 01                 BEQ @SCROLL
05666  1979  60                    RTS                             ; RETURN WITH CONTENTS OF COLLISON ROUTINE
05667  197A             
05668  197A             @SCROLL
05669  197A  A5 37                 LDA ENMAP_Y_DELTA                 ; INCREMENT THE MAP_Y_DELTA
05670  197C  18                    CLC
05671  197D  69 01                 ADC #1
05672  197F  29 03                 AND #%0011                      ; MASK TO A VALUE BETWEEN 0-3
05673  1981  85 37                 STA ENMAP_Y_DELTA
05674  1983             
05675  1983  C9 00                 CMP #0                          ; CHECK FOR CROSSOVER TO A NEW TILE
05676  1985  F0 01                 BEQ @NEWTILE
05677  1987  60                    RTS
05678  1988             @NEWTILE
05679  1988  A5 31                 LDA MAP_Y_POS
05680  198A  85 35                 STA ENMAP_Y_POS
05681  198C  E6 35                 INC ENMAP_Y_POS                   ; INCREMENT MAP Y POS ON A NEW TILE
05682  198E  60                    RTS
05683  198F             
05684  198F             @DOWNMOVE
05685  198F  A9 01                 LDA #1
05686  1991  8D 89 1F              STA ENEMYDOWNCAP
05687  1994  A2 02                 LDX #2                          ; CHECK SPRITE #2
05688  1996  20 4B 37              JSR ENEMYCHECKMOVEDOWN          ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
05689  1999  D0 0C                 BNE @DOWNDONE                   ; RETUN WITH CONTENTS OF COLLISION CODE
05690  199B             
05691  199B  A2 02                 LDX #2                          ; = 0 SO WE CAN MOVE THE SPRITE DOWN
05692  199D  20 30 34              JSR MOVESPRITEDOWN
05693  19A0  A2 03                 LDX #3
05694  19A2  20 30 34              JSR MOVESPRITEDOWN
05695  19A5  A9 00                 LDA #0                          ; RETURN WITH CLEAR CODE
05696  19A7             @DOWNDONE
05697  19A7  60                    RTS
05698  19A8             
05699  19A8             @MOVEDOWNPOLE 
05700  19A8  60                    RTS
05701  19A9  A9 06                 LDA #ENEMY_STATE_WALK_D
05702  19AB  20 7A 1A              JSR CHANGEENEMYSTATE
05703  19AE  20 EB 1C              JSR ENEMYSTATEWALKDOWN
05704  19B1  60                    RTS
05705  19B2             
05706  19B2             
05707  19B2             
05708  19B2             ;===============================================================================
05709  19B2             ; MOVE PLAYER RIGHT
05710  19B2             ;===============================================================================
05711  19B2             ; MOVE THE PLAYER ONE PIXEL UP IF POSSIBLE, TAKING INTO ACCOUNT SCROLLING,
05712  19B2             ; MAP LIMITS AND COLLISION DETECTION AGAINST THE SCREEN
05713  19B2             ;
05714  19B2             ; RETURNS A: ANY BLOCKING OR SPECIAL CHARACTER BELOW, OR 0 IF CLEAR
05715  19B2             ;-------------------------------------------------------------------------------
05716  19B2             
05717  19B2             MOVEENEMYUP 
05718  19B2  38                    SEC
05719  19B3  AD 0A 36              LDA ENEMY_SPRITE_CHAR_POS_Y
05720  19B6  C9 04                 CMP #ENEMY_UP_CAP
05721  19B8  B0 1B                 BCS @UPMOVE
05722  19BA             
05723  19BA  A5 31                 LDA MAP_Y_POS
05724  19BC  D0 08                 BNE @UPSCROLL
05725  19BE  18                    CLC
05726  19BF  A5 33                 LDA MAP_Y_DELTA
05727  19C1  C9 01                 CMP #1
05728  19C3  B0 01                 BCS @UPSCROLL
05729  19C5  60                    RTS
05730  19C6             
05731  19C6             @UPSCROLL
05732  19C6  A2 02                 LDX #2
05733  19C8  20 97 37              JSR ENEMYCHECKMOVEUP
05734  19CB  F0 01                 BEQ @SCROLL
05735  19CD  60                    RTS
05736  19CE             
05737  19CE             @SCROLL
05738  19CE  A9 03                 LDA #SCROLL_UP
05739  19D0  85 2C                 STA SCROLL_DIRECTION
05740  19D2  85 2D                 STA SCROLL_MOVING
05741  19D4  60                    RTS
05742  19D5             
05743  19D5             @UPMOVE
05744  19D5  A2 02                 LDX #2
05745  19D7  20 97 37              JSR ENEMYCHECKMOVEUP
05746  19DA  D0 0A                 BNE @UPDONE
05747  19DC             
05748  19DC  A2 02                 LDX #2
05749  19DE  20 15 34              JSR MOVESPRITEUP
05750  19E1  A2 03                 LDX #3
05751  19E3  20 15 34              JSR MOVESPRITEUP
05752  19E6             @UPDONE
05753  19E6  60                    RTS
05754  19E7             
05755  19E7             
05756  19E7             
05757  19E7             
05758  19E7             MOVEBULLETRIGHT 
05759  19E7  A2 02                 LDX #2
05760  19E9  A0 05                 LDY #5
05761  19EB  BD 83 35              LDA SPRITE_POS_Y,X         ; GET ENEMY'S Y POSITION
05762  19EE  99 62 35              STA SPRITE_POS_X,Y         ; SAVE IN BULLET Y POSITION
05763  19F1             
05764  19F1  A2 05                 LDX #5
05765  19F3  BD 62 35              LDA SPRITE_POS_X,X         ; LOAD THE BULLET'S X POSITION
05766  19F6  A0 01                 LDY #1
05767  19F8             ;        CLC
05768  19F8             ;        ADC ENEMY_DISTANCE
05769  19F8  C9 32                 CMP #50     ; CHECK AGAINST THE RIGHT EDGE OF THE SCREEN
05770  19FA  90 0B                 BCC @MOVEBULLETRIGHT                  ; SPRITE X IS < 35
05771  19FC             
05772  19FC             ; BULLET HAS TRAVELED ACROSS THE SCREEN
05773  19FC  A2 05                 LDX #5
05774  19FE  A0 02                 LDY #2
05775  1A00  B9 62 35              LDA SPRITE_POS_X,Y         ; GET ENEMY SPRITE'S X POSITION
05776  1A03  9D 62 35              STA SPRITE_POS_X,X         ; SAVE IN BULLET X LOCATION
05777  1A06  60                    RTS
05778  1A07             
05779  1A07             ;===============================================================================
05780  1A07             ; IF ENEMY TOUCHES A POLE BELOW FEET THEN ENEMY SPRITE
05781  1A07             ; CANNOT MOVE RIGHT ONTO THE LADDER.
05782  1A07             ;===============================================================================
05783  1A07             @MOVEBULLETRIGHT 
05784  1A07             
05785  1A07             ;===============================================================================
05786  1A07             ; IF ENEMY WAS HIT, SPRITE DOESN'T MOVE RIGHT
05787  1A07             ;===============================================================================
05788  1A07  A2 05                 LDX #5
05789  1A09  20 E9 33              JSR MOVESPRITERIGHT             ; MOVE SPRITES ONE PIXEL RIGHT
05790  1A0C             
05791  1A0C  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
05792  1A0E  60                    RTS
05793  1A0F             
05794  1A0F             
05795  1A0F             
05796  1A0F             
05797  1A0F             MOVEBULLETLEFT 
05798  1A0F  A2 02                 LDX #2
05799  1A11  A0 04                 LDY #4
05800  1A13  BD 83 35              LDA SPRITE_POS_Y,X         ; GET ENEMY'S Y POSITION
05801  1A16  99 62 35              STA SPRITE_POS_X,Y         ; SAVE IN BULLET Y POSITION
05802  1A19             
05803  1A19  A2 04                 LDX #4
05804  1A1B  BD 62 35              LDA SPRITE_POS_X,X         ; LOAD THE BULLET'S X POSITION
05805  1A1E  A0 01                 LDY #1
05806  1A20             ;        CLC
05807  1A20             ;        ADC ENEMY_DISTANCE
05808  1A20  C9 01                 CMP #1     ; CHECK AGAINST THE RIGHT EDGE OF THE SCREEN
05809  1A22  B0 0B                 BCS @MOVEBULLETLEFT                  ; SPRITE X IS < 35
05810  1A24             
05811  1A24             ; BULLET HAS TRAVELED ACROSS THE SCREEN
05812  1A24  A2 04                 LDX #4
05813  1A26  A0 02                 LDY #2
05814  1A28  B9 62 35              LDA SPRITE_POS_X,Y         ; GET ENEMY SPRITE'S X POSITION
05815  1A2B  9D 62 35              STA SPRITE_POS_X,X         ; SAVE IN BULLET X LOCATION
05816  1A2E  60                    RTS
05817  1A2F             
05818  1A2F             ;===============================================================================
05819  1A2F             ; IF ENEMY TOUCHES A POLE BELOW FEET THEN ENEMY SPRITE
05820  1A2F             ; CANNOT MOVE RIGHT ONTO THE LADDER.
05821  1A2F             ;===============================================================================
05822  1A2F             @MOVEBULLETLEFT 
05823  1A2F             ;===============================================================================
05824  1A2F             ; IF ENEMY WAS HIT, SPRITE DOESN'T MOVE RIGHT
05825  1A2F             ;===============================================================================
05826  1A2F  A2 05                 LDX #5
05827  1A31  20 B7 33              JSR MOVESPRITELEFT             ; MOVE SPRITES ONE PIXEL RIGHT
05828  1A34             
05829  1A34  A9 00                 LDA #0                          ; MOVE CODE 'CLEAR'
05830  1A36  60                    RTS
05831  1A37             
05832  1A37             
05833  1A37             
05834  1A37             ;===============================================================================
05835  1A37             ; DISABLE SPRITE
05836  1A37             ;===============================================================================
05837  1A37             DISABLEENEMYSPRITE 
05838  1A37  AD 1B D0              LDA $D01B               ; 53275
05839  1A3A  29 20                 AND #32
05840  1A3C  8D 1B D0              STA $D01B
05841  1A3F  60                    RTS
05842  1A40             
05843  1A40             ;-------------------------------------------------------------------------------
05844  1A40             ;===============================================================================
05845  1A40             ; ENEMY STATES
05846  1A40             ;===============================================================================
05847  1A40             ; PLAYER STATES ARE INCREMENTED BY 2 AS THEY ARE INDEXES TO LOOK UP THE ADDRESS
05848  1A40             ; OF THE STATE CODE ON THE PLAYER_STATE_JUMPTABLE.
05849  1A40             ; AN ADDRESS IS 2 BYTES (1 WORD) EGRO THE INDEX MUST INCREASE BY 2 BYTES.
05850  1A40             ;-------------------------------------------------------------------------------
05851  1A40             ENEMY_STATE_IDLE = 0     ; STANDING STILL - AWAITING INPUT
05852  1A40             ENEMY_STATE_WALK_R = 2     ; WALKING RIGHT
05853  1A40             ENEMY_STATE_WALK_L = 4     ; WALKING LEFT
05854  1A40             ENEMY_STATE_WALK_D = 6     ; WALKING DOWN
05855  1A40             ENEMY_STATE_ROPE = 8    ; CLIMB ROPE
05856  1A40             ENEMY_STATE_JUMP = 10    ; JUMPING
05857  1A40             ENEMY_STATE_PUNCH_R = 12    ; PUNCH RIGHT
05858  1A40             ENEMY_STATE_PUNCH_L = 14    ; PUNCH LEFT
05859  1A40             ENEMY_STATE_KICK_R = 16    ; KICK RIGHT
05860  1A40             ENEMY_STATE_KICK_L = 18    ; KICK LEFT
05861  1A40             ENEMY_STATE_ATTACK_RIGHT = 20  ; ATTACK RIGHT
05862  1A40             ENEMY_STATE_ATTACK_LEFT = 22   ; ATTACK RIGHT
05863  1A40             ENEMY_STATE_RIGHT_DEAD = 24    ; RIGHT ENEMY DEAD
05864  1A40             ENEMY_STATE_LEFT_DEAD =  26    ; LEFT ENEMY DEAD
05865  1A40             ENEMY_STATE_FIRING_RIGHT =  28 ; ENEMY FIRING TO RIGHT
05866  1A40             ENEMY_STATE_FIRING_LEFT =  30  ; ENEMY FIRING TO LEFT
05867  1A40             
05868  1A40             ENEMY_SUBSTATE_ENTER = 0     ; WE HAVE JUST ENTERED THIS STATE
05869  1A40             ENEMY_SUBSTATE_RUNNING = 1     ; THIS STATE IS RUNNING NORMALLY
05870  1A40             ENEMY_SUBSTAGE_RUNNING = 1
05871  1A40             
05872  1A40             ENEMY_STATE_JUMPTABLE 
05873  1A40  D2 1B                 WORD ENEMYSTATEIDLE
05874  1A42  96 1B                 WORD ENEMYSTATEWALKR
05875  1A44  6D 1C                 WORD ENEMYSTATEWALKL
05876  1A46  EB 1C                 WORD ENEMYSTATEWALKDOWN
05877  1A48  F3 1D                 WORD ENEMYSTATEROPE
05878  1A4A  5A 1E                 WORD ENEMYSTATEJUMP
05879  1A4C  91 1D                 WORD ENEMYSTATEPUNCHR
05880  1A4E  C3 1D                 WORD ENEMYSTATEPUNCHL
05881  1A50  EC 1E                 WORD ENEMYSTATEKICKR
05882  1A52  17 1F                 WORD ENEMYSTATEKICKL
05883  1A54  13 1D                 WORD ENEMYSTATEATTACKRIGHT
05884  1A56  31 1D                 WORD ENEMYSTATEATTACKLEFT
05885  1A58  4F 1D                 WORD ENEMYSTATERIGHTDEAD
05886  1A5A  70 1D                 WORD ENEMYSTATELEFTDEAD
05887  1A5C  95 1C                 WORD ENEMYSTATEFIRINGRIGHT
05888  1A5E  C1 1C                 WORD ENEMYSTATEFIRINGLEFT
05889  1A60             
05890  1A60             ENEMY_SUBSTAGE_JUMPTABLE 
05891  1A60  D2 1B                 WORD ENEMYSTATEIDLE
05892  1A62  96 1B                 WORD ENEMYSTATEWALKR
05893  1A64  6D 1C                 WORD ENEMYSTATEWALKL
05894  1A66  F3 1D                 WORD ENEMYSTATEROPE
05895  1A68  5A 1E                 WORD ENEMYSTATEJUMP
05896  1A6A  91 1D                 WORD ENEMYSTATEPUNCHR
05897  1A6C  C3 1D                 WORD ENEMYSTATEPUNCHL
05898  1A6E  EC 1E                 WORD ENEMYSTATEKICKR
05899  1A70  17 1F                 WORD ENEMYSTATEKICKL
05900  1A72  13 1D                 WORD ENEMYSTATEATTACKRIGHT
05901  1A74  31 1D                 WORD ENEMYSTATEATTACKLEFT
05902  1A76  4F 1D                 WORD ENEMYSTATERIGHTDEAD
05903  1A78  70 1D                 WORD ENEMYSTATELEFTDEAD
05904  1A7A             
05905  1A7A             ;-------------------------------------------------------------------------------
05906  1A7A             ;===============================================================================
05907  1A7A             ; CHANGE PLAYER STATE
05908  1A7A             ;===============================================================================
05909  1A7A             ; CHANGE A PLAYERS STATE
05910  1A7A             ;
05911  1A7A             ; A = STATE TO CHANGE TO
05912  1A7A             ;
05913  1A7A             ; MODIFIES A,X,ZEROPAGE_POINTER_1
05914  1A7A             
05915  1A7A             ;C64 BRAIN NOTES: PLAYER STATES RECORDED (ANIMATION, IDLE, RUNNING, ETC.).
05916  1A7A             ; DATA IS SAVED TO PLAYER_SUBSTATE
05917  1A7A             ;-------------------------------------------------------------------------------
05918  1A7A             
05919  1A7A             CHANGEENEMYSTATE 
05920  1A7A  AA                    TAX                                            ; TRANSFER A TO X
05921  1A7B  8D 61 1F              STA ENEMY_STATE                                ; STORE THE NEW PLAYER STATE
05922  1A7E  A9 00                 LDA #0                                        ; SET SUBSTATE TO ENTER
05923  1A80  8D 62 1F              STA ENEMY_SUBSTATE
05924  1A83             
05925  1A83  A9 01                 LDA #1
05926  1A85  8D BB 35              STA SPRITE_ANIM_PLAY
05927  1A88             
05928  1A88  BD 40 1A              LDA ENEMY_STATE_JUMPTABLE,X                    ; LOOKUP STATE TO CHANGE TO
05929  1A8B  85 17                 STA ZEROPAGE_POINTER_1                         ; AND STORE IT IN ZEROPAGE_POINTER_1
05930  1A8D             
05931  1A8D  BD 41 1A              LDA ENEMY_STATE_JUMPTABLE + 1,X
05932  1A90  85 18                 STA ZEROPAGE_POINTER_1 + 1
05933  1A92             
05934  1A92  6C 17 00              JMP (ZEROPAGE_POINTER_1)                       ; JUMP TO STATE (TO SETUP)
05935  1A95                        ; NOTE: THIS IS NOT A JSR.
05936  1A95                        ; THE STATE WILL ACT AS AN EXTENSION OF
05937  1A95                        ; THIS ROUTINE THEN RETURN
05938  1A95             
05939  1A95             
05940  1A95             CHANGEENEMYSTAGE 
05941  1A95  8D 61 1F              STA ENEMY_STATE                                ; STORE THE NEW PLAYER STATE
05942  1A98  A9 01                 LDA #ENEMY_SUBSTAGE_RUNNING
05943  1A9A  8D 63 1F              STA ENEMY_SUBSTAGE
05944  1A9D             
05945  1A9D  A9 01                 LDA #1
05946  1A9F  8D BB 35              STA SPRITE_ANIM_PLAY
05947  1AA2  60                    RTS
05948  1AA3             
05949  1AA3             CHANGEENANIMSTATE 
05950  1AA3  A9 00                 LDA #0
05951  1AA5  8D 67 1F              STA ENANIM_STATE
05952  1AA8  60                    RTS
05953  1AA9             
05954  1AA9             ;===============================================================================
05955  1AA9             ; UPDATE ENEMY STATE
05956  1AA9             ;===============================================================================
05957  1AA9             ; UPDATE THE PLAYER BASED ON THEIR STATE
05958  1AA9             ;-------------------------------------------------------------------------------
05959  1AA9             
05960  1AA9             UPDATEENEMYSTATE 
05961  1AA9  AE 61 1F              LDX ENEMY_STATE                        ; LOAD PLAYER STATE
05962  1AAC  BD 40 1A              LDA ENEMY_STATE_JUMPTABLE,X            ; FETCH THE STATE ADDRESS FROM THE JUMP TABLE
05963  1AAF  85 17                 STA ZEROPAGE_POINTER_1                  ; STORE IT IN ZEROPAGE_POINTER_1
05964  1AB1  BD 41 1A              LDA ENEMY_STATE_JUMPTABLE +1,X
05965  1AB4  85 18                 STA ZEROPAGE_POINTER_1 + 1
05966  1AB6  6C 17 00              JMP (ZEROPAGE_POINTER_1)                ; JUMP TO THE RIGHT STATE
05967  1AB9             
05968  1AB9             
05969  1AB9             
05970  1AB9             
05971  1AB9             SETENEMYSTATE 
05972  1AB9  AE 63 1F              LDX ENEMY_SUBSTAGE                      ; LOAD PLAYER STATE
05973  1ABC  BD 60 1A              LDA ENEMY_SUBSTAGE_JUMPTABLE,X          ; FETCH THE STATE ADDRESS FROM THE JUMP TABLE
05974  1ABF  85 17                 STA ZEROPAGE_POINTER_1                  ; STORE IT IN ZEROPAGE_POINTER_1
05975  1AC1  BD 61 1A              LDA ENEMY_SUBSTAGE_JUMPTABLE +1,X
05976  1AC4  85 18                 STA ZEROPAGE_POINTER_1 + 1
05977  1AC6  60                    RTS
05978  1AC7             
05979  1AC7             
05980  1AC7             ;===============================================================================
05981  1AC7             ; RESET ENEMY TO ALIGN WITH PLAYER'S VERTICAL POSITION
05982  1AC7             ;-------------------------------------------------------------------------------
05983  1AC7             ; THIS IS USED WHEN RELOCATING A SPRITE'S POSITION ON ANOTHER SCREEN/LEVEL
05984  1AC7             ;===============================================================================
05985  1AC7             
05986  1AC7             RESETENEMYTOPLAYERVERTICAL 
05987  1AC7  A2 00                 LDX #0
05988  1AC9  BD 83 35              LDA SPRITE_POS_Y,X              ; FIND PLAYER SPRITE Y (HEAD) POS
05989  1ACC  A2 02                 LDX #2
05990  1ACE  9D 83 35              STA SPRITE_POS_Y,X              ; SET ENEMY HEAD(Y) TO PLAYER Y
05991  1AD1  A2 01                 LDX #1
05992  1AD3  BD 83 35              LDA SPRITE_POS_Y,X              ; FIND PLAYER SPRITE Y (BODY) POS
05993  1AD6  A2 03                 LDX #3
05994  1AD8  9D 83 35              STA SPRITE_POS_Y,X              ; SET ENEMY BODY(Y) TO PLAYER Y
05995  1ADB  60                    RTS
05996  1ADC             
05997  1ADC             
05998  1ADC             ;===============================================================================
05999  1ADC             ; CHECK FOR ENEMY COLLISION BETWEEN PLAYER SPRITE
06000  1ADC             ;===============================================================================
06001  1ADC             
06002  1ADC             ENEMYTOPLAYERCOLLISION 
06003  1ADC  A9 00                 LDA #0
06004  1ADE  8D D8 35              STA ENEMY_HIT
06005  1AE1  A2 01                 LDX #1
06006  1AE3  A0 03                 LDY #3
06007  1AE5  BD 62 35              LDA SPRITE_POS_X,X
06008  1AE8  D9 62 35              CMP SPRITE_POS_X,Y
06009  1AEB  D0 06                 BNE @NOENEMYCOLLIS
06010  1AED             
06011  1AED             ; WHEN A ENEMY STRIKES DOWN OUR SPRITE, MAKE SURE THAT THE
06012  1AED             ; SPRITE Y POSITION IS ALWAYS ALIGNED ON THE SAME LEVEL AS
06013  1AED             ; THE ENEMIES.
06014  1AED             
06015  1AED             ;        JSR RESETENEMYTOPLAYERVERTICAL
06016  1AED  A9 01                 LDA #1
06017  1AEF  8D D8 35              STA ENEMY_HIT
06018  1AF2  60                    RTS
06019  1AF3             @NOENEMYCOLLIS 
06020  1AF3  A9 00                 LDA #0
06021  1AF5  8D D8 35              STA ENEMY_HIT
06022  1AF8  60                    RTS
06023  1AF9             
06024  1AF9             
06025  1AF9             ; SID TIMER RANDOM SEED GENERATOR
06026  1AF9             ; USED TO PING WHEN AN ENEMY WILL WALK ONTO THE SCREEN.
06027  1AF9             
06028  1AF9             ;===============================================================================
06029  1AF9             ; ACTIVATE SID RANDOM GENERATOR TIMER
06030  1AF9             ;===============================================================================
06031  1AF9             
06032  1AF9             ENEMYRANDOMTIMER 
06033  1AF9  AD D3 35              LDA ACTIVETIMER
06034  1AFC  D0 01                 BNE @BEGINCOUNT
06035  1AFE             
06036  1AFE             ; ACTIVETIMER=0 MEANS ENEMYVISIBLE STATE IS ON
06037  1AFE  60                    RTS
06038  1AFF             
06039  1AFF             ; IF ACTIVETIMER >0 THEN SPRITES ARE NOT MOVING
06040  1AFF             @BEGINCOUNT 
06041  1AFF  A9 0A                 LDA #10
06042  1B01  8D 0E D4              STA $D40E               ; VOICE 3 FREQUENCY LOW BYTE
06043  1B04  8D 0F D4              STA $D40F               ; VOICE 3 FREQUENCY HIGH BYTE
06044  1B07  A9 80                 LDA #$80                ; NOICE WAVEFORM, GATE BIT OFF
06045  1B09  8D 12 D4              STA $D412               ; VOICE 3 CONTROL REGISTER
06046  1B0C             
06047  1B0C             ; USING A VARIABLE TIMER
06048  1B0C  EE D5 35              INC ENEMYCOUNTDOWN
06049  1B0F  AD D5 35              LDA ENEMYCOUNTDOWN
06050  1B12  C9 1E                 CMP #30
06051  1B14  B0 01                 BCS @ENEMYCDREACHED
06052  1B16  60                    RTS
06053  1B17             
06054  1B17             @ENEMYCDREACHED 
06055  1B17  AD 1B D4              LDA $D41B
06056  1B1A  8D D4 35              STA ENEMYTIMER
06057  1B1D  C9 F0                 CMP #240                ; > 200
06058  1B1F  B0 1A                 BCS @NOTFOUND
06059  1B21  C9 F0                 CMP #240                ; <100
06060  1B23  90 08                 BCC @CHECKBELOW240
06061  1B25  A9 00                 LDA #0
06062  1B27  8D D5 35              STA ENEMYCOUNTDOWN
06063  1B2A  4C 3B 1B              JMP @NOTFOUND
06064  1B2D             
06065  1B2D             ; FUTURE: COULD BE USED TO PURCHASE WEAPONS (AT STORE)
06066  1B2D             ; SWORD <190 = $19
06067  1B2D             ; CLUB < 150 $150
06068  1B2D             ; WHIP <30   = $300
06069  1B2D                        
06070  1B2D             
06071  1B2D             ; LATER ON WE COULD SET <50 = SPRITE ABANDONMENT. MEANING SPRITE LEFT THE
06072  1B2D             ; SCREEN BEFORE DECIDING TO ATTACK.
06073  1B2D             ; <30 = SPRITE IS FRIENDLY, NO ATTACKS - STATIC PEDESTRIAN
06074  1B2D             
06075  1B2D             ; COULD ALSO HAVE A SPRITE ENTER THE SCREEN AND LEAVE QUICKLY BEFORE
06076  1B2D             ; APPROACHING THE PLAYER (MAKES THEM HARDER TO KILL)
06077  1B2D             
06078  1B2D             @CHECKBELOW240 
06079  1B2D  C9 BE                 CMP #190
06080  1B2F  B0 10                 BCS SETENEMYRIGHT       ; <190
06081  1B31             ;        CMP #180
06082  1B31             ;        BCC SETENEMYFIRINGRIGHT
06083  1B31  C9 AA                 CMP #170
06084  1B33  90 17                 BCC SETENEMYLEFT        ; < 100
06085  1B35             ;        CMP #160
06086  1B35             ;        BCC SETENEMYFIRINGLEFT
06087  1B35  A9 00                 LDA #0
06088  1B37  8D D5 35              STA ENEMYCOUNTDOWN
06089  1B3A  60                    RTS
06090  1B3B             
06091  1B3B             @NOTFOUND
06092  1B3B  A9 00                 LDA #ENEMY_STATE_IDLE
06093  1B3D  20 7A 1A              JSR CHANGEENEMYSTATE
06094  1B40             ;        JSR ENEMYSTATEIDLE
06095  1B40  60                    RTS
06096  1B41             
06097  1B41             
06098  1B41             SETENEMYRIGHT 
06099  1B41  A9 00                 LDA #0
06100  1B43  8D D5 35              STA ENEMYCOUNTDOWN
06101  1B46  20 55 1B              JSR ENEMYVISIBLE
06102  1B49  60                    RTS
06103  1B4A             
06104  1B4A             SETENEMYFIRINGRIGHT 
06105  1B4A             ;        JSR ENEMYSTATEFIRINGRIGHT
06106  1B4A  60                    RTS
06107  1B4B             
06108  1B4B             SETENEMYFIRINGLEFT 
06109  1B4B             ;        JSR ENEMYSTATEFIRINGLEFT
06110  1B4B  60                    RTS
06111  1B4C             
06112  1B4C             SETENEMYLEFT 
06113  1B4C  A9 00                 LDA #0
06114  1B4E  8D D5 35              STA ENEMYCOUNTDOWN
06115  1B51  20 55 1B              JSR ENEMYVISIBLE
06116  1B54  60                    RTS
06117  1B55             
06118  1B55             ;===============================================================================
06119  1B55             ; ENEMY CHECK: TO DETERMINE IF A SPAWN OCCURS
06120  1B55             ;-------------------------------------------------------------------------------
06121  1B55             ; IF NO FLOOR EXISTS, CAN'T MOVE ENEMY SPRITE LEFT/RIGHT
06122  1B55             ;===============================================================================
06123  1B55             
06124  1B55             ENEMYVISIBLE 
06125  1B55  A2 03                 LDX #3
06126  1B57  20 E7 37              JSR ENEMYCHECKBLOCKUNDER
06127  1B5A  AD C2 0A              LDA COLLIDER_ATTR
06128  1B5D  C9 10                 CMP #COLL_FLOOR
06129  1B5F  F0 01                 BEQ @BEGINMOVEROUTINE
06130  1B61             
06131  1B61             ;        JSR RESETENEMYTOPLAYERVERTICAL
06132  1B61             ; NO FLOOR WAS FOUND UNDER SPRITE'S FEET, SO WE EXIT.
06133  1B61             @CANTMOVE
06134  1B61  60                    RTS
06135  1B62             
06136  1B62             @BEGINMOVEROUTINE 
06137  1B62  A9 00                 LDA #0
06138  1B64  8D D3 35              STA ACTIVETIMER
06139  1B67  20 6B 1B              JSR ENEMYACTIONSTATE
06140  1B6A  60                    RTS
06141  1B6B             
06142  1B6B             
06143  1B6B             ;===============================================================================
06144  1B6B             ; ENEMY DIRECTION MOVEMENT DETERMINATION
06145  1B6B             ;===============================================================================
06146  1B6B             ; THIS IS USED TO FIRST RESET THE ENEMY TO PLAYER VERTICAL
06147  1B6B             ; POSITION AND THEN SEE WHERE PLAYER IS IN RELATION TO THE
06148  1B6B             ; ENEMY SPRITE AND MOVE TOWARDS THE PLAYER.
06149  1B6B             ;-------------------------------------------------------------------------------
06150  1B6B             ;===============================================================================
06151  1B6B             ; ENEMY ACTION STATE
06152  1B6B             ;===============================================================================
06153  1B6B             
06154  1B6B             ENEMYACTIONSTATE 
06155  1B6B             
06156  1B6B             ; CHECK IF SPRITE IS ON THE FLOOR AT START SO HE WON'T APPEAR IN THE AIR
06157  1B6B             ;        JSR RESETENEMYTOPLAYERVERTICAL
06158  1B6B             
06159  1B6B             ; CHECK DIRECTION ENEMY MOVES BASED ON WHERE PLAYER IS.
06160  1B6B             ; IF ENEMY IS IN FRONT OF PLAYER, ENEMY MOVES LEFT.
06161  1B6B             ; IF ENEMY IS BEHIND PLAYER, ENEMY MOVES RIGHT.
06162  1B6B             
06163  1B6B             ; HOW FAR WILL SPRITE MOVE WITHIN TIMER?
06164  1B6B             ;        JSR ENEMYFIRERIGHTTIMER
06165  1B6B             
06166  1B6B             ; DON'T MOVE ENEMY TO RIGHT UNTIL FIRE_RIGHT=0
06167  1B6B             ;        LDA FIRE_RIGHT
06168  1B6B             ;        BNE @EXITSTAGE
06169  1B6B             
06170  1B6B  AD 8D 1F              LDA ENEMY_BULLETS
06171  1B6E  F0 00                 BEQ @MOVEENSPRITE
06172  1B70                        ;JSR MOVEBULLETRIGHT
06173  1B70             
06174  1B70             @MOVEENSPRITE 
06175  1B70  A2 02                 LDX #2
06176  1B72  A0 01                 LDY #1
06177  1B74  BD 62 35              LDA SPRITE_POS_X,X           ; ENEMY SPRITE X POSITION
06178  1B77             ;        SEC
06179  1B77             ;        SBC ENEMY_DISTANCE
06180  1B77  D9 62 35              CMP SPRITE_POS_X,Y           ; PLAYER SPRITE X POSITION
06181  1B7A  B0 14                 BCS @MOVINGDIRLEFTSPRITE
06182  1B7C             
06183  1B7C  BD 62 35              LDA SPRITE_POS_X,X
06184  1B7F             ;        CLC
06185  1B7F             ;        ADC ENEMY_DISTANCE
06186  1B7F  D9 62 35              CMP SPRITE_POS_X,Y           ; PLAYER SPRITE X POSITION
06187  1B82  90 06                 BCC @MOVINGDIRRIGHTSPRITE
06188  1B84             
06189  1B84             ; GO BACK AND START THE TIMER AGAIN, WHICH DETERMINES WHICH SPRITE
06190  1B84             ; MOVES ON RANDOM.
06191  1B84             @EXITSTAGE 
06192  1B84  A9 01                 LDA #1
06193  1B86  8D D3 35              STA ACTIVETIMER
06194  1B89  60                    RTS
06195  1B8A             
06196  1B8A             @MOVINGDIRRIGHTSPRITE 
06197  1B8A             ; CHECK IF WE ARE COMING FROM THE LEFT SIDE
06198  1B8A  A9 02                 LDA #ENEMY_STATE_WALK_R
06199  1B8C  20 7A 1A              JSR CHANGEENEMYSTATE
06200  1B8F             ;        JSR ENEMYSTATEWALKR
06201  1B8F  60                    RTS
06202  1B90             
06203  1B90             ; WHEN SPRITE CONTACTS A LADDER/POLE HE STARTS MOVING LEFT
06204  1B90             @MOVINGDIRLEFTSPRITE 
06205  1B90  A9 04                 LDA #ENEMY_STATE_WALK_L
06206  1B92  20 7A 1A              JSR CHANGEENEMYSTATE
06207  1B95             ;        JSR ENEMYSTATEWALKL
06208  1B95  60                    RTS
06209  1B96             
06210  1B96             
06211  1B96             
06212  1B96             ;===============================================================================
06213  1B96             ; ENEMY STATE WALK RIGHT
06214  1B96             ;===============================================================================
06215  1B96             
06216  1B96             ENEMYSTATEWALKR 
06217  1B96  A9 01                 LDA #1
06218  1B98  8D BB 35              STA SPRITE_ANIM_PLAY                   ; PAUSE OUR ANIMATION
06219  1B9B             
06220  1B9B  AD 62 1F              LDA ENEMY_SUBSTATE
06221  1B9E  D0 13                 BNE @RUNNING
06222  1BA0             
06223  1BA0  A2 02                 LDX #2                                 ; USE SPRITE NUMBER 2
06224  1BA2  A9 52                 LDA #<ANIM_ENEMY_WALK_R                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06225  1BA4  85 17                 STA ZEROPAGE_POINTER_1
06226  1BA6  A9 36                 LDA #>ANIM_ENEMY_WALK_R
06227  1BA8  85 18                 STA ZEROPAGE_POINTER_1 + 1
06228  1BAA             
06229  1BAA  20 F7 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06230  1BAD  A9 01                 LDA #1                                 ; SET SUBSTATE TO RUNNING
06231  1BAF  8D 62 1F              STA ENEMY_SUBSTATE
06232  1BB2  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06233  1BB3             @RUNNING
06234  1BB3  A2 02                 LDX #2
06235  1BB5  20 90 18              JSR MOVEENEMYRIGHT              ; = 0 SO WE CAN MOVE THE SPRITE DOWN
06236  1BB8  A2 03                 LDX #3
06237  1BBA  20 90 18              JSR MOVEENEMYRIGHT
06238  1BBD  60                    RTS
06239  1BBE             
06240  1BBE             ; ENEMY STATE IDLE
06241  1BBE             ;===============================================================================
06242  1BBE             
06243  1BBE             ENEMYSTATEBULLET 
06244  1BBE  A9 01                 LDA #1
06245  1BC0  8D BB 35              STA SPRITE_ANIM_PLAY                 ; PAUSE OUR ANIMATION
06246  1BC3             
06247  1BC3             ;        LDA ENEMY_SUBSTATE
06248  1BC3             ;        BNE @RUNNING
06249  1BC3             
06250  1BC3  A2 02                 LDX #2                               ; USE SPRITE NUMBER 2
06251  1BC5  A9 7D                 LDA #<ANIM_ENEMY_BULLET                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06252  1BC7  85 17                 STA ZEROPAGE_POINTER_1
06253  1BC9  A9 36                 LDA #>ANIM_ENEMY_BULLET
06254  1BCB  85 18                 STA ZEROPAGE_POINTER_1 + 1
06255  1BCD             
06256  1BCD  20 F7 34              JSR INITSPRITEANIM                   ; INITIALIZE THE ANIMATION
06257  1BD0             ;        LDA #1                               ; SET SUBSTATE TO RUNNING
06258  1BD0             ;        STA ENEMY_SUBSTATE
06259  1BD0  60                    RTS                                  ; WAIT TILL NEXT FRAME TO START
06260  1BD1             @RUNNING
06261  1BD1  60                    RTS
06262  1BD2             
06263  1BD2             ;===============================================================================
06264  1BD2             ; ENEMY STATE IDLE
06265  1BD2             ;===============================================================================
06266  1BD2             
06267  1BD2             ENEMYSTATEIDLE 
06268  1BD2  A9 01                 LDA #1
06269  1BD4  8D BB 35              STA SPRITE_ANIM_PLAY                 ; PAUSE OUR ANIMATION
06270  1BD7             
06271  1BD7  AD 62 1F              LDA ENEMY_SUBSTATE
06272  1BDA  D0 13                 BNE @RUNNING
06273  1BDC             
06274  1BDC  A2 02                 LDX #2                               ; USE SPRITE NUMBER 2
06275  1BDE  A9 4E                 LDA #<ANIM_ENEMY_IDLE                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06276  1BE0  85 17                 STA ZEROPAGE_POINTER_1
06277  1BE2  A9 36                 LDA #>ANIM_ENEMY_IDLE
06278  1BE4  85 18                 STA ZEROPAGE_POINTER_1 + 1
06279  1BE6             
06280  1BE6  20 F7 34              JSR INITSPRITEANIM                   ; INITIALIZE THE ANIMATION
06281  1BE9  A9 01                 LDA #1                               ; SET SUBSTATE TO RUNNING
06282  1BEB  8D 62 1F              STA ENEMY_SUBSTATE
06283  1BEE  60                    RTS                                  ; WAIT TILL NEXT FRAME TO START
06284  1BEF             @RUNNING
06285  1BEF  60                    RTS
06286  1BF0             
06287  1BF0             
06288  1BF0             
06289  1BF0             ;===============================================================================
06290  1BF0             ; ENEMY FIRE RIGHT TIMER
06291  1BF0             ;-------------------------------------------------------------------------------
06292  1BF0             ; THIS IS USED TO CHECK WHEN TO SHOOT AT THE PLAYER
06293  1BF0             ; WILL BE USED LATER TO HAVE AN ENEMY APPROACH THE
06294  1BF0             ; PLAYER, STOP AND SHOOT. MOVE AGAIN, STOP AND SHOOT, AND REPEAT
06295  1BF0             ;===============================================================================
06296  1BF0             
06297  1BF0             ENEMYFIRERIGHTTIMER 
06298  1BF0  A9 0A                 LDA #10
06299  1BF2  8D 0E D4              STA $D40E               ; VOICE 3 FREQUENCY LOW BYTE
06300  1BF5  8D 0F D4              STA $D40F               ; VOICE 3 FREQUENCY HIGH BYTE
06301  1BF8  A9 80                 LDA #$80                ; NOISE WAVEFORM, GATE BIT OFF
06302  1BFA  8D 12 D4              STA $D412               ; VOICE 3 CONTROL REGISTER
06303  1BFD             
06304  1BFD  EE D6 35              INC ENEMYFIRECD
06305  1C00  AD D6 35              LDA ENEMYFIRECD
06306  1C03  C9 50                 CMP #80
06307  1C05  B0 01                 BCS @ENEMYTIMERCOMPLETE
06308  1C07  60                    RTS
06309  1C08             
06310  1C08             @ENEMYTIMERCOMPLETE 
06311  1C08  AD 1B D4              LDA $D41B
06312  1C0B  8D D4 35              STA ENEMYTIMER
06313  1C0E  C9 F0                 CMP #240
06314  1C10  B0 04                 BCS @TIMERNOTFOUND
06315  1C12  C9 96                 CMP #150
06316  1C14  B0 0B                 BCS @WAITTOFIRE
06317  1C16             
06318  1C16             @TIMERNOTFOUND 
06319  1C16  A9 00                 LDA #0
06320  1C18  8D D6 35              STA ENEMYFIRECD
06321  1C1B  A9 03                 LDA #3
06322  1C1D  8D 92 1F              STA PLAYER_DIRECTION
06323  1C20  60                    RTS
06324  1C21             
06325  1C21             ; ALLOWS A DELAY TO WAIT FOR ENEMY FIRE (ENABLING MORE WALKING)
06326  1C21             @WAITTOFIRE 
06327  1C21                        ;JSR MOVEBULLETLEFT
06328  1C21  CE 8D 1F              DEC ENEMY_BULLETS
06329  1C24  AD 8D 1F              LDA ENEMY_BULLETS
06330  1C27  F0 01                 BEQ @READYTOFIRE
06331  1C29  60                    RTS
06332  1C2A             
06333  1C2A             @READYTOFIRE 
06334  1C2A  A9 05                 LDA #5
06335  1C2C  8D 91 1F              STA WAITTOFIRECD
06336  1C2F  8D 8D 1F              STA ENEMY_BULLETS
06337  1C32                        
06338  1C32  AD 90 1F              LDA FIRINGHOLDCD
06339  1C35  D0 1F                 BNE FIRINGHOLDSTATE
06340  1C37             
06341  1C37             ;        LDA #ENEMY_STATE_FIRING_RIGHT
06342  1C37             ;        JSR CHANGEENANIMSTATE
06343  1C37             ;        JSR CHANGEENEMYSTATE
06344  1C37  AD 92 1F              LDA PLAYER_DIRECTION
06345  1C3A  C9 01                 CMP #1
06346  1C3C  D0 0C                 BNE @SHOOTTOLEFT
06347  1C3E             
06348  1C3E             @SHOOTTORIGHT 
06349  1C3E  20 95 1C              JSR ENEMYSTATEFIRINGRIGHT
06350  1C41  A9 01                 LDA #1
06351  1C43  8D 8E 1F              STA FIRE_RIGHT
06352  1C46  20 56 1C              JSR FIRINGHOLDSTATE
06353  1C49  60                    RTS
06354  1C4A             
06355  1C4A             ;@ENEMYFIRINGLEFT
06356  1C4A             @SHOOTTOLEFT 
06357  1C4A             ;        LDA #ENEMY_STATE_FIRING_LEFT
06358  1C4A             ;        JSR CHANGEENANIMSTATE
06359  1C4A             ;        JSR CHANGEENEMYSTATE
06360  1C4A  20 C1 1C              JSR ENEMYSTATEFIRINGLEFT
06361  1C4D  A9 01                 LDA #1
06362  1C4F  8D 8F 1F              STA FIRE_LEFT
06363  1C52  20 56 1C              JSR FIRINGHOLDSTATE
06364  1C55  60                    RTS
06365  1C56             
06366  1C56             FIRINGHOLDSTATE 
06367  1C56  EE 90 1F              INC FIRINGHOLDCD
06368  1C59  AD 90 1F              LDA FIRINGHOLDCD
06369  1C5C  C9 04                 CMP #4
06370  1C5E  B0 01                 BCS @FIREHOLDDONE
06371  1C60  60                    RTS
06372  1C61             
06373  1C61             @FIREHOLDDONE 
06374  1C61  A9 00                 LDA #0
06375  1C63  8D 8E 1F              STA FIRE_RIGHT
06376  1C66  8D 8F 1F              STA FIRE_LEFT
06377  1C69  8D 90 1F              STA FIRINGHOLDCD
06378  1C6C  60                    RTS
06379  1C6D             
06380  1C6D             
06381  1C6D             
06382  1C6D             ;===============================================================================
06383  1C6D             ; ENEMY STATE WALK LEFT
06384  1C6D             ;===============================================================================
06385  1C6D             
06386  1C6D             ENEMYSTATEWALKL 
06387  1C6D  A9 01                 LDA #1
06388  1C6F  8D BB 35              STA SPRITE_ANIM_PLAY                   ; START OUR ANIMATION
06389  1C72             
06390  1C72  AD 62 1F              LDA ENEMY_SUBSTATE
06391  1C75  D0 13                 BNE @RUNNING
06392  1C77             
06393  1C77  A2 02                 LDX #2                                 ; USE SPRITE NUMBER 2
06394  1C79  A9 56                 LDA #<ANIM_ENEMY_WALK_L                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06395  1C7B  85 17                 STA ZEROPAGE_POINTER_1
06396  1C7D  A9 36                 LDA #>ANIM_ENEMY_WALK_L
06397  1C7F  85 18                 STA ZEROPAGE_POINTER_1 + 1
06398  1C81             
06399  1C81  20 F7 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06400  1C84  A9 01                 LDA #1                                 ; SET SUBSTATE TO RUNNING
06401  1C86  8D 62 1F              STA ENEMY_SUBSTATE
06402  1C89  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06403  1C8A             
06404  1C8A             @RUNNING
06405  1C8A  A2 02                 LDX #2
06406  1C8C  20 F9 18              JSR MOVEENEMYLEFT              ; = 0 SO WE CAN MOVE THE SPRITE DOWN
06407  1C8F  A2 03                 LDX #3
06408  1C91  20 F9 18              JSR MOVEENEMYLEFT
06409  1C94  60                    RTS
06410  1C95             
06411  1C95             
06412  1C95             
06413  1C95             ;===============================================================================
06414  1C95             ; ENEMY STATE FIRING RIGHT
06415  1C95             ;===============================================================================
06416  1C95             
06417  1C95             ENEMYSTATEFIRINGRIGHT 
06418  1C95  A9 01                 LDA #1
06419  1C97  8D BB 35              STA SPRITE_ANIM_PLAY                    ; START OUR ANIMATION
06420  1C9A             
06421  1C9A  A2 02                 LDX #2                                  ; USE SPRITE NUMBER 2
06422  1C9C  A9 5F                 LDA #<ANIM_ENEMY_FIRING_RIGHT           ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06423  1C9E  85 17                 STA ZEROPAGE_POINTER_1
06424  1CA0  A9 36                 LDA #>ANIM_ENEMY_FIRING_RIGHT
06425  1CA2  85 18                 STA ZEROPAGE_POINTER_1 + 1
06426  1CA4             
06427  1CA4  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
06428  1CA7  60                    RTS
06429  1CA8             
06430  1CA8             @RUNNING
06431  1CA8  60                    RTS
06432  1CA9             
06433  1CA9  A9 00                 LDA #ENEMY_STATE_IDLE
06434  1CAB  4C CB 11              JMP CHANGEPLAYERSTATE
06435  1CAE             
06436  1CAE  AD 61 3C              LDA JOY_X
06437  1CB1  F0 07                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
06438  1CB3  30 05                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
06439  1CB5  A9 00                 LDA #ENEMY_STATE_IDLE
06440  1CB7  4C CB 11              JMP CHANGEPLAYERSTATE
06441  1CBA             
06442  1CBA             @IDLE
06443  1CBA  60                    RTS
06444  1CBB             
06445  1CBB  A9 00                 LDA #ENEMY_STATE_IDLE
06446  1CBD  4C CB 11              JMP CHANGEPLAYERSTATE
06447  1CC0  60                    RTS
06448  1CC1             
06449  1CC1             
06450  1CC1             
06451  1CC1             ;===============================================================================
06452  1CC1             ; ENEMY STATE FIRING LEFT
06453  1CC1             ;===============================================================================
06454  1CC1             
06455  1CC1             ENEMYSTATEFIRINGLEFT 
06456  1CC1  A9 01                 LDA #1
06457  1CC3  8D BB 35              STA SPRITE_ANIM_PLAY                    ; START OUR ANIMATION
06458  1CC6             
06459  1CC6  A2 02                 LDX #2                                  ; USE SPRITE NUMBER 2
06460  1CC8  A9 63                 LDA #<ANIM_ENEMY_FIRING_LEFT            ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06461  1CCA  85 17                 STA ZEROPAGE_POINTER_1
06462  1CCC  A9 36                 LDA #>ANIM_ENEMY_FIRING_LEFT
06463  1CCE  85 18                 STA ZEROPAGE_POINTER_1 + 1
06464  1CD0             
06465  1CD0  20 F7 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06466  1CD3  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06467  1CD4             
06468  1CD4             @RUNNING
06469  1CD4  AD 61 3C              LDA JOY_X
06470  1CD7  F0 08                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
06471  1CD9  30 06                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
06472  1CDB  60                    RTS
06473  1CDC  A9 00                 LDA #ENEMY_STATE_IDLE
06474  1CDE  4C CB 11              JMP CHANGEPLAYERSTATE
06475  1CE1             
06476  1CE1             @IDLE
06477  1CE1  60                    RTS
06478  1CE2             
06479  1CE2  A9 00                 LDA #ENEMY_STATE_IDLE
06480  1CE4  4C CB 11              JMP CHANGEPLAYERSTATE
06481  1CE7  20 D7 0B              JSR WAITFRAME
06482  1CEA  60                    RTS
06483  1CEB             
06484  1CEB             
06485  1CEB             
06486  1CEB             ;===============================================================================
06487  1CEB             ; ENEMY STATE WALK DOWN
06488  1CEB             ;===============================================================================
06489  1CEB             
06490  1CEB             ENEMYSTATEWALKDOWN 
06491  1CEB  A9 01                 LDA #1
06492  1CED  8D BB 35              STA SPRITE_ANIM_PLAY                   ; START OUR ANIMATION
06493  1CF0             
06494  1CF0  AD 63 1F              LDA ENEMY_SUBSTAGE
06495  1CF3  D0 13                 BNE @RUNNING
06496  1CF5             
06497  1CF5  A2 02                 LDX #2                                 ; USE SPRITE NUMBER 2
06498  1CF7  A9 5A                 LDA #<ANIM_ENEMY_WALK_D                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06499  1CF9  85 17                 STA ZEROPAGE_POINTER_1
06500  1CFB  A9 36                 LDA #>ANIM_ENEMY_WALK_D
06501  1CFD  85 18                 STA ZEROPAGE_POINTER_1 + 1
06502  1CFF             
06503  1CFF  20 F7 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06504  1D02  A9 01                 LDA #ENEMY_SUBSTAGE_RUNNING            ; SET SUBSTATE TO RUNNING
06505  1D04  8D 63 1F              STA ENEMY_SUBSTAGE
06506  1D07  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06507  1D08             
06508  1D08             @RUNNING
06509  1D08  A2 02                 LDX #2
06510  1D0A  20 5E 19              JSR MOVEENEMYDOWN              ; = 0 SO WE CAN MOVE THE SPRITE DOWN
06511  1D0D  A2 03                 LDX #3
06512  1D0F  20 5E 19              JSR MOVEENEMYDOWN
06513  1D12  60                    RTS
06514  1D13             
06515  1D13             
06516  1D13             
06517  1D13             ;===============================================================================
06518  1D13             ; ENEMY STATE ATTACK RIGHT
06519  1D13             ;-------------------------------------------------------------------------------
06520  1D13             ; USED WHEN ENEMY ATTACKS THE PLAYER TO THE RIGHT
06521  1D13             ;===============================================================================
06522  1D13             
06523  1D13             ENEMYSTATEATTACKRIGHT 
06524  1D13  A9 01                 LDA #1
06525  1D15  8D BB 35              STA SPRITE_ANIM_PLAY                    ; PAUSE OUR ANIMATION
06526  1D18             
06527  1D18  AD 62 1F              LDA ENEMY_SUBSTATE
06528  1D1B  D0 13                 BNE @RUNNING
06529  1D1D             
06530  1D1D  A2 02                 LDX #2                                  ; USE SPRITE NUMBER 2
06531  1D1F  A9 67                 LDA #<ANIM_ENEMY_ATTACK_RIGHT           ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06532  1D21  85 17                 STA ZEROPAGE_POINTER_1
06533  1D23  A9 36                 LDA #>ANIM_ENEMY_ATTACK_RIGHT
06534  1D25  85 18                 STA ZEROPAGE_POINTER_1 + 1
06535  1D27             
06536  1D27  20 F7 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06537  1D2A  A9 01                 LDA #1                                 ; SET SUBSTATE TO RUNNING
06538  1D2C  8D 62 1F              STA ENEMY_SUBSTATE
06539  1D2F  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06540  1D30             @RUNNING
06541  1D30  60                    RTS
06542  1D31             
06543  1D31             
06544  1D31             ;===============================================================================
06545  1D31             ; ENEMY STATE ATTACK LEFT
06546  1D31             ;-------------------------------------------------------------------------------
06547  1D31             ;===============================================================================
06548  1D31             
06549  1D31             ENEMYSTATEATTACKLEFT 
06550  1D31  A9 01                 LDA #1
06551  1D33  8D BB 35              STA SPRITE_ANIM_PLAY                   ; PAUSE OUR ANIMATION
06552  1D36             
06553  1D36  AD 62 1F              LDA ENEMY_SUBSTATE
06554  1D39  D0 13                 BNE @RUNNING
06555  1D3B             
06556  1D3B  A2 02                 LDX #2                                 ; USE SPRITE NUMBER 2
06557  1D3D  A9 6B                 LDA #<ANIM_ENEMY_ATTACK_LEFT           ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06558  1D3F  85 17                 STA ZEROPAGE_POINTER_1
06559  1D41  A9 36                 LDA #>ANIM_ENEMY_ATTACK_LEFT
06560  1D43  85 18                 STA ZEROPAGE_POINTER_1 + 1
06561  1D45             
06562  1D45  20 F7 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06563  1D48  A9 01                 LDA #1                                 ; SET SUBSTATE TO RUNNING
06564  1D4A  8D 62 1F              STA ENEMY_SUBSTATE
06565  1D4D  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06566  1D4E             @RUNNING
06567  1D4E  60                    RTS
06568  1D4F             
06569  1D4F             
06570  1D4F             ;===============================================================================
06571  1D4F             ; ENEMY STATE RIGHT DEAD
06572  1D4F             ;===============================================================================
06573  1D4F             
06574  1D4F             ENEMYSTATERIGHTDEAD 
06575  1D4F  A9 01                 LDA #1
06576  1D51  8D BB 35              STA SPRITE_ANIM_PLAY                    ; START OUR ANIMATION
06577  1D54             
06578  1D54  AD 62 1F              LDA ENEMY_SUBSTATE
06579  1D57  D0 13                 BNE @RUNNING
06580  1D59             
06581  1D59  A2 02                 LDX #2                                  ; USE SPRITE NUMBER 2
06582  1D5B  A9 6F                 LDA #<ANIM_ENEMY_RIGHT_DEAD             ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06583  1D5D  85 17                 STA ZEROPAGE_POINTER_1
06584  1D5F  A9 36                 LDA #>ANIM_ENEMY_RIGHT_DEAD
06585  1D61  85 18                 STA ZEROPAGE_POINTER_1 + 1
06586  1D63             
06587  1D63  20 F7 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06588  1D66  A9 01                 LDA #ENEMY_SUBSTAGE_RUNNING            ; SET SUBSTATE TO RUNNING
06589  1D68  8D 62 1F              STA ENEMY_SUBSTATE
06590  1D6B  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06591  1D6C             
06592  1D6C             @RUNNING
06593  1D6C  20 D7 0B              JSR WAITFRAME
06594  1D6F  60                    RTS
06595  1D70             
06596  1D70             
06597  1D70             
06598  1D70             ;===============================================================================
06599  1D70             ; ENEMY STATE LEFT DEAD
06600  1D70             ;===============================================================================
06601  1D70             
06602  1D70             ENEMYSTATELEFTDEAD 
06603  1D70  A9 01                 LDA #1
06604  1D72  8D BB 35              STA SPRITE_ANIM_PLAY                    ; START OUR ANIMATION
06605  1D75             
06606  1D75  AD 63 1F              LDA ENEMY_SUBSTAGE
06607  1D78  D0 13                 BNE @RUNNING
06608  1D7A             
06609  1D7A  A2 02                 LDX #2                                  ; USE SPRITE NUMBER 2
06610  1D7C  A9 74                 LDA #<ANIM_ENEMY_LEFT_DEAD              ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06611  1D7E  85 17                 STA ZEROPAGE_POINTER_1
06612  1D80  A9 36                 LDA #>ANIM_ENEMY_LEFT_DEAD
06613  1D82  85 18                 STA ZEROPAGE_POINTER_1 + 1
06614  1D84             
06615  1D84  20 F7 34              JSR INITSPRITEANIM                     ; INITIALIZE THE ANIMATION
06616  1D87  A9 01                 LDA #ENEMY_SUBSTAGE_RUNNING            ; SET SUBSTATE TO RUNNING
06617  1D89  8D 63 1F              STA ENEMY_SUBSTAGE
06618  1D8C  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06619  1D8D             
06620  1D8D             @RUNNING
06621  1D8D  20 D7 0B              JSR WAITFRAME
06622  1D90  60                    RTS
06623  1D91             
06624  1D91             
06625  1D91             
06626  1D91             ;===============================================================================
06627  1D91             ; ENEMY STATE PUNCH RIGHT
06628  1D91             ;-------------------------------------------------------------------------------
06629  1D91             
06630  1D91             ; IMPORTANT: CHECKS WHEN THE PLAYER CAN MOVE LEFT OR RIGHT. NO OTHER STATE OR
06631  1D91             ; SUBROUTINE DOES THIS.
06632  1D91             
06633  1D91             ; THE PLAYER IS STANDING STILL AND WAITING INPUT.
06634  1D91             ; POSSIBLE OPTIMIZATIONS WE ARE DOUBLECHECKING CHECKBLOCKUNDER AND CHECKDOWN,
06635  1D91             ; WE CAN CHECK ONCE AND STORE THOSE IN A TEMP VARIABLE AND LOOK THEM UP
06636  1D91             ; IF NEEDED.
06637  1D91             ;-------------------------------------------------------------------------------
06638  1D91             
06639  1D91             ENEMYSTATEPUNCHR 
06640  1D91  AD 62 1F              LDA ENEMY_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
06641  1D94  D0 13                 BNE @RUNNING
06642  1D96             
06643  1D96  A2 00                 LDX #0
06644  1D98  A9 2D                 LDA #<ANIM_PLAYER_PUNCH_R             ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
06645  1D9A  85 17                 STA ZEROPAGE_POINTER_1
06646  1D9C  A9 36                 LDA #>ANIM_PLAYER_PUNCH_R
06647  1D9E  85 18                 STA ZEROPAGE_POINTER_1 + 1
06648  1DA0             
06649  1DA0  20 F7 34              JSR INITSPRITEANIM                     ; SETUP THE ANIMATION FOR IDLE
06650  1DA3  A9 01                 LDA #1                                 ; SET THE SUBSTATE TO RUNNING
06651  1DA5  8D 62 1F              STA ENEMY_SUBSTATE
06652  1DA8  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06653  1DA9             
06654  1DA9             @RUNNING
06655  1DA9  20 A8 10              JSR JOYSTICKREADY
06656  1DAC  F0 01                 BEQ @INPUT
06657  1DAE  60                    RTS                                    ; NOT READY FOR INPUT, WE RETURN
06658  1DAF             
06659  1DAF             @INPUT     ; PROCESS VALID JOYSTICK INPUT
06660  1DAF  F0 00                 BEQ @JOYCHECK
06661  1DB1             
06662  1DB1             @JOYCHECK
06663  1DB1             
06664  1DB1  AD 61 3C              LDA JOY_X
06665  1DB4  F0 03                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
06666  1DB6  30 01                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
06667  1DB8             
06668  1DB8             @DONEJOY
06669  1DB8  60                    RTS
06670  1DB9             @IDLE
06671  1DB9  A9 00                 LDA #0
06672  1DBB  8D BB 35              STA SPRITE_ANIM_PLAY            ; PAUSE OUR ANIMATION
06673  1DBE             
06674  1DBE  A9 00                 LDA #ENEMY_STATE_IDLE
06675  1DC0  4C 7A 1A              JMP CHANGEENEMYSTATE
06676  1DC3             
06677  1DC3             
06678  1DC3             
06679  1DC3             ;===============================================================================
06680  1DC3             ; ENEMY STATE PUNCH LEFT
06681  1DC3             ;-------------------------------------------------------------------------------
06682  1DC3             
06683  1DC3             ; IMPORTANT: CHECKS WHEN THE PLAYER CAN MOVE LEFT OR RIGHT. NO OTHER STATE OR
06684  1DC3             ; SUBROUTINE DOES THIS.
06685  1DC3             
06686  1DC3             ; THE PLAYER IS STANDING STILL AND WAITING INPUT.
06687  1DC3             ; POSSIBLE OPTIMIZATIONS WE ARE DOUBLECHECKING CHECKBLOCKUNDER AND CHECKDOWN,
06688  1DC3             ; WE CAN CHECK ONCE AND STORE THOSE IN A TEMP VARIABLE AND LOOK THEM UP
06689  1DC3             ; IF NEEDED.
06690  1DC3             ;-------------------------------------------------------------------------------
06691  1DC3             
06692  1DC3             ENEMYSTATEPUNCHL 
06693  1DC3  AD 62 1F              LDA ENEMY_SUBSTATE                     ; CHECK FOR FIRST ENTRY TO STATE
06694  1DC6  D0 13                 BNE @RUNNING
06695  1DC8             
06696  1DC8  A2 00                 LDX #0
06697  1DCA  A9 31                 LDA #<ANIM_PLAYER_PUNCH_L              ; LOAD ANIMATION LIST IN ZEROPAGE_POINTER_1
06698  1DCC  85 17                 STA ZEROPAGE_POINTER_1
06699  1DCE  A9 36                 LDA #>ANIM_PLAYER_PUNCH_L
06700  1DD0  85 18                 STA ZEROPAGE_POINTER_1 + 1
06701  1DD2             
06702  1DD2  20 F7 34              JSR INITSPRITEANIM                      ; SETUP THE ANIMATION FOR IDLE
06703  1DD5  A9 01                 LDA #1                                  ; SET THE SUBSTATE TO RUNNING
06704  1DD7  8D 62 1F              STA ENEMY_SUBSTATE
06705  1DDA  60                    RTS                                    ; WAIT TILL NEXT FRAME TO START
06706  1DDB             
06707  1DDB             @RUNNING
06708  1DDB  A9 01                 LDA #1
06709  1DDD  8D BB 35              STA SPRITE_ANIM_PLAY                    ; BEGIN OUR ANIMATION WHEN SET TO ONE
06710  1DE0             
06711  1DE0  20 A8 10              JSR JOYSTICKREADY
06712  1DE3  F0 01                 BEQ @INPUT
06713  1DE5  60                    RTS                                     ; NOT READY FOR INPUT, WE RETURN
06714  1DE6             
06715  1DE6             @INPUT     ; PROCESS VALID JOYSTICK INPUT
06716  1DE6             
06717  1DE6  AD 61 3C              LDA JOY_X
06718  1DE9  F0 07                 BEQ @IDLE                       ; IF JOY_X IS 0 WE ARE IDLING AND NEED TO CHANGE STATES
06719  1DEB  30 05                 BMI @IDLE                       ; IF NEGATIVE WE ARE IDLING
06720  1DED             
06721  1DED             @DONEJOY
06722  1DED  A9 00                 LDA #ENEMY_STATE_IDLE
06723  1DEF  4C 7A 1A              JMP CHANGEENEMYSTATE
06724  1DF2             @IDLE
06725  1DF2  60                    RTS
06726  1DF3             
06727  1DF3             
06728  1DF3             
06729  1DF3             ;===============================================================================
06730  1DF3             ; ENEMY STATE ROPE
06731  1DF3             ;-------------------------------------------------------------------------------
06732  1DF3             ; CLIMBING A ROPE UP
06733  1DF3             ;===============================================================================
06734  1DF3             
06735  1DF3             ENEMYSTATEROPE 
06736  1DF3  AD 62 1F              LDA ENEMY_SUBSTATE                  ; TEST FOR FIRST RUN
06737  1DF6  D0 13                 BNE @RUNNING
06738  1DF8             
06739  1DF8  A2 02                 LDX #2                              ; USE SPRITE NUMBER 0
06740  1DFA  A9 79                 LDA #<ANIM_ENEMY_CLIMB_ROPE         ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06741  1DFC  85 17                 STA ZEROPAGE_POINTER_1
06742  1DFE  A9 36                 LDA #>ANIM_ENEMY_CLIMB_ROPE
06743  1E00  85 18                 STA ZEROPAGE_POINTER_1 + 1
06744  1E02             
06745  1E02  20 F7 34              JSR INITSPRITEANIM                  ; INITIALIZE THE ANIMATION
06746  1E05  A9 01                 LDA #1                              ; SET SUBSTATE TO RUNNING
06747  1E07  8D 62 1F              STA ENEMY_SUBSTATE
06748  1E0A  60                    RTS                                 ; CHANGE TAKES EFFECT NEXT FRAME
06749  1E0B             
06750  1E0B             @RUNNING
06751  1E0B  AD 8A 1F              LDA ENEMY_TIMER                 ; A TIMER THAT SLOWS DOWN THE ENEMY MOVEMENT
06752  1E0E  D0 43                 BNE @INPUT                      ; IF AT ZERO, THEN THE LOOP IS OVER
06753  1E10             
06754  1E10  A9 08                 LDA #8                          ; THIS AREA SUMMONS A RASTER VALUE TO
06755  1E12  8D 8C 1F              STA ENEMY_SPEED                 ; SWITCH THE SPEED BY USING 'AND'
06756  1E15             
06757  1E15             
06758  1E15             ;======= NEW CHECK LINES ======
06759  1E15  AD 93 35              LDA SPRITE_CHAR_POS_Y           ; CHECK THE DOWNWARD Y MOVEMENT
06760  1E18  C9 0A                 CMP #PLAYER_DOWN_CAP            ; AND SET THE LIMIT BOUNDARIES
06761  1E1A  90 0C                 BCC @DOWNMOVE                   ; WE ARE NOT AT THE LIMIT, YET SO BRANCH
06762  1E1C             
06763  1E1C             ; NOW WE BEGIN CHECKING THE MAP'S Y POSITION
06764  1E1C  A5 31                 LDA MAP_Y_POS
06765  1E1E  C9 1B                 CMP #$1B                        ; WAIT UNTIL IT'S =27
06766  1E20  D0 31                 BNE @INPUT
06767  1E22  A5 33                 LDA MAP_Y_DELTA                 ;WHEN =27 THEN WE CAN BEGIN CHECKING
06768  1E24  C9 02                 CMP #02                         ;THE MAP_Y_DELTA PIXELS AREA.
06769  1E26  90 25                 BCC @STOPCLIMB                  ; WE ARE STILL IN THE TILE AREA
06770  1E28             ;=============================
06771  1E28             
06772  1E28             ; THE SPRITE IS MOVING THROUGH THE TILE SO
06773  1E28             ; ALTER THE LEFT AND RIGHT MOVEMENT TO CENTER IT
06774  1E28             ; ON THE ROPE.
06775  1E28             @DOWNMOVE
06776  1E28  A2 02                 LDX #2
06777  1E2A  BD 6A 35              LDA SPRITE_POS_X_DELTA,X
06778  1E2D  C9 04                 CMP #4                           ; THEY PASS THROUGH IF DELTA IS 4
06779  1E2F  F0 12                 BEQ @MOVESPRITEDOWN              ; MOVE SPRITE DOWN SINCE WE PASSED THROUGH THE TILE
06780  1E31  90 06                 BCC @LESS                        ; IF LESS THAN 4, SHIFT RIGHT ONE PIXEL
06781  1E33             
06782  1E33  20 F9 18              JSR MOVEENEMYLEFT                ; NOT EQUAL, NOT LESS, MUST BE MORE - SHIFT LEFT ONE
06783  1E36  4C 43 1E              JMP @MOVESPRITEDOWN
06784  1E39             @LESS
06785  1E39  A2 02                 LDX #2
06786  1E3B  20 90 18              JSR MOVEENEMYRIGHT
06787  1E3E  A2 03                 LDX #3
06788  1E40  20 90 18              JSR MOVEENEMYRIGHT
06789  1E43             
06790  1E43             @MOVESPRITEDOWN 
06791  1E43  A2 02                 LDX #2
06792  1E45  20 5E 19              JSR MOVEENEMYDOWN                ; = 0 SO WE CAN MOVE THE SPRITE DOWN
06793  1E48  A2 03                 LDX #3
06794  1E4A  20 5E 19              JSR MOVEENEMYDOWN
06795  1E4D             
06796  1E4D             @STOPCLIMB 
06797  1E4D  60                    RTS
06798  1E4E  A9 00                 LDA #PLAYER_STATE_IDLE
06799  1E50  4C CB 11              JMP CHANGEPLAYERSTATE
06800  1E53             
06801  1E53             @NODOWNMOVE 
06802  1E53             @INPUT
06803  1E53  60                    RTS
06804  1E54  A9 00                 LDA #PLAYER_STATE_IDLE
06805  1E56  4C CB 11              JMP CHANGEPLAYERSTATE
06806  1E59  60                    RTS
06807  1E5A             
06808  1E5A             
06809  1E5A             ;===============================================================================
06810  1E5A             ; ENEMY STATE JUMP
06811  1E5A             ;-------------------------------------------------------------------------------
06812  1E5A             ;  ENEMY IS JUMPING
06813  1E5A             ;===============================================================================
06814  1E5A             
06815  1E5A             ENEMYSTATEJUMP 
06816  1E5A  AD 62 1F              LDA ENEMY_SUBSTATE
06817  1E5D  D0 13                 BNE @RUNNING
06818  1E5F             
06819  1E5F  A2 00                 LDX #0
06820  1E61  A9 28                 LDA #<ANIM_PLAYER_JUMP
06821  1E63  85 17                 STA ZEROPAGE_POINTER_1
06822  1E65  A9 36                 LDA #>ANIM_PLAYER_JUMP
06823  1E67  85 18                 STA ZEROPAGE_POINTER_1 + 1
06824  1E69                        
06825  1E69  20 F7 34              JSR INITSPRITEANIM
06826  1E6C  A9 01                 LDA #1                          ; ENEMY_SUBSTATE_RUNNING
06827  1E6E  8D 62 1F              STA ENEMY_SUBSTATE
06828  1E71  60                    RTS
06829  1E72             
06830  1E72             @RUNNING
06831  1E72  A9 00                 LDA #0                          ; CLEAR THE IDLE VARIABLE
06832  1E74  8D 2A 13              STA IDLE_VAR
06833  1E77             
06834  1E77  20 A8 10              JSR JOYSTICKREADY
06835  1E7A  F0 01                 BEQ @INPUT
06836  1E7C  60                    RTS
06837  1E7D             
06838  1E7D             ; PLAYER JUMP IS CONFIRMED WITH A TABLE
06839  1E7D             
06840  1E7D             @INPUT
06841  1E7D             @JUMPING
06842  1E7D  EE 4C 18              INC PLAYER_JUMP_POS
06843  1E80  AD 4C 18              LDA PLAYER_JUMP_POS
06844  1E83  C9 23                 CMP #35
06845  1E85  D0 08                 BNE @JUMPON
06846  1E87             
06847  1E87  A9 00                 LDA #0
06848  1E89  8D 4C 18              STA PLAYER_JUMP_POS
06849  1E8C  4C A9 1E              JMP @JUMPCOMPLETE
06850  1E8F             
06851  1E8F             @JUMPON
06852  1E8F  AE 4C 18              LDX PLAYER_JUMP_POS             ; CHECK X FOR JUMP TABLE (X = CURRENT STATE
06853  1E92                        ; OF INCREMENT PLAYER_JUMP_POS)
06854  1E92  BD 4D 18              LDA PLAYER_JUMP_TABLE,X         ; CHECK IF AT END OF JUMP TABLE = 0
06855  1E95  F0 12                 BEQ @JUMPCOMPLETE
06856  1E97             
06857  1E97             @JUMPCONTINUE 
06858  1E97  A2 02                 LDX #2
06859  1E99  20 15 34              JSR MOVESPRITEUP
06860  1E9C  A2 03                 LDX #3
06861  1E9E  20 15 34              JSR MOVESPRITEUP
06862  1EA1  4C 7D 1E              JMP @JUMPING
06863  1EA4             
06864  1EA4             @JUMPBLOCKED 
06865  1EA4  A9 00                 LDA #0
06866  1EA6  8D 4C 18              STA PLAYER_JUMP_POS
06867  1EA9             
06868  1EA9             @JUMPCOMPLETE 
06869  1EA9  AD 61 3C              LDA JOY_X                       ; HORIZONTAL MOVEMENT
06870  1EAC  F0 07                 BEQ @VERTCHECK                  ; CHECK ZERO - HORIZONTAL INPUT
06871  1EAE  30 00                 BMI @LEFT                       ; NEGATIVE = LEFT
06872  1EB0             
06873  1EB0             @RIGHT
06874  1EB0             
06875  1EB0             @LEFT
06876  1EB0  A9 04                 LDA #ENEMY_STATE_WALK_L        ; GO TO WALK STATE LEFT
06877  1EB2  20 7A 1A              JSR CHANGEENEMYSTATE
06878  1EB5             
06879  1EB5             @VERTCHECK 
06880  1EB5  AD 62 3C              LDA JOY_Y                       ; CHECK VERTICAL JOYSTICK INPUT
06881  1EB8  F0 31                 BEQ @END                        ; ZERO MEANS NO INPUT
06882  1EBA  30 03                 BMI @UP                         ; NEGATIVE MEANS UP
06883  1EBC  10 0C                 BPL @DOWN                       ; ALREADY CHECKED FOR 0 - SO THIS IS POSITIVE
06884  1EBE  60                    RTS
06885  1EBF             
06886  1EBF             @UP        
06887  1EBF  A2 02                 LDX #2
06888  1EC1  C9 30                 CMP #COLL_ROPE                  ; CHECK FOR ROPE UNDER PLAYER
06889  1EC3  D0 26                 BNE @END
06890  1EC5  A9 0A                 LDA #ENEMY_STATE_JUMP          ; CHANGE TO JUMP ROPE STATE
06891  1EC7  4C 7A 1A              JMP CHANGEENEMYSTATE
06892  1ECA             
06893  1ECA             @DOWN
06894  1ECA  A2 02                 LDX #2                          ; IF WE ARE ON A ROPE, CAN WE MOVE DOWN?
06895  1ECC  C9 30                 CMP #COLL_ROPE
06896  1ECE  D0 1B                 BNE @NOROPE
06897  1ED0             
06898  1ED0  20 4B 37              JSR ENEMYCHECKMOVEDOWN               ; IF WE ARE AT THE END, THERE WILL BE SOLID GROUND UNDER US
06899  1ED3  F0 11                 BEQ @GOROPECLIMB                ; NO BLOCKING AND ON ROPE? WE CHANGE TO CLIMBING
06900  1ED5                        
06901  1ED5                        ; OTHERWISE WE HAVE NO MORE CHECKS.
06902  1ED5  AD E1 35              LDA ENEMY_SPRITE_POS_X_DELTA          ; IF NOT LINED UP ON THE ROPE WE CAN A FALSE POSITIVE
06903  1ED8  C9 04                 CMP #4                          ; FOR COLLISIONS AROUND A 'ROPE HOLE'
06904  1EDA  F0 0F                 BEQ @END
06905  1EDC             
06906  1EDC  90 04                 BCC @DELTALESS                  ; IF LESS THAN 4 - SHIFT LEFT ONE
06907  1EDE  20 F9 18              JSR MOVEENEMYLEFT
06908  1EE1  60                    RTS
06909  1EE2             @DELTALESS 
06910  1EE2  20 90 18              JSR MOVEENEMYRIGHT
06911  1EE5  60                    RTS
06912  1EE6             
06913  1EE6             @GOROPECLIMB 
06914  1EE6  A9 08                 LDA #ENEMY_STATE_ROPE
06915  1EE8  4C 7A 1A              JMP CHANGEENEMYSTATE
06916  1EEB             
06917  1EEB             @NOROPE
06918  1EEB             @END
06919  1EEB  60                    RTS
06920  1EEC             
06921  1EEC             
06922  1EEC             
06923  1EEC             ;===============================================================================
06924  1EEC             ; ENEMY STATE KICK RIGHT
06925  1EEC             ;===============================================================================
06926  1EEC             
06927  1EEC             ENEMYSTATEKICKR 
06928  1EEC  AD 62 1F              LDA ENEMY_SUBSTATE                     ; TEST FOR FIRST RUN
06929  1EEF  D0 13                 BNE @RUNNING
06930  1EF1             
06931  1EF1  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
06932  1EF3  A9 3D                 LDA #<ANIM_PLAYER_KICK_R                ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06933  1EF5  85 17                 STA ZEROPAGE_POINTER_1
06934  1EF7  A9 36                 LDA #>ANIM_PLAYER_KICK_R
06935  1EF9  85 18                 STA ZEROPAGE_POINTER_1 + 1
06936  1EFB             
06937  1EFB  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
06938  1EFE  A9 01                 LDA #1                                  ; SET SUBSTATE TO RUNNING
06939  1F00  8D 62 1F              STA ENEMY_SUBSTATE
06940  1F03  60                    RTS                                     ; STATE CHANGE GOES INTO EFFECT NEXT FRAME
06941  1F04             
06942  1F04             @RUNNING
06943  1F04  20 A8 10              JSR JOYSTICKREADY
06944  1F07  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT
06945  1F09  60                    RTS
06946  1F0A             @INPUT
06947  1F0A  AD 61 3C              LDA JOY_X
06948  1F0D  F0 02                 BEQ @VERT_CHECK                         ; X AXIS IN 0 - CHECK FOR UP
06949  1F0F  30 05                 BMI @IDLE                               ; IF IT'S -1 (LEFT) RETURN TO IDLE
06950  1F11                        ; SO IT HAS TO BE 1 (RIGHT) - CLIMB THE STAIR
06951  1F11             @VERT_CHECK 
06952  1F11                        ; TO DO : CHECK FOR AN UP PRESS
06953  1F11  A9 00                 LDA #ENEMY_STATE_IDLE                   ; RETURN TO IDLE (WHICH WILL LIKELY GO TO FALL)
06954  1F13  4C 7A 1A              JMP CHANGEENEMYSTATE
06955  1F16             
06956  1F16             @IDLE
06957  1F16  60                    RTS
06958  1F17             
06959  1F17             
06960  1F17             
06961  1F17             ;===============================================================================
06962  1F17             ; ENEMY STATE KICK LEFT
06963  1F17             ;===============================================================================
06964  1F17             
06965  1F17             ENEMYSTATEKICKL 
06966  1F17  AD 62 1F              LDA ENEMY_SUBSTATE                     ; TEST FOR FIRST RUN
06967  1F1A  D0 13                 BNE @RUNNING
06968  1F1C             
06969  1F1C  A2 00                 LDX #0                                 ; USE SPRITE NUMBER 0
06970  1F1E  A9 41                 LDA #<ANIM_PLAYER_KICK_L               ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
06971  1F20  85 17                 STA ZEROPAGE_POINTER_1
06972  1F22  A9 36                 LDA #>ANIM_PLAYER_KICK_L
06973  1F24  85 18                 STA ZEROPAGE_POINTER_1 + 1
06974  1F26             
06975  1F26  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
06976  1F29  A9 01                 LDA #1                                  ; SET SUBSTATE TO RUNNING
06977  1F2B  8D 62 1F              STA ENEMY_SUBSTATE
06978  1F2E  60                    RTS                                     ; STATE CHANGE GOES INTO EFFECT NEXT FRAME
06979  1F2F             
06980  1F2F             @RUNNING
06981  1F2F  20 A8 10              JSR JOYSTICKREADY
06982  1F32  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT
06983  1F34  60                    RTS
06984  1F35             @INPUT
06985  1F35  AD 61 3C              LDA JOY_X
06986  1F38  F0 02                 BEQ @VERT_CHECK                         ; X AXIS IN 0 - CHECK FOR UP
06987  1F3A  30 05                 BMI @IDLE                               ; IF IT'S -1 (LEFT) RETURN TO IDLE
06988  1F3C                        ; SO IT HAS TO BE 1 (RIGHT) - CLIMB THE STAIR
06989  1F3C             @VERT_CHECK 
06990  1F3C  A9 00                 LDA #ENEMY_STATE_IDLE                   ; RETURN TO IDLE (WHICH WILL LIKELY GO TO FALL)
06991  1F3E  4C 7A 1A              JMP CHANGEENEMYSTATE
06992  1F41             
06993  1F41             @IDLE
06994  1F41  60                    RTS
06995  1F42             
06996  1F42             
06997  1F42             
06998  1F42             ;===============================================================================
06999  1F42             ; STATE FRAMEWORK
07000  1F42             ;-------------------------------------------------------------------------------
07001  1F42             ; A BLANK STATE TEMPLATE TO MAKE ADDING NEW STATES EASIER
07002  1F42             ;-------------------------------------------------------------------------------
07003  1F42             
07004  1F42             ENEMYSTATE_FRAMEWORK 
07005  1F42  AD 62 1F              LDA ENEMY_SUBSTATE                     ; TEST FOR FIRST RUN
07006  1F45  D0 13                 BNE @RUNNING
07007  1F47             
07008  1F47  A2 00                 LDX #0                                  ; USE SPRITE NUMBER 0
07009  1F49  A9 81                 LDA #<ANIM_NPC1                         ; LOAD ANIMATION IN ZEROPAGE_POINTER_1
07010  1F4B  85 17                 STA ZEROPAGE_POINTER_1
07011  1F4D  A9 36                 LDA #>ANIM_NPC1
07012  1F4F  85 18                 STA ZEROPAGE_POINTER_1 + 1
07013  1F51             
07014  1F51  20 F7 34              JSR INITSPRITEANIM                      ; INITIALIZE THE ANIMATION
07015  1F54  A9 01                 LDA #1                                  ; SET SUBSTATE TO RUNNING
07016  1F56  8D 62 1F              STA ENEMY_SUBSTATE
07017  1F59  60                    RTS                                     ; CHANGE TAKES EFFECT NEXT FRAME
07018  1F5A             
07019  1F5A             @RUNNING
07020  1F5A  20 A8 10              JSR JOYSTICKREADY
07021  1F5D  F0 01                 BEQ @INPUT                              ; NOT READY FOR INPUT
07022  1F5F  60                    RTS
07023  1F60                        ; PROCESS VALID JOYSTICK INPUT
07024  1F60             @INPUT
07025  1F60             @RIGHT
07026  1F60             @LEFT
07027  1F60             
07028  1F60             @VERTCHECK 
07029  1F60             @UP        
07030  1F60             @DOWN
07031  1F60                        
07032  1F60             @END
07033  1F60  60                    RTS
07034  1F61             
07035  1F61             
07036  1F61             ;===============================================================================
07037  1F61             ;===============================================================================
07038  1F61             ; PLAYER DATA
07039  1F61             ;-------------------------------------------------------------------------------
07040  1F61             
07041  1F61             ENEMY_DATA 
07042  1F61             
07043  1F61             ENEMY_STATE 
07044  1F61  00                    BYTE 0
07045  1F62             ENEMY_SUBSTATE 
07046  1F62  00                    BYTE 0
07047  1F63             ENEMY_SUBSTAGE 
07048  1F63  00                    BYTE 0
07049  1F64             ENEMY_JUMPUPRIGHT 
07050  1F64  00                    BYTE 0
07051  1F65             ENEMY_JUMPUPLEFT 
07052  1F65  00                    BYTE 0
07053  1F66             ENEMY_FALLFLAG 
07054  1F66  00                    BYTE 0
07055  1F67             ENANIM_STATE 
07056  1F67  00                    BYTE 0
07057  1F68             
07058  1F68             ; JUMP TABLE FROM ENDURION'S CODE SAMPLE:
07059  1F68             GAMEDEVE.NET/BLOG/949/ENTRY-2250107-A-C64-GAME-STEP-7' 
07060  1F68             
07061  1F68             ENEMY_JUMP_POS 
07062  1F68  00                    BYTE 0
07063  1F69             ENEMY_JUMP_TABLE 
07064  1F69                        ;BYTE 8,7,5,3,2,1,1,1,0,0
07065  1F69  12 11 0F              BYTE 18,17,15,13,12,11,11,11,10,10
07066  1F73  08 07 05              BYTE 8,7,5,3,2,1,1,1,0,0
07067  1F7D             ENEMY_JUMP_TABLE_SIZE 
07068  1F7D  0A                    BYTE 10
07069  1F7E             ENEMY_FALL_POS 
07070  1F7E  00                    BYTE 0
07071  1F7F             ENEMY_FALL_SPEED_TABLE 
07072  1F7F  01 01 02              BYTE 1,1,2,2,3,3,3,3,3,3
07073  1F89             
07074  1F89  00         ENEMYDOWNCAP BYTE 0
07075  1F8A             
07076  1F8A  00         ENEMY_TIMER BYTE 0
07077  1F8B  00         ENEMY_TIMER2 BYTE 0
07078  1F8C  00         ENEMY_SPEED BYTE 0
07079  1F8D             
07080  1F8D  05         ENEMY_BULLETS BYTE 5
07081  1F8E             
07082  1F8E  00         FIRE_RIGHT BYTE 0
07083  1F8F  00         FIRE_LEFT  BYTE 0
07084  1F90  00         FIRINGHOLDCD BYTE 0
07085  1F91  00         WAITTOFIRECD BYTE 0
07086  1F92             
07087  1F92  00         PLAYER_DIRECTION BYTE 0
07088  1F93             ;===============================================================================
07089  1F93             ; SCREEN ROUTINES
07090  1F93             ;===============================================================================
07091  1F93             ; PETER 'SIG' HEWETT
07092  1F93             ; - 2016/2017
07093  1F93             ;-------------------------------------------------------------------------------
07094  1F93             ; SWAP SCREENS
07095  1F93             ;-------------------------------------------------------------------------------
07096  1F93             ; EXCHANGE THE FRONT AND BACKBUFFER SCREENS
07097  1F93             ;-------------------------------------------------------------------------------
07098  1F93             
07099  1F93             SWAPSCREENS 
07100  1F93  A5 26                 LDA CURRENT_SCREEN + 1             ; LOAD HI BYTE OF CURRENT SCREEN
07101  1F95  C9 44                 CMP #>SCREEN2_MEM
07102  1F97  F0 11                 BEQ @SCREEN2
07103  1F99             
07104  1F99             
07105  1F99             
07106  1F99  A9 00                 LDA #<SCREEN2_MEM
07107  1F9B  85 25                 STA CURRENT_SCREEN
07108  1F9D  A9 44                 LDA #>SCREEN2_MEM
07109  1F9F  85 26                 STA CURRENT_SCREEN + 1
07110  1FA1             
07111  1FA1             
07112  1FA1             
07113  1FA1  A9 00                 LDA #<SCREEN1_MEM
07114  1FA3  85 27                 STA CURRENT_BUFFER
07115  1FA5  A9 40                 LDA #>SCREEN1_MEM
07116  1FA7  85 28                 STA CURRENT_BUFFER + 1
07117  1FA9             
07118  1FA9             
07119  1FA9  60                    RTS
07120  1FAA             @SCREEN2   
07121  1FAA             
07122  1FAA             
07123  1FAA  A9 00                 LDA #<SCREEN1_MEM
07124  1FAC  85 25                 STA CURRENT_SCREEN
07125  1FAE  A9 40                 LDA #>SCREEN1_MEM
07126  1FB0  85 26                 STA CURRENT_SCREEN + 1
07127  1FB2             
07128  1FB2             
07129  1FB2             
07130  1FB2  A9 00                 LDA #<SCREEN2_MEM
07131  1FB4  85 27                 STA CURRENT_BUFFER
07132  1FB6  A9 44                 LDA #>SCREEN2_MEM
07133  1FB8  85 28                 STA CURRENT_BUFFER + 1
07134  1FBA             
07135  1FBA  60                    RTS
07136  1FBB             
07137  1FBB             
07138  1FBB             ;===============================================================================
07139  1FBB             ; FETCH PLAYFIELD LINE ADDRESS
07140  1FBB             ;===============================================================================
07141  1FBB             ; A HELPER ROUTINE TO RETURN THE LINE ADDRESS FOR THE CURRENT FRONT SCREEN ONLY.
07142  1FBB             ; A CUT BACK VERSION
07143  1FBB             ; OF FETCHLINEADDRESS FOR FASTER USE WITH SPRITE/CHARACTER COLLISIONS IT ALSO
07144  1FBB             ; USES THE Y REGISTER
07145  1FBB             ; INSTEAD OF THE X AS THAT IS TIED UP IN OUR COLLISION ROUTINES TO HOLD
07146  1FBB             ; THE SPRITE NUMBER
07147  1FBB             ;
07148  1FBB             ; Y = LINE NUMBER
07149  1FBB             ; RETURNS : ZEROPAGE_POINTER_1 = SCREEN LINE ADDRESS
07150  1FBB             ; MODIFIES A
07151  1FBB             ;-------------------------------------------------------------------------------
07152  1FBB             
07153  1FBB             FETCHPLAYFIELDLINEADDRESS 
07154  1FBB  A5 26                 LDA CURRENT_SCREEN + 1          ; LOAD HI BYTE OF CURREN SCREEN ADDRESS
07155  1FBD  C9 40                 CMP #>SCREEN1_MEM               ; COMPARE IT TO THE HI BYTE OF SCREEN1_MEM
07156  1FBF  F0 0B                 BEQ @SCREEN1                    ; IF IT'S EQUAL - IT'S SCREEN1
07157  1FC1                        ; OTHERWISE IT'S SCREEN2
07158  1FC1                        
07159  1FC1  B9 35 21              LDA SCREEN2_LINE_OFFSET_TABLE_LO,Y      ; USE Y TO LOOKUP THE ADDRESS AND SAVE IT IN
07160  1FC4  85 17                 STA ZEROPAGE_POINTER_1                  ; ZEROPAGE_POINTER_1
07161  1FC6  B9 4E 21              LDA SCREEN2_LINE_OFFSET_TABLE_HI,Y
07162  1FC9  85 18                 STA ZEROPAGE_POINTER_1 + 1
07163  1FCB  60                    RTS
07164  1FCC             
07165  1FCC             @SCREEN1
07166  1FCC  B9 03 21              LDA SCREEN1_LINE_OFFSET_TABLE_LO,Y      ; USE Y TO LOOKUP THE ADDRESS AND SAVE IT IN
07167  1FCF  85 17                 STA ZEROPAGE_POINTER_1                  ; ZEROPAGE_POINTER_1
07168  1FD1  B9 1C 21              LDA SCREEN1_LINE_OFFSET_TABLE_HI,Y
07169  1FD4  85 18                 STA ZEROPAGE_POINTER_1 + 1
07170  1FD6  60                    RTS
07171  1FD7             
07172  1FD7             ;-------------------------------------------------------------------------------
07173  1FD7             ; FETCH LINE ADDRESS
07174  1FD7             ;-------------------------------------------------------------------------------
07175  1FD7             ; A HELPER ROUTINE TO RETURN THE LINE ADDRESS FOR THE CORRECT SCREEN TO DRAW TO
07176  1FD7             ; GIVEN THE SCREEN BASE IN WPARAM1, AND THE LINE IN X (Y COORD) WE TEST
07177  1FD7             ; THE HIGH BYTE IN WPARAM1 AND USE THE CORRECT LOOKUP TABLE TO GET THE LINE
07178  1FD7             ; ADDRESS, RETURNING IT IN ZEROPAGE_POINTER_1
07179  1FD7             
07180  1FD7             ; AN ADDITIONAL 'JUMP IN' POINT "FETCHSCREENLINEADDRESS" CAN BE USED THAT WILL
07181  1FD7             ; ONLY CONSIDER THE CURRENT_SCREEN POINTER, LIKEWISE "FETCHBUFFERLINEADDRESS"
07182  1FD7             ; WILL JUMP IN AND SUBSTITUTE THE CURRENT BUFFER.
07183  1FD7             ;
07184  1FD7             ; X - LINE REQUIRED
07185  1FD7             ;
07186  1FD7             ; RETURNS ZEROPAGE_POINTER_1
07187  1FD7             ;
07188  1FD7             ; MODIFIES A
07189  1FD7             ;
07190  1FD7             ;-------------------------------------------------------------------------------
07191  1FD7             
07192  1FD7             
07193  1FD7             GETLINEADDRESS 
07194  1FD7  A5 0B                 LDA WPARAM1 + 1
07195  1FD9  4C E3 1F              JMP DETECTSCREEN
07196  1FDC             
07197  1FDC             GETSCREENLINEADDRESS 
07198  1FDC  A5 26                 LDA CURRENT_SCREEN + 1
07199  1FDE  4C E3 1F              JMP DETECTSCREEN
07200  1FE1             
07201  1FE1             FETCHBUFFERLINEADDRESS 
07202  1FE1  A5 28                 LDA CURRENT_BUFFER + 1
07203  1FE3             
07204  1FE3             DETECTSCREEN 
07205  1FE3  C9 40                 CMP #>SCREEN1_MEM
07206  1FE5  F0 08                 BEQ @SCREEN1
07207  1FE7  C9 44                 CMP #>SCREEN2_MEM
07208  1FE9  F0 0F                 BEQ @SCREEN2
07209  1FEB  C9 58                 CMP #>SCORE_SCREEN
07210  1FED  F0 16                 BEQ @SCORE            ; IF NONE OF THE ABOVE, IT WILL DEFAULT TO SCREEN1
07211  1FEF             
07212  1FEF             @SCREEN1
07213  1FEF  BD 03 21              LDA SCREEN1_LINE_OFFSET_TABLE_LO,X
07214  1FF2  85 17                 STA ZEROPAGE_POINTER_1
07215  1FF4  BD 1C 21              LDA SCREEN1_LINE_OFFSET_TABLE_HI,X
07216  1FF7  85 18                 STA ZEROPAGE_POINTER_1 + 1
07217  1FF9  60                    RTS
07218  1FFA             @SCREEN2
07219  1FFA  BD 35 21              LDA SCREEN2_LINE_OFFSET_TABLE_LO,X
07220  1FFD  85 17                 STA ZEROPAGE_POINTER_1
07221  1FFF  BD 4E 21              LDA SCREEN2_LINE_OFFSET_TABLE_HI,X
07222  2002  85 18                 STA ZEROPAGE_POINTER_1 + 1
07223  2004  60                    RTS
07224  2005             
07225  2005             @SCORE
07226  2005  BD 99 21              LDA SCORE_LINE_OFFSET_TABLE_LO,X
07227  2008  85 17                 STA ZEROPAGE_POINTER_1
07228  200A  BD B2 21              LDA SCORE_LINE_OFFSET_TABLE_HI,X
07229  200D  85 18                 STA ZEROPAGE_POINTER_1 + 1
07230  200F  60                    RTS
07231  2010             
07232  2010             
07233  2010             
07234  2010             DISPLAYBYTE 
07235  2010             
07236  2010  85 06                 STA PARAM4                                      ; STORE THE BYTE TO DISPLAY IN PARAM4
07237  2012  20 D7 1F              JSR GETLINEADDRESS
07238  2015             
07239  2015  BD 67 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X                ; FETCH LINE ADDRESS FOR COLOR
07240  2018  85 21                 STA ZEROPAGE_POINTER_3
07241  201A  BD 80 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
07242  201D  85 22                 STA ZEROPAGE_POINTER_3 + 1
07243  201F             
07244  201F  A5 06                 LDA PARAM4                                      ; LOAD THE BYTE TO BE DISPLAYED
07245  2021  29 0F                 AND #$0F
07246  2023  18                    CLC                                             ; MASK FOR THE LOWER HALF (0-F)
07247  2024  69 30                 ADC #$30                                        ; ADD $30 (48) TO DISPLAY CHARACTER SET
07248  2026                        ; NUMBERS
07249  2026  18                    CLC                                             ; CLEAR CARRY FLAG
07250  2027  C9 3A                 CMP #$3A                                        ; LESS THAN THE CODE FOR A (10)?
07251  2029  90 03                 BCC @WRITEDIGIT                                 ; GO TO THE NEXT DIGIT
07252  202B  38                    SEC
07253  202C  E9 39                 SBC #$39                                        ; IF SO WE SET THE CHARACTER CODE BACK TO
07254  202E                        ; DISPLAY A-F ($01 - $0A)
07255  202E             @WRITEDIGIT 
07256  202E  C8                    INY                                             ; INCREMENT THE POSITION ON THE LINE
07257  202F  91 17                 STA (ZEROPAGE_POINTER_1),Y                      ; WRITE THE CHARACTER CODE
07258  2031  A9 07                 LDA #COLOR_YELLOW                               ; SET THE COLOR TO WHITE
07259  2033  91 21                 STA (ZEROPAGE_POINTER_3),Y                      ; WRITE THE COLOR TO COLOR RAM
07260  2035             
07261  2035  88                    DEY                                             ; DECREMENT THE POSITION ON THE LINE
07262  2036  A5 06                 LDA PARAM4                                      ; FETCH THE BYTE TO DISPLAYTEXT
07263  2038  29 F0                 AND #$F0                                        ; MASK FOR THE TOP 4 BITS (00 - F0) - 11110000
07264  203A  4A                    LSR                                              ; SHIFT IT RIGHT TO A VALUE OF 0-F
07265  203B  4A                    LSR
07266  203C  4A                    LSR
07267  203D  4A                    LSR
07268  203E  69 30                 ADC #$30                                        ; FROM HERE, IT'S THE SAME
07269  2040  18                    CLC
07270  2041  C9 3A                 CMP #$3A                                        ; CHECK FOR A-F
07271  2043  90 02                 BCC @LASTDIGIT
07272  2045  E9 39                 SBC #$39
07273  2047             
07274  2047             @LASTDIGIT 
07275  2047  91 17                 STA (ZEROPAGE_POINTER_1),Y                      ; WRITE CHARACTER AND COLOR
07276  2049  A9 07                 LDA #COLOR_YELLOW
07277  204B  91 21                 STA (ZEROPAGE_POINTER_3),Y
07278  204D  60                    RTS
07279  204E             
07280  204E             DISPLAYTEXT 
07281  204E             
07282  204E  A6 04                 LDX PARAM2
07283  2050  BD 99 21              LDA SCORE_LINE_OFFSET_TABLE_LO,X
07284  2053  85 19                 STA ZEROPAGE_POINTER_2
07285  2055  BD B2 21              LDA SCORE_LINE_OFFSET_TABLE_HI,X
07286  2058  85 1A                 STA ZEROPAGE_POINTER_2 + 1
07287  205A             
07288  205A                        
07289  205A  BD 67 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X          ; FETCH THE ADDRESS FOR THE LINE IN COLOR RAM
07290  205D  85 21                 STA ZEROPAGE_POINTER_3
07291  205F  BD 80 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
07292  2062  85 22                 STA ZEROPAGE_POINTER_3 + 1
07293  2064             
07294  2064             
07295  2064                        ; ADD THE X OFFSET TO THE DESTINATION ADDRESS
07296  2064  A5 19                 LDA ZEROPAGE_POINTER_2
07297  2066  18                    CLC
07298  2067  65 03                 ADC PARAM1
07299  2069  85 19                 STA ZEROPAGE_POINTER_2
07300  206B  A5 1A                 LDA ZEROPAGE_POINTER_2 + 1
07301  206D  69 00                 ADC #0
07302  206F  85 1A                 STA ZEROPAGE_POINTER_2 + 1
07303  2071                        ; SAME FOR COLOR RAM
07304  2071  A5 21                 LDA ZEROPAGE_POINTER_3
07305  2073  18                    CLC
07306  2074  65 03                 ADC PARAM1
07307  2076  85 21                 STA ZEROPAGE_POINTER_3
07308  2078  A5 22                 LDA ZEROPAGE_POINTER_3 + 1
07309  207A  69 00                 ADC #0
07310  207C  85 22                 STA ZEROPAGE_POINTER_3 + 1
07311  207E                        ; START THE WRITE FOR THIS LINE
07312  207E  A0 00                 LDY #0
07313  2080             @INLINELOOP 
07314  2080  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
07315  2082  C9 00                 CMP #00
07316  2084  F0 20                 BEQ @ENDMARKERREACHED
07317  2086  C9 2F                 CMP #$2F
07318  2088  F0 0A                 BEQ @LINEBREAK
07319  208A  91 19                 STA (ZEROPAGE_POINTER_2),Y
07320  208C  A5 05                 LDA PARAM3
07321  208E  91 21                 STA (ZEROPAGE_POINTER_3),Y
07322  2090  C8                    INY
07323  2091  4C 80 20              JMP @INLINELOOP
07324  2094             
07325  2094             @LINEBREAK 
07326  2094  C8                    INY
07327  2095  98                    TYA
07328  2096  18                    CLC
07329  2097  65 17                 ADC ZEROPAGE_POINTER_1
07330  2099  85 17                 STA ZEROPAGE_POINTER_1
07331  209B  A9 00                 LDA #0
07332  209D  65 18                 ADC ZEROPAGE_POINTER_1 + 1
07333  209F  85 18                 STA ZEROPAGE_POINTER_1 + 1
07334  20A1             
07335  20A1  E6 04                 INC PARAM2
07336  20A3  4C 4E 20              JMP DISPLAYTEXT
07337  20A6             
07338  20A6             @ENDMARKERREACHED 
07339  20A6  60                    RTS
07340  20A7             
07341  20A7             ;-------------------------------------------------------------------------------
07342  20A7             ; CLEAR SCREEN
07343  20A7             ;-------------------------------------------------------------------------------
07344  20A7             ;
07345  20A7             ; CLEARS THE SCREEN USING A CHOSEN CHARACTER.
07346  20A7             ; A = CHARACTER/COLOR TO CLEAR THE SCREEN WITH
07347  20A7             ;
07348  20A7             ; MODIFIES X
07349  20A7             ;-------------------------------------------------------------------------------
07350  20A7             
07351  20A7             
07352  20A7             CLEARSCREEN1 
07353  20A7  A2 00                 LDX #$00
07354  20A9             @CLEARLOOP 
07355  20A9  9D 00 40              STA SCREEN1_MEM,X
07356  20AC  9D FA 40              STA SCREEN1_MEM + 250,X
07357  20AF  9D F4 41              STA SCREEN1_MEM + 500,X                 ; GAME SCREEN ONLY GOES TO 720
07358  20B2  9D EE 42              STA SCREEN1_MEM + 750,X
07359  20B5  E8                    INX
07360  20B6  E0 FA                 CPX #250
07361  20B8  D0 EF                 BNE @CLEARLOOP
07362  20BA  60                    RTS
07363  20BB             
07364  20BB             
07365  20BB             
07366  20BB             
07367  20BB             CLEARSCREEN2 
07368  20BB  A2 00                 LDX #$00
07369  20BD             @CLEARLOOP 
07370  20BD  9D 00 44              STA SCREEN2_MEM,X
07371  20C0  9D FA 44              STA SCREEN2_MEM + 250,X
07372  20C3  9D F4 45              STA SCREEN2_MEM + 500,X                 ; GAME SCREEN ONLY GOES TO 720
07373  20C6  9D EE 46              STA SCREEN2_MEM + 750,X
07374  20C9  E8                    INX
07375  20CA  E0 FA                 CPX #250
07376  20CC  D0 EF                 BNE @CLEARLOOP
07377  20CE  60                    RTS
07378  20CF             
07379  20CF             
07380  20CF             
07381  20CF             CLEARCOLORRAM 
07382  20CF  A2 00                 LDX #$00
07383  20D1             @CLEARLOOP 
07384  20D1  9D 00 D8              STA COLOR_MEM,X
07385  20D4  9D FA D8              STA COLOR_MEM + 250,X
07386  20D7  9D F4 D9              STA COLOR_MEM + 500,X
07387  20DA  9D EE DA              STA COLOR_MEM + 750,X
07388  20DD  E8                    INX
07389  20DE  E0 FA                 CPX #250
07390  20E0  D0 EF                 BNE @CLEARLOOP
07391  20E2  60                    RTS
07392  20E3             
07393  20E3             
07394  20E3             ;-------------------------------------------------------------------------------
07395  20E3             ; COPY TO BUFFER (SLOW)
07396  20E3             ;-------------------------------------------------------------------------------
07397  20E3             ; NOTE : DON'T USE THIS FOR SCROLLING. USE THE UNROLLED VERSION IN SCROLLING.ASM
07398  20E3             ; THIS IS JUST FOR SETUP PURPOSES. IT TAKES THE CURRENT FRONT SCREEN AND COPYS
07399  20E3             ; IT TO THE BUFFER
07400  20E3             ;--------------------------------------------------------------------------------
07401  20E3             
07402  20E3             COPYTOBUFFER 
07403  20E3             
07404  20E3             @COPY_SCREEN1 
07405  20E3  A2 00                 LDX #$00
07406  20E5             @LOOP1
07407  20E5  BD 00 40              LDA SCREEN1_MEM,X
07408  20E8  9D 00 44              STA SCREEN2_MEM,X
07409  20EB             
07410  20EB  BD FA 40              LDA SCREEN1_MEM + 250,X
07411  20EE  9D FA 44              STA SCREEN2_MEM + 250,X
07412  20F1                        
07413  20F1  BD F4 41              LDA SCREEN1_MEM + 500,X
07414  20F4  9D F4 45              STA SCREEN2_MEM + 500,X
07415  20F7             
07416  20F7  BD EE 42              LDA SCREEN1_MEM + 750,X                 ; GAME SCREEN ONLY GOES TO 720
07417  20FA  9D EE 46              STA SCREEN2_MEM + 750,X
07418  20FD  E8                    INX
07419  20FE  E0 FA                 CPX #250
07420  2100  D0 E3                 BNE @LOOP1
07421  2102  60                    RTS
07422  2103             
07423  2103             
07424  2103             
07425  2103             ; SCREEN LINE OFFSET TABLES
07426  2103             ; QUERY A LINE WITH LDA (POINTER TO TABLE),X (WHERE X HOLDS THE LINE NUMBER)
07427  2103             ; AND IT WILL RETURN THE SCREEN ADDRESS FOR THAT LINE
07428  2103             
07429  2103             ; C64 PRG STUDIO HAS A LACK OF EXPRESSION SUPPORT THAT MAKES CREATING SOME
07430  2103             ; TABLES VERY PROBLEMATIC
07431  2103             ; BE AWARE THAT YOU CAN ONLY USE ONE EXPRESSION AFTER A DEFINED CONSTANT,
07432  2103             ; NO BRACES, AND BE SURE TO ACCOUNT FOR ORDER OF PRECEDENCE.
07433  2103             
07434  2103             ; FOR THESE TABLES YOU MUST HAVE THE OPERATOR CALC DIRECTIVE SET AT THE TOP OF
07435  2103             ; YOUR MAIN FILE
07436  2103             ; OR HAVE IT CHECKED IN OPTIONS OR BAD THINGS WILL HAPPEN!! IT BASICALLY MEANS
07437  2103             ; THAT CALCULATIONS
07438  2103             ; WILL BE PERFORMED BEFORE GIVING BACK THE HI/LO BYTE WITH '>' RATHER THAN THE
07439  2103             ; DEFAULT OF HI/LO BYTE THEN THE CALCULATION
07440  2103             SCREEN_LINE_OFFSET_TABLE_LO 
07441  2103             SCREEN1_LINE_OFFSET_TABLE_LO 
07442  2103  00                    BYTE <SCREEN1_MEM
07443  2104  28                    BYTE <SCREEN1_MEM + 40
07444  2105  50                    BYTE <SCREEN1_MEM + 80
07445  2106  78                    BYTE <SCREEN1_MEM + 120
07446  2107  A0                    BYTE <SCREEN1_MEM + 160
07447  2108  C8                    BYTE <SCREEN1_MEM + 200
07448  2109  F0                    BYTE <SCREEN1_MEM + 240
07449  210A  18                    BYTE <SCREEN1_MEM + 280
07450  210B  40                    BYTE <SCREEN1_MEM + 320
07451  210C  68                    BYTE <SCREEN1_MEM + 360
07452  210D  90                    BYTE <SCREEN1_MEM + 400
07453  210E  B8                    BYTE <SCREEN1_MEM + 440
07454  210F  E0                    BYTE <SCREEN1_MEM + 480
07455  2110  08                    BYTE <SCREEN1_MEM + 520
07456  2111  30                    BYTE <SCREEN1_MEM + 560
07457  2112  58                    BYTE <SCREEN1_MEM + 600
07458  2113  80                    BYTE <SCREEN1_MEM + 640
07459  2114  A8                    BYTE <SCREEN1_MEM + 680
07460  2115  D0                    BYTE <SCREEN1_MEM + 720
07461  2116  F8                    BYTE <SCREEN1_MEM + 760
07462  2117  20                    BYTE <SCREEN1_MEM + 800
07463  2118  48                    BYTE <SCREEN1_MEM + 840
07464  2119  70                    BYTE <SCREEN1_MEM + 880
07465  211A  98                    BYTE <SCREEN1_MEM + 920
07466  211B  C0                    BYTE <SCREEN1_MEM + 960
07467  211C             
07468  211C             SCREEN_LINE_OFFSET_TABLE_HI 
07469  211C             SCREEN1_LINE_OFFSET_TABLE_HI 
07470  211C  40                    BYTE >SCREEN1_MEM
07471  211D  40                    BYTE >SCREEN1_MEM + 40
07472  211E  40                    BYTE >SCREEN1_MEM + 80
07473  211F  40                    BYTE >SCREEN1_MEM + 120
07474  2120  40                    BYTE >SCREEN1_MEM + 160
07475  2121  40                    BYTE >SCREEN1_MEM + 200
07476  2122  40                    BYTE >SCREEN1_MEM + 240
07477  2123  41                    BYTE >SCREEN1_MEM + 280
07478  2124  41                    BYTE >SCREEN1_MEM + 320
07479  2125  41                    BYTE >SCREEN1_MEM + 360
07480  2126  41                    BYTE >SCREEN1_MEM + 400
07481  2127  41                    BYTE >SCREEN1_MEM + 440
07482  2128  41                    BYTE >SCREEN1_MEM + 480
07483  2129  42                    BYTE >SCREEN1_MEM + 520
07484  212A  42                    BYTE >SCREEN1_MEM + 560
07485  212B  42                    BYTE >SCREEN1_MEM + 600
07486  212C  42                    BYTE >SCREEN1_MEM + 640
07487  212D  42                    BYTE >SCREEN1_MEM + 680
07488  212E  42                    BYTE >SCREEN1_MEM + 720
07489  212F  42                    BYTE >SCREEN1_MEM + 760
07490  2130  43                    BYTE >SCREEN1_MEM + 800
07491  2131  43                    BYTE >SCREEN1_MEM + 840
07492  2132  43                    BYTE >SCREEN1_MEM + 880
07493  2133  43                    BYTE >SCREEN1_MEM + 920
07494  2134  43                    BYTE >SCREEN1_MEM + 960
07495  2135             
07496  2135             SCREEN2_LINE_OFFSET_TABLE_LO 
07497  2135  00                    BYTE <SCREEN2_MEM
07498  2136  28                    BYTE <SCREEN2_MEM + 40
07499  2137  50                    BYTE <SCREEN2_MEM + 80
07500  2138  78                    BYTE <SCREEN2_MEM + 120
07501  2139  A0                    BYTE <SCREEN2_MEM + 160
07502  213A  C8                    BYTE <SCREEN2_MEM + 200
07503  213B  F0                    BYTE <SCREEN2_MEM + 240
07504  213C  18                    BYTE <SCREEN2_MEM + 280
07505  213D  40                    BYTE <SCREEN2_MEM + 320
07506  213E  68                    BYTE <SCREEN2_MEM + 360
07507  213F  90                    BYTE <SCREEN2_MEM + 400
07508  2140  B8                    BYTE <SCREEN2_MEM + 440
07509  2141  E0                    BYTE <SCREEN2_MEM + 480
07510  2142  08                    BYTE <SCREEN2_MEM + 520
07511  2143  30                    BYTE <SCREEN2_MEM + 560
07512  2144  58                    BYTE <SCREEN2_MEM + 600
07513  2145  80                    BYTE <SCREEN2_MEM + 640
07514  2146  A8                    BYTE <SCREEN2_MEM + 680
07515  2147  D0                    BYTE <SCREEN2_MEM + 720
07516  2148  F8                    BYTE <SCREEN2_MEM + 760
07517  2149  20                    BYTE <SCREEN2_MEM + 800
07518  214A  48                    BYTE <SCREEN2_MEM + 840
07519  214B  70                    BYTE <SCREEN2_MEM + 880
07520  214C  98                    BYTE <SCREEN2_MEM + 920
07521  214D  C0                    BYTE <SCREEN2_MEM + 960
07522  214E             
07523  214E             SCREEN2_LINE_OFFSET_TABLE_HI 
07524  214E  44                    BYTE >SCREEN2_MEM
07525  214F  44                    BYTE >SCREEN2_MEM + 40
07526  2150  44                    BYTE >SCREEN2_MEM + 80
07527  2151  44                    BYTE >SCREEN2_MEM + 120
07528  2152  44                    BYTE >SCREEN2_MEM + 160
07529  2153  44                    BYTE >SCREEN2_MEM + 200
07530  2154  44                    BYTE >SCREEN2_MEM + 240
07531  2155  45                    BYTE >SCREEN2_MEM + 280
07532  2156  45                    BYTE >SCREEN2_MEM + 320
07533  2157  45                    BYTE >SCREEN2_MEM + 360
07534  2158  45                    BYTE >SCREEN2_MEM + 400
07535  2159  45                    BYTE >SCREEN2_MEM + 440
07536  215A  45                    BYTE >SCREEN2_MEM + 480
07537  215B  46                    BYTE >SCREEN2_MEM + 520
07538  215C  46                    BYTE >SCREEN2_MEM + 560
07539  215D  46                    BYTE >SCREEN2_MEM + 600
07540  215E  46                    BYTE >SCREEN2_MEM + 640
07541  215F  46                    BYTE >SCREEN2_MEM + 680
07542  2160  46                    BYTE >SCREEN2_MEM + 720
07543  2161  46                    BYTE >SCREEN2_MEM + 760
07544  2162  47                    BYTE >SCREEN2_MEM + 800
07545  2163  47                    BYTE >SCREEN2_MEM + 840
07546  2164  47                    BYTE >SCREEN2_MEM + 880
07547  2165  47                    BYTE >SCREEN2_MEM + 920
07548  2166  47                    BYTE >SCREEN2_MEM + 960
07549  2167                        
07550  2167             COLOR_LINE_OFFSET_TABLE_LO 
07551  2167  00                    BYTE <COLOR_MEM
07552  2168  28                    BYTE <COLOR_MEM + 40
07553  2169  50                    BYTE <COLOR_MEM + 80
07554  216A  78                    BYTE <COLOR_MEM + 120
07555  216B  A0                    BYTE <COLOR_MEM + 160
07556  216C  C8                    BYTE <COLOR_MEM + 200
07557  216D  F0                    BYTE <COLOR_MEM + 240
07558  216E  18                    BYTE <COLOR_MEM + 280
07559  216F  40                    BYTE <COLOR_MEM + 320
07560  2170  68                    BYTE <COLOR_MEM + 360
07561  2171  90                    BYTE <COLOR_MEM + 400
07562  2172  B8                    BYTE <COLOR_MEM + 440
07563  2173  E0                    BYTE <COLOR_MEM + 480
07564  2174  08                    BYTE <COLOR_MEM + 520
07565  2175  30                    BYTE <COLOR_MEM + 560
07566  2176  58                    BYTE <COLOR_MEM + 600
07567  2177  80                    BYTE <COLOR_MEM + 640
07568  2178  A8                    BYTE <COLOR_MEM + 680
07569  2179  D0                    BYTE <COLOR_MEM + 720
07570  217A  F8                    BYTE <COLOR_MEM + 760
07571  217B  20                    BYTE <COLOR_MEM + 800
07572  217C  48                    BYTE <COLOR_MEM + 840
07573  217D  70                    BYTE <COLOR_MEM + 880
07574  217E  98                    BYTE <COLOR_MEM + 920
07575  217F  C0                    BYTE <COLOR_MEM + 960
07576  2180             
07577  2180             COLOR_LINE_OFFSET_TABLE_HI 
07578  2180  D8                    BYTE >COLOR_MEM
07579  2181  D8                    BYTE >COLOR_MEM + 40
07580  2182  D8                    BYTE >COLOR_MEM + 80
07581  2183  D8                    BYTE >COLOR_MEM + 120
07582  2184  D8                    BYTE >COLOR_MEM + 160
07583  2185  D8                    BYTE >COLOR_MEM + 200
07584  2186  D8                    BYTE >COLOR_MEM + 240
07585  2187  D9                    BYTE >COLOR_MEM + 280
07586  2188  D9                    BYTE >COLOR_MEM + 320
07587  2189  D9                    BYTE >COLOR_MEM + 360
07588  218A  D9                    BYTE >COLOR_MEM + 400
07589  218B  D9                    BYTE >COLOR_MEM + 440
07590  218C  D9                    BYTE >COLOR_MEM + 480
07591  218D  DA                    BYTE >COLOR_MEM + 520
07592  218E  DA                    BYTE >COLOR_MEM + 560
07593  218F  DA                    BYTE >COLOR_MEM + 600
07594  2190  DA                    BYTE >COLOR_MEM + 640
07595  2191  DA                    BYTE >COLOR_MEM + 680
07596  2192  DA                    BYTE >COLOR_MEM + 720
07597  2193  DA                    BYTE >COLOR_MEM + 760
07598  2194  DB                    BYTE >COLOR_MEM + 800
07599  2195  DB                    BYTE >COLOR_MEM + 840
07600  2196  DB                    BYTE >COLOR_MEM + 880
07601  2197  DB                    BYTE >COLOR_MEM + 920
07602  2198  DB                    BYTE >COLOR_MEM + 960
07603  2199             
07604  2199             SCORE_LINE_OFFSET_TABLE_LO 
07605  2199  00                    BYTE <SCORE_SCREEN
07606  219A  28                    BYTE <SCORE_SCREEN + 40
07607  219B  50                    BYTE <SCORE_SCREEN + 80
07608  219C  78                    BYTE <SCORE_SCREEN + 120
07609  219D  A0                    BYTE <SCORE_SCREEN + 160
07610  219E  C8                    BYTE <SCORE_SCREEN + 200
07611  219F  F0                    BYTE <SCORE_SCREEN + 240
07612  21A0  18                    BYTE <SCORE_SCREEN + 280
07613  21A1  40                    BYTE <SCORE_SCREEN + 320
07614  21A2  68                    BYTE <SCORE_SCREEN + 360
07615  21A3  90                    BYTE <SCORE_SCREEN + 400
07616  21A4  B8                    BYTE <SCORE_SCREEN + 440
07617  21A5  E0                    BYTE <SCORE_SCREEN + 480
07618  21A6  08                    BYTE <SCORE_SCREEN + 520
07619  21A7  30                    BYTE <SCORE_SCREEN + 560
07620  21A8  58                    BYTE <SCORE_SCREEN + 600
07621  21A9  80                    BYTE <SCORE_SCREEN + 640
07622  21AA  A8                    BYTE <SCORE_SCREEN + 680
07623  21AB  D0                    BYTE <SCORE_SCREEN + 720
07624  21AC  F8                    BYTE <SCORE_SCREEN + 760
07625  21AD  20                    BYTE <SCORE_SCREEN + 800
07626  21AE  48                    BYTE <SCORE_SCREEN + 840
07627  21AF  70                    BYTE <SCORE_SCREEN + 880
07628  21B0  98                    BYTE <SCORE_SCREEN + 920
07629  21B1  C0                    BYTE <SCORE_SCREEN + 960
07630  21B2             
07631  21B2             SCORE_LINE_OFFSET_TABLE_HI 
07632  21B2  58                    BYTE >SCORE_SCREEN
07633  21B3  58                    BYTE >SCORE_SCREEN + 40
07634  21B4  58                    BYTE >SCORE_SCREEN + 80
07635  21B5  58                    BYTE >SCORE_SCREEN + 120
07636  21B6  58                    BYTE >SCORE_SCREEN + 160
07637  21B7  58                    BYTE >SCORE_SCREEN + 200
07638  21B8  58                    BYTE >SCORE_SCREEN + 240
07639  21B9  59                    BYTE >SCORE_SCREEN + 280
07640  21BA  59                    BYTE >SCORE_SCREEN + 320
07641  21BB  59                    BYTE >SCORE_SCREEN + 360
07642  21BC  59                    BYTE >SCORE_SCREEN + 400
07643  21BD  59                    BYTE >SCORE_SCREEN + 440
07644  21BE  59                    BYTE >SCORE_SCREEN + 480
07645  21BF  5A                    BYTE >SCORE_SCREEN + 520
07646  21C0  5A                    BYTE >SCORE_SCREEN + 560
07647  21C1  5A                    BYTE >SCORE_SCREEN + 600
07648  21C2  5A                    BYTE >SCORE_SCREEN + 640
07649  21C3  5A                    BYTE >SCORE_SCREEN + 680
07650  21C4  5A                    BYTE >SCORE_SCREEN + 720
07651  21C5  5A                    BYTE >SCORE_SCREEN + 760
07652  21C6  5B                    BYTE >SCORE_SCREEN + 800
07653  21C7  5B                    BYTE >SCORE_SCREEN + 840
07654  21C8  5B                    BYTE >SCORE_SCREEN + 880
07655  21C9  5B                    BYTE >SCORE_SCREEN + 920
07656  21CA  5B                    BYTE >SCORE_SCREEN + 960
07657  21CB             XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;=============================================================================== 
07658  21CB             ; CHAR PAD TOOLS
07659  21CB             ;===============================================================================
07660  21CB             ; PETER 'SIG' HEWETT 2017
07661  21CB             ;-------------------------------------------------------------------------------
07662  21CB             ; TOOLS FOR INTEGRATING CHARPAD CHARACTER SETS, TILES, AND MAPS
07663  21CB             ;===============================================================================
07664  21CB             ; MAP NOTES:
07665  21CB             ;
07666  21CB             ; CHARPAD SETUP : TO MAKE A LEVEL MAP, SET UP FOR 256 CHARACTERS
07667  21CB             ;                 A TILE SIZE OF 4X4
07668  21CB             ;                 SET NUMBER OF TILES TO 64
07669  21CB             ;                 SET MAP SIZE TO 64 X 32
07670  21CB             ;                 *IMPORTANT* SET COLOR TO 'PER CHARACTER'
07671  21CB             ;
07672  21CB             
07673  21CB             ;-------------------------------------------------------------------------------
07674  21CB             ;                                                               DRAW MAP
07675  21CB             ;-------------------------------------------------------------------------------
07676  21CB             ; DRAW THE ENTIRE MAP ON THE SCREEN. THIS WON'T BE DONE THAT OFTEN AS MOST UPDATES
07677  21CB             ; TO THE SCREEN WILL BE SCROLLING. BUT FOR STARTING A LEVEL, RESETTING ON DEATH,
07678  21CB             ; OR TELEPORTING, WE NEED TO BUILD THE ENTIRE SCREEN.
07679  21CB             ; THIS ALSO SETS UP ESSENTIAL DATA FOR USING THE MAP.
07680  21CB             ; INITIALIZES : MAP_POS_X
07681  21CB             ;               MAP_POS_Y
07682  21CB             ;               MAP_POS_ADDRESS
07683  21CB             ;               MAP_X_DELTA
07684  21CB             ;               MAP_Y_DELTA
07685  21CB             ;
07686  21CB             ; X = START MAP X COORD (TOP LEFT CORNER)
07687  21CB             ; Y = START MAP Y COORD (TOP LEFT CORNER)
07688  21CB             ;
07689  21CB             ; USES ZEROPAGE_POINTER_4 (AS TILEDRAW USES 1,2,3)
07690  21CB             ;-------------------------------------------------------------------------------
07691  21CB             
07692  21CB             DRAWMAP
07693  21CB             
07694  21CB  A9 00                 LDA #0
07695  21CD  85 32                 STA MAP_X_DELTA
07696  21CF  85 33                 STA MAP_Y_DELTA
07697  21D1             
07698  21D1  86 30                 STX MAP_X_POS
07699  21D3  84 31                 STY MAP_Y_POS
07700  21D5             
07701  21D5                        ;---------------------------------------------------------------
07702  21D5                        ; FIRST FIND THE ADDRESS FOR THE STARTING MAP POSITION
07703  21D5             
07704  21D5  A6 31                 LDX MAP_Y_POS
07705  21D7             
07706  21D7  BD 6E 23              LDA MAP2025_LINE_LOOKUP_LO,X        ; FETCH THE ADDRESS FOR THE LINE (Y POS)
07707  21DA  85 23                 STA ZEROPAGE_POINTER_4
07708  21DC  BD 84 23              LDA MAP2025_LINE_LOOKUP_HI,X
07709  21DF  85 24                 STA ZEROPAGE_POINTER_4 + 1
07710  21E1             
07711  21E1  18                    CLC
07712  21E2  A5 23                 LDA ZEROPAGE_POINTER_4          ; ADD THE X POSITION
07713  21E4  65 30                 ADC MAP_X_POS
07714  21E6  85 23                 STA ZEROPAGE_POINTER_4
07715  21E8  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07716  21EA  69 00                 ADC #0
07717  21EC  85 24                 STA ZEROPAGE_POINTER_4 + 1      ; ZEROPAGE_POINTER_1 NOW HOLDS THE
07718  21EE                        ; MAP START ADDRESS
07719  21EE             
07720  21EE                        ; SAVE THIS INFO FOR MAP USAGE
07721  21EE             
07722  21EE             
07723  21EE  A5 23                 LDA ZEROPAGE_POINTER_4
07724  21F0  85 2E                 STA MAP_POS_ADDRESS
07725  21F2  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07726  21F4  85 2F                 STA MAP_POS_ADDRESS + 1
07727  21F6                        
07728  21F6                        ;-----------------------------------------------------------------------
07729  21F6                        ; FETCH MAP DATA AND DRAW TILE - COORDS ARE IN 'TILES' NOT
07730  21F6                        ; CHARACTER POSITIONS
07731  21F6             
07732  21F6  A0 00                 LDY #0                  ; HOLDS X SCREEN COORD
07733  21F8  A2 00                 LDX #0                  ; HOLDS Y SCREEN COORD
07734  21FA             
07735  21FA             @LOOP
07736  21FA  B1 23                 LDA (ZEROPAGE_POINTER_4),Y              ; FETCH MAP DATA
07737  21FC  20 19 22              JSR DRAWTILE                            ; DRAW THE TILE
07738  21FF             
07739  21FF  C8                    INY                                     ; INC X AND CHECK FOR END OF SCREEN
07740  2200  C0 0A                 CPY #10                                 ; (10 TILES)
07741  2202  D0 F6                 BNE @LOOP
07742  2204                        ; GO DOWN ONE LINE ON THE MAP (64 CHAR)
07743  2204             
07744  2204             
07745  2204  A5 23                 LDA ZEROPAGE_POINTER_4
07746  2206  18                    CLC
07747  2207  69 10                 ADC #16
07748  2209  85 23                 STA ZEROPAGE_POINTER_4
07749  220B  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07750  220D  69 00                 ADC #0
07751  220F  85 24                 STA ZEROPAGE_POINTER_4 + 1
07752  2211             
07753  2211  A0 00                 LDY #0
07754  2213  E8                    INX
07755  2214  E0 06                 CPX #6
07756  2216  D0 E2                 BNE @LOOP
07757  2218  60                    RTS
07758  2219             
07759  2219             
07760  2219             ;-------------------------------------------------------------------------------
07761  2219             ;                                                               DRAW TILE
07762  2219             ;-------------------------------------------------------------------------------
07763  2219             ; THIS ROUTINE ACTUALLY WON'T BE CALLED THAT OFTEN. MOST UPDATES ARE SCROLLING,
07764  2219             ; SO THERE ARE VERY FEW CIRCUMSTANCES THAT NEED A WHOLE TILE DRAWN AT ONCE.
07765  2219             ;-------------------------------------------------------------------------------
07766  2219             ;
07767  2219             ; X = SCREEN TILE Y COORD    - 'FLIPPED' SO IT DOVETAILS INTO THE MAPDRAW
07768  2219             ; Y = SCREEN TILE X COORD       ROUTINE WITHOUT EXHANGING DATA IN REGISTERS
07769  2219             ; A = TILE # TO DRAW
07770  2219             ;
07771  2219             ; RESTORES REGISTERS OFF THE STACK A / X / Y
07772  2219             ;-------------------------------------------------------------------------------
07773  2219             
07774  2219             
07775  2219             DRAWTILE
07776  2219  85 03                 STA PARAM1                      ; SAVE TILE NUMBER
07777  221B  84 04                 STY PARAM2                      ; SAVE X POS
07778  221D  86 05                 STX PARAM3                      ; SAVE Y POS
07779  221F             
07780  221F             
07781  221F             
07782  221F  48                    PHA
07783  2220  8A                    TXA
07784  2221  48                    PHA
07785  2222  98                    TYA
07786  2223  48                    PHA
07787  2224                        ; EXIT CLEANER - THIS ROUTINE WILL
07788  2224                        ; LIKELY BE NESTED
07789  2224                        ;------------------------------------------------------
07790  2224                        ; FIRST GET THE DESTINATION FOR THE TILE
07791  2224             
07792  2224  A5 05                 LDA PARAM3                      ; FETCH THE Y POS (IN TILE COORDS)
07793  2226  0A                    ASL
07794  2227  0A                    ASL                             ; MULTIPLY BY 4 (TILES ARE 4 X 4 CHARS)
07795  2228  AA                    TAX                             ; SCREEN LINE IN X
07796  2229             
07797  2229  20 DC 1F              JSR GETSCREENLINEADDRESS      ; FETCH LINE ADDRESS BASED ON CURRENT DISPLAYED SCREEN
07798  222C                        ; Y LINE ADDRESS IS IN ZEROPAGE_POINTER_1
07799  222C             
07800  222C             
07801  222C  BD 67 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X        ; FETCH COLOR RAM LINE ADDRESS TOO
07802  222F  85 21                 STA ZEROPAGE_POINTER_3
07803  2231  BD 80 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
07804  2234  85 22                 STA ZEROPAGE_POINTER_3 + 1
07805  2236                        
07806  2236  A5 04                 LDA PARAM2                      ; GET X COORD
07807  2238  0A                    ASL                             ; MULTIPLY BY 4
07808  2239  0A                    ASL
07809  223A  AA                    TAX                             ; SAVE IT IN X
07810  223B  18                    CLC                             ; ADD TO Y LINE ADDRESS
07811  223C  65 17                 ADC ZEROPAGE_POINTER_1
07812  223E  85 17                 STA ZEROPAGE_POINTER_1
07813  2240  A5 18                 LDA ZEROPAGE_POINTER_1 + 1
07814  2242  69 00                 ADC #0
07815  2244  85 18                 STA ZEROPAGE_POINTER_1 + 1      ; DESTINATION BASE ADDRESS IS IN ZEROPAGE_POINTER_1
07816  2246  8A                    TXA
07817  2247  18                    CLC
07818  2248  65 21                 ADC ZEROPAGE_POINTER_3          ; COLOR RAM DESTINATION IS IN ZEROPAGE_POINTER_3
07819  224A  85 21                 STA ZEROPAGE_POINTER_3
07820  224C  A5 22                 LDA ZEROPAGE_POINTER_3 + 1
07821  224E  69 00                 ADC #0
07822  2250  85 22                 STA ZEROPAGE_POINTER_3 + 1
07823  2252             
07824  2252                        ;------------------------------------------------------------
07825  2252                        ; FETCH THE SOURCE TILE ADDRESS
07826  2252             
07827  2252  A6 03                 LDX PARAM1                      ; FETCH THE TILE NUMBER
07828  2254  BD C6 23              LDA TILE_NUMBER_LOOKUP_LO,X
07829  2257  85 19                 STA ZEROPAGE_POINTER_2
07830  2259  BD 07 24              LDA TILE_NUMBER_LOOKUP_HI,X
07831  225C  85 1A                 STA ZEROPAGE_POINTER_2 + 1
07832  225E                        ;-------------------------------------------------------------
07833  225E                        ; LOOP THROUGH AND DRAW THE TILE
07834  225E             
07835  225E  A0 00                 LDY #0
07836  2260             @DRAWLOOP
07837  2260  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; GET THE CHARACTER CODE
07838  2262  91 17                 STA (ZEROPAGE_POINTER_1),Y      ; STORE IT ON THE SCREEN
07839  2264  AA                    TAX                             ; PASS TO X AS AN OFFSET
07840  2265  BD 20 78              LDA ATTRIBUTE_MEM,X             ; FETCH THE COLOR/DATA ATTRIBUTE
07841  2268  91 21                 STA (ZEROPAGE_POINTER_3),Y      ; WRITE IT TO COLOR RAM
07842  226A                        
07843  226A  C0 0F                 CPY #15                         ; DRAWN THE 15TH CHARACTER? WE'RE FINISHED
07844  226C  F0 25                 BEQ @DONE
07845  226E             
07846  226E  98                    TYA                             ; SAVE Y BEFORE THE INCREMENT FOR OUR TEST
07847  226F  C8                    INY                             ; (SAVES HAVING TO INC IT IN 2 DIFF PLACES)
07848  2270             
07849  2270                        ; I NEED TO COUNT 0-3 TO DRAW A ROW OF TILES,
07850  2270  29 03                 AND #%00000011                  ; BUT I NEED TO COUNT 0-15 TO FETCH THE TILE DATA
07851  2272  C9 03                 CMP #3                          ; BOTH NEED TO USE INDIRECT Y ADDRESSING, AND SAVING/
07852  2274  D0 EA                 BNE @DRAWLOOP                   ; FETCHING Y RAPIDLY BECOMES A TANGLED NIGHTMARE.
07853  2276                        ; BY MASKING OUT THE LAST 2 BITS IN A, WE GET A NUMBER
07854  2276                        ; THAT COUNTS 0-3 OVER AND OVER WITHOUT STOPPING THE
07855  2276                        ; DATA FETCH COUNT 0-15. IT'S ALSO FASTER THAN MY OTHER
07856  2276                        ; OPTIONS BY QUITE A BIT.
07857  2276             
07858  2276             
07859  2276  18                    CLC                             ; ADD NEW LINE
07860  2277  A5 17                 LDA ZEROPAGE_POINTER_1          ; INCREMENT DESTINATION AND COLOR RAM BY 1 LINE - 4 CHARS
07861  2279  69 24                 ADC #40 - 4
07862  227B  85 17                 STA ZEROPAGE_POINTER_1          ; BY 'BACKSETTING' OUR POINTERS, WE DON'T NEED TO CHANGE Y
07863  227D  A5 18                 LDA ZEROPAGE_POINTER_1 + 1      ; WHEN DRAWING 0-3 CHARACTERS, AND CAN LEAVE THE 0-15
07864  227F  69 00                 ADC #0                          ; COUNT INTACT.
07865  2281  85 18                 STA ZEROPAGE_POINTER_1 + 1      ; WE HAVE TO INCREASE THEM TO THE NEXT LINE ANYWAYS, SO THIS
07866  2283                        ; ONLY SAVES TIME.
07867  2283  18                    CLC
07868  2284  A5 21                 LDA ZEROPAGE_POINTER_3
07869  2286  69 24                 ADC #40 - 4
07870  2288  85 21                 STA ZEROPAGE_POINTER_3
07871  228A  A5 22                 LDA ZEROPAGE_POINTER_3 + 1
07872  228C  69 00                 ADC #0
07873  228E  85 22                 STA ZEROPAGE_POINTER_3 + 1
07874  2290  4C 60 22              JMP @DRAWLOOP
07875  2293             @DONE
07876  2293             
07877  2293             
07878  2293  68                    PLA
07879  2294  A8                    TAY
07880  2295  68                    PLA
07881  2296  AA                    TAX
07882  2297  68                    PLA
07883  2298  60                    RTS
07884  2299             
07885  2299             
07886  2299             
07887  2299             
07888  2299             
07889  2299             
07890  2299             
07891  2299             TILEMAP
07892  2299             
07893  2299  A9 00                 LDA #0
07894  229B  85 32                 STA MAP_X_DELTA
07895  229D  85 33                 STA MAP_Y_DELTA
07896  229F             
07897  229F  86 30                 STX MAP_X_POS
07898  22A1  84 31                 STY MAP_Y_POS
07899  22A3             
07900  22A3                        ;---------------------------------------------------------------
07901  22A3                        ; FIRST FIND THE ADDRESS FOR THE STARTING MAP POSITION
07902  22A3             
07903  22A3  A6 31                 LDX MAP_Y_POS
07904  22A5             
07905  22A5  BD 9A 23              LDA ALLEYMAP_LINE_LOOKUP_LO,X
07906  22A8  85 23                 STA ZEROPAGE_POINTER_4
07907  22AA  BD B0 23              LDA ALLEYMAP_LINE_LOOKUP_HI,X
07908  22AD  85 24                 STA ZEROPAGE_POINTER_4 + 1
07909  22AF             
07910  22AF  18                    CLC
07911  22B0  A5 23                 LDA ZEROPAGE_POINTER_4          ; ADD THE X POSITION
07912  22B2  65 30                 ADC MAP_X_POS
07913  22B4  85 23                 STA ZEROPAGE_POINTER_4
07914  22B6  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07915  22B8  69 00                 ADC #0
07916  22BA  85 24                 STA ZEROPAGE_POINTER_4 + 1      ; ZEROPAGE_POINTER_1 NOW HOLDS THE MAP
07917  22BC                        ; START ADDRESS
07918  22BC             
07919  22BC                        ; SAVE THIS INFO FOR MAP USAGE
07920  22BC             
07921  22BC             
07922  22BC  A5 23                 LDA ZEROPAGE_POINTER_4
07923  22BE  85 2E                 STA MAP_POS_ADDRESS
07924  22C0  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07925  22C2  85 2F                 STA MAP_POS_ADDRESS + 1
07926  22C4                        
07927  22C4                        ;-----------------------------------------------------------------------
07928  22C4                        ; FETCH MAP DATA AND DRAW TILE - COORDS ARE IN 'TILES' NOT
07929  22C4                        ; CHARACTER POSITIONS
07930  22C4             
07931  22C4  A0 00                 LDY #0                  ; HOLDS X SCREEN COORD
07932  22C6  A2 00                 LDX #0                  ; HOLDS Y SCREEN COORD
07933  22C8             
07934  22C8             @LOOP
07935  22C8  B1 23                 LDA (ZEROPAGE_POINTER_4),Y              ; FETCH MAP DATA
07936  22CA  20 E7 22              JSR TILEDRAW                            ; DRAW THE TILE
07937  22CD             
07938  22CD  C8                    INY                                     ; INC X AND CHECK FOR END OF SCREEN
07939  22CE  C0 0A                 CPY #10                                 ; (10 TILES)
07940  22D0  D0 F6                 BNE @LOOP
07941  22D2                        ; GO DOWN ONE LINE ON THE MAP (64 CHAR)
07942  22D2             
07943  22D2             
07944  22D2  A5 23                 LDA ZEROPAGE_POINTER_4
07945  22D4  18                    CLC
07946  22D5  69 11                 ADC #17
07947  22D7  85 23                 STA ZEROPAGE_POINTER_4
07948  22D9  A5 24                 LDA ZEROPAGE_POINTER_4 + 1
07949  22DB  69 00                 ADC #0
07950  22DD  85 24                 STA ZEROPAGE_POINTER_4 + 1
07951  22DF             
07952  22DF  A0 00                 LDY #0
07953  22E1  E8                    INX
07954  22E2  E0 06                 CPX #6
07955  22E4  D0 E2                 BNE @LOOP
07956  22E6  60                    RTS
07957  22E7             
07958  22E7             
07959  22E7             ;-------------------------------------------------------------------------------
07960  22E7             ;                                                               DRAW TILE
07961  22E7             ;-------------------------------------------------------------------------------
07962  22E7             ; THIS ROUTINE ACTUALLY WON'T BE CALLED THAT OFTEN. MOST UPDATES ARE SCROLLING,
07963  22E7             ; SO THERE ARE VERY FEW CIRCUMSTANCES THAT NEED A WHOLE TILE DRAWN AT ONCE.
07964  22E7             ;-------------------------------------------------------------------------------
07965  22E7             ;
07966  22E7             ; X = SCREEN TILE Y COORD    - 'FLIPPED' SO IT DOVETAILS INTO THE MAPDRAW
07967  22E7             ; Y = SCREEN TILE X COORD       ROUTINE WITHOUT EXHANGING DATA IN REGISTERS
07968  22E7             ; A = TILE # TO DRAW
07969  22E7             ;
07970  22E7             ; RESTORES REGISTERS OFF THE STACK A / X / Y
07971  22E7             ;-------------------------------------------------------------------------------
07972  22E7             
07973  22E7             
07974  22E7             TILEDRAW
07975  22E7  85 03                 STA PARAM1                      ; SAVE TILE NUMBER
07976  22E9  84 04                 STY PARAM2                      ; SAVE X POS
07977  22EB  86 05                 STX PARAM3                      ; SAVE Y POS
07978  22ED             
07979  22ED             
07980  22ED             
07981  22ED  48                    PHA
07982  22EE  8A                    TXA
07983  22EF  48                    PHA
07984  22F0  98                    TYA
07985  22F1  48                    PHA
07986  22F2                        ; EXIT CLEANER - THIS ROUTINE WILL
07987  22F2                        ; LIKELY BE NESTED
07988  22F2                        ;------------------------------------------------------
07989  22F2                        ; FIRST GET THE DESTINATION FOR THE TILE
07990  22F2             
07991  22F2  A5 05                 LDA PARAM3                      ; FETCH THE Y POS (IN TILE COORDS)
07992  22F4  0A                    ASL
07993  22F5  0A                    ASL                             ; MULTIPLY BY 4 (TILES ARE 4 X 4 CHARS)
07994  22F6  AA                    TAX                             ; SCREEN LINE IN X
07995  22F7             
07996  22F7  20 DC 1F              JSR GETSCREENLINEADDRESS      ; FETCH LINE ADDRESS BASED ON CURRENT DISPLAYED SCREEN
07997  22FA                        ; Y LINE ADDRESS IS IN ZEROPAGE_POINTER_1
07998  22FA             
07999  22FA             
08000  22FA  BD 67 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X        ; FETCH COLOR RAM LINE ADDRESS TOO
08001  22FD  85 21                 STA ZEROPAGE_POINTER_3
08002  22FF  BD 80 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
08003  2302  85 22                 STA ZEROPAGE_POINTER_3 + 1
08004  2304                        
08005  2304  A5 04                 LDA PARAM2                      ; GET X COORD
08006  2306  0A                    ASL                             ; MULTIPLY BY 4
08007  2307  0A                    ASL
08008  2308  AA                    TAX                             ; SAVE IT IN X
08009  2309  18                    CLC                             ; ADD TO Y LINE ADDRESS
08010  230A  65 17                 ADC ZEROPAGE_POINTER_1
08011  230C  85 17                 STA ZEROPAGE_POINTER_1
08012  230E  A5 18                 LDA ZEROPAGE_POINTER_1 + 1
08013  2310  69 00                 ADC #0
08014  2312  85 18                 STA ZEROPAGE_POINTER_1 + 1      ; DESTINATION BASE ADDRESS IS IN ZEROPAGE_POINTER_1
08015  2314  8A                    TXA
08016  2315  18                    CLC
08017  2316  65 21                 ADC ZEROPAGE_POINTER_3          ; COLOR RAM DESTINATION IS IN ZEROPAGE_POINTER_3
08018  2318  85 21                 STA ZEROPAGE_POINTER_3
08019  231A  A5 22                 LDA ZEROPAGE_POINTER_3 + 1
08020  231C  69 00                 ADC #0
08021  231E  85 22                 STA ZEROPAGE_POINTER_3 + 1
08022  2320             
08023  2320                        ;------------------------------------------------------------
08024  2320                        ; FETCH THE SOURCE TILE ADDRESS
08025  2320             
08026  2320  A6 03                 LDX PARAM1                      ; FETCH THE TILE NUMBER
08027  2322  BD 47 24              LDA TILE2_NUMBER_LOOKUP_LO,X
08028  2325  85 19                 STA ZEROPAGE_POINTER_2
08029  2327  BD 88 24              LDA TILE2_NUMBER_LOOKUP_HI,X
08030  232A  85 1A                 STA ZEROPAGE_POINTER_2 + 1
08031  232C                        ;-------------------------------------------------------------
08032  232C                        ; LOOP THROUGH AND DRAW THE TILE
08033  232C             
08034  232C  A0 00                 LDY #0
08035  232E             @DRAWLOOP
08036  232E  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; GET THE CHARACTER CODE
08037  2330  91 17                 STA (ZEROPAGE_POINTER_1),Y      ; STORE IT ON THE SCREEN
08038  2332  AA                    TAX                             ; PASS TO X AS AN OFFSET
08039  2333  BD AA 80              LDA ATTRIBUTE2_MEM,X             ; FETCH THE COLOR/DATA ATTRIBUTE
08040  2336  91 21                 STA (ZEROPAGE_POINTER_3),Y      ; WRITE IT TO COLOR RAM
08041  2338                        
08042  2338  C0 0F                 CPY #15                         ; DRAWN THE 15TH CHARACTER? WE'RE FINISHED
08043  233A  F0 25                 BEQ @DONE
08044  233C             
08045  233C  98                    TYA                             ; SAVE Y BEFORE THE INCREMENT FOR OUR TEST
08046  233D  C8                    INY                             ; (SAVES HAVING TO INC IT IN 2 DIFF PLACES)
08047  233E             
08048  233E                        ; I NEED TO COUNT 0-3 TO DRAW A ROW OF TILES,
08049  233E  29 03                 AND #%00000011                  ; BUT I NEED TO COUNT 0-15 TO FETCH THE TILE DATA
08050  2340  C9 03                 CMP #3                          ; BOTH NEED TO USE INDIRECT Y ADDRESSING, AND SAVING/
08051  2342  D0 EA                 BNE @DRAWLOOP                   ; FETCHING Y RAPIDLY BECOMES A TANGLED NIGHTMARE.
08052  2344                        ; BY MASKING OUT THE LAST 2 BITS IN A, WE GET A NUMBER
08053  2344                        ; THAT COUNTS 0-3 OVER AND OVER WITHOUT STOPPING THE
08054  2344                        ; DATA FETCH COUNT 0-15. IT'S ALSO FASTER THAN MY OTHER
08055  2344                        ; OPTIONS BY QUITE A BIT.
08056  2344             
08057  2344             
08058  2344  18                    CLC                             ; ADD NEW LINE
08059  2345  A5 17                 LDA ZEROPAGE_POINTER_1          ; INCREMENT DESTINATION AND COLOR RAM BY 1 LINE - 4 CHARS
08060  2347  69 24                 ADC #40 - 4
08061  2349  85 17                 STA ZEROPAGE_POINTER_1          ; BY 'BACKSETTING' OUR POINTERS, WE DON'T NEED TO CHANGE Y
08062  234B  A5 18                 LDA ZEROPAGE_POINTER_1 + 1      ; WHEN DRAWING 0-3 CHARACTERS, AND CAN LEAVE THE 0-15
08063  234D  69 00                 ADC #0                          ; COUNT INTACT.
08064  234F  85 18                 STA ZEROPAGE_POINTER_1 + 1      ; WE HAVE TO INCREASE THEM TO THE NEXT LINE ANYWAYS, SO THIS
08065  2351                        ; ONLY SAVES TIME.
08066  2351  18                    CLC
08067  2352  A5 21                 LDA ZEROPAGE_POINTER_3
08068  2354  69 24                 ADC #40 - 4
08069  2356  85 21                 STA ZEROPAGE_POINTER_3
08070  2358  A5 22                 LDA ZEROPAGE_POINTER_3 + 1
08071  235A  69 00                 ADC #0
08072  235C  85 22                 STA ZEROPAGE_POINTER_3 + 1
08073  235E  4C 2E 23              JMP @DRAWLOOP
08074  2361             @DONE
08075  2361             
08076  2361             
08077  2361  68                    PLA
08078  2362  A8                    TAY
08079  2363  68                    PLA
08080  2364  AA                    TAX
08081  2365  68                    PLA
08082  2366  60                    RTS
08083  2367             
08084  2367             ;===============================================================================
08085  2367             ; LEVEL DATA AND TABLES
08086  2367             ;===============================================================================
08087  2367             
08088  2367             CURRENT_LEVEL 
08089  2367  00                    BYTE 0
08090  2368             
08091  2368             ;CHAR_ADDRESS
08092  2368             ;        WORD LEVEL_1_CHARS
08093  2368             
08094  2368             ATTRIB_ADDRESS 
08095  2368  20 78                 WORD ATTRIBUTE_MEM
08096  236A             
08097  236A             TILE_ADDRESS 
08098  236A  19 79                 WORD TILE_MEM
08099  236C             
08100  236C             MAP_ADDRESS 
08101  236C  00 E0                 WORD LEVEL_1_MAP
08102  236E             ;-------------------------------------------------------------------------------
08103  236E             ; MAP DATA LOOKUP TABLE 1
08104  236E             ;-------------------------------------------------------------------------------
08105  236E             ; LOOKUP TABLE TO RETURN AN ADDRESS TO A MAP LINE (Y COORD). THIS TABLE ASSUMES
08106  236E             ; A LANDSCAPE
08107  236E             ; LAYOUT (64 X 32 TILES). A PORTRAIT STYLE TABLE WILL BE DONE IN THE FUTURE TO
08108  236E             ; ALLOW MORE VERTICAL MAPS
08109  236E             ;-------------------------------------------------------------------------------
08110  236E             MAP_LINE_LOOKUP_LO 
08111  236E             ;        BYTE <MAP_MEM
08112  236E             ;        BYTE <MAP_MEM + 100
08113  236E             ;        BYTE <MAP_MEM + 200
08114  236E             ;        BYTE <MAP_MEM + 300
08115  236E             ;        BYTE <MAP_MEM + 400
08116  236E             ;        BYTE <MAP_MEM + 500
08117  236E             ;        BYTE <MAP_MEM + 600
08118  236E             ;        BYTE <MAP_MEM + 700
08119  236E             ;        BYTE <MAP_MEM + 800
08120  236E             ;        BYTE <MAP_MEM + 900
08121  236E             ;        BYTE <MAP_MEM + 1000             ; 10
08122  236E             ;        BYTE <MAP_MEM + 1100
08123  236E             ;        BYTE <MAP_MEM + 1200
08124  236E             ;        BYTE <MAP_MEM + 1300
08125  236E             ;        BYTE <MAP_MEM + 1400
08126  236E             ;        BYTE <MAP_MEM + 1500
08127  236E             ;        BYTE <MAP_MEM + 1600
08128  236E             ;        BYTE <MAP_MEM + 1700
08129  236E             ;        BYTE <MAP_MEM + 1800
08130  236E             ;        BYTE <MAP_MEM + 1900
08131  236E             ;        BYTE <MAP_MEM + 2000            ;20
08132  236E             ;        BYTE <MAP_MEM + 2100
08133  236E             ;        BYTE <MAP_MEM + 2200
08134  236E             ;        BYTE <MAP_MEM + 2300
08135  236E             ;        BYTE <MAP_MEM + 2400
08136  236E             ;        BYTE <MAP_MEM + 2500
08137  236E             ;        BYTE <MAP_MEM + 2600
08138  236E             ;        BYTE <MAP_MEM + 2700
08139  236E             ;        BYTE <MAP_MEM + 2800
08140  236E             ;        BYTE <MAP_MEM + 2900
08141  236E             ;        BYTE <MAP_MEM + 3000            ;30
08142  236E             ;        BYTE <MAP_MEM + 3100
08143  236E             ;        BYTE <MAP_MEM + 3200            ;32
08144  236E             
08145  236E             ;;; NEW LINES - PARKOUR BIG MAP
08146  236E             ;        BYTE <MAP_MEM + 3300
08147  236E             ;        BYTE <MAP_MEM + 3400
08148  236E             ;        BYTE <MAP_MEM + 3500
08149  236E             ;        BYTE <MAP_MEM + 3600
08150  236E             ;        BYTE <MAP_MEM + 3700
08151  236E             ;        BYTE <MAP_MEM + 3800
08152  236E             ;        BYTE <MAP_MEM + 3900
08153  236E             ;        BYTE <MAP_MEM + 4000
08154  236E             ;        BYTE <MAP_MEM + 4100
08155  236E             ;        BYTE <MAP_MEM + 4200
08156  236E             ;        BYTE <MAP_MEM + 4300
08157  236E             ;        BYTE <MAP_MEM + 4400
08158  236E             ;        BYTE <MAP_MEM + 4500
08159  236E             
08160  236E             ;        BYTE <MAP_MEM + 4600
08161  236E             ;        BYTE <MAP_MEM + 4700
08162  236E             ;        BYTE <MAP_MEM + 4800
08163  236E             ;        BYTE <MAP_MEM + 4900
08164  236E             ;        BYTE <MAP_MEM + 5000
08165  236E             
08166  236E             ;        BYTE <MAP_MEM + 5010
08167  236E             ;        BYTE <MAP_MEM + 5020
08168  236E             ;        BYTE <MAP_MEM + 5030
08169  236E             ;        BYTE <MAP_MEM + 5040
08170  236E             ;        BYTE <MAP_MEM + 5050
08171  236E             
08172  236E             MAP_LINE_LOOKUP_HI 
08173  236E             ;        BYTE >MAP_MEM
08174  236E             ;        BYTE >MAP_MEM + 100
08175  236E             ;        BYTE >MAP_MEM + 200
08176  236E             ;        BYTE >MAP_MEM + 300
08177  236E             ;        BYTE >MAP_MEM + 400
08178  236E             ;        BYTE >MAP_MEM + 500
08179  236E             ;        BYTE >MAP_MEM + 600
08180  236E             ;        BYTE >MAP_MEM + 700
08181  236E             ;        BYTE >MAP_MEM + 800
08182  236E             ;        BYTE >MAP_MEM + 900
08183  236E             ;        BYTE >MAP_MEM + 1000            ; 10
08184  236E             ;        BYTE >MAP_MEM + 1100
08185  236E             ;        BYTE >MAP_MEM + 1200
08186  236E             ;        BYTE >MAP_MEM + 1300
08187  236E             ;        BYTE >MAP_MEM + 1400
08188  236E             ;        BYTE >MAP_MEM + 1500
08189  236E             ;        BYTE >MAP_MEM + 1600
08190  236E             ;        BYTE >MAP_MEM + 1700
08191  236E             ;        BYTE >MAP_MEM + 1800
08192  236E             ;        BYTE >MAP_MEM + 1900
08193  236E             ;        BYTE >MAP_MEM + 2000            ;20
08194  236E             ;        BYTE >MAP_MEM + 2100
08195  236E             ;        BYTE >MAP_MEM + 2200
08196  236E             ;        BYTE >MAP_MEM + 2300        ; BYTE >MAP_MEM + 4700
08197  236E             ;        BYTE >MAP_MEM + 2400
08198  236E             ;        BYTE >MAP_MEM + 2500
08199  236E             ;        BYTE >MAP_MEM + 2600
08200  236E             ;        BYTE >MAP_MEM + 2700
08201  236E             ;        BYTE >MAP_MEM + 2800
08202  236E             ;        BYTE >MAP_MEM + 2900            ;30
08203  236E             ;        BYTE >MAP_MEM + 3000
08204  236E             ;        BYTE >MAP_MEM + 3100            ;32
08205  236E             
08206  236E             MAP2025_LINE_LOOKUP_LO 
08207  236E  80                    BYTE <MAP_MEM
08208  236F  90                    BYTE <MAP_MEM + TILE_DEPTH1; 22
08209  2370  A0                    BYTE <MAP_MEM + TILE_DEPTH2 ;44
08210  2371  B0                    BYTE <MAP_MEM + TILE_DEPTH3 ;66
08211  2372  C0                    BYTE <MAP_MEM + TILE_DEPTH4 ;88
08212  2373  D0                    BYTE <MAP_MEM + TILE_DEPTH5 ;110
08213  2374  E0                    BYTE <MAP_MEM + TILE_DEPTH6 ;132
08214  2375  F0                    BYTE <MAP_MEM + TILE_DEPTH7 ;154
08215  2376  00                    BYTE <MAP_MEM + TILE_DEPTH8 ;176
08216  2377  10                    BYTE <MAP_MEM + TILE_DEPTH9 ;198
08217  2378  20                    BYTE <MAP_MEM + TILE_DEPTH10 ;220
08218  2379  30                    BYTE <MAP_MEM + TILE_DEPTH11 ;242             ; 10
08219  237A  40                    BYTE <MAP_MEM + TILE_DEPTH12 ;'264
08220  237B  50                    BYTE <MAP_MEM + TILE_DEPTH13 ;286
08221  237C  60                    BYTE <MAP_MEM + TILE_DEPTH14 ;308
08222  237D  70                    BYTE <MAP_MEM + TILE_DEPTH15 ;330
08223  237E  80                    BYTE <MAP_MEM + TILE_DEPTH16 ;352
08224  237F  90                    BYTE <MAP_MEM + TILE_DEPTH17 ;374
08225  2380  A0                    BYTE <MAP_MEM + TILE_DEPTH18 ;396
08226  2381  B0                    BYTE <MAP_MEM + TILE_DEPTH19 ;418
08227  2382  C0                    BYTE <MAP_MEM + TILE_DEPTH20 ;440
08228  2383  D0                    BYTE <MAP_MEM + TILE_DEPTH21 ;462            ;20
08229  2384             
08230  2384             
08231  2384             MAP2025_LINE_LOOKUP_HI 
08232  2384  77                    BYTE >MAP_MEM
08233  2385  77                    BYTE >MAP_MEM + TILE_DEPTH1; 22
08234  2386  77                    BYTE >MAP_MEM + TILE_DEPTH2 ;44
08235  2387  77                    BYTE >MAP_MEM + TILE_DEPTH3 ;66
08236  2388  77                    BYTE >MAP_MEM + TILE_DEPTH4 ;88
08237  2389  77                    BYTE >MAP_MEM + TILE_DEPTH5 ;110
08238  238A  77                    BYTE >MAP_MEM + TILE_DEPTH6 ;132
08239  238B  77                    BYTE >MAP_MEM + TILE_DEPTH7 ;154
08240  238C  78                    BYTE >MAP_MEM + TILE_DEPTH8 ;176
08241  238D  78                    BYTE >MAP_MEM + TILE_DEPTH9 ;198
08242  238E  78                    BYTE >MAP_MEM + TILE_DEPTH10 ;220
08243  238F  78                    BYTE >MAP_MEM + TILE_DEPTH11 ;242             ; 10
08244  2390  78                    BYTE >MAP_MEM + TILE_DEPTH12 ;'264
08245  2391  78                    BYTE >MAP_MEM + TILE_DEPTH13 ;286
08246  2392  78                    BYTE >MAP_MEM + TILE_DEPTH14 ;308
08247  2393  78                    BYTE >MAP_MEM + TILE_DEPTH15 ;330
08248  2394  78                    BYTE >MAP_MEM + TILE_DEPTH16 ;352
08249  2395  78                    BYTE >MAP_MEM + TILE_DEPTH17 ;374
08250  2396  78                    BYTE >MAP_MEM + TILE_DEPTH18 ;396
08251  2397  78                    BYTE >MAP_MEM + TILE_DEPTH19 ;418
08252  2398  78                    BYTE >MAP_MEM + TILE_DEPTH20 ;440
08253  2399  78                    BYTE >MAP_MEM + TILE_DEPTH21 ;462            ;20
08254  239A             
08255  239A             ALLEYMAP_LINE_LOOKUP_LO 
08256  239A  00                    BYTE <MAP2_MEM
08257  239B  11                    BYTE <MAP2_MEM + TILE2_DEPTH1; 22
08258  239C  22                    BYTE <MAP2_MEM + TILE2_DEPTH2 ;44
08259  239D  33                    BYTE <MAP2_MEM + TILE2_DEPTH3 ;66
08260  239E  44                    BYTE <MAP2_MEM + TILE2_DEPTH4 ;88
08261  239F  55                    BYTE <MAP2_MEM + TILE2_DEPTH5 ;110
08262  23A0  66                    BYTE <MAP2_MEM + TILE2_DEPTH6 ;132
08263  23A1  77                    BYTE <MAP2_MEM + TILE2_DEPTH7 ;154
08264  23A2  88                    BYTE <MAP2_MEM + TILE2_DEPTH8 ;176
08265  23A3  99                    BYTE <MAP2_MEM + TILE2_DEPTH9 ;198
08266  23A4  AA                    BYTE <MAP2_MEM + TILE2_DEPTH10 ;220
08267  23A5  BB                    BYTE <MAP2_MEM + TILE2_DEPTH11 ;242             ; 10
08268  23A6  CC                    BYTE <MAP2_MEM + TILE2_DEPTH12 ;'264
08269  23A7  DD                    BYTE <MAP2_MEM + TILE2_DEPTH13 ;286
08270  23A8  EE                    BYTE <MAP2_MEM + TILE2_DEPTH14 ;308
08271  23A9  FF                    BYTE <MAP2_MEM + TILE2_DEPTH15 ;330
08272  23AA  10                    BYTE <MAP2_MEM + TILE2_DEPTH16 ;352
08273  23AB  21                    BYTE <MAP2_MEM + TILE2_DEPTH17 ;374
08274  23AC  32                    BYTE <MAP2_MEM + TILE2_DEPTH18 ;396
08275  23AD  43                    BYTE <MAP2_MEM + TILE2_DEPTH19 ;418
08276  23AE  54                    BYTE <MAP2_MEM + TILE2_DEPTH20 ;440
08277  23AF  65                    BYTE <MAP2_MEM + TILE2_DEPTH21 ;462            ;20
08278  23B0             
08279  23B0             
08280  23B0             ALLEYMAP_LINE_LOOKUP_HI 
08281  23B0  80                    BYTE >MAP2_MEM
08282  23B1  80                    BYTE >MAP2_MEM + TILE2_DEPTH1; 22
08283  23B2  80                    BYTE >MAP2_MEM + TILE2_DEPTH2 ;44
08284  23B3  80                    BYTE >MAP2_MEM + TILE2_DEPTH3 ;66
08285  23B4  80                    BYTE >MAP2_MEM + TILE2_DEPTH4 ;88
08286  23B5  80                    BYTE >MAP2_MEM + TILE2_DEPTH5 ;110
08287  23B6  80                    BYTE >MAP2_MEM + TILE2_DEPTH6 ;132
08288  23B7  80                    BYTE >MAP2_MEM + TILE2_DEPTH7 ;154
08289  23B8  80                    BYTE >MAP2_MEM + TILE2_DEPTH8 ;176
08290  23B9  80                    BYTE >MAP2_MEM + TILE2_DEPTH9 ;198
08291  23BA  80                    BYTE >MAP2_MEM + TILE2_DEPTH10 ;220
08292  23BB  80                    BYTE >MAP2_MEM + TILE2_DEPTH11 ;242             ; 10
08293  23BC  80                    BYTE >MAP2_MEM + TILE2_DEPTH12 ;'264
08294  23BD  80                    BYTE >MAP2_MEM + TILE2_DEPTH13 ;286
08295  23BE  80                    BYTE >MAP2_MEM + TILE2_DEPTH14 ;308
08296  23BF  80                    BYTE >MAP2_MEM + TILE2_DEPTH15 ;330
08297  23C0  81                    BYTE >MAP2_MEM + TILE2_DEPTH16 ;352
08298  23C1  81                    BYTE >MAP2_MEM + TILE2_DEPTH17 ;374
08299  23C2  81                    BYTE >MAP2_MEM + TILE2_DEPTH18 ;396
08300  23C3  81                    BYTE >MAP2_MEM + TILE2_DEPTH19 ;418
08301  23C4  81                    BYTE >MAP2_MEM + TILE2_DEPTH20 ;440
08302  23C5  81                    BYTE >MAP2_MEM + TILE2_DEPTH21 ;462            ;20
08303  23C6             
08304  23C6             ;-------------------------------------------------------------------------------
08305  23C6             ; TILE ADDRESS LOOKUP TABLE
08306  23C6             ;-------------------------------------------------------------------------------
08307  23C6             ; LOOKUP TABLE TO FIND THE START ADDRESS OF A TILE ON THE CURRENT MAP.
08308  23C6             ; ALL CURRENT LEVEL TILES ARE
08309  23C6             ; HELD IN TILE_MEM, THERE ARE 64 ENTRIES
08310  23C6             ;-------------------------------------------------------------------------------
08311  23C6             
08312  23C6             TILE_NUMBER_LOOKUP_LO 
08313  23C6  19                    BYTE <TILE_MEM                  ; 0
08314  23C7  29                    BYTE <TILE_MEM + 16
08315  23C8  39                    BYTE <TILE_MEM + 32
08316  23C9  49                    BYTE <TILE_MEM + 48
08317  23CA  59                    BYTE <TILE_MEM + 64
08318  23CB  69                    BYTE <TILE_MEM + 80
08319  23CC  79                    BYTE <TILE_MEM + 96
08320  23CD  89                    BYTE <TILE_MEM + 112
08321  23CE  99                    BYTE <TILE_MEM + 128
08322  23CF  A9                    BYTE <TILE_MEM + 144
08323  23D0  B9                    BYTE <TILE_MEM + 160            ; 10
08324  23D1  C9                    BYTE <TILE_MEM + 176
08325  23D2  D9                    BYTE <TILE_MEM + 192
08326  23D3  E9                    BYTE <TILE_MEM + 208
08327  23D4  F9                    BYTE <TILE_MEM + 224
08328  23D5  09                    BYTE <TILE_MEM + 240
08329  23D6  19                    BYTE <TILE_MEM + 256
08330  23D7  29                    BYTE <TILE_MEM + 272
08331  23D8  39                    BYTE <TILE_MEM + 288
08332  23D9  49                    BYTE <TILE_MEM + 304
08333  23DA  59                    BYTE <TILE_MEM + 320            ; 20
08334  23DB  69                    BYTE <TILE_MEM + 336
08335  23DC  79                    BYTE <TILE_MEM + 352
08336  23DD  89                    BYTE <TILE_MEM + 368
08337  23DE  99                    BYTE <TILE_MEM + 384
08338  23DF  A9                    BYTE <TILE_MEM + 400
08339  23E0  B9                    BYTE <TILE_MEM + 416
08340  23E1  C9                    BYTE <TILE_MEM + 432
08341  23E2  D9                    BYTE <TILE_MEM + 448
08342  23E3  E9                    BYTE <TILE_MEM + 464
08343  23E4  F9                    BYTE <TILE_MEM + 480            ; 30
08344  23E5  09                    BYTE <TILE_MEM + 496
08345  23E6  19                    BYTE <TILE_MEM + 512
08346  23E7  29                    BYTE <TILE_MEM + 528
08347  23E8  39                    BYTE <TILE_MEM + 544
08348  23E9  49                    BYTE <TILE_MEM + 560
08349  23EA  59                    BYTE <TILE_MEM + 576
08350  23EB  69                    BYTE <TILE_MEM + 592
08351  23EC  79                    BYTE <TILE_MEM + 608
08352  23ED  89                    BYTE <TILE_MEM + 624
08353  23EE  99                    BYTE <TILE_MEM + 640            ; 40
08354  23EF  A9                    BYTE <TILE_MEM + 656
08355  23F0  B9                    BYTE <TILE_MEM + 672
08356  23F1  C9                    BYTE <TILE_MEM + 688
08357  23F2  D9                    BYTE <TILE_MEM + 704
08358  23F3  E9                    BYTE <TILE_MEM + 720
08359  23F4  F9                    BYTE <TILE_MEM + 736
08360  23F5  09                    BYTE <TILE_MEM + 752
08361  23F6  19                    BYTE <TILE_MEM + 768
08362  23F7  29                    BYTE <TILE_MEM + 784
08363  23F8  39                    BYTE <TILE_MEM + 800            ;50
08364  23F9  49                    BYTE <TILE_MEM + 816
08365  23FA  59                    BYTE <TILE_MEM + 832
08366  23FB  69                    BYTE <TILE_MEM + 848
08367  23FC  79                    BYTE <TILE_MEM + 864
08368  23FD  89                    BYTE <TILE_MEM + 880
08369  23FE  99                    BYTE <TILE_MEM + 896
08370  23FF  A9                    BYTE <TILE_MEM + 912
08371  2400  B9                    BYTE <TILE_MEM + 928
08372  2401  C9                    BYTE <TILE_MEM + 944
08373  2402  D9                    BYTE <TILE_MEM + 960            ; 10
08374  2403  E9                    BYTE <TILE_MEM + 976
08375  2404  F9                    BYTE <TILE_MEM + 992
08376  2405  09                    BYTE <TILE_MEM + 1008
08377  2406  19                    BYTE <TILE_MEM + 1024           ; 64
08378  2407             
08379  2407             TILE_NUMBER_LOOKUP_HI 
08380  2407  79                    BYTE >TILE_MEM                  ; 0
08381  2408  79                    BYTE >TILE_MEM + 16
08382  2409  79                    BYTE >TILE_MEM + 32
08383  240A  79                    BYTE >TILE_MEM + 48
08384  240B  79                    BYTE >TILE_MEM + 64
08385  240C  79                    BYTE >TILE_MEM + 80
08386  240D  79                    BYTE >TILE_MEM + 96
08387  240E  79                    BYTE >TILE_MEM + 112
08388  240F  79                    BYTE >TILE_MEM + 128
08389  2410  79                    BYTE >TILE_MEM + 144
08390  2411  79                    BYTE >TILE_MEM + 160            ; 10
08391  2412  79                    BYTE >TILE_MEM + 176
08392  2413  79                    BYTE >TILE_MEM + 192
08393  2414  79                    BYTE >TILE_MEM + 208
08394  2415  79                    BYTE >TILE_MEM + 224
08395  2416  7A                    BYTE >TILE_MEM + 240
08396  2417  7A                    BYTE >TILE_MEM + 256
08397  2418  7A                    BYTE >TILE_MEM + 272
08398  2419  7A                    BYTE >TILE_MEM + 288
08399  241A  7A                    BYTE >TILE_MEM + 304
08400  241B  7A                    BYTE >TILE_MEM + 320            ; 20
08401  241C  7A                    BYTE >TILE_MEM + 336
08402  241D  7A                    BYTE >TILE_MEM + 352
08403  241E  7A                    BYTE >TILE_MEM + 368
08404  241F  7A                    BYTE >TILE_MEM + 384
08405  2420  7A                    BYTE >TILE_MEM + 400
08406  2421  7A                    BYTE >TILE_MEM + 416
08407  2422  7A                    BYTE >TILE_MEM + 432
08408  2423  7A                    BYTE >TILE_MEM + 448
08409  2424  7A                    BYTE >TILE_MEM + 464
08410  2425  7A                    BYTE >TILE_MEM + 480            ; 30
08411  2426  7B                    BYTE >TILE_MEM + 496
08412  2427  7B                    BYTE >TILE_MEM + 512
08413  2428  7B                    BYTE >TILE_MEM + 528
08414  2429  7B                    BYTE >TILE_MEM + 544
08415  242A  7B                    BYTE >TILE_MEM + 560
08416  242B  7B                    BYTE >TILE_MEM + 576
08417  242C  7B                    BYTE >TILE_MEM + 592
08418  242D  7B                    BYTE >TILE_MEM + 608
08419  242E  7B                    BYTE >TILE_MEM + 624
08420  242F  7B                    BYTE >TILE_MEM + 640            ; 40
08421  2430  7B                    BYTE >TILE_MEM + 656
08422  2431  7B                    BYTE >TILE_MEM + 672
08423  2432  7B                    BYTE >TILE_MEM + 688
08424  2433  7B                    BYTE >TILE_MEM + 704
08425  2434  7B                    BYTE >TILE_MEM + 720
08426  2435  7B                    BYTE >TILE_MEM + 736
08427  2436  7C                    BYTE >TILE_MEM + 752
08428  2437  7C                    BYTE >TILE_MEM + 768
08429  2438  7C                    BYTE >TILE_MEM + 784
08430  2439  7C                    BYTE >TILE_MEM + 800            ;50
08431  243A  7C                    BYTE >TILE_MEM + 816
08432  243B  7C                    BYTE >TILE_MEM + 832
08433  243C  7C                    BYTE >TILE_MEM + 848
08434  243D  7C                    BYTE >TILE_MEM + 864
08435  243E  7C                    BYTE >TILE_MEM + 880
08436  243F  7C                    BYTE >TILE_MEM + 896
08437  2440  7C                    BYTE >TILE_MEM + 912
08438  2441  7C                    BYTE >TILE_MEM + 928
08439  2442  7C                    BYTE >TILE_MEM + 944
08440  2443  7C                    BYTE >TILE_MEM + 960            ; 10
08441  2444  7C                    BYTE >TILE_MEM + 976
08442  2445  7C                    BYTE >TILE_MEM + 992
08443  2446  7D                    BYTE >TILE_MEM + 1008
08444  2447             
08445  2447             TILE2_NUMBER_LOOKUP_LO 
08446  2447  A1                    BYTE <TILE2_MEM                  ; 0
08447  2448  B1                    BYTE <TILE2_MEM + 16
08448  2449  C1                    BYTE <TILE2_MEM + 32
08449  244A  D1                    BYTE <TILE2_MEM + 48
08450  244B  E1                    BYTE <TILE2_MEM + 64
08451  244C  F1                    BYTE <TILE2_MEM + 80
08452  244D  01                    BYTE <TILE2_MEM + 96
08453  244E  11                    BYTE <TILE2_MEM + 112
08454  244F  21                    BYTE <TILE2_MEM + 128
08455  2450  31                    BYTE <TILE2_MEM + 144
08456  2451  41                    BYTE <TILE2_MEM + 160            ; 10
08457  2452  51                    BYTE <TILE2_MEM + 176
08458  2453  61                    BYTE <TILE2_MEM + 192
08459  2454  71                    BYTE <TILE2_MEM + 208
08460  2455  81                    BYTE <TILE2_MEM + 224
08461  2456  91                    BYTE <TILE2_MEM + 240
08462  2457  A1                    BYTE <TILE2_MEM + 256
08463  2458  B1                    BYTE <TILE2_MEM + 272
08464  2459  C1                    BYTE <TILE2_MEM + 288
08465  245A  D1                    BYTE <TILE2_MEM + 304
08466  245B  E1                    BYTE <TILE2_MEM + 320            ; 20
08467  245C  F1                    BYTE <TILE2_MEM + 336
08468  245D  01                    BYTE <TILE2_MEM + 352
08469  245E  11                    BYTE <TILE2_MEM + 368
08470  245F  21                    BYTE <TILE2_MEM + 384
08471  2460  31                    BYTE <TILE2_MEM + 400
08472  2461  41                    BYTE <TILE2_MEM + 416
08473  2462  51                    BYTE <TILE2_MEM + 432
08474  2463  61                    BYTE <TILE2_MEM + 448
08475  2464  71                    BYTE <TILE2_MEM + 464
08476  2465  81                    BYTE <TILE2_MEM + 480            ; 30
08477  2466  91                    BYTE <TILE2_MEM + 496
08478  2467  A1                    BYTE <TILE2_MEM + 512
08479  2468  B1                    BYTE <TILE2_MEM + 528
08480  2469  C1                    BYTE <TILE2_MEM + 544
08481  246A  D1                    BYTE <TILE2_MEM + 560
08482  246B  E1                    BYTE <TILE2_MEM + 576
08483  246C  F1                    BYTE <TILE2_MEM + 592
08484  246D  01                    BYTE <TILE2_MEM + 608
08485  246E  11                    BYTE <TILE2_MEM + 624
08486  246F  21                    BYTE <TILE2_MEM + 640            ; 40
08487  2470  31                    BYTE <TILE2_MEM + 656
08488  2471  41                    BYTE <TILE2_MEM + 672
08489  2472  51                    BYTE <TILE2_MEM + 688
08490  2473  61                    BYTE <TILE2_MEM + 704
08491  2474  71                    BYTE <TILE2_MEM + 720
08492  2475  81                    BYTE <TILE2_MEM + 736
08493  2476  91                    BYTE <TILE2_MEM + 752
08494  2477  A1                    BYTE <TILE2_MEM + 768
08495  2478  B1                    BYTE <TILE2_MEM + 784
08496  2479  C1                    BYTE <TILE2_MEM + 800            ;50
08497  247A  D1                    BYTE <TILE2_MEM + 816
08498  247B  E1                    BYTE <TILE2_MEM + 832
08499  247C  F1                    BYTE <TILE2_MEM + 848
08500  247D  01                    BYTE <TILE2_MEM + 864
08501  247E  11                    BYTE <TILE2_MEM + 880
08502  247F  21                    BYTE <TILE2_MEM + 896
08503  2480  31                    BYTE <TILE2_MEM + 912
08504  2481  41                    BYTE <TILE2_MEM + 928
08505  2482  51                    BYTE <TILE2_MEM + 944
08506  2483  61                    BYTE <TILE2_MEM + 960            ; 10
08507  2484  71                    BYTE <TILE2_MEM + 976
08508  2485  81                    BYTE <TILE2_MEM + 992
08509  2486  91                    BYTE <TILE2_MEM + 1008
08510  2487  A1                    BYTE <TILE2_MEM + 1024           ; 64
08511  2488             
08512  2488             TILE2_NUMBER_LOOKUP_HI 
08513  2488             
08514  2488  81                    BYTE >TILE2_MEM                  ; 0
08515  2489  81                    BYTE >TILE2_MEM + 16
08516  248A  81                    BYTE >TILE2_MEM + 32
08517  248B  81                    BYTE >TILE2_MEM + 48
08518  248C  81                    BYTE >TILE2_MEM + 64
08519  248D  81                    BYTE >TILE2_MEM + 80
08520  248E  82                    BYTE >TILE2_MEM + 96
08521  248F  82                    BYTE >TILE2_MEM + 112
08522  2490  82                    BYTE >TILE2_MEM + 128
08523  2491  82                    BYTE >TILE2_MEM + 144
08524  2492  82                    BYTE >TILE2_MEM + 160            ; 10
08525  2493  82                    BYTE >TILE2_MEM + 176
08526  2494  82                    BYTE >TILE2_MEM + 192
08527  2495  82                    BYTE >TILE2_MEM + 208
08528  2496  82                    BYTE >TILE2_MEM + 224
08529  2497  82                    BYTE >TILE2_MEM + 240
08530  2498  82                    BYTE >TILE2_MEM + 256
08531  2499  82                    BYTE >TILE2_MEM + 272
08532  249A  82                    BYTE >TILE2_MEM + 288
08533  249B  82                    BYTE >TILE2_MEM + 304
08534  249C  82                    BYTE >TILE2_MEM + 320            ; 20
08535  249D  82                    BYTE >TILE2_MEM + 336
08536  249E  83                    BYTE >TILE2_MEM + 352
08537  249F  83                    BYTE >TILE2_MEM + 368
08538  24A0  83                    BYTE >TILE2_MEM + 384
08539  24A1  83                    BYTE >TILE2_MEM + 400
08540  24A2  83                    BYTE >TILE2_MEM + 416
08541  24A3  83                    BYTE >TILE2_MEM + 432
08542  24A4  83                    BYTE >TILE2_MEM + 448
08543  24A5  83                    BYTE >TILE2_MEM + 464
08544  24A6  83                    BYTE >TILE2_MEM + 480            ; 30
08545  24A7  83                    BYTE >TILE2_MEM + 496
08546  24A8  83                    BYTE >TILE2_MEM + 512
08547  24A9  83                    BYTE >TILE2_MEM + 528
08548  24AA  83                    BYTE >TILE2_MEM + 544
08549  24AB  83                    BYTE >TILE2_MEM + 560
08550  24AC  83                    BYTE >TILE2_MEM + 576
08551  24AD  83                    BYTE >TILE2_MEM + 592
08552  24AE  84                    BYTE >TILE2_MEM + 608
08553  24AF  84                    BYTE >TILE2_MEM + 624
08554  24B0  84                    BYTE >TILE2_MEM + 640            ; 40
08555  24B1  84                    BYTE >TILE2_MEM + 656
08556  24B2  84                    BYTE >TILE2_MEM + 672
08557  24B3  84                    BYTE >TILE2_MEM + 688
08558  24B4  84                    BYTE >TILE2_MEM + 704
08559  24B5  84                    BYTE >TILE2_MEM + 720
08560  24B6  84                    BYTE >TILE2_MEM + 736
08561  24B7  84                    BYTE >TILE2_MEM + 752
08562  24B8  84                    BYTE >TILE2_MEM + 768
08563  24B9  84                    BYTE >TILE2_MEM + 784
08564  24BA  84                    BYTE >TILE2_MEM + 800            ;50
08565  24BB  84                    BYTE >TILE2_MEM + 816
08566  24BC  84                    BYTE >TILE2_MEM + 832
08567  24BD  84                    BYTE >TILE2_MEM + 848
08568  24BE  85                    BYTE >TILE2_MEM + 864
08569  24BF  85                    BYTE >TILE2_MEM + 880
08570  24C0  85                    BYTE >TILE2_MEM + 896
08571  24C1  85                    BYTE >TILE2_MEM + 912
08572  24C2  85                    BYTE >TILE2_MEM + 928
08573  24C3  85                    BYTE >TILE2_MEM + 944
08574  24C4  85                    BYTE >TILE2_MEM + 960            ; 10
08575  24C5  85                    BYTE >TILE2_MEM + 976
08576  24C6  85                    BYTE >TILE2_MEM + 992
08577  24C7  85                    BYTE >TILE2_MEM + 1008
08578  24C8  85                    BYTE >TILE2_MEM + 1024           ; 64
08579  24C9                        
08580  24C9             ;===============================================================================
08581  24C9             ; SCROLLING ROUTINES
08582  24C9             ;
08583  24C9             ; PETER 'SIG' HEWETT AKA RETROROMICON
08584  24C9             ;===============================================================================
08585  24C9             ;  ROUTINES FOR SCROLLING THE SCREEN. THE WAY WE'LL BE DOING SCROLLING IS BY LETTING THE
08586  24C9             ; PLAYER 'ROAM' WITHIN A BOUNDRY THEN 'PUSHING' THE SCREEN WHEN THEY HIT A BOUNDRY.
08587  24C9             ; THIS SHOULD MAKE THINGS A LITTLE EASIER AS THERE WILL NEVER BE A POINT WHEN SCROLLING IS
08588  24C9             ; INSTANTLY REVERSED.
08589  24C9             ; ALSO GIVEN THAT THE ONLY WAY TO EXCEED THE TOP THRESHOLD SHOULD BE BY LADDER/ELEVATOR, AND
08590  24C9             ; THE BOTTOM BY AN EXCESSIVE FALL (DEATH), WE CAN GIVE THE FEEL OF A 4/8 WAY SCROLLER WHILE
08591  24C9             ; ONLY IMPLEMENTING 4 SEPERATE ONE WAY SCROLLERS - WHICH WILL BE A LOT SIMPLER.
08592  24C9             ;
08593  24C9             ;
08594  24C9             ; NOTE : LIKE SPRITE MOVEMENT, THESE ROUTINES PERFORM A ONE PIXEL SCROLL, TO SCROLL MORE THAN ONE
08595  24C9             ;        PIXEL, THEY MUST BE CALLED MULTIPLE TIMES.
08596  24C9             ;
08597  24C9             ;       DIRECTION SCROLLED IS REFERRING TO THE DIRECTION THE CHARACTER IS MOVING, NOT THE ACTUAL
08598  24C9             ;       DIRECTION OF THE SCREEN, SO THINGS MIGHT SEEM A LITTLE 'BASS-ACKWARDS'
08599  24C9             ;
08600  24C9             ; WARNING - THIS IS A LONG FILE FULL OF SPECIAL CASE ROUTINES AND UNWOUND LOOPS
08601  24C9             ;-------------------------------------------------------------------------------
08602  24C9             ; SCROLL METHOD:
08603  24C9             ; EACH PIXEL SCROLL REPRESENTS A 'FRAME', A COUNTDOWN TO 'THE JUMP FRAME' WHERE THE ENTIRE SCREEN
08604  24C9             ; MUST BE SHIFTED ONE CHARACTER ACROSS. IN THE FRAMES LEADING UP TO THAT WE PERFORM WHATEVER TASKS
08605  24C9             ; WE CAN IN THE BACKGROUND. WE DO MAP LOOKUPS, PREPARE BUFFERS FOR 'NEW CHARACTERS', COPY THE
08606  24C9             ; BACKBUFFER ONE CHARACTER ACROSS - THEN ON THE 'JUMP FRAME' WE COPY COLOR RAM - IN ONE PASS,
08607  24C9             ; AND SWAP THE SCREENS, AND FINALLY RESET FOR THE NEXT ROUND.
08608  24C9             ;
08609  24C9             ; DURING TESTING I'M PRETTY SURE THERE ARE 4 VIABLE SPEEDS FOR SCROLLING THAT CAN BE ACCOMPLISHED
08610  24C9             ; (AT MY LEVEL OF CODING ANYWAYS) - 1/2 PIXEL , 1 PIXEL, 2 PIXELS AND 3 PIXELS.
08611  24C9             ; THAT SHOULD MAKE FOR DECENT VARIABLE SPEED SCROLLING AND PLAYER ACCELERATION AT A LATER DATE
08612  24C9             ;
08613  24C9             ; NOTES :
08614  24C9             ;               RIGHT SCROLLING MUST START ON FRAME 4 FOR SPEED 1
08615  24C9             ;-------------------------------------------------------------------------------
08616  24C9             ;
08617  24C9             SCROLL_STOP = 0
08618  24C9             SCROLL_RIGHT = 1
08619  24C9             SCROLL_LEFT = 2
08620  24C9             SCROLL_UP  = 3
08621  24C9             SCROLL_DOWN = 4
08622  24C9             
08623  24C9             ;-------------------------------------------------------------------------------
08624  24C9             ; UPDATE SCROLLING
08625  24C9             ;-------------------------------------------------------------------------------
08626  24C9             ; ENTRY POINT FOR ALL SCROLLING. HERE WE WORK OUT WHAT DIRECTION (IF ANY) WE ARE
08627  24C9             ; SCROLLING IN
08628  24C9             ; AND BRANCH OFF TO THE DIRECTIONAL SCROLL ROUTINES - THERE WE DIVIDE THE WORK
08629  24C9             ; UP ALONG THE
08630  24C9             ; FRAMES AND PERFORM THE ACTUAL SCROLLING.
08631  24C9             ;
08632  24C9             ; UPDATESCROLL:
08633  24C9             ;-------------------------------------------------------------------------------
08634  24C9             ; SCROLL_DIRECTION - TRACKS THE DIRECTION OF THE SCREEN SCROLL  \
08635  24C9             ; SCROLL_MOVING - FLAG TO CHECK WHEN THE SCREEN STARTS MOVING
08636  24C9             ; SCROLL_COUNT_X - CYCLES THROUGH 0-7 HORIZONTAL INTERVALS TO SCROLL PIXELS
08637  24C9             ; SCROLL_COUNT_Y - CYCLES THROUGH 0-7 VERTICAL INTERVALS TO SCROLL PIXELS
08638  24C9                        
08639  24C9             ;===============================================================================
08640  24C9             
08641  24C9             
08642  24C9             UPDATESCROLL 
08643  24C9  A5 2C                 LDA SCROLL_DIRECTION             ; CHECK FOR DIRECTION OF SCROLL
08644  24CB  D0 6D                 BNE @START
08645  24CD             
08646  24CD                        ; WE HAVE STOPPED - BUT WE NEED TO KNOW WE ARE ON
08647  24CD                        ; THE CORRECT 'START FRAMES' SO IF WE SCROLL AGAIN
08648  24CD                        ; (ESPECIALLY IN THE OPPOSITE DIRECTION) THEN EVERYTHING
08649  24CD                        ; IS SETUP PROPERLY - OTHERWISE WE COULD MISS COPYING
08650  24CD                        ; THE BUFFERS, UPDATING THE BACK SCREEN, OR GLITCHING THE
08651  24CD                        ; THE COLOR SHIFT. THE EXTRA SHIFTS WILL BE BARELY NOTICABLE
08652  24CD             
08653  24CD             ;===============================================================================
08654  24CD             ; THE SCREEN HAS STOPPED MOVING HERE AND WE EXIT
08655  24CD             ;===============================================================================
08656  24CD             
08657  24CD  A5 2D                 LDA SCROLL_MOVING               ; IF WE ARE STOPPPED (SCROLL_STOP = 0)
08658  24CF                        ;THEN WE CAN RETURN
08659  24CF  D0 01                 BNE @FIX_FRAME
08660  24D1  60                    RTS
08661  24D2             
08662  24D2             ;===============================================================================
08663  24D2             ; THE SCREEN IS STILL MOVING HERE
08664  24D2             ; SO WE INITIALIZE ALL THESE CHECKS BELOW
08665  24D2             ;-------------------------------------------------------------------------------
08666  24D2             ;===============================================================================
08667  24D2             ; CHECK IF SCROLL_MOVING <> 1 (SCROLL_RIGHT)
08668  24D2             ;===============================================================================
08669  24D2             @FIX_FRAME 
08670  24D2             @FIX_RIGHT 
08671  24D2  C9 01                 CMP #SCROLL_RIGHT               ; CHECK IF WE'RE SCROLLING RIGHT
08672  24D4  D0 15                 BNE @FIX_LEFT
08673  24D6             
08674  24D6             ;===============================================================================
08675  24D6             ; SCROLL_COUNT_X = INCREASES FROM 0-7 TO KEEP THE TILE SCROLLING SMOOTH (IN PIXELS)
08676  24D6             
08677  24D6             ; SCREEN IS MOVING TO THE RIGHT (SCROLL_MOVING), SO WE CHECK IF
08678  24D6             ; SCROLL_COUNT_X = 4 AND GOTO @FIX_DONE WHICH WILL SET
08679  24D6             ; SCROLL_MOVING = 0 (SCROLL_STOP) AND THEN IT CHECKS FOR A SCREEN SCROLL
08680  24D6             ; TO THE RIGHT, LEFT, DOWN, AND UP.
08681  24D6             ;===============================================================================
08682  24D6                        ; FIX RIGHT FRAME
08683  24D6  A5 29                 LDA SCROLL_COUNT_X              ; GET THE SCROLL COUNTER
08684  24D8  C9 04                 CMP #4                          ; IF WE'RE AT FRAME 4 WE STOP SCROLLING
08685  24DA  F0 5A                 BEQ @FIX_DONE
08686  24DC             
08687  24DC             ;-------------------------------------------------------------------------
08688  24DC             ;                               ; DO OUR EXTRA PIXEL SCROLL ADJUSTMENT
08689  24DC  A2 00                 LDX #0                  ; MOVE PLAYER SPRITE LEFT ONE PIXEL
08690  24DE  20 B7 33              JSR MOVESPRITELEFT      ; EVENTUALLY WE'LL SCROLL ALL THE
08691  24E1                        ;ACTIVE SPRITES
08692  24E1  A2 01                 LDX #1
08693  24E3  20 B7 33              JSR MOVESPRITELEFT
08694  24E6             
08695  24E6  A5 2D                 LDA SCROLL_MOVING
08696  24E8  4C 3A 25              JMP @START
08697  24EB             ; FIX SCROLL LEFT
08698  24EB             
08699  24EB             ;===============================================================================
08700  24EB             ; CHECK IF SCROLL_MOVING <> 1 (SCROLL_LEFT)
08701  24EB             ;===============================================================================
08702  24EB             @FIX_LEFT
08703  24EB  C9 02                 CMP #SCROLL_LEFT
08704  24ED  D0 15                 BNE @FIX_UP
08705  24EF             
08706  24EF             ;===============================================================================
08707  24EF             ; FIX THE SCROLL TO THE LEFT
08708  24EF             ;===============================================================================
08709  24EF             ;===============================================================================
08710  24EF             ; SCREEN IS MOVING TO THE LEFT (SCROLL_MOVING).
08711  24EF             ; FIRST CHECK IF SCROLL_FIX_SKIP <>0 AND GOTO @FIX_DONE.
08712  24EF             ; THEN WE CHECK IF
08713  24EF             ; SCROLL_COUNT_X = 4 AND GOTO @FIX_DONE WHICH WILL SET
08714  24EF             ; SCROLL_MOVING = 0 (SCROLL_STOP) AND THEN IT CHECKS FOR A SCREEN SCROLL
08715  24EF             ; TO THE RIGHT, LEFT, DOWN, AND UP.
08716  24EF             ;===============================================================================
08717  24EF                        ; ABORT IF NEEDED
08718  24EF             ;        LDA SCROLL_FIX_SKIP
08719  24EF             ;        BNE @FIX_DONE
08720  24EF             
08721  24EF             ;===============================================================================
08722  24EF             ; SCROLL_COUNT_X = INCREASES FROM 0-7 TO KEEP THE TILE SCROLLING SMOOTH (IN PIXELS)
08723  24EF             ; SCROLL_MOVING = CHECKS IF THE SCREEN IS STILL SCROLLING.
08724  24EF             
08725  24EF             ; SCROLL_COUNT_X = 4 AND GOTO @FIX_DONE WHICH WILL SET
08726  24EF             ; SCROLL_MOVING = 0 (SCROLL_STOP) AND THEN IT CHECKS FOR A SCREEN SCROLL
08727  24EF             ; TO THE RIGHT, LEFT, DOWN, AND UP.
08728  24EF             ;===============================================================================
08729  24EF             @CHECK_LEFT 
08730  24EF  A5 29                 LDA SCROLL_COUNT_X
08731  24F1  C9 04                 CMP #4
08732  24F3  F0 41                 BEQ @FIX_DONE
08733  24F5             
08734  24F5                        ;-----------------------------------------------------------------------
08735  24F5                        ;                                 DO OUR EXTRA PIXEL SCROLL ADJUSTMENT
08736  24F5  A2 00                 LDX #0
08737  24F7  20 E9 33              JSR MOVESPRITERIGHT
08738  24FA  A2 01                 LDX #1
08739  24FC  20 E9 33              JSR MOVESPRITERIGHT
08740  24FF             
08741  24FF  A5 2D                 LDA SCROLL_MOVING
08742  2501  4C 3A 25              JMP @START
08743  2504             
08744  2504             ;===============================================================================
08745  2504             ; FIX THE THE UP SCROLL
08746  2504             ;===============================================================================
08747  2504             ;===============================================================================
08748  2504             ; CHECK IF SCROLL_MOVING <> 1 (SCROLL_UP)
08749  2504             
08750  2504             ; SCROLL_COUNT_Y = INCREASES FROM 0-7 TO KEEP THE TILE SCROLLING SMOOTH (IN PIXELS)
08751  2504             ;===============================================================================
08752  2504             @FIX_UP
08753  2504  C9 03                 CMP #SCROLL_UP
08754  2506  D0 15                 BNE @FIX_DOWN
08755  2508             
08756  2508  A5 2A                 LDA SCROLL_COUNT_Y
08757  250A  C9 03                 CMP #3
08758  250C  F0 28                 BEQ @FIX_DONE
08759  250E             
08760  250E                        ;-----------------------------------------------------------------------
08761  250E                        ;                               DO EXTRA PIXEL SCROLL ADJUSTMENT FOR UP
08762  250E  A2 00                 LDX #0
08763  2510  20 30 34              JSR MOVESPRITEDOWN
08764  2513  A2 01                 LDX #1
08765  2515  20 30 34              JSR MOVESPRITEDOWN
08766  2518                        
08767  2518  A5 2D                 LDA SCROLL_MOVING
08768  251A  4C 3A 25              JMP @START
08769  251D                        
08770  251D             ;===============================================================================
08771  251D             ; FIX THE DOWN SCROLL
08772  251D             ;===============================================================================
08773  251D             ;===============================================================================
08774  251D             ; CHECK IF SCROLL_MOVING <> 1 (SCROLL_DOWN)
08775  251D             
08776  251D             ; SCROLL_COUNT_Y = INCREASES FROM 0-7 TO KEEP THE TILE SCROLLING SMOOTH (IN PIXELS)
08777  251D             ;===============================================================================
08778  251D             @FIX_DOWN
08779  251D  C9 04                 CMP #SCROLL_DOWN
08780  251F  D0 15                 BNE @FIX_DONE
08781  2521                        
08782  2521  A5 2A                 LDA SCROLL_COUNT_Y
08783  2523  C9 03                 CMP #3
08784  2525  F0 0F                 BEQ @FIX_DONE
08785  2527                        
08786  2527  A2 00                 LDX #0
08787  2529  20 15 34              JSR MOVESPRITEUP
08788  252C  A2 01                 LDX #1
08789  252E  20 15 34              JSR MOVESPRITEUP
08790  2531                        
08791  2531  A5 2D                 LDA SCROLL_MOVING
08792  2533  4C 3A 25              JMP @START
08793  2536             
08794  2536             
08795  2536             @FIX_DONE
08796  2536  A9 00                 LDA #SCROLL_STOP
08797  2538  85 2D                 STA SCROLL_MOVING
08798  253A             
08799  253A             ;===============================================================================
08800  253A             ; THIS SECTION IS CALLED ANYTIME SCROLL_DIRECTION <> 0
08801  253A             ; THEN IT WILL CHECK SCROLL_MOVING FOR EACH DIRECTION: RIGHT, LEFT, DOWN & UP
08802  253A             ;===============================================================================
08803  253A             @START
08804  253A             ;-------------------------------- SIMPLE TESTING AT THIS POINT
08805  253A             ;        LDA TIMER                       ; SOLID TIMED SCROLL
08806  253A             ;        AND #%1                        ; SLOW TIMER TO TEST THE SCREEN
08807  253A             ;       BNE @END
08808  253A             
08809  253A             ;        LDA SCROLL_DIRECTION            ; FETCH SCROLL DIRECTION
08810  253A             
08811  253A             ;-------------------------------- A = SCROLL_DIRECTION
08812  253A             
08813  253A  C9 01                 CMP #SCROLL_RIGHT               ; SCROLL RIGHT
08814  253C  D0 03                 BNE @LEFT
08815  253E  4C 45 26              JMP SCROLLRIGHT
08816  2541             @LEFT
08817  2541  C9 02                 CMP #SCROLL_LEFT                ; SCROLL LEFT
08818  2543  D0 03                 BNE @DOWN
08819  2545  4C EC 25              JMP SCROLLLEFT
08820  2548             
08821  2548  C9 04      @DOWN      CMP #SCROLL_DOWN                ; SCROLL DOWN
08822  254A  D0 03                 BNE @UP
08823  254C  4C A4 25              JMP SCROLLDOWN
08824  254F             
08825  254F             @UP        
08826  254F  C9 03                 CMP #SCROLL_UP
08827  2551  D0 03                 BNE @END
08828  2553  4C 57 25              JMP SCROLLUP
08829  2556                        
08830  2556             @END
08831  2556             
08832  2556  60                    RTS
08833  2557             
08834  2557             ; SCROLL UP
08835  2557             ;-------------------------------------------------------------------------------
08836  2557             ; SCROLL ONE PIXEL UP AND TAKE CARE OF THE SCREEN/COLOR WRAP IF NEEDED
08837  2557             ;-------------------------------------------------------------------------------
08838  2557             ; SCROLL_COUNT_Y - CYCLES THROUGH 0-7 VERTICAL INTERVALS TO SCROLL PIXELS
08839  2557             ;===============================================================================
08840  2557             
08841  2557             SCROLLUP
08842  2557  A2 02                 LDX #2
08843  2559  20 30 34              JSR MOVESPRITEDOWN
08844  255C  A2 03                 LDX #3
08845  255E  20 30 34              JSR MOVESPRITEDOWN
08846  2561             
08847  2561  E6 2A                 INC SCROLL_COUNT_Y
08848  2563  A5 2A                 LDA SCROLL_COUNT_Y
08849  2565  29 07                 AND #%00000111
08850  2567  85 2A                 STA SCROLL_COUNT_Y
08851  2569             @FRAME4
08852  2569  C9 04                 CMP #4
08853  256B  D0 01                 BNE @FRAME5
08854  256D  60                    RTS
08855  256E             @FRAME5
08856  256E  C9 05                 CMP #5
08857  2570  D0 04                 BNE @FRAME6
08858  2572  20 24 30              JSR COPYVERTICALBUFFER
08859  2575  60                    RTS
08860  2576             @FRAME6
08861  2576  C9 06                 CMP #6
08862  2578  D0 07                 BNE @FRAME7
08863  257A  20 9F 26              JSR SHIFTCHARSUP
08864  257D  20 94 2C              JSR DRAWUPBUFFER
08865  2580  60                    RTS
08866  2581             @FRAME7
08867  2581  C9 07                 CMP #7
08868  2583  D0 01                 BNE @FRAME0
08869  2585  60                    RTS
08870  2586             @FRAME0
08871  2586  C9 00                 CMP #0
08872  2588  D0 19                 BNE @DONE
08873  258A             
08874  258A  20 93 1F              JSR SWAPSCREENS
08875  258D  20 AC 2B              JSR COLORSHIFTUP
08876  2590  20 06 2D              JSR DRAWUPCOLOR
08877  2593             
08878  2593  A5 33                 LDA MAP_Y_DELTA
08879  2595  38                    SEC
08880  2596  E9 01                 SBC #1
08881  2598  29 03                 AND #%0011
08882  259A  85 33                 STA MAP_Y_DELTA
08883  259C             
08884  259C  C9 03                 CMP #3
08885  259E  F0 01                 BEQ @NEWTILE
08886  25A0  60                    RTS
08887  25A1             
08888  25A1             @NEWTILE
08889  25A1                        
08890  25A1  C6 31                 DEC MAP_Y_POS
08891  25A3             @DONE
08892  25A3  60                    RTS
08893  25A4             
08894  25A4             
08895  25A4             ;-------------------------------------------------------------------------------
08896  25A4             ; SCROLL DOWN
08897  25A4             ;-------------------------------------------------------------------------------
08898  25A4             ; SCROLL ONE PIXEL DOWN AND TAKE CARE OF SCREEN/COLOR WRAP IF NEEDED
08899  25A4             ;-------------------------------------------------------------------------------
08900  25A4             ; SCROLL_COUNT_Y - CYCLES THROUGH 0-7 VERTICAL INTERVALS TO SCROLL PIXELS
08901  25A4             ;===============================================================================
08902  25A4             
08903  25A4             SCROLLDOWN 
08904  25A4  A2 02                 LDX #2
08905  25A6  20 15 34              JSR MOVESPRITEUP
08906  25A9  A2 03                 LDX #3
08907  25AB  20 15 34              JSR MOVESPRITEUP
08908  25AE             
08909  25AE  C6 2A                 DEC SCROLL_COUNT_Y              ; INCREEMNT THE SCROLL Y VALUE
08910  25B0  A5 2A                 LDA SCROLL_COUNT_Y
08911  25B2  29 07                 AND #%00000111                  ; MASK IT TO A 0-7 COUNT
08912  25B4  85 2A                 STA SCROLL_COUNT_Y              ; STORE IT FOR THE NEXT RASTER IRQ TO UPDATE
08913  25B6             @FRAME4
08914  25B6             @FRAME3
08915  25B6             @FRAME2
08916  25B6  C9 02                 CMP #2
08917  25B8  D0 04                 BNE @FRAME1
08918  25BA  20 24 30              JSR COPYVERTICALBUFFER
08919  25BD  60                    RTS
08920  25BE             @FRAME1
08921  25BE  C9 01                 CMP #1
08922  25C0  D0 07                 BNE @FRAME0
08923  25C2  20 AC 27              JSR SHIFTCHARSDOWN
08924  25C5  20 CA 2C              JSR DRAWDOWNBUFFER
08925  25C8             
08926  25C8  60                    RTS
08927  25C9             @FRAME0    
08928  25C9  C9 00                 CMP #0
08929  25CB  D0 01                 BNE @FRAME7
08930  25CD             
08931  25CD  60                    RTS
08932  25CE             @FRAME7
08933  25CE  C9 07                 CMP #7
08934  25D0  D0 19                 BNE @DONE
08935  25D2  20 93 1F              JSR SWAPSCREENS                 ; SWAP BACK / FRONT SCREENS
08936  25D5  20 20 2C              JSR COLORSHIFTDOWN              ; SHIFT COLOR DOWN ONE CHARACTER
08937  25D8  20 22 2D              JSR DRAWDOWNCOLOR               ; DRAW NEW COLORS IN BOTTOM LINE
08938  25DB             
08939  25DB  A5 33                 LDA MAP_Y_DELTA                 ; INCREMENT THE MAP_Y_DELTA
08940  25DD  18                    CLC
08941  25DE  69 01                 ADC #1
08942  25E0  29 03                 AND #%0011                      ; MASK TO A VALUE BETWEEN 0-3
08943  25E2  85 33                 STA MAP_Y_DELTA
08944  25E4             
08945  25E4  C9 00                 CMP #0                          ; CHECK FOR CROSSOVER TO A NEW TILE
08946  25E6  F0 01                 BEQ @NEWTILE
08947  25E8  60                    RTS
08948  25E9             @NEWTILE
08949  25E9  E6 31                 INC MAP_Y_POS                   ; INCREMENT MAP Y POS ON A NEW TILE
08950  25EB                        
08951  25EB                        ; TODO - INCREMENT MAP_ADDRESS TO NEXT MAP LINE
08952  25EB             
08953  25EB             @DONE
08954  25EB  60                    RTS
08955  25EC             
08956  25EC             ;-------------------------------------------------------------------------------                                                                             SCROLL LEFT
08957  25EC             ;-------------------------------------------------------------------------------
08958  25EC             ; SCROLL ONE PIXEL LEFT AND TAKE CARE OF SCREEN/COLOR WRAP IF NEEDED
08959  25EC             ;-------------------------------------------------------------------------------
08960  25EC             ; SCROLL_COUNT_X - CYCLES THROUGH 0-7 HORIZONTAL INTERVALS TO SCROLL PIXELS
08961  25EC             ;===============================================================================
08962  25EC             
08963  25EC             SCROLLLEFT 
08964  25EC  A2 02                 LDX #2
08965  25EE  20 E9 33              JSR MOVESPRITERIGHT
08966  25F1  A2 03                 LDX #3
08967  25F3  20 E9 33              JSR MOVESPRITERIGHT
08968  25F6             
08969  25F6  E6 29                 INC SCROLL_COUNT_X              ; INCREMENT THE SCROLL X VALUE
08970  25F8  A5 29                 LDA SCROLL_COUNT_X
08971  25FA  29 07                 AND #%00000111                  ; MASK IT TO A 0-7 COUNT
08972  25FC  85 29                 STA SCROLL_COUNT_X              ; STORE IT FOR THE RASTER IRQ TO UPDATE
08973  25FE             @FRAME4
08974  25FE             @FRAME5
08975  25FE  C9 05                 CMP #5
08976  2600  D0 04                 BNE @FRAME6
08977  2602             ;        JSR COPYHORIZONTALBUFFER        ; COPY NEW CHARACTERS FROM THE MAP TO
08978  2602                        ;THE BUFFERS
08979  2602  20 93 31              JSR COPYLEFTBUFFER
08980  2605  60                    RTS
08981  2606             @FRAME6    
08982  2606  C9 06                 CMP #6
08983  2608  D0 07                 BNE @FRAME7
08984  260A  20 B9 28              JSR SHIFTCHARSLEFT              ; SHIFT THE BACKSCREEN OVER BY ONE CHARACTER
08985  260D  20 42 2D              JSR DRAWLEFTBUFFER              ; DRAW THE NEW CHARACTERS TO THE SCREEN
08986  2610  60                    RTS
08987  2611             @FRAME7
08988  2611  C9 07                 CMP #7
08989  2613  D0 01                 BNE @FRAME0
08990  2615  60                    RTS
08991  2616             @FRAME0
08992  2616  C9 00                 CMP #0
08993  2618  D0 2A                 BNE @DONE
08994  261A  20 93 1F              JSR SWAPSCREENS                         ; SWAP THE BUFFER SCREEN AND DISPLAYED SCREEN
08995  261D  20 BA 29              JSR COLORSHIFTLEFT                      ; SHIFT COLOR RAM ONE CHARACTER TO THE LEFT
08996  2620  20 3A 2E              JSR DRAWLEFTCOLOR                       ; DRAW IN THE LEFTMOST COLUMN IN COLOR RAM
08997  2623             
08998  2623  38                    SEC
08999  2624  A5 32                 LDA MAP_X_DELTA                         ; DECREMENT MAP X DELTA BY 3
09000  2626                        ;(CHARACTER WITHIN TILE)
09001  2626  E9 01                 SBC #1
09002  2628  29 03                 AND #%00000011                          ; MASK IT'S VALUE TO 0-7
09003  262A  85 32                 STA MAP_X_DELTA                         ; SAVE THE NEW DELTA
09004  262C  C9 03                 CMP #3                                  ; IF THE DELTA IS 3, WE HIT A NEW TILE
09005  262E  F0 01                 BEQ @NEW_TILE
09006  2630  60                    RTS
09007  2631             @NEW_TILE
09008  2631  C6 30                 DEC MAP_X_POS                           ; SO DECREMENT THE MAP X POSITION
09009  2633  38                    SEC
09010  2634  AD 6C 23              LDA MAP_ADDRESS                         ; SUBTRACT 1 FROM MAP ADDRESS
09011  2637  E9 01                 SBC #1                                  ; (ADDRESS OF THE TOP - RIGHT
09012  2639  8D 6C 23              STA MAP_ADDRESS                         ; CORNER OF THE MAP)
09013  263C  AD 6D 23              LDA MAP_ADDRESS + 1
09014  263F  E9 00                 SBC #0
09015  2641  8D 6D 23              STA MAP_ADDRESS + 1
09016  2644                        
09017  2644             
09018  2644             @DONE
09019  2644  60                    RTS
09020  2645             
09021  2645             ;-------------------------------------------------------------------------------
09022  2645             ; SCROLL RIGHT
09023  2645             ;-------------------------------------------------------------------------------
09024  2645             ; SCROLL ONE PIXEL RIGHT AND TAKE CARE OF SCREEN/COLOR WRAP IF NEEDED
09025  2645             ; TASKS ARE BROKEN DOWN AND PERFORMED ON EACH 'FRAME'
09026  2645             ;-------------------------------------------------------------------------------
09027  2645             ; SCROLL_COUNT_X - CYCLES THROUGH 0-7 HORIZONTAL INTERVALS TO SCROLL PIXELS
09028  2645             ;===============================================================================
09029  2645             
09030  2645             SCROLLRIGHT 
09031  2645  A2 02                 LDX #2
09032  2647  20 B7 33              JSR MOVESPRITELEFT
09033  264A  A2 03                 LDX #3
09034  264C  20 B7 33              JSR MOVESPRITELEFT
09035  264F             
09036  264F  C6 29                 DEC SCROLL_COUNT_X      ; DECREMENT TO SCROLL RIGHT
09037  2651  A5 29                 LDA SCROLL_COUNT_X      ; LOAD INTO A
09038  2653  29 07                 AND #%00000111          ; MASK LOWER 3 BITS TO MAKE A 0 - 7 COUNT
09039  2655  85 29                 STA SCROLL_COUNT_X      ; STORE THE NEW COUNT - RASTER IRQ DOES THE
09040  2657                        ; SCROLLRIGHT
09041  2657             
09042  2657                        ; A HOLDS THE COUNT, FROM HERE WE CAN TEST AGAINST IT
09043  2657                        ; TO SPLIT THE WORKLOAD DEPENDING ON WHAT
09044  2657                        ; 'FRAME' WE ARE AT
09045  2657             
09046  2657             @FRAME2
09047  2657  C9 02                 CMP #2
09048  2659  D0 04                 BNE @FRAME1
09049  265B  20 EF 30              JSR COPYHORIZONTALBUFFER     ; FETCH THE NEXT COLUMN TO DRAW
09050  265E  60                    RTS
09051  265F                        ;---------------------------------------------------- FRAME 1
09052  265F             @FRAME1
09053  265F  C9 01                 CMP #1
09054  2661  D0 07                 BNE @FRAME0
09055  2663  20 32 2A              JSR SHIFTCHARSRIGHT     ; SHIFT CHARACTERS TO THE BUFFER SCREEN
09056  2666  20 B3 2E              JSR DRAWRIGHTBUFFER     ; DRAW IN THE NEW CHARACTERS FROM THE BUFFER
09057  2669  60                    RTS
09058  266A                        ;---------------------------------------------------- FRAME 0 - PREJUMP
09059  266A             @FRAME0
09060  266A  C9 00                 CMP #0
09061  266C  D0 01                 BNE @FRAME7
09062  266E  60                    RTS
09063  266F                        ;---------------------------------------------------- FRAME 7 - JUMP FRAME
09064  266F             @FRAME7
09065  266F  C9 07                 CMP #7
09066  2671  D0 2B                 BNE @DONE
09067  2673  20 93 1F              JSR SWAPSCREENS         ; BRING THE BUFFER TO THE FOREGROUND
09068  2676  20 32 2B              JSR COLORSHIFTRIGHT     ; SHIFT THE COLOR RAM ONE CHARACTER
09069  2679  20 AB 2F              JSR DRAWRIGHTCOLOR      ; DRAW IN THE NEW COLORS FROM THE BUFFER
09070  267C             
09071  267C  18                    CLC
09072  267D  A5 32                 LDA MAP_X_DELTA         ; ADD ONE TO DELTA
09073  267F  69 01                 ADC #1
09074  2681  29 03                 AND #%00000011          ; IF DELTA WRAPS WE GO UP A TILE
09075  2683  85 32                 STA MAP_X_DELTA
09076  2685  C9 00                 CMP #0
09077  2687  F0 01                 BEQ @NEWTILE
09078  2689  60                    RTS
09079  268A             @NEWTILE
09080  268A  E6 30                 INC MAP_X_POS           ; INC MAP POS TO NEXT TILE
09081  268C  18                    CLC
09082  268D  AD 6C 23              LDA MAP_ADDRESS         ; INC MAP ADDRESS TO NEXT POSITION
09083  2690  69 01                 ADC #1
09084  2692  8D 6C 23              STA MAP_ADDRESS
09085  2695  AD 6D 23              LDA MAP_ADDRESS + 1
09086  2698  69 00                 ADC #0
09087  269A  8D 6D 23              STA MAP_ADDRESS + 1
09088  269D             
09089  269D  60                    RTS
09090  269E             @DONE
09091  269E  60                    RTS
09092  269F             
09093  269F             ;-------------------------------------------------------------------------------
09094  269F             ; SHIFT CHARS UP
09095  269F             ;-------------------------------------------------------------------------------
09096  269F             ; SHIFT THE CHARACTERS FOR A SCROLL GOING UP (CHARACTERS ARE MOVING DOWN)
09097  269F             ;-------------------------------------------------------------------------------
09098  269F             
09099  269F             SHIFTCHARSUP 
09100  269F  A5 26                 LDA CURRENT_SCREEN + 1
09101  26A1  C9 44                 CMP #>SCREEN2_MEM
09102  26A3  F0 03                 BEQ @SCREEN2
09103  26A5  4C AC 26              JMP @COPYFM1
09104  26A8             @SCREEN2
09105  26A8  4C 2C 27              JMP @COPYFM2
09106  26AB  60                    RTS
09107  26AC             
09108  26AC             @COPYFM1
09109  26AC  A2 00                 LDX #0
09110  26AE             @COPYLOOP1 
09111  26AE             
09112  26AE  BD 00 40              LDA SCREEN1_MEM,X
09113  26B1  9D 28 44              STA SCREEN2_MEM + 40,X
09114  26B4             
09115  26B4  BD 28 40              LDA SCREEN1_MEM + 40,X
09116  26B7  9D 50 44              STA SCREEN2_MEM + 80,X
09117  26BA             
09118  26BA  BD 50 40              LDA SCREEN1_MEM + 80,X
09119  26BD  9D 78 44              STA SCREEN2_MEM + 120,X
09120  26C0             
09121  26C0  BD 78 40              LDA SCREEN1_MEM + 120,X
09122  26C3  9D A0 44              STA SCREEN2_MEM + 160,X
09123  26C6             
09124  26C6             
09125  26C6  BD A0 40              LDA SCREEN1_MEM + 160,X
09126  26C9  9D C8 44              STA SCREEN2_MEM + 200,X
09127  26CC             
09128  26CC  BD C8 40              LDA SCREEN1_MEM + 200,X
09129  26CF  9D F0 44              STA SCREEN2_MEM + 240,X
09130  26D2             
09131  26D2  BD F0 40              LDA SCREEN1_MEM + 240,X
09132  26D5  9D 18 45              STA SCREEN2_MEM + 280,X
09133  26D8             
09134  26D8  BD 18 41              LDA SCREEN1_MEM + 280,X
09135  26DB  9D 40 45              STA SCREEN2_MEM + 320,X
09136  26DE             
09137  26DE             
09138  26DE  BD 40 41              LDA SCREEN1_MEM + 320,X
09139  26E1  9D 68 45              STA SCREEN2_MEM + 360,X
09140  26E4             
09141  26E4  BD 68 41              LDA SCREEN1_MEM + 360,X
09142  26E7  9D 90 45              STA SCREEN2_MEM + 400,X
09143  26EA             
09144  26EA  BD 90 41              LDA SCREEN1_MEM + 400,X
09145  26ED  9D B8 45              STA SCREEN2_MEM + 440,X
09146  26F0             
09147  26F0  BD B8 41              LDA SCREEN1_MEM + 440,X
09148  26F3  9D E0 45              STA SCREEN2_MEM + 480,X
09149  26F6             
09150  26F6             
09151  26F6  BD E0 41              LDA SCREEN1_MEM + 480,X
09152  26F9  9D 08 46              STA SCREEN2_MEM + 520,X
09153  26FC             
09154  26FC  BD 08 42              LDA SCREEN1_MEM + 520,X
09155  26FF  9D 30 46              STA SCREEN2_MEM + 560,X
09156  2702             
09157  2702  BD 30 42              LDA SCREEN1_MEM + 560,X
09158  2705  9D 58 46              STA SCREEN2_MEM + 600,X
09159  2708             
09160  2708  BD 58 42              LDA SCREEN1_MEM + 600,X
09161  270B  9D 80 46              STA SCREEN2_MEM + 640,X
09162  270E             
09163  270E             
09164  270E  BD 80 42              LDA SCREEN1_MEM + 640,X
09165  2711  9D A8 46              STA SCREEN2_MEM + 680,X
09166  2714             
09167  2714  BD A8 42              LDA SCREEN1_MEM + 680,X
09168  2717  9D D0 46              STA SCREEN2_MEM + 720,X
09169  271A             
09170  271A  BD D0 42              LDA SCREEN1_MEM + 720,X
09171  271D  9D F8 46              STA SCREEN2_MEM + 760,X
09172  2720             
09173  2720  BD F8 42              LDA SCREEN1_MEM + 760,X
09174  2723  9D 20 47              STA SCREEN2_MEM + 800,X
09175  2726  E8                    INX
09176  2727  E0 28                 CPX #40
09177  2729  D0 83                 BNE @COPYLOOP1
09178  272B  60                    RTS
09179  272C             
09180  272C             @COPYFM2
09181  272C  A2 00                 LDX #0
09182  272E             @COPYLOOP2 
09183  272E             
09184  272E  BD 00 44              LDA SCREEN2_MEM,X
09185  2731  9D 28 40              STA SCREEN1_MEM + 40,X
09186  2734             
09187  2734  BD 28 44              LDA SCREEN2_MEM + 40,X
09188  2737  9D 50 40              STA SCREEN1_MEM + 80,X
09189  273A             
09190  273A  BD 50 44              LDA SCREEN2_MEM + 80,X
09191  273D  9D 78 40              STA SCREEN1_MEM + 120,X
09192  2740             
09193  2740  BD 78 44              LDA SCREEN2_MEM + 120,X
09194  2743  9D A0 40              STA SCREEN1_MEM + 160,X
09195  2746             
09196  2746             
09197  2746  BD A0 44              LDA SCREEN2_MEM + 160,X
09198  2749  9D C8 40              STA SCREEN1_MEM + 200,X
09199  274C             
09200  274C  BD C8 44              LDA SCREEN2_MEM + 200,X
09201  274F  9D F0 40              STA SCREEN1_MEM + 240,X
09202  2752             
09203  2752  BD F0 44              LDA SCREEN2_MEM + 240,X
09204  2755  9D 18 41              STA SCREEN1_MEM + 280,X
09205  2758             
09206  2758  BD 18 45              LDA SCREEN2_MEM + 280,X
09207  275B  9D 40 41              STA SCREEN1_MEM + 320,X
09208  275E             
09209  275E             
09210  275E  BD 40 45              LDA SCREEN2_MEM + 320,X
09211  2761  9D 68 41              STA SCREEN1_MEM + 360,X
09212  2764             
09213  2764  BD 68 45              LDA SCREEN2_MEM + 360,X
09214  2767  9D 90 41              STA SCREEN1_MEM + 400,X
09215  276A             
09216  276A  BD 90 45              LDA SCREEN2_MEM + 400,X
09217  276D  9D B8 41              STA SCREEN1_MEM + 440,X
09218  2770             
09219  2770  BD B8 45              LDA SCREEN2_MEM + 440,X
09220  2773  9D E0 41              STA SCREEN1_MEM + 480,X
09221  2776             
09222  2776             
09223  2776  BD E0 45              LDA SCREEN2_MEM + 480,X
09224  2779  9D 08 42              STA SCREEN1_MEM + 520,X
09225  277C             
09226  277C  BD 08 46              LDA SCREEN2_MEM + 520,X
09227  277F  9D 30 42              STA SCREEN1_MEM + 560,X
09228  2782             
09229  2782  BD 30 46              LDA SCREEN2_MEM + 560,X
09230  2785  9D 58 42              STA SCREEN1_MEM + 600,X
09231  2788             
09232  2788  BD 58 46              LDA SCREEN2_MEM + 600,X
09233  278B  9D 80 42              STA SCREEN1_MEM + 640,X
09234  278E             
09235  278E  BD 80 46              LDA SCREEN2_MEM + 640,X
09236  2791  9D A8 42              STA SCREEN1_MEM + 680,X
09237  2794             
09238  2794  BD A8 46              LDA SCREEN2_MEM + 680,X
09239  2797  9D D0 42              STA SCREEN1_MEM + 720,X
09240  279A             
09241  279A  BD D0 46              LDA SCREEN2_MEM + 720,X
09242  279D  9D F8 42              STA SCREEN1_MEM + 760,X
09243  27A0             
09244  27A0  BD F8 46              LDA SCREEN2_MEM + 760,X
09245  27A3  9D 20 43              STA SCREEN1_MEM + 800,X
09246  27A6  E8                    INX
09247  27A7  E0 28                 CPX #40
09248  27A9  D0 83                 BNE @COPYLOOP2
09249  27AB  60                    RTS
09250  27AC             
09251  27AC             
09252  27AC             ;-------------------------------------------------------------------------------
09253  27AC             ; SHIFT CHARS DOWN
09254  27AC             ;-------------------------------------------------------------------------------
09255  27AC             ; SHIFT THE CHARACTERS FOR A SCROLL GOING DOWN (CHARACTERS ARE MOVING UP)
09256  27AC             ;-------------------------------------------------------------------------------
09257  27AC             
09258  27AC             SHIFTCHARSDOWN 
09259  27AC  A5 26                 LDA CURRENT_SCREEN + 1
09260  27AE  C9 44                 CMP #>SCREEN2_MEM
09261  27B0  F0 03                 BEQ @SCREEN2
09262  27B2  4C B9 27              JMP @COPYFM1
09263  27B5             @SCREEN2
09264  27B5  4C 39 28              JMP @COPYFM2
09265  27B8  60                    RTS
09266  27B9             
09267  27B9             @COPYFM1
09268  27B9  A2 00                 LDX #0
09269  27BB             @COPYLOOP1 
09270  27BB  BD 28 40              LDA SCREEN1_MEM + 40,X          ; TILE 1
09271  27BE  9D 00 44              STA SCREEN2_MEM,X
09272  27C1             
09273  27C1  BD 50 40              LDA SCREEN1_MEM + 80,X
09274  27C4  9D 28 44              STA SCREEN2_MEM + 40,X
09275  27C7             
09276  27C7  BD 78 40              LDA SCREEN1_MEM + 120,X
09277  27CA  9D 50 44              STA SCREEN2_MEM + 80,X
09278  27CD             
09279  27CD  BD A0 40              LDA SCREEN1_MEM + 160,X
09280  27D0  9D 78 44              STA SCREEN2_MEM + 120,X
09281  27D3             
09282  27D3             
09283  27D3  BD C8 40              LDA SCREEN1_MEM + 200,X         ; TILE 2
09284  27D6  9D A0 44              STA SCREEN2_MEM + 160,X
09285  27D9             
09286  27D9  BD F0 40              LDA SCREEN1_MEM + 240,X
09287  27DC  9D C8 44              STA SCREEN2_MEM + 200,X
09288  27DF             
09289  27DF  BD 18 41              LDA SCREEN1_MEM + 280,X
09290  27E2  9D F0 44              STA SCREEN2_MEM + 240,X
09291  27E5                        
09292  27E5  BD 40 41              LDA SCREEN1_MEM + 320,X
09293  27E8  9D 18 45              STA SCREEN2_MEM + 280,X
09294  27EB             
09295  27EB             
09296  27EB  BD 68 41              LDA SCREEN1_MEM + 360,X         ; TILE 3
09297  27EE  9D 40 45              STA SCREEN2_MEM + 320,X
09298  27F1             
09299  27F1  BD 90 41              LDA SCREEN1_MEM + 400,X
09300  27F4  9D 68 45              STA SCREEN2_MEM + 360,X
09301  27F7             
09302  27F7  BD B8 41              LDA SCREEN1_MEM + 440,X
09303  27FA  9D 90 45              STA SCREEN2_MEM + 400,X
09304  27FD             
09305  27FD  BD E0 41              LDA SCREEN1_MEM + 480,X
09306  2800  9D B8 45              STA SCREEN2_MEM + 440,X
09307  2803             
09308  2803             
09309  2803  BD 08 42              LDA SCREEN1_MEM + 520,X         ; TILE 4
09310  2806  9D E0 45              STA SCREEN2_MEM + 480,X
09311  2809                        
09312  2809  BD 30 42              LDA SCREEN1_MEM + 560,X
09313  280C  9D 08 46              STA SCREEN2_MEM + 520,X
09314  280F                        
09315  280F  BD 58 42              LDA SCREEN1_MEM + 600,X
09316  2812  9D 30 46              STA SCREEN2_MEM + 560,X
09317  2815             
09318  2815  BD 80 42              LDA SCREEN1_MEM + 640,X
09319  2818  9D 58 46              STA SCREEN2_MEM + 600,X
09320  281B             
09321  281B             
09322  281B  BD A8 42              LDA SCREEN1_MEM + 680,X
09323  281E  9D 80 46              STA SCREEN2_MEM + 640,X
09324  2821                        
09325  2821  BD D0 42              LDA SCREEN1_MEM + 720,X
09326  2824  9D A8 46              STA SCREEN2_MEM + 680,X
09327  2827             
09328  2827  BD F8 42              LDA SCREEN1_MEM + 760,X
09329  282A  9D D0 46              STA SCREEN2_MEM + 720,X
09330  282D             
09331  282D  BD 20 43              LDA SCREEN1_MEM + 800,X
09332  2830  9D F8 46              STA SCREEN2_MEM + 760,X
09333  2833  E8                    INX
09334  2834  E0 28                 CPX #40
09335  2836  D0 83                 BNE @COPYLOOP1
09336  2838  60                    RTS
09337  2839             
09338  2839             
09339  2839             @COPYFM2
09340  2839  A2 00                 LDX #0
09341  283B             @COPYLOOP2 
09342  283B  BD 28 44              LDA SCREEN2_MEM + 40,X          ; TILE 1
09343  283E  9D 00 40              STA SCREEN1_MEM,X
09344  2841             
09345  2841  BD 50 44              LDA SCREEN2_MEM + 80,X
09346  2844  9D 28 40              STA SCREEN1_MEM + 40,X
09347  2847             
09348  2847  BD 78 44              LDA SCREEN2_MEM + 120,X
09349  284A  9D 50 40              STA SCREEN1_MEM + 80,X
09350  284D             
09351  284D  BD A0 44              LDA SCREEN2_MEM + 160,X
09352  2850  9D 78 40              STA SCREEN1_MEM + 120,X
09353  2853             
09354  2853             
09355  2853  BD C8 44              LDA SCREEN2_MEM + 200,X       ; TILE 2
09356  2856  9D A0 40              STA SCREEN1_MEM + 160,X
09357  2859             
09358  2859  BD F0 44              LDA SCREEN2_MEM + 240,X
09359  285C  9D C8 40              STA SCREEN1_MEM + 200,X
09360  285F             
09361  285F  BD 18 45              LDA SCREEN2_MEM + 280,X
09362  2862  9D F0 40              STA SCREEN1_MEM + 240,X
09363  2865                        
09364  2865  BD 40 45              LDA SCREEN2_MEM + 320,X
09365  2868  9D 18 41              STA SCREEN1_MEM + 280,X
09366  286B             
09367  286B             
09368  286B  BD 68 45              LDA SCREEN2_MEM + 360,X         ; TILE 3
09369  286E  9D 40 41              STA SCREEN1_MEM + 320,X
09370  2871             
09371  2871  BD 90 45              LDA SCREEN2_MEM + 400,X
09372  2874  9D 68 41              STA SCREEN1_MEM + 360,X
09373  2877             
09374  2877  BD B8 45              LDA SCREEN2_MEM + 440,X
09375  287A  9D 90 41              STA SCREEN1_MEM + 400,X
09376  287D             
09377  287D  BD E0 45              LDA SCREEN2_MEM + 480,X
09378  2880  9D B8 41              STA SCREEN1_MEM + 440,X
09379  2883             
09380  2883             
09381  2883  BD 08 46              LDA SCREEN2_MEM + 520,X         ; TILE 4
09382  2886  9D E0 41              STA SCREEN1_MEM + 480,X
09383  2889                        
09384  2889  BD 30 46              LDA SCREEN2_MEM + 560,X
09385  288C  9D 08 42              STA SCREEN1_MEM + 520,X
09386  288F                        
09387  288F  BD 58 46              LDA SCREEN2_MEM + 600,X
09388  2892  9D 30 42              STA SCREEN1_MEM + 560,X
09389  2895             
09390  2895  BD 80 46              LDA SCREEN2_MEM + 640,X
09391  2898  9D 58 42              STA SCREEN1_MEM + 600,X
09392  289B             
09393  289B  BD A8 46              LDA SCREEN2_MEM + 680,X         ; TILE 5
09394  289E  9D 80 42              STA SCREEN1_MEM + 640,X
09395  28A1                        
09396  28A1  BD D0 46              LDA SCREEN2_MEM + 720,X
09397  28A4  9D A8 42              STA SCREEN1_MEM + 680,X
09398  28A7             
09399  28A7  BD F8 46              LDA SCREEN2_MEM + 760,X
09400  28AA  9D D0 42              STA SCREEN1_MEM + 720,X
09401  28AD             
09402  28AD  BD 20 47              LDA SCREEN2_MEM + 800,X
09403  28B0  9D F8 42              STA SCREEN1_MEM + 760,X
09404  28B3  E8                    INX
09405  28B4  E0 28                 CPX #40
09406  28B6  D0 83                 BNE @COPYLOOP2
09407  28B8             
09408  28B8  60                    RTS
09409  28B9             
09410  28B9             
09411  28B9             ;-------------------------------------------------------------------------------
09412  28B9             ; SHIFT CHARS LEFT
09413  28B9             ;-------------------------------------------------------------------------------
09414  28B9             ; SHIFT THE CHARACTERS FOR A SCROLL IN THE LEFT DIRECTION (CHARACTERS ARE
09415  28B9             ; MOVING RIGHT) ROUTINES ARE UNROLLED FOR SPEED
09416  28B9             ;-------------------------------------------------------------------------------
09417  28B9             
09418  28B9             SHIFTCHARSLEFT 
09419  28B9  A5 26                 LDA CURRENT_SCREEN + 1
09420  28BB  C9 44                 CMP #>SCREEN2_MEM
09421  28BD  F0 03                 BEQ @SCREEN2
09422  28BF  4C C6 28              JMP @COPYFM1
09423  28C2             @SCREEN2
09424  28C2  4C 40 29              JMP @COPYFM2
09425  28C5  60                    RTS
09426  28C6             @COPYFM1
09427  28C6  A2 00                 LDX #0
09428  28C8             @COPYLOOP1 
09429  28C8  BD 00 40              LDA SCREEN1_MEM,X
09430  28CB  9D 01 44              STA SCREEN2_MEM + 1,X
09431  28CE             
09432  28CE  BD 28 40              LDA SCREEN1_MEM + 40,X
09433  28D1  9D 29 44              STA SCREEN2_MEM + 41,X
09434  28D4             
09435  28D4  BD 50 40              LDA SCREEN1_MEM + 80,X
09436  28D7  9D 51 44              STA SCREEN2_MEM + 81,X
09437  28DA             
09438  28DA  BD 78 40              LDA SCREEN1_MEM + 120,X
09439  28DD  9D 79 44              STA SCREEN2_MEM + 121,X
09440  28E0                        
09441  28E0  BD A0 40              LDA SCREEN1_MEM + 160,X
09442  28E3  9D A1 44              STA SCREEN2_MEM + 161,X
09443  28E6             
09444  28E6  BD C8 40              LDA SCREEN1_MEM + 200,X
09445  28E9  9D C9 44              STA SCREEN2_MEM + 201,X
09446  28EC             
09447  28EC  BD F0 40              LDA SCREEN1_MEM + 240,X
09448  28EF  9D F1 44              STA SCREEN2_MEM + 241,X
09449  28F2             
09450  28F2  BD 18 41              LDA SCREEN1_MEM + 280,X
09451  28F5  9D 19 45              STA SCREEN2_MEM + 281,X
09452  28F8             
09453  28F8  BD 40 41              LDA SCREEN1_MEM + 320,X
09454  28FB  9D 41 45              STA SCREEN2_MEM + 321,X
09455  28FE             
09456  28FE  BD 68 41              LDA SCREEN1_MEM + 360,X
09457  2901  9D 69 45              STA SCREEN2_MEM + 361,X
09458  2904             
09459  2904  BD 90 41              LDA SCREEN1_MEM + 400,X
09460  2907  9D 91 45              STA SCREEN2_MEM + 401,X
09461  290A             
09462  290A  BD B8 41              LDA SCREEN1_MEM + 440,X
09463  290D  9D B9 45              STA SCREEN2_MEM + 441,X
09464  2910             
09465  2910  BD E0 41              LDA SCREEN1_MEM + 480,X
09466  2913  9D E1 45              STA SCREEN2_MEM + 481,X
09467  2916             
09468  2916  BD 08 42              LDA SCREEN1_MEM + 520,X
09469  2919  9D 09 46              STA SCREEN2_MEM + 521,X
09470  291C             
09471  291C  BD 30 42              LDA SCREEN1_MEM + 560,X
09472  291F  9D 31 46              STA SCREEN2_MEM + 561,X
09473  2922             
09474  2922  BD 58 42              LDA SCREEN1_MEM + 600,X
09475  2925  9D 59 46              STA SCREEN2_MEM + 601,X
09476  2928             
09477  2928  BD 80 42              LDA SCREEN1_MEM + 640,X
09478  292B  9D 81 46              STA SCREEN2_MEM + 641,X
09479  292E                        
09480  292E  BD A8 42              LDA SCREEN1_MEM + 680,X
09481  2931  9D A9 46              STA SCREEN2_MEM + 681,X
09482  2934             
09483  2934  BD D0 42              LDA SCREEN1_MEM + 720,X
09484  2937  9D D1 46              STA SCREEN2_MEM + 721,X
09485  293A  E8                    INX
09486  293B  E0 27                 CPX #39
09487  293D  D0 89                 BNE @COPYLOOP1
09488  293F  60                    RTS
09489  2940             
09490  2940             @COPYFM2
09491  2940  A2 00                 LDX #0
09492  2942             @COPYLOOP2 
09493  2942  BD 00 44              LDA SCREEN2_MEM,X
09494  2945  9D 01 40              STA SCREEN1_MEM + 1,X
09495  2948             
09496  2948  BD 28 44              LDA SCREEN2_MEM + 40,X
09497  294B  9D 29 40              STA SCREEN1_MEM + 41,X
09498  294E             
09499  294E  BD 50 44              LDA SCREEN2_MEM + 80,X
09500  2951  9D 51 40              STA SCREEN1_MEM + 81,X
09501  2954             
09502  2954  BD 78 44              LDA SCREEN2_MEM + 120,X
09503  2957  9D 79 40              STA SCREEN1_MEM + 121,X
09504  295A                        
09505  295A  BD A0 44              LDA SCREEN2_MEM + 160,X
09506  295D  9D A1 40              STA SCREEN1_MEM + 161,X
09507  2960             
09508  2960  BD C8 44              LDA SCREEN2_MEM + 200,X
09509  2963  9D C9 40              STA SCREEN1_MEM + 201,X
09510  2966             
09511  2966  BD F0 44              LDA SCREEN2_MEM + 240,X
09512  2969  9D F1 40              STA SCREEN1_MEM + 241,X
09513  296C             
09514  296C  BD 18 45              LDA SCREEN2_MEM + 280,X
09515  296F  9D 19 41              STA SCREEN1_MEM + 281,X
09516  2972             
09517  2972  BD 40 45              LDA SCREEN2_MEM + 320,X
09518  2975  9D 41 41              STA SCREEN1_MEM + 321,X
09519  2978             
09520  2978  BD 68 45              LDA SCREEN2_MEM + 360,X
09521  297B  9D 69 41              STA SCREEN1_MEM + 361,X
09522  297E             
09523  297E  BD 90 45              LDA SCREEN2_MEM + 400,X
09524  2981  9D 91 41              STA SCREEN1_MEM + 401,X
09525  2984             
09526  2984  BD B8 45              LDA SCREEN2_MEM + 440,X
09527  2987  9D B9 41              STA SCREEN1_MEM + 441,X
09528  298A             
09529  298A  BD E0 45              LDA SCREEN2_MEM + 480,X
09530  298D  9D E1 41              STA SCREEN1_MEM + 481,X
09531  2990             
09532  2990  BD 08 46              LDA SCREEN2_MEM + 520,X
09533  2993  9D 09 42              STA SCREEN1_MEM + 521,X
09534  2996             
09535  2996  BD 30 46              LDA SCREEN2_MEM + 560,X
09536  2999  9D 31 42              STA SCREEN1_MEM + 561,X
09537  299C             
09538  299C  BD 58 46              LDA SCREEN2_MEM + 600,X
09539  299F  9D 59 42              STA SCREEN1_MEM + 601,X
09540  29A2             
09541  29A2  BD 80 46              LDA SCREEN2_MEM + 640,X
09542  29A5  9D 81 42              STA SCREEN1_MEM + 641,X
09543  29A8                        
09544  29A8  BD A8 46              LDA SCREEN2_MEM + 680,X
09545  29AB  9D A9 42              STA SCREEN1_MEM + 681,X
09546  29AE             
09547  29AE  BD D0 46              LDA SCREEN2_MEM + 720,X
09548  29B1  9D D1 42              STA SCREEN1_MEM + 721,X
09549  29B4  E8                    INX
09550  29B5  E0 27                 CPX #39
09551  29B7  D0 89                 BNE @COPYLOOP2
09552  29B9  60                    RTS
09553  29BA             
09554  29BA             
09555  29BA             
09556  29BA             ;-------------------------------------------------------------------------------
09557  29BA             ; SHIFT COLOR LEFT
09558  29BA             ;-------------------------------------------------------------------------------
09559  29BA             
09560  29BA             COLORSHIFTLEFT 
09561  29BA  A2 26                 LDX #38
09562  29BC             @COPYLOOP
09563  29BC  BD 00 D8              LDA COLOR_MEM,X
09564  29BF  9D 01 D8              STA COLOR_MEM + 1,X
09565  29C2             
09566  29C2  BD 28 D8              LDA COLOR_MEM + 40,X
09567  29C5  9D 29 D8              STA COLOR_MEM + 41,X
09568  29C8             
09569  29C8  BD 50 D8              LDA COLOR_MEM + 80,X
09570  29CB  9D 51 D8              STA COLOR_MEM + 81,X
09571  29CE                        
09572  29CE  BD 78 D8              LDA COLOR_MEM + 120,X
09573  29D1  9D 79 D8              STA COLOR_MEM + 121,X
09574  29D4             
09575  29D4  BD A0 D8              LDA COLOR_MEM + 160,X
09576  29D7  9D A1 D8              STA COLOR_MEM + 161,X
09577  29DA             
09578  29DA  BD C8 D8              LDA COLOR_MEM + 200,X
09579  29DD  9D C9 D8              STA COLOR_MEM + 201,X
09580  29E0             
09581  29E0  BD F0 D8              LDA COLOR_MEM + 240,X
09582  29E3  9D F1 D8              STA COLOR_MEM + 241,X
09583  29E6             
09584  29E6  BD 18 D9              LDA COLOR_MEM + 280,X
09585  29E9  9D 19 D9              STA COLOR_MEM + 281,X
09586  29EC             
09587  29EC  BD 40 D9              LDA COLOR_MEM + 320,X
09588  29EF  9D 41 D9              STA COLOR_MEM + 321,X
09589  29F2             
09590  29F2  BD 68 D9              LDA COLOR_MEM + 360,X
09591  29F5  9D 69 D9              STA COLOR_MEM + 361,X
09592  29F8             
09593  29F8  BD 90 D9              LDA COLOR_MEM + 400,X
09594  29FB  9D 91 D9              STA COLOR_MEM + 401,X
09595  29FE             
09596  29FE  BD B8 D9              LDA COLOR_MEM + 440,X
09597  2A01  9D B9 D9              STA COLOR_MEM + 441,X
09598  2A04             
09599  2A04  BD E0 D9              LDA COLOR_MEM + 480,X
09600  2A07  9D E1 D9              STA COLOR_MEM + 481,X
09601  2A0A             
09602  2A0A  BD 08 DA              LDA COLOR_MEM + 520,X
09603  2A0D  9D 09 DA              STA COLOR_MEM + 521,X
09604  2A10             
09605  2A10  BD 30 DA              LDA COLOR_MEM + 560,X
09606  2A13  9D 31 DA              STA COLOR_MEM + 561,X
09607  2A16             
09608  2A16  BD 58 DA              LDA COLOR_MEM + 600,X
09609  2A19  9D 59 DA              STA COLOR_MEM + 601,X
09610  2A1C             
09611  2A1C  BD 80 DA              LDA COLOR_MEM + 640,X
09612  2A1F  9D 81 DA              STA COLOR_MEM + 641,X
09613  2A22             
09614  2A22  BD A8 DA              LDA COLOR_MEM + 680,X
09615  2A25  9D A9 DA              STA COLOR_MEM + 681,X
09616  2A28             
09617  2A28  BD D0 DA              LDA COLOR_MEM + 720,X
09618  2A2B  9D D1 DA              STA COLOR_MEM + 721,X
09619  2A2E  CA                    DEX
09620  2A2F  10 8B                 BPL @COPYLOOP
09621  2A31  60                    RTS
09622  2A32             
09623  2A32             
09624  2A32             ;-------------------------------------------------------------------------------
09625  2A32             ; SHIFT CHARS RIGHT
09626  2A32             ;-------------------------------------------------------------------------------
09627  2A32             ; SHIFT THE CHARACTERS FOR A SCROLL IN THE RIGHT DIRECTION (THE CHARACTERS ARE
09628  2A32             ; ACTUALLY MOVING LEFT) THESE ROUTINES ARE UNROLLED FOR SPEED
09629  2A32             ;-------------------------------------------------------------------------------
09630  2A32             
09631  2A32             SHIFTCHARSRIGHT 
09632  2A32                        
09633  2A32  A5 26                 LDA CURRENT_SCREEN + 1          ; DETECT OUR FRONT SCREEN / BACKSCREEN
09634  2A34  C9 44                 CMP #>SCREEN2_MEM               ; CHECK FOR SCREEN2
09635  2A36  F0 03                 BEQ @SCREEN2
09636  2A38  4C 3E 2A              JMP @COPYFM1                    ; WE USE JMP BECAUSE IT WILL BE > 256 BYTES
09637  2A3B             @SCREEN2
09638  2A3B  4C B8 2A              JMP @COPYFM2
09639  2A3E             
09640  2A3E                        ;--------------------------------- COPY FROM SCREEN1 TO SCREEN2
09641  2A3E             @COPYFM1
09642  2A3E  A2 00                 LDX #0
09643  2A40             @COPYLOOP1 
09644  2A40  BD 01 40              LDA SCREEN1_MEM + 1,X
09645  2A43  9D 00 44              STA SCREEN2_MEM,X
09646  2A46             
09647  2A46  BD 29 40              LDA SCREEN1_MEM + 41,X
09648  2A49  9D 28 44              STA SCREEN2_MEM + 40,X
09649  2A4C                        
09650  2A4C  BD 51 40              LDA SCREEN1_MEM + 81,X
09651  2A4F  9D 50 44              STA SCREEN2_MEM + 80,X
09652  2A52             
09653  2A52  BD 79 40              LDA SCREEN1_MEM + 121,X
09654  2A55  9D 78 44              STA SCREEN2_MEM + 120,X
09655  2A58                        
09656  2A58  BD A1 40              LDA SCREEN1_MEM + 161,X
09657  2A5B  9D A0 44              STA SCREEN2_MEM + 160,X
09658  2A5E                        
09659  2A5E  BD C9 40              LDA SCREEN1_MEM + 201,X
09660  2A61  9D C8 44              STA SCREEN2_MEM + 200,X
09661  2A64             
09662  2A64  BD F1 40              LDA SCREEN1_MEM + 241,X
09663  2A67  9D F0 44              STA SCREEN2_MEM + 240,X
09664  2A6A             
09665  2A6A  BD 19 41              LDA SCREEN1_MEM + 281,X
09666  2A6D  9D 18 45              STA SCREEN2_MEM + 280,X
09667  2A70             
09668  2A70  BD 41 41              LDA SCREEN1_MEM + 321,X
09669  2A73  9D 40 45              STA SCREEN2_MEM + 320,X
09670  2A76             
09671  2A76  BD 69 41              LDA SCREEN1_MEM + 361,X
09672  2A79  9D 68 45              STA SCREEN2_MEM + 360,X
09673  2A7C             
09674  2A7C  BD 91 41              LDA SCREEN1_MEM + 401,X
09675  2A7F  9D 90 45              STA SCREEN2_MEM + 400,X
09676  2A82             
09677  2A82  BD B9 41              LDA SCREEN1_MEM + 441,X
09678  2A85  9D B8 45              STA SCREEN2_MEM + 440,X
09679  2A88             
09680  2A88  BD E1 41              LDA SCREEN1_MEM + 481,X
09681  2A8B  9D E0 45              STA SCREEN2_MEM + 480,X
09682  2A8E             
09683  2A8E  BD 09 42              LDA SCREEN1_MEM + 521,X
09684  2A91  9D 08 46              STA SCREEN2_MEM + 520,X
09685  2A94             
09686  2A94  BD 31 42              LDA SCREEN1_MEM + 561,X
09687  2A97  9D 30 46              STA SCREEN2_MEM + 560,X
09688  2A9A             
09689  2A9A  BD 59 42              LDA SCREEN1_MEM + 601,X
09690  2A9D  9D 58 46              STA SCREEN2_MEM + 600,X
09691  2AA0             
09692  2AA0  BD 81 42              LDA SCREEN1_MEM + 641,X
09693  2AA3  9D 80 46              STA SCREEN2_MEM + 640,X
09694  2AA6                        
09695  2AA6  BD A9 42              LDA SCREEN1_MEM + 681,X
09696  2AA9  9D A8 46              STA SCREEN2_MEM + 680,X
09697  2AAC             
09698  2AAC  BD D1 42              LDA SCREEN1_MEM + 721,X
09699  2AAF  9D D0 46              STA SCREEN2_MEM + 720,X
09700  2AB2  E8                    INX
09701  2AB3  E0 27                 CPX #39
09702  2AB5  D0 89                 BNE @COPYLOOP1
09703  2AB7  60                    RTS
09704  2AB8             
09705  2AB8                        ;--------------------------------- COPY FROM SCREEN2 TO SCREEN1
09706  2AB8             @COPYFM2
09707  2AB8  A2 00                 LDX #0
09708  2ABA             @COPYLOOP2 
09709  2ABA  BD 01 44              LDA SCREEN2_MEM + 1,X
09710  2ABD  9D 00 40              STA SCREEN1_MEM,X
09711  2AC0             
09712  2AC0  BD 29 44              LDA SCREEN2_MEM + 41,X
09713  2AC3  9D 28 40              STA SCREEN1_MEM + 40,X
09714  2AC6                        
09715  2AC6  BD 51 44              LDA SCREEN2_MEM + 81,X
09716  2AC9  9D 50 40              STA SCREEN1_MEM + 80,X
09717  2ACC             
09718  2ACC  BD 79 44              LDA SCREEN2_MEM + 121,X
09719  2ACF  9D 78 40              STA SCREEN1_MEM + 120,X
09720  2AD2                        
09721  2AD2  BD A1 44              LDA SCREEN2_MEM + 161,X
09722  2AD5  9D A0 40              STA SCREEN1_MEM + 160,X
09723  2AD8                        
09724  2AD8  BD C9 44              LDA SCREEN2_MEM + 201,X
09725  2ADB  9D C8 40              STA SCREEN1_MEM + 200,X
09726  2ADE             
09727  2ADE  BD F1 44              LDA SCREEN2_MEM + 241,X
09728  2AE1  9D F0 40              STA SCREEN1_MEM + 240,X
09729  2AE4             
09730  2AE4  BD 19 45              LDA SCREEN2_MEM + 281,X
09731  2AE7  9D 18 41              STA SCREEN1_MEM + 280,X
09732  2AEA             
09733  2AEA  BD 41 45              LDA SCREEN2_MEM + 321,X
09734  2AED  9D 40 41              STA SCREEN1_MEM + 320,X
09735  2AF0             
09736  2AF0  BD 69 45              LDA SCREEN2_MEM + 361,X
09737  2AF3  9D 68 41              STA SCREEN1_MEM + 360,X
09738  2AF6             
09739  2AF6  BD 91 45              LDA SCREEN2_MEM + 401,X
09740  2AF9  9D 90 41              STA SCREEN1_MEM + 400,X
09741  2AFC             
09742  2AFC  BD B9 45              LDA SCREEN2_MEM + 441,X
09743  2AFF  9D B8 41              STA SCREEN1_MEM + 440,X
09744  2B02             
09745  2B02  BD E1 45              LDA SCREEN2_MEM + 481,X
09746  2B05  9D E0 41              STA SCREEN1_MEM + 480,X
09747  2B08             
09748  2B08  BD 09 46              LDA SCREEN2_MEM + 521,X
09749  2B0B  9D 08 42              STA SCREEN1_MEM + 520,X
09750  2B0E             
09751  2B0E  BD 31 46              LDA SCREEN2_MEM + 561,X
09752  2B11  9D 30 42              STA SCREEN1_MEM + 560,X
09753  2B14             
09754  2B14  BD 59 46              LDA SCREEN2_MEM + 601,X
09755  2B17  9D 58 42              STA SCREEN1_MEM + 600,X
09756  2B1A             
09757  2B1A  BD 81 46              LDA SCREEN2_MEM + 641,X
09758  2B1D  9D 80 42              STA SCREEN1_MEM + 640,X
09759  2B20                        
09760  2B20  BD A9 46              LDA SCREEN2_MEM + 681,X
09761  2B23  9D A8 42              STA SCREEN1_MEM + 680,X
09762  2B26             
09763  2B26  BD D1 46              LDA SCREEN2_MEM + 721,X
09764  2B29  9D D0 42              STA SCREEN1_MEM + 720,X
09765  2B2C  E8                    INX
09766  2B2D  E0 27                 CPX #39
09767  2B2F  D0 89                 BNE @COPYLOOP2
09768  2B31  60                    RTS
09769  2B32             
09770  2B32             
09771  2B32             ;-------------------------------------------------------------------------------
09772  2B32             ; COLOR SHIFT RIGHT
09773  2B32             ;-------------------------------------------------------------------------------
09774  2B32             ; SHIFT THE COLOR FOR RIGHT SCROLLING BY ONE CHARACTER
09775  2B32             ;-------------------------------------------------------------------------------
09776  2B32             
09777  2B32             COLORSHIFTRIGHT 
09778  2B32  A2 00                 LDX #0
09779  2B34             @COPYLOOP
09780  2B34  BD 01 D8              LDA COLOR_MEM + 1,X
09781  2B37  9D 00 D8              STA COLOR_MEM,X
09782  2B3A             
09783  2B3A  BD 29 D8              LDA COLOR_MEM + 41,X
09784  2B3D  9D 28 D8              STA COLOR_MEM + 40,X
09785  2B40             
09786  2B40  BD 51 D8              LDA COLOR_MEM + 81,X
09787  2B43  9D 50 D8              STA COLOR_MEM + 80,X
09788  2B46                        
09789  2B46  BD 79 D8              LDA COLOR_MEM + 121,X
09790  2B49  9D 78 D8              STA COLOR_MEM + 120,X
09791  2B4C             
09792  2B4C  BD A1 D8              LDA COLOR_MEM + 161,X
09793  2B4F  9D A0 D8              STA COLOR_MEM + 160,X
09794  2B52             
09795  2B52  BD C9 D8              LDA COLOR_MEM + 201,X
09796  2B55  9D C8 D8              STA COLOR_MEM + 200,X
09797  2B58             
09798  2B58  BD F1 D8              LDA COLOR_MEM + 241,X
09799  2B5B  9D F0 D8              STA COLOR_MEM + 240,X
09800  2B5E             
09801  2B5E  BD 19 D9              LDA COLOR_MEM + 281,X
09802  2B61  9D 18 D9              STA COLOR_MEM + 280,X
09803  2B64             
09804  2B64  BD 41 D9              LDA COLOR_MEM + 321,X
09805  2B67  9D 40 D9              STA COLOR_MEM + 320,X
09806  2B6A             
09807  2B6A  BD 69 D9              LDA COLOR_MEM + 361,X
09808  2B6D  9D 68 D9              STA COLOR_MEM + 360,X
09809  2B70             
09810  2B70  BD 91 D9              LDA COLOR_MEM + 401,X
09811  2B73  9D 90 D9              STA COLOR_MEM + 400,X
09812  2B76             
09813  2B76  BD B9 D9              LDA COLOR_MEM + 441,X
09814  2B79  9D B8 D9              STA COLOR_MEM + 440,X
09815  2B7C             
09816  2B7C  BD E1 D9              LDA COLOR_MEM + 481,X
09817  2B7F  9D E0 D9              STA COLOR_MEM + 480,X
09818  2B82             
09819  2B82  BD 09 DA              LDA COLOR_MEM + 521,X
09820  2B85  9D 08 DA              STA COLOR_MEM + 520,X
09821  2B88             
09822  2B88  BD 31 DA              LDA COLOR_MEM + 561,X
09823  2B8B  9D 30 DA              STA COLOR_MEM + 560,X
09824  2B8E             
09825  2B8E  BD 59 DA              LDA COLOR_MEM + 601,X
09826  2B91  9D 58 DA              STA COLOR_MEM + 600,X
09827  2B94             
09828  2B94  BD 81 DA              LDA COLOR_MEM + 641,X
09829  2B97  9D 80 DA              STA COLOR_MEM + 640,X
09830  2B9A             
09831  2B9A  BD A9 DA              LDA COLOR_MEM + 681,X
09832  2B9D  9D A8 DA              STA COLOR_MEM + 680,X
09833  2BA0             
09834  2BA0  BD D1 DA              LDA COLOR_MEM + 721,X
09835  2BA3  9D D0 DA              STA COLOR_MEM + 720,X
09836  2BA6  E8                    INX
09837  2BA7  E0 27                 CPX #39
09838  2BA9  D0 89                 BNE @COPYLOOP
09839  2BAB  60                    RTS
09840  2BAC             
09841  2BAC             
09842  2BAC             ;-------------------------------------------------------------------------------
09843  2BAC             ; SHIFT COLORS UP
09844  2BAC             ;-------------------------------------------------------------------------------
09845  2BAC             
09846  2BAC             COLORSHIFTUP 
09847  2BAC  A2 00                 LDX #0
09848  2BAE             
09849  2BAE             @COPYLOOP
09850  2BAE  BD A8 DA              LDA COLOR_MEM + 680,X
09851  2BB1  9D D0 DA              STA COLOR_MEM + 720,X
09852  2BB4             
09853  2BB4  BD 80 DA              LDA COLOR_MEM + 640,X
09854  2BB7  9D A8 DA              STA COLOR_MEM + 680,X
09855  2BBA             
09856  2BBA  BD 58 DA              LDA COLOR_MEM + 600,X
09857  2BBD  9D 80 DA              STA COLOR_MEM + 640,X
09858  2BC0             
09859  2BC0  BD 30 DA              LDA COLOR_MEM + 560,X
09860  2BC3  9D 58 DA              STA COLOR_MEM + 600,X
09861  2BC6             
09862  2BC6             
09863  2BC6  BD 08 DA              LDA COLOR_MEM + 520,X
09864  2BC9  9D 30 DA              STA COLOR_MEM + 560,X
09865  2BCC             
09866  2BCC  BD E0 D9              LDA COLOR_MEM + 480,X
09867  2BCF  9D 08 DA              STA COLOR_MEM + 520,X
09868  2BD2             
09869  2BD2  BD B8 D9              LDA COLOR_MEM + 440,X
09870  2BD5  9D E0 D9              STA COLOR_MEM + 480,X
09871  2BD8             
09872  2BD8  BD 90 D9              LDA COLOR_MEM + 400,X
09873  2BDB  9D B8 D9              STA COLOR_MEM + 440,X
09874  2BDE             
09875  2BDE             
09876  2BDE  BD 68 D9              LDA COLOR_MEM + 360,X
09877  2BE1  9D 90 D9              STA COLOR_MEM + 400,X
09878  2BE4             
09879  2BE4  BD 40 D9              LDA COLOR_MEM + 320,X
09880  2BE7  9D 68 D9              STA COLOR_MEM + 360,X
09881  2BEA             
09882  2BEA  BD 18 D9              LDA COLOR_MEM + 280,X
09883  2BED  9D 40 D9              STA COLOR_MEM + 320,X
09884  2BF0                        
09885  2BF0  BD F0 D8              LDA COLOR_MEM + 240,X
09886  2BF3  9D 18 D9              STA COLOR_MEM + 280,X
09887  2BF6             
09888  2BF6  BD C8 D8              LDA COLOR_MEM + 200,X
09889  2BF9  9D F0 D8              STA COLOR_MEM + 240,X
09890  2BFC             
09891  2BFC             
09892  2BFC  BD A0 D8              LDA COLOR_MEM + 160,X
09893  2BFF  9D C8 D8              STA COLOR_MEM + 200,X
09894  2C02             
09895  2C02  BD 78 D8              LDA COLOR_MEM + 120,X
09896  2C05  9D A0 D8              STA COLOR_MEM + 160,X
09897  2C08             
09898  2C08  BD 50 D8              LDA COLOR_MEM + 80,X
09899  2C0B  9D 78 D8              STA COLOR_MEM + 120,X
09900  2C0E             
09901  2C0E  BD 28 D8              LDA COLOR_MEM + 40,X
09902  2C11  9D 50 D8              STA COLOR_MEM + 80,X
09903  2C14             
09904  2C14  BD 00 D8              LDA COLOR_MEM,X
09905  2C17  9D 28 D8              STA COLOR_MEM + 40,X
09906  2C1A  E8                    INX
09907  2C1B  E0 28                 CPX #40
09908  2C1D  D0 8F                 BNE @COPYLOOP
09909  2C1F  60                    RTS
09910  2C20             
09911  2C20             ;-------------------------------------------------------------------------------
09912  2C20             ; SHIFT COLORS DOWN
09913  2C20             ;-------------------------------------------------------------------------------
09914  2C20             
09915  2C20             COLORSHIFTDOWN 
09916  2C20  A2 00                 LDX #0
09917  2C22             @COPYLOOP
09918  2C22  BD 28 D8              LDA COLOR_MEM + 40,X          ; TILE 1
09919  2C25  9D 00 D8              STA COLOR_MEM,X
09920  2C28             
09921  2C28  BD 50 D8              LDA COLOR_MEM + 80,X
09922  2C2B  9D 28 D8              STA COLOR_MEM + 40,X
09923  2C2E             
09924  2C2E  BD 78 D8              LDA COLOR_MEM + 120,X
09925  2C31  9D 50 D8              STA COLOR_MEM + 80,X
09926  2C34             
09927  2C34  BD A0 D8              LDA COLOR_MEM + 160,X
09928  2C37  9D 78 D8              STA COLOR_MEM + 120,X
09929  2C3A             
09930  2C3A             
09931  2C3A  BD C8 D8              LDA COLOR_MEM + 200,X       ; TILE 2
09932  2C3D  9D A0 D8              STA COLOR_MEM + 160,X
09933  2C40             
09934  2C40  BD F0 D8              LDA COLOR_MEM + 240,X
09935  2C43  9D C8 D8              STA COLOR_MEM + 200,X
09936  2C46             
09937  2C46  BD 18 D9              LDA COLOR_MEM + 280,X
09938  2C49  9D F0 D8              STA COLOR_MEM + 240,X
09939  2C4C                        
09940  2C4C  BD 40 D9              LDA COLOR_MEM + 320,X
09941  2C4F  9D 18 D9              STA COLOR_MEM + 280,X
09942  2C52             
09943  2C52             
09944  2C52  BD 68 D9              LDA COLOR_MEM + 360,X         ; TILE 3
09945  2C55  9D 40 D9              STA COLOR_MEM + 320,X
09946  2C58             
09947  2C58  BD 90 D9              LDA COLOR_MEM + 400,X
09948  2C5B  9D 68 D9              STA COLOR_MEM + 360,X
09949  2C5E             
09950  2C5E  BD B8 D9              LDA COLOR_MEM + 440,X
09951  2C61  9D 90 D9              STA COLOR_MEM + 400,X
09952  2C64             
09953  2C64  BD E0 D9              LDA COLOR_MEM + 480,X
09954  2C67  9D B8 D9              STA COLOR_MEM + 440,X
09955  2C6A             
09956  2C6A             
09957  2C6A  BD 08 DA              LDA COLOR_MEM + 520,X         ; TILE 4
09958  2C6D  9D E0 D9              STA COLOR_MEM + 480,X
09959  2C70                        
09960  2C70  BD 30 DA              LDA COLOR_MEM + 560,X
09961  2C73  9D 08 DA              STA COLOR_MEM + 520,X
09962  2C76                        
09963  2C76  BD 58 DA              LDA COLOR_MEM + 600,X
09964  2C79  9D 30 DA              STA COLOR_MEM + 560,X
09965  2C7C             
09966  2C7C  BD 80 DA              LDA COLOR_MEM + 640,X
09967  2C7F  9D 58 DA              STA COLOR_MEM + 600,X
09968  2C82             
09969  2C82             
09970  2C82  BD A8 DA              LDA COLOR_MEM + 680,X         ; TILE 5
09971  2C85  9D 80 DA              STA COLOR_MEM + 640,X
09972  2C88                        
09973  2C88  BD D0 DA              LDA COLOR_MEM + 720,X
09974  2C8B  9D A8 DA              STA COLOR_MEM + 680,X
09975  2C8E             
09976  2C8E             ;        LDA COLOR_MEM + 760,X
09977  2C8E             ;        STA COLOR_MEM + 720,X
09978  2C8E             
09979  2C8E             ;        LDA COLOR_MEM + 800,X
09980  2C8E             ;        STA COLOR_MEM + 760,X
09981  2C8E  E8                    INX
09982  2C8F  E0 28                 CPX #40
09983  2C91  D0 8F                 BNE @COPYLOOP
09984  2C93  60                    RTS
09985  2C94             
09986  2C94             ;-------------------------------------------------------------------------------
09987  2C94             ; DRAW UP BUFFER
09988  2C94             ;-------------------------------------------------------------------------------
09989  2C94             ; DRAW THE CHARACTERS IN THE VERTICAL BUFFER TO THE TOP LINE OF THE SCROLLING SCREEN
09990  2C94             ;-------------------------------------------------------------------------------
09991  2C94             ;-------------------------------------------------------------------------------
09992  2C94             ; <SCREEN2_MEM, >SCREEN2_MEM - READS SWITCHING SCREEN BACKGROUNDS
09993  2C94             ;===============================================================================
09994  2C94             ; ; DRAWS UP TO 40 PIXELS (CPY #40)
09995  2C94             ;===============================================================================
09996  2C94             
09997  2C94             DRAWUPBUFFER 
09998  2C94                        
09999  2C94             
10000  2C94             
10001  2C94  A9 6A                 LDA #<VERTICAL_BUFFER
10002  2C96  85 17                 STA ZEROPAGE_POINTER_1
10003  2C98  A9 32                 LDA #>VERTICAL_BUFFER
10004  2C9A  85 18                 STA ZEROPAGE_POINTER_1 + 1
10005  2C9C             
10006  2C9C             
10007  2C9C  A5 28                 LDA CURRENT_BUFFER + 1
10008  2C9E  C9 44                 CMP #>SCREEN2_MEM
10009  2CA0  F0 14                 BEQ @SCREEN2
10010  2CA2             
10011  2CA2  A9 00                 LDA #<SCREEN1_MEM
10012  2CA4  85 19                 STA ZEROPAGE_POINTER_2
10013  2CA6  A9 40                 LDA #>SCREEN1_MEM
10014  2CA8  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10015  2CAA             
10016  2CAA  A0 00                 LDY #0
10017  2CAC             @COPYLOOP1 
10018  2CAC  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10019  2CAE  91 19                 STA (ZEROPAGE_POINTER_2),Y
10020  2CB0             
10021  2CB0  C8                    INY
10022  2CB1  C0 28                 CPY #40
10023  2CB3  D0 F7                 BNE @COPYLOOP1
10024  2CB5  60                    RTS
10025  2CB6             
10026  2CB6             @SCREEN2
10027  2CB6             
10028  2CB6  A9 00                 LDA #<SCREEN2_MEM
10029  2CB8  85 19                 STA ZEROPAGE_POINTER_2
10030  2CBA  A9 44                 LDA #>SCREEN2_MEM
10031  2CBC  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10032  2CBE             
10033  2CBE  A0 00                 LDY #0
10034  2CC0             @COPYLOOP2 
10035  2CC0  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10036  2CC2  91 19                 STA (ZEROPAGE_POINTER_2),Y
10037  2CC4  C8                    INY
10038  2CC5  C0 28                 CPY #40
10039  2CC7  D0 F7                 BNE @COPYLOOP2
10040  2CC9  60                    RTS
10041  2CCA             
10042  2CCA             
10043  2CCA             ;-------------------------------------------------------------------------------
10044  2CCA             ; DRAW DOWN BUFFER
10045  2CCA             ;-------------------------------------------------------------------------------
10046  2CCA             ; DRAW THE CHARACTERS IN THE VERTICAL BUFFER TO THE BOTTOM LINE OF THE SCROLLING SCREEN
10047  2CCA             ;-------------------------------------------------------------------------------
10048  2CCA             
10049  2CCA             BOTTOM_DRAW_LINE = 17
10050  2CCA             
10051  2CCA             
10052  2CCA             DRAWDOWNBUFFER 
10053  2CCA             
10054  2CCA             
10055  2CCA             
10056  2CCA  A9 6A                 LDA #<VERTICAL_BUFFER
10057  2CCC  85 17                 STA ZEROPAGE_POINTER_1
10058  2CCE  A9 32                 LDA #>VERTICAL_BUFFER
10059  2CD0  85 18                 STA ZEROPAGE_POINTER_1 + 1
10060  2CD2             
10061  2CD2             
10062  2CD2  A2 11                 LDX #BOTTOM_DRAW_LINE           ; LINE TO DRAW TO
10063  2CD4             
10064  2CD4             
10065  2CD4  A5 28                 LDA CURRENT_BUFFER + 1
10066  2CD6  C9 44                 CMP #>SCREEN2_MEM
10067  2CD8  F0 16                 BEQ @SCREEN2
10068  2CDA             
10069  2CDA                        ; TO DO - UNWRAP IF REQUIRED
10070  2CDA             
10071  2CDA  BD 03 21              LDA SCREEN1_LINE_OFFSET_TABLE_LO,X
10072  2CDD  85 19                 STA ZEROPAGE_POINTER_2
10073  2CDF  BD 1C 21              LDA SCREEN1_LINE_OFFSET_TABLE_HI,X
10074  2CE2  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10075  2CE4             
10076  2CE4  A0 00                 LDY #0
10077  2CE6             @COPYLOOP
10078  2CE6  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10079  2CE8  91 19                 STA (ZEROPAGE_POINTER_2),Y
10080  2CEA  C8                    INY
10081  2CEB  C0 28                 CPY #40
10082  2CED  D0 F7                 BNE @COPYLOOP
10083  2CEF  60                    RTS
10084  2CF0             
10085  2CF0             @SCREEN2
10086  2CF0  BD 35 21              LDA SCREEN2_LINE_OFFSET_TABLE_LO,X
10087  2CF3  85 19                 STA ZEROPAGE_POINTER_2
10088  2CF5  BD 4E 21              LDA SCREEN2_LINE_OFFSET_TABLE_HI,X
10089  2CF8  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10090  2CFA             
10091  2CFA  A0 00                 LDY #0
10092  2CFC             @COPYLOOP2 
10093  2CFC  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10094  2CFE  91 19                 STA (ZEROPAGE_POINTER_2),Y
10095  2D00             
10096  2D00  C8                    INY
10097  2D01  C0 28                 CPY #40
10098  2D03  D0 F7                 BNE @COPYLOOP2
10099  2D05             
10100  2D05  60                    RTS
10101  2D06             
10102  2D06             ;-------------------------------------------------------------------------------
10103  2D06             ; DRAW UP COLOR
10104  2D06             ;-------------------------------------------------------------------------------
10105  2D06             ; WRITE THE CONTENTS OF THE VERTICAL_COLOR_BUFFER TO THE TOP 'OFF SCREEN' LINE
10106  2D06             ; IN COLOR RAM
10107  2D06             ;-------------------------------------------------------------------------------
10108  2D06             
10109  2D06             DRAWUPCOLOR 
10110  2D06             
10111  2D06             
10112  2D06             
10113  2D06  A9 92                 LDA #<VERTICAL_COLOR_BUFFER
10114  2D08  85 17                 STA ZEROPAGE_POINTER_1
10115  2D0A  A9 32                 LDA #>VERTICAL_COLOR_BUFFER
10116  2D0C  85 18                 STA ZEROPAGE_POINTER_1 + 1
10117  2D0E             
10118  2D0E             
10119  2D0E  A9 00                 LDA #<COLOR_MEM
10120  2D10  85 19                 STA ZEROPAGE_POINTER_2
10121  2D12  A9 D8                 LDA #>COLOR_MEM
10122  2D14  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10123  2D16             
10124  2D16  A0 00                 LDY #0
10125  2D18             @COPYLOOP
10126  2D18  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10127  2D1A  91 19                 STA (ZEROPAGE_POINTER_2),Y
10128  2D1C             
10129  2D1C  C8                    INY
10130  2D1D  C0 28                 CPY #40
10131  2D1F  D0 F7                 BNE @COPYLOOP
10132  2D21             
10133  2D21  60                    RTS
10134  2D22             
10135  2D22             
10136  2D22             ;-------------------------------------------------------------------------------
10137  2D22             ; DRAW DOWN COLOR
10138  2D22             ;-------------------------------------------------------------------------------
10139  2D22             ; WRITE THE CONTENTS OF THE VERTICAL_COLOR_BUFFER TO THE BOTTOM 'OFF SCREEN'
10140  2D22             ; LINE IN COLOR RAM
10141  2D22             ;-------------------------------------------------------------------------------
10142  2D22             
10143  2D22             DRAWDOWNCOLOR 
10144  2D22             
10145  2D22  A2 11                 LDX #BOTTOM_DRAW_LINE
10146  2D24             
10147  2D24             
10148  2D24             
10149  2D24  A9 92                 LDA #<VERTICAL_COLOR_BUFFER
10150  2D26  85 17                 STA ZEROPAGE_POINTER_1
10151  2D28  A9 32                 LDA #>VERTICAL_COLOR_BUFFER
10152  2D2A  85 18                 STA ZEROPAGE_POINTER_1 + 1
10153  2D2C             
10154  2D2C                        
10155  2D2C  BD 67 21              LDA COLOR_LINE_OFFSET_TABLE_LO,X
10156  2D2F  85 19                 STA ZEROPAGE_POINTER_2
10157  2D31  BD 80 21              LDA COLOR_LINE_OFFSET_TABLE_HI,X
10158  2D34  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10159  2D36             
10160  2D36  A0 00                 LDY #0
10161  2D38             
10162  2D38             @COPYLOOP
10163  2D38  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
10164  2D3A  91 19                 STA (ZEROPAGE_POINTER_2),Y
10165  2D3C             
10166  2D3C  C8                    INY
10167  2D3D  C0 28                 CPY #40
10168  2D3F  D0 F7                 BNE @COPYLOOP
10169  2D41             
10170  2D41  60                    RTS
10171  2D42             
10172  2D42             ;-------------------------------------------------------------------------------
10173  2D42             ; DRAW LEFT BUFFER
10174  2D42             ;-------------------------------------------------------------------------------
10175  2D42             ; DRAW THE CONTENTS OF THE HORIZONTAL BUFFER TO THE BACKBUFFER - UNROLLED FOR SPEED
10176  2D42             ;-------------------------------------------------------------------------------
10177  2D42             ; SCREEN1_MEM - SCREEN ONE DRAWS FROM 40,760 (19 LINES TO THE LEFT)
10178  2D42             ;===============================================================================
10179  2D42             
10180  2D42             DRAWLEFTBUFFER 
10181  2D42  A5 28                 LDA CURRENT_BUFFER + 1
10182  2D44  C9 44                 CMP #>SCREEN2_MEM
10183  2D46  F0 79                 BEQ @SCREEN2
10184  2D48             
10185  2D48  AD 3E 32              LDA HORIZONTAL_BUFFER
10186  2D4B  8D 00 40              STA SCREEN1_MEM
10187  2D4E  AD 3F 32              LDA HORIZONTAL_BUFFER + 1
10188  2D51  8D 28 40              STA SCREEN1_MEM + 40
10189  2D54  AD 40 32              LDA HORIZONTAL_BUFFER + 2
10190  2D57  8D 50 40              STA SCREEN1_MEM + 80
10191  2D5A  AD 41 32              LDA HORIZONTAL_BUFFER + 3
10192  2D5D  8D 78 40              STA SCREEN1_MEM + 120
10193  2D60             
10194  2D60  AD 42 32              LDA HORIZONTAL_BUFFER + 4
10195  2D63  8D A0 40              STA SCREEN1_MEM + 160
10196  2D66  AD 43 32              LDA HORIZONTAL_BUFFER + 5
10197  2D69  8D C8 40              STA SCREEN1_MEM + 200
10198  2D6C  AD 44 32              LDA HORIZONTAL_BUFFER + 6
10199  2D6F  8D F0 40              STA SCREEN1_MEM + 240
10200  2D72  AD 45 32              LDA HORIZONTAL_BUFFER + 7
10201  2D75  8D 18 41              STA SCREEN1_MEM + 280
10202  2D78             
10203  2D78  AD 46 32              LDA HORIZONTAL_BUFFER + 8
10204  2D7B  8D 40 41              STA SCREEN1_MEM + 320
10205  2D7E  AD 47 32              LDA HORIZONTAL_BUFFER + 9
10206  2D81  8D 68 41              STA SCREEN1_MEM + 360
10207  2D84  AD 48 32              LDA HORIZONTAL_BUFFER + 10
10208  2D87  8D 90 41              STA SCREEN1_MEM + 400
10209  2D8A  AD 49 32              LDA HORIZONTAL_BUFFER + 11
10210  2D8D  8D B8 41              STA SCREEN1_MEM + 440
10211  2D90             
10212  2D90  AD 4A 32              LDA HORIZONTAL_BUFFER + 12
10213  2D93  8D E0 41              STA SCREEN1_MEM + 480
10214  2D96  AD 4B 32              LDA HORIZONTAL_BUFFER + 13
10215  2D99  8D 08 42              STA SCREEN1_MEM + 520
10216  2D9C  AD 4C 32              LDA HORIZONTAL_BUFFER + 14
10217  2D9F  8D 30 42              STA SCREEN1_MEM + 560
10218  2DA2  AD 4D 32              LDA HORIZONTAL_BUFFER + 15
10219  2DA5  8D 58 42              STA SCREEN1_MEM + 600
10220  2DA8             
10221  2DA8  AD 4E 32              LDA HORIZONTAL_BUFFER + 16
10222  2DAB  8D 80 42              STA SCREEN1_MEM + 640
10223  2DAE  AD 4F 32              LDA HORIZONTAL_BUFFER + 17
10224  2DB1  8D A8 42              STA SCREEN1_MEM + 680
10225  2DB4  AD 50 32              LDA HORIZONTAL_BUFFER + 18
10226  2DB7  8D D0 42              STA SCREEN1_MEM + 720
10227  2DBA  AD 51 32              LDA HORIZONTAL_BUFFER + 19
10228  2DBD  8D F8 42              STA SCREEN1_MEM + 760
10229  2DC0             
10230  2DC0  60                    RTS
10231  2DC1             @SCREEN2
10232  2DC1  AD 3E 32              LDA HORIZONTAL_BUFFER
10233  2DC4  8D 00 44              STA SCREEN2_MEM
10234  2DC7  AD 3F 32              LDA HORIZONTAL_BUFFER + 1
10235  2DCA  8D 28 44              STA SCREEN2_MEM + 40
10236  2DCD  AD 40 32              LDA HORIZONTAL_BUFFER + 2
10237  2DD0  8D 50 44              STA SCREEN2_MEM + 80
10238  2DD3  AD 41 32              LDA HORIZONTAL_BUFFER + 3
10239  2DD6  8D 78 44              STA SCREEN2_MEM + 120
10240  2DD9             
10241  2DD9  AD 42 32              LDA HORIZONTAL_BUFFER + 4
10242  2DDC  8D A0 44              STA SCREEN2_MEM + 160
10243  2DDF  AD 43 32              LDA HORIZONTAL_BUFFER + 5
10244  2DE2  8D C8 44              STA SCREEN2_MEM + 200
10245  2DE5  AD 44 32              LDA HORIZONTAL_BUFFER + 6
10246  2DE8  8D F0 44              STA SCREEN2_MEM + 240
10247  2DEB  AD 45 32              LDA HORIZONTAL_BUFFER + 7
10248  2DEE  8D 18 45              STA SCREEN2_MEM + 280
10249  2DF1             
10250  2DF1  AD 46 32              LDA HORIZONTAL_BUFFER + 8
10251  2DF4  8D 40 45              STA SCREEN2_MEM + 320
10252  2DF7  AD 47 32              LDA HORIZONTAL_BUFFER + 9
10253  2DFA  8D 68 45              STA SCREEN2_MEM + 360
10254  2DFD  AD 48 32              LDA HORIZONTAL_BUFFER + 10
10255  2E00  8D 90 45              STA SCREEN2_MEM + 400
10256  2E03  AD 49 32              LDA HORIZONTAL_BUFFER + 11
10257  2E06  8D B8 45              STA SCREEN2_MEM + 440
10258  2E09             
10259  2E09  AD 4A 32              LDA HORIZONTAL_BUFFER + 12
10260  2E0C  8D E0 45              STA SCREEN2_MEM + 480
10261  2E0F  AD 4B 32              LDA HORIZONTAL_BUFFER + 13
10262  2E12  8D 08 46              STA SCREEN2_MEM + 520
10263  2E15  AD 4C 32              LDA HORIZONTAL_BUFFER + 14
10264  2E18  8D 30 46              STA SCREEN2_MEM + 560
10265  2E1B  AD 4D 32              LDA HORIZONTAL_BUFFER + 15
10266  2E1E  8D 58 46              STA SCREEN2_MEM + 600
10267  2E21             
10268  2E21  AD 4E 32              LDA HORIZONTAL_BUFFER + 16
10269  2E24  8D 80 46              STA SCREEN2_MEM + 640
10270  2E27  AD 4F 32              LDA HORIZONTAL_BUFFER + 17
10271  2E2A  8D A8 46              STA SCREEN2_MEM + 680
10272  2E2D  AD 50 32              LDA HORIZONTAL_BUFFER + 18
10273  2E30  8D D0 46              STA SCREEN2_MEM + 720
10274  2E33  AD 51 32              LDA HORIZONTAL_BUFFER + 19
10275  2E36  8D F8 46              STA SCREEN2_MEM + 760
10276  2E39             
10277  2E39  60                    RTS
10278  2E3A             
10279  2E3A             ;-------------------------------------------------------------------------------
10280  2E3A             ; DRAW RIGHT COLOR
10281  2E3A             ;-------------------------------------------------------------------------------
10282  2E3A             
10283  2E3A             DRAWLEFTCOLOR 
10284  2E3A  AD 54 32              LDA HORIZONTAL_COLOR_BUFFER
10285  2E3D  8D 00 D8              STA COLOR_MEM
10286  2E40  AD 55 32              LDA HORIZONTAL_COLOR_BUFFER + 1
10287  2E43  8D 28 D8              STA COLOR_MEM + 40
10288  2E46  AD 56 32              LDA HORIZONTAL_COLOR_BUFFER + 2
10289  2E49  8D 50 D8              STA COLOR_MEM + 80
10290  2E4C  AD 57 32              LDA HORIZONTAL_COLOR_BUFFER + 3
10291  2E4F  8D 78 D8              STA COLOR_MEM + 120
10292  2E52             
10293  2E52  AD 58 32              LDA HORIZONTAL_COLOR_BUFFER + 4
10294  2E55  8D A0 D8              STA COLOR_MEM + 160
10295  2E58  AD 59 32              LDA HORIZONTAL_COLOR_BUFFER + 5
10296  2E5B  8D C8 D8              STA COLOR_MEM + 200
10297  2E5E  AD 5A 32              LDA HORIZONTAL_COLOR_BUFFER + 6
10298  2E61  8D F0 D8              STA COLOR_MEM + 240
10299  2E64  AD 5B 32              LDA HORIZONTAL_COLOR_BUFFER + 7
10300  2E67  8D 18 D9              STA COLOR_MEM + 280
10301  2E6A             
10302  2E6A  AD 5C 32              LDA HORIZONTAL_COLOR_BUFFER + 8
10303  2E6D  8D 40 D9              STA COLOR_MEM + 320
10304  2E70  AD 5D 32              LDA HORIZONTAL_COLOR_BUFFER + 9
10305  2E73  8D 68 D9              STA COLOR_MEM + 360
10306  2E76  AD 5E 32              LDA HORIZONTAL_COLOR_BUFFER + 10
10307  2E79  8D 90 D9              STA COLOR_MEM + 400
10308  2E7C  AD 5F 32              LDA HORIZONTAL_COLOR_BUFFER + 11
10309  2E7F  8D B8 D9              STA COLOR_MEM + 440
10310  2E82             
10311  2E82  AD 60 32              LDA HORIZONTAL_COLOR_BUFFER + 12
10312  2E85  8D E0 D9              STA COLOR_MEM + 480
10313  2E88  AD 61 32              LDA HORIZONTAL_COLOR_BUFFER + 13
10314  2E8B  8D 08 DA              STA COLOR_MEM + 520
10315  2E8E  AD 62 32              LDA HORIZONTAL_COLOR_BUFFER + 14
10316  2E91  8D 30 DA              STA COLOR_MEM + 560
10317  2E94  AD 63 32              LDA HORIZONTAL_COLOR_BUFFER + 15
10318  2E97  8D 58 DA              STA COLOR_MEM + 600
10319  2E9A             
10320  2E9A  AD 64 32              LDA HORIZONTAL_COLOR_BUFFER + 16
10321  2E9D  8D 80 DA              STA COLOR_MEM + 640
10322  2EA0  AD 65 32              LDA HORIZONTAL_COLOR_BUFFER + 17
10323  2EA3  8D A8 DA              STA COLOR_MEM + 680
10324  2EA6  AD 66 32              LDA HORIZONTAL_COLOR_BUFFER + 18
10325  2EA9  8D D0 DA              STA COLOR_MEM + 720
10326  2EAC  AD 67 32              LDA HORIZONTAL_COLOR_BUFFER + 19
10327  2EAF  8D F8 DA              STA COLOR_MEM + 760
10328  2EB2             
10329  2EB2  60                    RTS
10330  2EB3             
10331  2EB3             ;-------------------------------------------------------------------------------
10332  2EB3             ; DRAW RIGHT BUFFER
10333  2EB3             ;-------------------------------------------------------------------------------
10334  2EB3             ; DRAW THE CONTENTS OF THE RIGHT BUFFER TO THE BACKBUFFER - UNROLLED FOR SPEED
10335  2EB3             ;-------------------------------------------------------------------------------
10336  2EB3             ; SCREEN1_MEM - SCREEN ONE DRAWS FROM 39,799 (19 LINES TO THE RIGHT)
10337  2EB3             ;===============================================================================
10338  2EB3             
10339  2EB3             DRAWRIGHTBUFFER 
10340  2EB3  A5 28                 LDA CURRENT_BUFFER + 1
10341  2EB5  C9 44                 CMP #>SCREEN2_MEM
10342  2EB7  F0 79                 BEQ @SCREEN2
10343  2EB9                        
10344  2EB9  AD 3E 32              LDA HORIZONTAL_BUFFER
10345  2EBC  8D 27 40              STA SCREEN1_MEM + 39
10346  2EBF  AD 3F 32              LDA HORIZONTAL_BUFFER + 1
10347  2EC2  8D 4F 40              STA SCREEN1_MEM + 79
10348  2EC5  AD 40 32              LDA HORIZONTAL_BUFFER + 2
10349  2EC8  8D 77 40              STA SCREEN1_MEM + 119
10350  2ECB  AD 41 32              LDA HORIZONTAL_BUFFER + 3
10351  2ECE  8D 9F 40              STA SCREEN1_MEM + 159
10352  2ED1             
10353  2ED1  AD 42 32              LDA HORIZONTAL_BUFFER + 4
10354  2ED4  8D C7 40              STA SCREEN1_MEM + 199
10355  2ED7  AD 43 32              LDA HORIZONTAL_BUFFER + 5
10356  2EDA  8D EF 40              STA SCREEN1_MEM + 239
10357  2EDD  AD 44 32              LDA HORIZONTAL_BUFFER + 6
10358  2EE0  8D 17 41              STA SCREEN1_MEM + 279
10359  2EE3  AD 45 32              LDA HORIZONTAL_BUFFER + 7
10360  2EE6  8D 3F 41              STA SCREEN1_MEM + 319
10361  2EE9             
10362  2EE9  AD 46 32              LDA HORIZONTAL_BUFFER + 8
10363  2EEC  8D 67 41              STA SCREEN1_MEM + 359
10364  2EEF  AD 47 32              LDA HORIZONTAL_BUFFER + 9
10365  2EF2  8D 8F 41              STA SCREEN1_MEM + 399
10366  2EF5  AD 48 32              LDA HORIZONTAL_BUFFER + 10
10367  2EF8  8D B7 41              STA SCREEN1_MEM + 439
10368  2EFB  AD 49 32              LDA HORIZONTAL_BUFFER + 11
10369  2EFE  8D DF 41              STA SCREEN1_MEM + 479
10370  2F01             
10371  2F01  AD 4A 32              LDA HORIZONTAL_BUFFER + 12
10372  2F04  8D 07 42              STA SCREEN1_MEM + 519
10373  2F07  AD 4B 32              LDA HORIZONTAL_BUFFER + 13
10374  2F0A  8D 2F 42              STA SCREEN1_MEM + 559
10375  2F0D  AD 4C 32              LDA HORIZONTAL_BUFFER + 14
10376  2F10  8D 57 42              STA SCREEN1_MEM + 599
10377  2F13  AD 4D 32              LDA HORIZONTAL_BUFFER + 15
10378  2F16  8D 7F 42              STA SCREEN1_MEM + 639
10379  2F19             
10380  2F19  AD 4E 32              LDA HORIZONTAL_BUFFER + 16
10381  2F1C  8D A7 42              STA SCREEN1_MEM + 679
10382  2F1F  AD 4F 32              LDA HORIZONTAL_BUFFER + 17
10383  2F22  8D CF 42              STA SCREEN1_MEM + 719
10384  2F25  AD 50 32              LDA HORIZONTAL_BUFFER + 18
10385  2F28  8D F7 42              STA SCREEN1_MEM + 759
10386  2F2B  AD 51 32              LDA HORIZONTAL_BUFFER + 19
10387  2F2E  8D 1F 43              STA SCREEN1_MEM + 799
10388  2F31             
10389  2F31  60                    RTS
10390  2F32             @SCREEN2
10391  2F32             
10392  2F32  AD 3E 32              LDA HORIZONTAL_BUFFER
10393  2F35  8D 27 44              STA SCREEN2_MEM + 39
10394  2F38  AD 3F 32              LDA HORIZONTAL_BUFFER + 1
10395  2F3B  8D 4F 44              STA SCREEN2_MEM + 79
10396  2F3E  AD 40 32              LDA HORIZONTAL_BUFFER + 2
10397  2F41  8D 77 44              STA SCREEN2_MEM + 119
10398  2F44  AD 41 32              LDA HORIZONTAL_BUFFER + 3
10399  2F47  8D 9F 44              STA SCREEN2_MEM + 159
10400  2F4A             
10401  2F4A  AD 42 32              LDA HORIZONTAL_BUFFER + 4
10402  2F4D  8D C7 44              STA SCREEN2_MEM + 199
10403  2F50  AD 43 32              LDA HORIZONTAL_BUFFER + 5
10404  2F53  8D EF 44              STA SCREEN2_MEM + 239
10405  2F56  AD 44 32              LDA HORIZONTAL_BUFFER + 6
10406  2F59  8D 17 45              STA SCREEN2_MEM + 279
10407  2F5C  AD 45 32              LDA HORIZONTAL_BUFFER + 7
10408  2F5F  8D 3F 45              STA SCREEN2_MEM + 319
10409  2F62             
10410  2F62  AD 46 32              LDA HORIZONTAL_BUFFER + 8
10411  2F65  8D 67 45              STA SCREEN2_MEM + 359
10412  2F68  AD 47 32              LDA HORIZONTAL_BUFFER + 9
10413  2F6B  8D 8F 45              STA SCREEN2_MEM + 399
10414  2F6E  AD 48 32              LDA HORIZONTAL_BUFFER + 10
10415  2F71  8D B7 45              STA SCREEN2_MEM + 439
10416  2F74  AD 49 32              LDA HORIZONTAL_BUFFER + 11
10417  2F77  8D DF 45              STA SCREEN2_MEM + 479
10418  2F7A             
10419  2F7A  AD 4A 32              LDA HORIZONTAL_BUFFER + 12
10420  2F7D  8D 07 46              STA SCREEN2_MEM + 519
10421  2F80  AD 4B 32              LDA HORIZONTAL_BUFFER + 13
10422  2F83  8D 2F 46              STA SCREEN2_MEM + 559
10423  2F86  AD 4C 32              LDA HORIZONTAL_BUFFER + 14
10424  2F89  8D 57 46              STA SCREEN2_MEM + 599
10425  2F8C  AD 4D 32              LDA HORIZONTAL_BUFFER + 15
10426  2F8F  8D 7F 46              STA SCREEN2_MEM + 639
10427  2F92             
10428  2F92  AD 4E 32              LDA HORIZONTAL_BUFFER + 16
10429  2F95  8D A7 46              STA SCREEN2_MEM + 679
10430  2F98  AD 4F 32              LDA HORIZONTAL_BUFFER + 17
10431  2F9B  8D CF 46              STA SCREEN2_MEM + 719
10432  2F9E  AD 50 32              LDA HORIZONTAL_BUFFER + 18
10433  2FA1  8D F7 46              STA SCREEN2_MEM + 759
10434  2FA4  AD 51 32              LDA HORIZONTAL_BUFFER + 19
10435  2FA7  8D 1F 47              STA SCREEN2_MEM + 799
10436  2FAA  60                    RTS
10437  2FAB             
10438  2FAB             ;-------------------------------------------------------------------------------
10439  2FAB             ; DRAW RIGHT COLOR
10440  2FAB             ;-------------------------------------------------------------------------------
10441  2FAB             
10442  2FAB             DRAWRIGHTCOLOR 
10443  2FAB  AD 54 32              LDA HORIZONTAL_COLOR_BUFFER
10444  2FAE  8D 27 D8              STA COLOR_MEM + 39
10445  2FB1  AD 55 32              LDA HORIZONTAL_COLOR_BUFFER + 1
10446  2FB4  8D 4F D8              STA COLOR_MEM + 79
10447  2FB7  AD 56 32              LDA HORIZONTAL_COLOR_BUFFER + 2
10448  2FBA  8D 77 D8              STA COLOR_MEM + 119
10449  2FBD  AD 57 32              LDA HORIZONTAL_COLOR_BUFFER + 3
10450  2FC0  8D 9F D8              STA COLOR_MEM + 159
10451  2FC3             
10452  2FC3  AD 58 32              LDA HORIZONTAL_COLOR_BUFFER + 4
10453  2FC6  8D C7 D8              STA COLOR_MEM + 199
10454  2FC9  AD 59 32              LDA HORIZONTAL_COLOR_BUFFER + 5
10455  2FCC  8D EF D8              STA COLOR_MEM + 239
10456  2FCF  AD 5A 32              LDA HORIZONTAL_COLOR_BUFFER + 6
10457  2FD2  8D 17 D9              STA COLOR_MEM + 279
10458  2FD5  AD 5B 32              LDA HORIZONTAL_COLOR_BUFFER + 7
10459  2FD8  8D 3F D9              STA COLOR_MEM + 319
10460  2FDB             
10461  2FDB  AD 5C 32              LDA HORIZONTAL_COLOR_BUFFER + 8
10462  2FDE  8D 67 D9              STA COLOR_MEM + 359
10463  2FE1  AD 5D 32              LDA HORIZONTAL_COLOR_BUFFER + 9
10464  2FE4  8D 8F D9              STA COLOR_MEM + 399
10465  2FE7  AD 5E 32              LDA HORIZONTAL_COLOR_BUFFER + 10
10466  2FEA  8D B7 D9              STA COLOR_MEM + 439
10467  2FED  AD 5F 32              LDA HORIZONTAL_COLOR_BUFFER + 11
10468  2FF0  8D DF D9              STA COLOR_MEM + 479
10469  2FF3             
10470  2FF3  AD 60 32              LDA HORIZONTAL_COLOR_BUFFER + 12
10471  2FF6  8D 07 DA              STA COLOR_MEM + 519
10472  2FF9  AD 61 32              LDA HORIZONTAL_COLOR_BUFFER + 13
10473  2FFC  8D 2F DA              STA COLOR_MEM + 559
10474  2FFF  AD 62 32              LDA HORIZONTAL_COLOR_BUFFER + 14
10475  3002  8D 57 DA              STA COLOR_MEM + 599
10476  3005  AD 63 32              LDA HORIZONTAL_COLOR_BUFFER + 15
10477  3008  8D 7F DA              STA COLOR_MEM + 639
10478  300B             
10479  300B  AD 64 32              LDA HORIZONTAL_COLOR_BUFFER + 16
10480  300E  8D A7 DA              STA COLOR_MEM + 679
10481  3011  AD 65 32              LDA HORIZONTAL_COLOR_BUFFER + 17
10482  3014  8D CF DA              STA COLOR_MEM + 719
10483  3017  AD 66 32              LDA HORIZONTAL_COLOR_BUFFER + 18
10484  301A  8D F7 DA              STA COLOR_MEM + 759
10485  301D  AD 67 32              LDA HORIZONTAL_COLOR_BUFFER + 19
10486  3020  8D 1F DB              STA COLOR_MEM + 799
10487  3023  60                    RTS
10488  3024             
10489  3024             
10490  3024             ;-------------------------------------------------------------------------------
10491  3024             ; COPY TO VERTICAL BUFFER
10492  3024             ;-------------------------------------------------------------------------------
10493  3024             ; COPY THE DATA NEEDED TO THE VERTICAL_BUFFER AND VERTICAL_COLOR_BUFFER FOR
10494  3024             ; EDGE DRAWING OF NEW CHARACTERS ON THE 'JUMP FRAME'
10495  3024             ;
10496  3024             ; NOTE : THIS WILL HAVE TO BE REWRITTEN TO COMBINE VERT AND HORIZ SCROLLING AND
10497  3024             ; DELTA VALUES
10498  3024             ;-------------------------------------------------------------------------------
10499  3024             ; MAP_X_POS = PARAM1, MAP_X_DELTA = PARAM3
10500  3024             ;===============================================================================
10501  3024             ; SCROLL_DIRECTION, #SCROLL_DOWN - CHECKS HOW FAR WE SCROLLED VERTICALLY
10502  3024             ;===============================================================================
10503  3024             ; MAP_Y_DELTA = AND MASKED WITH #0011. THEN MAP_Y_DELTA = PARAM4
10504  3024             ;===============================================================================
10505  3024             
10506  3024             COPYVERTICALBUFFER 
10507  3024             
10508  3024                        ; VARIABLES:
10509  3024                        ; PARAM1 = MAP X POSITION (FOR THE TILE TO BE READ FROM)
10510  3024                        ; PARAM2 = ADJUSTED MAP Y POSITION FOR THE TILE TO BE READ FROM
10511  3024                        ; PARAM3 = ADJUSTED MAP X DELTA
10512  3024                        ; PARAM4 = ADJUSTED MAP Y DELTA
10513  3024             
10514  3024  A5 30                 LDA MAP_X_POS           ; LOAD THE MAP X POSITION
10515  3026  85 03                 STA PARAM1
10516  3028  A5 32                 LDA MAP_X_DELTA         ; LOAD THE MAP X DELTA (POSITION WITHIN TILE)
10517  302A  85 05                 STA PARAM3
10518  302C             
10519  302C  A5 31                 LDA MAP_Y_POS
10520  302E             
10521  302E                        ; WHAT DIRECTION ARE WE SCROLLING? UP OR DOWN?
10522  302E                        ; THE DIRECTION WILL DICTATE HOW WE CALCULATE
10523  302E                        ; WHAT TILE
10524  302E                        ; WE NEED TO READ FROM
10525  302E  A6 2C                 LDX SCROLL_DIRECTION
10526  3030  E0 04                 CPX #SCROLL_DOWN
10527  3032  F0 13                 BEQ @SCROLLINGDOWN
10528  3034                        ;-----------------------------------------------------------------------
10529  3034                        ; DIRECTION UP
10530  3034                        ; SCROLLING UP.  THE TILE WE NEED IS THE SAME
10531  3034                        ; IF MAP_Y_DELTA
10532  3034                        ; IS > 0.   IF IT'S EQUAL TO 0, WE NEED MAP_Y - 1.
10533  3034                        ; THE DELTA IS OBVIOUSLY CURRENT DELTA - 1
10534  3034             @SCROLLINGUP 
10535  3034             
10536  3034                        ; A CURRENTLY HOLDS MAP_Y_POS
10537  3034  85 04                 STA PARAM2              ; STORE IT IN PARAM2
10538  3036                        
10539  3036  A6 33                 LDX MAP_Y_DELTA
10540  3038  CA                    DEX
10541  3039  8A                    TXA
10542  303A  29 03                 AND #%0011
10543  303C  85 06                 STA PARAM4              ; STORE ADJUSTED Y DELTA
10544  303E  C9 03                 CMP #3                  ; ORIGINAL DELTA WAS 0
10545  3040  D0 1A                 BNE @FETCHTILE          ; IF != 3 TILE DOESN'T DECREASE
10546  3042             
10547  3042  C6 04                 DEC PARAM2              ; DECREMENT MAP_Y (IN PARAM2)
10548  3044  4C 5C 30              JMP @FETCHTILE
10549  3047             
10550  3047                        ;-----------------------------------------------------------------------
10551  3047                        ; DIRECTION DOWN
10552  3047                        ; SCROLLING DOWN, THE TILE WE NEED IS MAP_Y + 4
10553  3047                        ; AND THE CHARACTER LINE WITHIN THE TILE IS
10554  3047                        ; MAP_Y_DELTA + 2
10555  3047                        ; THIS MEANS WE MAY BE READING FROM TILE
10556  3047                        ; MAP_Y + 5 IF THE
10557  3047                        ; MAP_Y_DELTA >= 2
10558  3047                        ; SO IF WE ADD 2 THEN AND %0011 (3) TO IT, TO
10559  3047                        ; MASK IT
10560  3047                        ; BACK TO A 0-3 VALUE.. IF OUR VALUE > MAP_Y_DELTA
10561  3047                        ; WE ARE IN THE
10562  3047                        ; SAME TILE. ELSE WE ADVANCE TO THE NEXT TILE DOWN
10563  3047             @SCROLLINGDOWN 
10564  3047             
10565  3047  18                    CLC                     ; A STILL CONTAINS MAP_POS_Y
10566  3048  69 04                 ADC #4                  ; ADD 4 TO GET THE CORRECT TILE
10567  304A  85 04                 STA PARAM2              ; PARAM 2 CONTAINS THE THE 'ADJUSTED MAP Y POSITION'
10568  304C             
10569  304C  A6 33                 LDX MAP_Y_DELTA         ; FETCH DELTA Y IN X
10570  304E  E8                    INX
10571  304F  E8                    INX                     ; INCREMENT BY 2
10572  3050  8A                    TXA                     ; TRANSFER TO A
10573  3051  29 03                 AND #%0011               ; MASK TO 0-3 VALUE
10574  3053  85 06                 STA PARAM4              ; SAVE THE ADJUSTED DELTA VALUE
10575  3055             
10576  3055  18                    CLC
10577  3056  C5 33                 CMP MAP_Y_DELTA         ; COMPARE - IF CARRY IS SET, VALUE IS >= THAN DELTA (SAME TILE)
10578  3058  B0 02                 BCS @FETCHTILE          ; SO WE TAKE PARAM2 AND CONTINUE TO FETCH THE TILE
10579  305A             
10580  305A  E6 04                 INC PARAM2              ; INCREMENT OUR ADJUSTED MAP_Y TO THE NEXT TILE DOWN
10581  305C             
10582  305C             ;                               NEXT WE HAVE TO FETCH THE CORRECT TILE FROM THE MAP
10583  305C             ;                               OPTIMIZATION NOTE : STORE THE MAP Y LINE ADDRESS SO
10584  305C             ;                               WE DON'T HAVE TO LOOK IT UP EVERY LOOP ITERATION
10585  305C             
10586  305C             @FETCHTILE 
10587  305C  A9 00                 LDA #0
10588  305E  8D 92 31              STA BUFFER_INDEX                ; RESET TO THE START OF THE BUFFER
10589  3061             ;        STA TILE_COUNTER                ; AND RESET THE TILE COUNTER FOR THE LOOP
10590  3061             
10591  3061                        ; LATER WE NEED TO USE THE ADJUSTED Y DELTA VALUE
10592  3061                        ; TO GET THE CORRECT LINE IN THE TILE. EACH LINE IS
10593  3061                        ; 4 TILES, SO WE NEED TO MULTIPLY THE VALUE BY 4
10594  3061                        ; ONCE ADDED TO THE TILE ADDRESS, WE CAN THEN PULL
10595  3061                        ; VALUES FROM THE CORRECT LINE
10596  3061  06 06                 ASL PARAM4
10597  3063  06 06                 ASL PARAM4
10598  3065             
10599  3065             
10600  3065  A6 04                 LDX PARAM2                      ; GET OUR ADJUSTED MAP_Y_POS TO GET THE MAP LINE
10601  3067             
10602  3067  AD 2E 10              LDA MAPTWOLOADED
10603  306A  D0 0D                 BNE @LEVELTWOVERTMAP
10604  306C             
10605  306C  BD 6E 23              LDA MAP2025_LINE_LOOKUP_LO,X        ; AND STORE THE ADDRESS FOR THAT LINE IN
10606  306F  85 19                 STA ZEROPAGE_POINTER_2          ; ZEROPAGE_POINTER_1
10607  3071  BD 84 23              LDA MAP2025_LINE_LOOKUP_HI,X
10608  3074  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10609  3076  4C 83 30              JMP @TILELOOP
10610  3079             
10611  3079             ; MAPTWOLOADED=1
10612  3079             @LEVELTWOVERTMAP 
10613  3079  BD 9A 23              LDA ALLEYMAP_LINE_LOOKUP_LO,X
10614  307C  85 19                 STA ZEROPAGE_POINTER_2
10615  307E  BD B0 23              LDA ALLEYMAP_LINE_LOOKUP_HI,X
10616  3081  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10617  3083             
10618  3083             @TILELOOP  ; WE THEN USE THE MAP_X POS (PARAM1) TO GET THE TILE
10619  3083  A4 03                 LDY PARAM1
10620  3085             
10621  3085  AD 2E 10              LDA MAPTWOLOADED
10622  3088  D0 10                 BNE @LEVEL2TILEMAP
10623  308A             
10624  308A             
10625  308A  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10626  308C  AA                    TAX                             ; USING THE TILE NUMBER WE CAN LOOKUP THE ADDRESS
10627  308D  BD C6 23              LDA TILE_NUMBER_LOOKUP_LO,X     ; OF THE TILE ITSELF AND STORE IT IN ZEROPAGE_POINTER_1
10628  3090  85 17                 STA ZEROPAGE_POINTER_1
10629  3092  BD 07 24              LDA TILE_NUMBER_LOOKUP_HI,X
10630  3095  85 18                 STA ZEROPAGE_POINTER_1 + 1
10631  3097  4C A7 30              JMP @NOTILE2LOAD
10632  309A             
10633  309A             ; MAPTWOLOADED=1
10634  309A             @LEVEL2TILEMAP 
10635  309A  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10636  309C  AA                    TAX
10637  309D  BD 47 24              LDA TILE2_NUMBER_LOOKUP_LO,X     ; OF THE TILE ITSELF AND STORE IT IN ZEROPAGE_POINTER_1
10638  30A0  85 17                 STA ZEROPAGE_POINTER_1
10639  30A2  BD 88 24              LDA TILE2_NUMBER_LOOKUP_HI,X
10640  30A5  85 18                 STA ZEROPAGE_POINTER_1 + 1
10641  30A7             
10642  30A7             @NOTILE2LOAD 
10643  30A7                        ; NEXT WE HAVE TO ADJUST THE ADDRESS BY DELTA VALUE
10644  30A7                        ; TO GET THE CORRECT LINE
10645  30A7  18                    CLC
10646  30A8  A5 17                 LDA ZEROPAGE_POINTER_1
10647  30AA  65 06                 ADC PARAM4
10648  30AC  85 17                 STA ZEROPAGE_POINTER_1
10649  30AE  A5 18                 LDA ZEROPAGE_POINTER_1 + 1
10650  30B0  69 00                 ADC #0
10651  30B2  85 18                 STA ZEROPAGE_POINTER_1 + 1
10652  30B4             
10653  30B4             ;-----------------------------------------------------------------------
10654  30B4             ;                               ; FROM HERE WE LOOP THROUGH THE TILE AND COPY
10655  30B4             ;                               ; THE CHARACTER DATA AND THE COLOR DATA TO THE
10656  30B4             ;                               ; VERTICAL_BUFFER AND VERTICAL_COLOR_BUFFER
10657  30B4             
10658  30B4             ;                               USE THE ADJUSTED X DELTA AS OUR START POINT
10659  30B4             ;                               BECAUSE WE WON'T ALWAYS BE ON A TILE BOUNDRY
10660  30B4             ;                               NOTE: THIS IS ONLY FOR THE FIRST TILE - AFTERWARDS
10661  30B4             ;                                     WE WILL RESET IT TO 0 FOR A FULL TILE
10662  30B4             
10663  30B4             ;        LDY #0
10664  30B4             
10665  30B4             @COPYLOOP
10666  30B4  A4 05                 LDY PARAM3
10667  30B6             
10668  30B6  AE 92 31              LDX BUFFER_INDEX                ; LOAD THE BUFFER INDEX IN X
10669  30B9  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; COPY CHARACTER FROM TILE DATA
10670  30BB  9D 6A 32              STA VERTICAL_BUFFER,X           ; TO BUFFER + X
10671  30BE             
10672  30BE  AA                    TAX                             ; COPY TILE NUMBER TO X
10673  30BF             
10674  30BF  AD 2E 10              LDA MAPTWOLOADED
10675  30C2  D0 06                 BNE @LEVEL2COLORS
10676  30C4             
10677  30C4             
10678  30C4  BD 20 78              LDA ATTRIBUTE_MEM,X             ; COPY ATTRIBUTE FOR TILE X
10679  30C7  4C CD 30              JMP @NOLEVEL2COLORS
10680  30CA             
10681  30CA             
10682  30CA             @LEVEL2COLORS 
10683  30CA  BD AA 80              LDA ATTRIBUTE2_MEM,X             ; COPY ATTRIBUTE FOR TILE X
10684  30CD             
10685  30CD             @NOLEVEL2COLORS 
10686  30CD             
10687  30CD  AE 92 31              LDX BUFFER_INDEX                ; RELOAD THE BUFFER_INDEX IN X
10688  30D0  9D 92 32              STA VERTICAL_COLOR_BUFFER,X     ; STORE ATTRIBUTE DATA IN COLOR BUFFER + X
10689  30D3                        
10690  30D3  EE 92 31              INC BUFFER_INDEX                ; INCREMENT THE BUFFER_INDEX
10691  30D6  A9 28                 LDA #40                         ; CHECK FOR THE END OF THE BUFFER
10692  30D8  CD 92 31              CMP BUFFER_INDEX
10693  30DB  F0 11                 BEQ @DONE
10694  30DD             
10695  30DD             ;        INY                             ; INCREMENT POSITION IN TILE DATA
10696  30DD             ;        CPY #4                          ; TEST FOR EDGE OF TILE
10697  30DD             
10698  30DD  E6 05                 INC PARAM3                      ; INCREMENT X DELTA (ADJUSTED)
10699  30DF  A9 04                 LDA #4
10700  30E1  C5 05                 CMP PARAM3
10701  30E3             ;        LDA PARAM3                      ; MASK IT TO 0-3 VALUE
10702  30E3             ;        AND #%0011
10703  30E3  D0 CF                 BNE @COPYLOOP                   ; BRANCH IF NOT 0
10704  30E5             
10705  30E5  A9 00                 LDA #0
10706  30E7  85 05                 STA PARAM3
10707  30E9  E6 03                 INC PARAM1                      ; INCREMENT PARAM1 TO THE NEXT TILE
10708  30EB  4C 83 30              JMP @TILELOOP
10709  30EE             @DONE
10710  30EE  60                    RTS
10711  30EF             
10712  30EF             
10713  30EF             
10714  30EF             ;-------------------------------------------------------------------------------
10715  30EF             ; COPY TO HORIZONTAL BUFFER
10716  30EF             ;-------------------------------------------------------------------------------
10717  30EF             ; COPY THE DATA NEEDED TO THE HORIZONTAL_BUFFER AND HORIZONTAL_COLOR_BUFFER FOR
10718  30EF             ; EDGE DRAWING OF NEW CHARS ON THE 'JUMP FRAME'
10719  30EF             ;
10720  30EF             ; V2 OF THIS ROUTINE - REWRITTEN AND SPLIT FROM COPYHORIZONTALBUFFER TO STAY
10721  30EF             ; CONSISTANT WITH THE NEW COPYLEFTBUFFER ROUTINE
10722  30EF             ;-------------------------------------------------------------------------------
10723  30EF             
10724  30EF             COPYHORIZONTALBUFFER 
10725  30EF             COPYRIGHTBUFFER 
10726  30EF                        
10727  30EF                        ; VARIABLES
10728  30EF                        ; PARAM1 = ADJUSTED MAP X POSITION
10729  30EF                        ; PARAM2 = ADJUSTED MAP Y POSITION
10730  30EF                        ; PARAM3 = ADJUSTED MAP X DELTA
10731  30EF                        ; PARAM4 = ADJUSTED MAP Y DELTA
10732  30EF             
10733  30EF                        ;-----------------------------------------------------------------------
10734  30EF                        ; FIRST WE NEED TO KNOW WHAT TILE TO FETCH. SCROLLING RIGHT THIS WILL BE
10735  30EF                        ; MAP_POS_X + 10 (THE MAP IS 10 TILES WIDE)
10736  30EF             
10737  30EF  A5 31                 LDA MAP_Y_POS                   ; SETUP THE VARIABLES WE DON'T NEED TO ADJUST
10738  30F1  85 04                 STA PARAM2
10739  30F3  A5 32                 LDA MAP_X_DELTA
10740  30F5  85 05                 STA PARAM3
10741  30F7  A5 33                 LDA MAP_Y_DELTA
10742  30F9  85 06                 STA PARAM4
10743  30FB             
10744  30FB  A5 30                 LDA MAP_X_POS                   ; ADD 10 TO MAP_X_POS AND STORE IN PARAM1
10745  30FD  18                    CLC
10746  30FE  69 0A                 ADC #10
10747  3100  85 03                 STA PARAM1
10748  3102             
10749  3102             
10750  3102                        ;-----------------------------------------------------------------------
10751  3102                        ; VARIABLES ARE SETUP - NOW WE NEED TO FETCH THE TILE TO READ
10752  3102             
10753  3102             @FETCHTILE 
10754  3102  A9 00                 LDA #0
10755  3104  8D 92 31              STA BUFFER_INDEX                ; RESET THE BUFFER INDEX
10756  3107             
10757  3107             @TILELOOP
10758  3107  A6 04                 LDX PARAM2                      ; FETCH ADJUSTED MAP_Y_POSITION
10759  3109             
10760  3109             
10761  3109  AD 2E 10              LDA MAPTWOLOADED
10762  310C  D0 0D                 BNE @LEVELTWORIGHTMAP
10763  310E             
10764  310E  BD 6E 23              LDA MAP2025_LINE_LOOKUP_LO,X
10765  3111  85 19                 STA ZEROPAGE_POINTER_2          ; STORE THE MAP LINE ADDRESS IN
10766  3113  BD 84 23              LDA MAP2025_LINE_LOOKUP_HI,X        ; ZEROPAGE_POINTER_2
10767  3116  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10768  3118  4C 25 31              JMP @SKIPALLEYMAP
10769  311B             
10770  311B             ; ALLEY MAP IS LOADED: MAPTWOLOADED=1
10771  311B             @LEVELTWORIGHTMAP 
10772  311B  BD 9A 23              LDA ALLEYMAP_LINE_LOOKUP_LO,X
10773  311E  85 19                 STA ZEROPAGE_POINTER_2
10774  3120  BD B0 23              LDA ALLEYMAP_LINE_LOOKUP_HI,X
10775  3123  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10776  3125             
10777  3125             @SKIPALLEYMAP 
10778  3125                        ; NEXT USE THE ADJUSTED MAP_X_POS TO
10779  3125  A4 03                 LDY PARAM1                      ; GET THE TILE
10780  3127             
10781  3127             
10782  3127  AD 2E 10              LDA MAPTWOLOADED
10783  312A  D0 10                 BNE @LEVEL2TILEMAP
10784  312C             
10785  312C  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10786  312E  AA                    TAX
10787  312F  BD C6 23              LDA TILE_NUMBER_LOOKUP_LO,X     ; USE THE TILE NUMBER TO LOOKUP THE
10788  3132  85 17                 STA ZEROPAGE_POINTER_1          ; ADDRESS OF THE TILE DATA
10789  3134  BD 07 24              LDA TILE_NUMBER_LOOKUP_HI,X
10790  3137  85 18                 STA ZEROPAGE_POINTER_1 + 1
10791  3139  4C 49 31              JMP @SKIPTILE2LOAD
10792  313C             
10793  313C             ; ALLEY MAP IS LOADED: MAPTWOLOADED=1
10794  313C             @LEVEL2TILEMAP 
10795  313C  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10796  313E  AA                    TAX
10797  313F  BD 47 24              LDA TILE2_NUMBER_LOOKUP_LO,X     ; OF THE TILE ITSELF AND STORE IT IN ZEROPAGE_POINTER_1
10798  3142  85 17                 STA ZEROPAGE_POINTER_1
10799  3144  BD 88 24              LDA TILE2_NUMBER_LOOKUP_HI,X
10800  3147  85 18                 STA ZEROPAGE_POINTER_1 + 1
10801  3149             
10802  3149             ;-----------------------------------------------------------------------
10803  3149             @SKIPTILE2LOAD 
10804  3149             ; WE NOW HAVE THE ADDRESS TO THE TILE IN ZEROPAGE_POINTER_1, SO NOW WE
10805  3149             ; HAVE TO
10806  3149             ; LOOP THROUGH THE TILE AT OUR DELTA X VALUE (PARAM3) FOR ALL 4 LINES AND COPY
10807  3149             ; THE CHARACTER AND COLOR ATTRIBUTE DATA TO THEIR BUFFERS.
10808  3149             
10809  3149             ; OUR FIRST BLOCK LOOKUP DEPENDS ON THE MAP Y DELTA
10810  3149             ; SO TEST TO SEE IF IT'S 0 - WHICH IS SHOULD UNLESS IT'S
10811  3149             ; THE FIRST LOOKUP
10812  3149             
10813  3149  A4 05                 LDY PARAM3                      ; LOAD THE ADJUSTED X DELTA IN Y
10814  314B  A5 06                 LDA PARAM4                      ; LOAD THE ADJUSTED Y DELTA
10815  314D  F0 06                 BEQ @COPYLOOP                   ; IF IT'S 0, CONTINUE
10816  314F             
10817  314F  0A                    ASL                             ; ELSE MULTIPLY IT BY 4 (TILE LINE)
10818  3150  0A                    ASL
10819  3151  18                    CLC
10820  3152  65 05                 ADC PARAM3                      ; ADD PARAM3 (ADJUSTED X DELTA)
10821  3154  A8                    TAY                             ; TRANSFER IT TO Y AS OUR NEW START INDEX
10822  3155             
10823  3155             @COPYLOOP
10824  3155  AE 92 31              LDX BUFFER_INDEX                ; LOAD THE BUFFER INDEX
10825  3158  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE CHARACTER #
10826  315A  9D 3E 32              STA HORIZONTAL_BUFFER,X         ; STORE IT IN THE HORIZONTAL BUFFER
10827  315D  AA                    TAX                             ; SAVE THE CHARACTER NUMBER IN X
10828  315E             
10829  315E  AD 2E 10              LDA MAPTWOLOADED
10830  3161  D0 06                 BNE @LEVEL2RIGHTCOLORS
10831  3163             
10832  3163             ; DISPLAY ISSUE: TAX MAY NEED TO ALSO APPEAR UNDER
10833  3163             ; @LEVEL2COLORS
10834  3163  BD 20 78              LDA ATTRIBUTE_MEM,X             ; USE IT TO FETCH THAT CHARACTERS ATTRIBUTE DATA
10835  3166  4C 6C 31              JMP @SKIPLEVEL2RIGHTCOLORS
10836  3169             
10837  3169             
10838  3169             @LEVEL2RIGHTCOLORS 
10839  3169  BD AA 80              LDA ATTRIBUTE2_MEM,X             ; COPY ATTRIBUTE FOR TILE X
10840  316C             
10841  316C             @SKIPLEVEL2RIGHTCOLORS 
10842  316C  AE 92 31              LDX BUFFER_INDEX                ; RESTORE BUFFER_INDEX TO X
10843  316F  9D 54 32              STA HORIZONTAL_COLOR_BUFFER,X   ; SAVE THE ATTRIBUTE DATA IN THE COLOR BUFFER
10844  3172                        
10845  3172  C8                    INY                             ; ADD 4 TO Y TO GET TO THE NEXT TILE LINE
10846  3173  C8                    INY
10847  3174  C8                    INY
10848  3175  C8                    INY
10849  3176             
10850  3176  EE 92 31              INC BUFFER_INDEX                ; INCREMENT THE BUFFER INDEX
10851  3179  AD 92 31              LDA BUFFER_INDEX                ; IF THE BUFFER IS FULL, WE'RE DONE
10852  317C  C9 13                 CMP #19
10853  317E  F0 11                 BEQ @DONE
10854  3180             
10855  3180  E6 06                 INC PARAM4                      ; USE DELTA Y AS A COUNTER TO THE TILES END
10856  3182  A5 06                 LDA PARAM4
10857  3184  C9 04                 CMP #4
10858  3186  D0 CD                 BNE @COPYLOOP
10859  3188                        ; SETUP FOR THE NEXT TILE
10860  3188  A9 00                 LDA #0
10861  318A  85 06                 STA PARAM4                      ; RESET DELTA Y TO 0 (PARAM4)
10862  318C  E6 04                 INC PARAM2                      ; INCREMENT MAP Y POSITION TO THE NEXT TILE LINE
10863  318E  4C 07 31              JMP @TILELOOP
10864  3191                        
10865  3191                        
10866  3191             @DONE      
10867  3191             
10868  3191  60                    RTS
10869  3192             
10870  3192             
10871  3192             BUFFER_INDEX 
10872  3192  00                    BYTE 0
10873  3193             
10874  3193             
10875  3193             ;===============================================================================
10876  3193             ; COPY LEFT BUFFER
10877  3193             ;===============================================================================
10878  3193             ; SPLIT FROM COPYHORIZONTAL BUFFER DUE TO A BUG THAT I JUST CAN'T SEEM TO TRACK DOWN.
10879  3193             ; HOPEFULLY A REWRITE OF THE ROUTINE WILL YEILD A CLEANER WAY OF DOING THINGS
10880  3193             ; COPY HORIZONTAL BUFFER WAS A MUCH CLEANER ROUTINE, SO WE'LL LOOK AT THAT AS WELL
10881  3193             ;
10882  3193             ; ACTUALLY IT TURNED OUT SO WELL THAT I DECIDED TO REWRITE THE ORIGINAL
10883  3193             ; COPYHORIZONTALBUFFER
10884  3193             ; ROUTINE, AS THIS VERSION WILL BE MUCH EASIER TO INTEGRATE HANDLING MAP_Y_DELTA
10885  3193             ; WHEN I INCLUDE VERTICAL SCROLLING
10886  3193             ;-------------------------------------------------------------------------------
10887  3193             
10888  3193             COPYLEFTBUFFER 
10889  3193             
10890  3193                        ; VARIABLES
10891  3193                        ; PARAM1 = ADJUSTED MAP X POSITION
10892  3193                        ; PARAM2 = ADJUSTED MAP Y POSITION
10893  3193                        ; PARAM3 = ADJUSTED MAP X DELTA
10894  3193                        ; PARAM4 = ADJUSTED MAP Y DELTA
10895  3193             
10896  3193                        ;-----------------------------------------------------------------------
10897  3193                        ; FIRST WE NEED TO KNOW WHAT MAP TILE WE ARE USING - MOVING LEFT THAT IS
10898  3193                        ; MAP_X_POS OR MAP_X_POS - 1 DEPENDING ON THE MAP_X_DELTA.
10899  3193                        ; ON A DELTA VALUE OF 1 - 3 WE WILL BE ON THE SAME TILE.
10900  3193                        ; ON A DELTA VALUE OF 0 WE WILL NEED ONE TILE OVER.
10901  3193             
10902  3193  A5 31                 LDA MAP_Y_POS                   ; STORE MAP Y POS, THIS WON'T CHANGE
10903  3195  85 04                 STA PARAM2
10904  3197  A5 33                 LDA MAP_Y_DELTA                 ; STORE MAP Y DELTA
10905  3199  85 06                 STA PARAM4
10906  319B             
10907  319B  A5 30                 LDA MAP_X_POS                   ; STORE MAP X POS, NOW WORK ON THE ADJUSTED VALUE
10908  319D  85 03                 STA PARAM1                      ; BASED ON THE MAP_X_DELTA
10909  319F             
10910  319F  A6 32                 LDX MAP_X_DELTA                 ; FETCH THE DELTA VALUE
10911  31A1  CA                    DEX                             ; DECREMENT IT BY 1
10912  31A2  8A                    TXA                             ; TRANSFER IT TO A
10913  31A3  29 03                 AND #%0011                      ; MASK IT TO A VALUE OF 0 - 3
10914  31A5  85 05                 STA PARAM3                      ; STORE THIS AS THE ADJUSTED X DELTA (CURRENT - 1)
10915  31A7                        
10916  31A7  C9 03                 CMP #3                          ; IF OUR NEW DELTA IS 3, WE ARE ON A NEW TILE
10917  31A9  D0 02                 BNE @FETCHTILE                  ; IF NOT, WE FETCH THE CURRENT TILE
10918  31AB             
10919  31AB  C6 03                 DEC PARAM1                      ; ADJUST OUR MAP X POSITION BY -1
10920  31AD                        
10921  31AD                        ;-----------------------------------------------------------------------
10922  31AD                        ; PARAM1 SHOULD HOLD THE CORRECT MAP_X_POS WE NEED TO LOOK UP
10923  31AD                        ; PARAM2 SHOULD HOLD THE (UNCHANGED) MAP_Y_POS WE NEED TO LOOK UP
10924  31AD                        ; PARAM3 SHOULD HOLD THE CORRECT MAP_X_DELTA OF THE TILE TO LOOK UP
10925  31AD                        ; PARAM4 SHOULD HOLD THE (UNCHANGED) MAP_Y_DELTA FOR THE TILE
10926  31AD             
10927  31AD                        ; NOW WE NEED TO GET THE FETCH THE TILE
10928  31AD             
10929  31AD             @FETCHTILE 
10930  31AD                        
10931  31AD  A9 00                 LDA #0                          ; RESET TO THE START OF THE BUFFER
10932  31AF  8D 92 31              STA BUFFER_INDEX
10933  31B2             
10934  31B2             @TILELOOP
10935  31B2  A6 04                 LDX PARAM2                      ; FETCH MAP_Y_POS TO LOOKUP THE MAP LINE ADDRESS
10936  31B4             
10937  31B4             
10938  31B4  AD 2E 10              LDA MAPTWOLOADED
10939  31B7  D0 0D                 BNE @LEVEL2LEFTMAP
10940  31B9             
10941  31B9  BD 6E 23              LDA MAP2025_LINE_LOOKUP_LO,X
10942  31BC  85 19                 STA ZEROPAGE_POINTER_2          ; STORE THE MAP LINE IN ZEROPAGE_POINTER_2
10943  31BE  BD 84 23              LDA MAP2025_LINE_LOOKUP_HI,X
10944  31C1  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10945  31C3  4C D0 31              JMP @SKIPLEVEL2LEFTMAP
10946  31C6             
10947  31C6             @LEVEL2LEFTMAP 
10948  31C6  BD 9A 23              LDA ALLEYMAP_LINE_LOOKUP_LO,X
10949  31C9  85 19                 STA ZEROPAGE_POINTER_2
10950  31CB  BD B0 23              LDA ALLEYMAP_LINE_LOOKUP_HI,X
10951  31CE  85 1A                 STA ZEROPAGE_POINTER_2 + 1
10952  31D0             
10953  31D0             
10954  31D0             @SKIPLEVEL2LEFTMAP 
10955  31D0                        ; NEXT USE THE ADJUSTED MAP_X_POS TO GET THE TILE
10956  31D0  A4 03                 LDY PARAM1
10957  31D2             
10958  31D2  AD 2E 10              LDA MAPTWOLOADED
10959  31D5  D0 10                 BNE @LEVEL2LEFTILES
10960  31D7             
10961  31D7             
10962  31D7  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10963  31D9  AA                    TAX                             ; USE THE TILE NUMBER TO LOOKUP THE ADDRESS OF THE TILE DATA
10964  31DA  BD C6 23              LDA TILE_NUMBER_LOOKUP_LO,X
10965  31DD  85 17                 STA ZEROPAGE_POINTER_1          ; AND STORE IT IN ZEROPAGE_POINTER_1
10966  31DF  BD 07 24              LDA TILE_NUMBER_LOOKUP_HI,X
10967  31E2  85 18                 STA ZEROPAGE_POINTER_1 + 1
10968  31E4  4C F4 31              JMP @SKIPLEVEL2TILES
10969  31E7             
10970  31E7             @LEVEL2LEFTILES 
10971  31E7  B1 19                 LDA (ZEROPAGE_POINTER_2),Y      ; FETCH THE TILE NUMBER IN A
10972  31E9  AA                    TAX                             ; USE THE TILE NUMBER TO LOOKUP THE ADDRESS OF THE TILE DATA
10973  31EA  BD 47 24              LDA TILE2_NUMBER_LOOKUP_LO,X
10974  31ED  85 17                 STA ZEROPAGE_POINTER_1          ; AND STORE IT IN ZEROPAGE_POINTER_1
10975  31EF  BD 88 24              LDA TILE2_NUMBER_LOOKUP_HI,X
10976  31F2  85 18                 STA ZEROPAGE_POINTER_1 + 1
10977  31F4             
10978  31F4             ;------------------------------------------------------------------------------
10979  31F4             ; WE NOW HAVE THE ADDRESS TO THE TILE IN ZEROPAGE_POINTER_1 - SO NOW WE HAVE
10980  31F4             ; TO LOOP THROUGH IT AND COPY THE DATA AT OUR DELTA X VALUE (PARAM3) FOR ALL
10981  31F4             ; 4 LINES OF THE TILE INTO THE BUFFER. WE ALSO NEED THE COLOR ATTRIBUTE DATA
10982  31F4             ; FOR THAT CHARACTER (AS WE'VE PACKED INFO INTO THE UPPER HALF OF THE COLOR BYTE)
10983  31F4             
10984  31F4             ; OUR FIRST BLOCK LOOKUP DEPENDS ON THE MAP Y DELTA
10985  31F4             ; SO TEST TO SEE IF IT'S 0 - WHICH IS SHOULD UNLESS IT'S
10986  31F4             ; THE FIRST LOOKUP
10987  31F4             @SKIPLEVEL2TILES 
10988  31F4             
10989  31F4  A4 05                 LDY PARAM3                      ; LOAD THE ADJUSTED X DELTA IN Y
10990  31F6  A5 06                 LDA PARAM4                      ; LOAD THE ADJUSTED Y DELTA
10991  31F8  F0 06                 BEQ @COPYLOOP                   ; IF IT'S 0, CONTINUE
10992  31FA             
10993  31FA  0A                    ASL                             ; ELSE MULTIPLY IT BY 4 (TILE LINE)
10994  31FB  0A                    ASL
10995  31FC  18                    CLC
10996  31FD  65 05                 ADC PARAM3                      ; ADD PARAM3 (ADJUSTED X DELTA)
10997  31FF  A8                    TAY                             ; TRANSFER IT TO Y AS OUR NEW START INDEX
10998  3200             
10999  3200             
11000  3200             @COPYLOOP
11001  3200  AE 92 31              LDX BUFFER_INDEX                ; LOAD THE BUFFER INDEX IN X
11002  3203             
11003  3203  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE CHARACTER #
11004  3205  9D 3E 32              STA HORIZONTAL_BUFFER,X         ; STORE IT IN THE BUFFER
11005  3208             
11006  3208  AA                    TAX                             ; SAVE CHARACTER NUMBER IN X
11007  3209             
11008  3209  AD 2E 10              LDA MAPTWOLOADED
11009  320C  D0 06                 BNE @LEVEL2LEFTCOLORS
11010  320E             
11011  320E             
11012  320E  BD 20 78              LDA ATTRIBUTE_MEM,X             ; LOOKUP THE ATTRIBUTE FOR THAT CHARACTER
11013  3211  4C 17 32              JMP @SKIPLEVEL2LEFTCOLORS
11014  3214             
11015  3214             @LEVEL2LEFTCOLORS 
11016  3214  BD AA 80              LDA ATTRIBUTE2_MEM,X             ; LOOKUP THE ATTRIBUTE FOR THAT CHARACTER
11017  3217             
11018  3217             @SKIPLEVEL2LEFTCOLORS 
11019  3217  AE 92 31              LDX BUFFER_INDEX                ; RELOAD THE BUFFER INDEX IN X
11020  321A  9D 54 32              STA HORIZONTAL_COLOR_BUFFER,X   ; SO WE CAN SAVE THE ATTRIBUTE IN THE
11021  321D                        ; COLOR BUFFER
11022  321D             
11023  321D  C8                    INY                             ; ADD 4 TO Y TO GET TO THE NEXT TILE LINE
11024  321E  C8                    INY
11025  321F  C8                    INY
11026  3220  C8                    INY
11027  3221             
11028  3221  EE 92 31              INC BUFFER_INDEX                ; INCREMENT THE BUFFER INDEX
11029  3224  AD 92 31              LDA BUFFER_INDEX                ; IF THE BUFFER IS FULL, WE'RE DONE
11030  3227  C9 13                 CMP #19                         ; LENGTH OF BUFFER_INDEX
11031  3229  F0 11                 BEQ @DONE
11032  322B             
11033  322B  E6 06                 INC PARAM4                      ; USE THE DELTA Y AS A COUNTER TO THE TILES END
11034  322D  A5 06                 LDA PARAM4
11035  322F  C9 04                 CMP #4
11036  3231  D0 CD                 BNE @COPYLOOP
11037  3233                        ; SETUP FOR THE NEXT TILE
11038  3233  A9 00                 LDA #0
11039  3235  85 06                 STA PARAM4                      ; SET OUR DELTA Y TO 0 - BECAUSE IT'S A NEW TILE
11040  3237  E6 04                 INC PARAM2                      ; INCREMENT OUR MAP Y POSITION TO THE NEXT TILE LINE
11041  3239  4C B2 31              JMP @TILELOOP
11042  323C                        
11043  323C                        
11044  323C                        
11045  323C             @DONE
11046  323C  60                    RTS
11047  323D             
11048  323D             
11049  323D             ;===============================================================================
11050  323D             ; SCROLL DATA + TABLES
11051  323D             ;===============================================================================
11052  323D             
11053  323D             
11054  323D             SCROLL_FIX_SKIP ; CHECK TO SEE IF WE CAN 'SKIP'
11055  323D  00                    BYTE $0                        ; SCROLL FIXING ON STOP
11056  323E             ; EDGE BUFFERS FOR MAP DRAW
11057  323E             HORIZONTAL_BUFFER 
11058  323E  00 00 00              BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11059  3254             HORIZONTAL_COLOR_BUFFER 
11060  3254  00 00 00              BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11061  326A             
11062  326A             VERTICAL_BUFFER 
11063  326A  00 00 00              BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11064  3292             VERTICAL_COLOR_BUFFER 
11065  3292  03 03 03              BYTE 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
11066  32BA             ;===============================================================================
11067  32BA             ; SPRITE TO CHARACTER POSITION X/Y
11068  32BA             ; ------------------------------------------------------------------------------
11069  32BA             ; THESE ALIGN THE SPRITES (EX: 0,1 - TO THE BACKGROUND POSITIONING)
11070  32BA             ;===============================================================================
11071  32BA             SPRITETOCHARPOS 
11072  32BA  BD 67 3C              LDA BIT_TABLE,X                 ; LOOKUP THE BIT FOR THIS SPRITE NUMBER (0-7)
11073  32BD  49 FF                 EOR #$FF                        ; FLIP ALL BITS (INVERT THE BYTE %0001 WOULD BECOME %1110)
11074  32BF  2D 82 35              AND SPRITE_POS_X_EXTEND         ; MASK OUT THE X EXTEND BIT FOR THIS SPRITE
11075  32C2  8D 82 35              STA SPRITE_POS_X_EXTEND         ; STORE THE RESULT BACK - WE'VE ERASED JUST THIS SPRITES BIT
11076  32C5  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; STORE THIS IN THE VIC REGISTER FOR EXTENDED X BITS
11077  32C8             
11078  32C8  A5 03                 LDA PARAM1                      ; LOAD THE X POS IN CHARACTER COORDS (THE COLUMN)
11079  32CA  9D 72 35              STA SPRITE_CHAR_POS_X,X         ; STORE IT IN THE CHARACTER X POSITION VARIABLE
11080  32CD  C9 1E                 CMP #30                         ; IF X IS LESS THAN 30, NO NEED SET THE EXTENDED BIT
11081  32CF  90 0C                 BCC @NOEXTENDEDX
11082  32D1                        
11083  32D1  BD 67 3C              LDA BIT_TABLE,X                 ; LOOK UP THE THE BIT FOR THIS SPRITE NUMBER
11084  32D4  0D 82 35              ORA SPRITE_POS_X_EXTEND         ; OR IN THE X EXTEND VALUES - WE HAVE SET THE CORRECT BIT
11085  32D7  8D 82 35              STA SPRITE_POS_X_EXTEND         ; STORE THE RESULTS BACK IN THE X EXTEND VARIABLE
11086  32DA  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; AND THE VIC X EXTEND REGISTER
11087  32DD             
11088  32DD             @NOEXTENDEDX 
11089  32DD                        ; SETUP OUR Y REGISTER SO WE TRANSFER X/Y VALUES TO THE
11090  32DD                        ; CORRECT VIC REGISTER FOR THIS SPRITE
11091  32DD  8A                    TXA                             ; FIRST, TRANSFER THE SPRITE NUMBER TO A
11092  32DE  0A                    ASL                             ; MULTIPLY IT BY 2 (SHIFT LEFT)
11093  32DF  A8                    TAY                             ; THEN STORE IT IN Y
11094  32E0                        ; (NOTE : SEE HOW VIC SPRITE POS REGISTERS ARE ORDERED
11095  32E0                        ;  TO UNDERSTAND WHY I'M DOING THIS)
11096  32E0             
11097  32E0  A5 03                 LDA PARAM1                      ; LOAD IN THE X CHAR POSITION
11098  32E2  0A                    ASL                             ; 3 X SHIFT LEFT = MULTIPLICATION BY 8
11099  32E3  0A                    ASL
11100  32E4  0A                    ASL
11101  32E5  18                    CLC
11102  32E6  69 10                 ADC #24 - SPRITE_DELTA_OFFSET_X ; ADD THE EDGE OF SCREEN (24) MINUS THE DELTA OFFSET
11103  32E8                        ; TO THE ROUGH CENTER 8 PIXELS (1 CHAR) OF THE SPRITE
11104  32E8             
11105  32E8  9D 62 35              STA SPRITE_POS_X,X              ; SAVE IN THE CORRECT SPRITE POS X VARIABLE
11106  32EB  99 00 D0              STA VIC_SPRITE_X_POS,Y          ; SAVE IN THE CORRECT VIC SPRITE POS REGISTER
11107  32EE             
11108  32EE             
11109  32EE  A5 04                 LDA PARAM2                      ; LOAD IN THE Y CHAR POSITION (ROWS)  "9"
11110  32F0  9D 93 35              STA SPRITE_CHAR_POS_Y,X         ; STORE IT IN THE CHARACTER Y POS FOR THIS SPRITE
11111  32F3  0A                    ASL                             ; 3 X SHIFT LEFT = MULTIPLICATION BY 8
11112  32F4  0A                    ASL
11113  32F5  0A                    ASL
11114  32F6  18                    CLC
11115  32F7  69 24                 ADC #50 - SPRITE_DELTA_OFFSET_Y ; ADD TOP EDGE OF SCREEN (50) MINUS THE DELTA OFFSET - 42
11116  32F9  9D 83 35              STA SPRITE_POS_Y,X              ; STORE IN THE CORRECT SPRITE POS Y VARIABLE
11117  32FC  99 01 D0              STA VIC_SPRITE_Y_POS,Y          ; AND THE CORRECT VIC SPRITE POS REGISTER
11118  32FF             
11119  32FF  A9 00                 LDA #0
11120  3301  9D 6A 35              STA SPRITE_POS_X_DELTA,X        ;SET BOTH X AND Y DELTA VALUES TO 0 - WE ARE ALIGNED
11121  3304  9D 8B 35              STA SPRITE_POS_Y_DELTA,X        ;ON A CHARACTER BORDER (FOR THE PURPOSES OF COLLISIONS)
11122  3307  60                    RTS
11123  3308             
11124  3308             
11125  3308             
11126  3308             ;===============================================================================
11127  3308             ; PUTS A SPRITE AT THE POSITION OF CHARACTER X Y. CALCULATES THE PROPER SPRITE
11128  3308             ; COORDS FROM THE
11129  3308             ; SCREEN MEMORY POSITION THEN SETS IT THERE DIRECTLY.
11130  3308             ; THE PRIMARY USE OF THIS IS THE INITAL POSITIONING OF ANY SPRITE AS IT WILL
11131  3308             ; ALIGN IT WITH THE PROPER DELTA SET UP.
11132  3308             ;
11133  3308             ; PARAM 1 = CHARACTER X POS (COLUMN)
11134  3308             ; PARAM 2 = CHARACTER Y POS (ROW)
11135  3308             ; X = SPRITE NUMBER
11136  3308             ;-------------------------------------------------------------------------------
11137  3308             
11138  3308             
11139  3308             ENEMYTOCHARPOS 
11140  3308  BD 67 3C              LDA BIT_TABLE,X                 ; LOOKUP THE BIT FOR THIS SPRITE NUMBER (0-7)
11141  330B  49 FF                 EOR #$FF                        ; FLIP ALL BITS (INVERT THE BYTE %0001 WOULD BECOME %1110)
11142  330D  2D F9 35              AND ENEMY_SPRITE_POS_X_EXTEND   ; MASK OUT THE X EXTEND BIT FOR THIS SPRITE
11143  3310  8D F9 35              STA ENEMY_SPRITE_POS_X_EXTEND   ; STORE THE RESULT BACK - WE'VE ERASED JUST THIS SPRITES BIT
11144  3313  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; STORE THIS IN THE VIC REGISTER FOR EXTENDED X BITS
11145  3316             
11146  3316  A5 03                 LDA PARAM1                      ; LOAD THE X POS IN CHARACTER COORDS (THE COLUMN)
11147  3318  9D D9 35              STA ENEMY_SPRITE_POS_X,X         ; STORE IT IN THE CHARACTER X POSITION VARIABLE
11148  331B  C9 1E                 CMP #30                         ; IF X IS LESS THAN 30, NO NEED SET THE EXTENDED BIT
11149  331D  90 0C                 BCC @NOEXTENDEDX
11150  331F                        
11151  331F  BD 67 3C              LDA BIT_TABLE,X                 ; LOOK UP THE THE BIT FOR THIS SPRITE NUMBER
11152  3322  0D F9 35              ORA ENEMY_SPRITE_POS_X_EXTEND   ; OR IN THE X EXTEND VALUES - WE HAVE SET THE CORRECT BIT
11153  3325  8D F9 35              STA ENEMY_SPRITE_POS_X_EXTEND   ; STORE THE RESULTS BACK IN THE X EXTEND VARIABLE
11154  3328  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; AND THE VIC X EXTEND REGISTER
11155  332B             
11156  332B             @NOEXTENDEDX 
11157  332B                        ; SETUP OUR Y REGISTER SO WE TRANSFER X/Y VALUES TO THE
11158  332B                        ; CORRECT VIC REGISTER FOR THIS SPRITE
11159  332B  8A                    TXA                             ; FIRST, TRANSFER THE SPRITE NUMBER TO A
11160  332C  0A                    ASL                             ; MULTIPLY IT BY 2 (SHIFT LEFT)
11161  332D  A8                    TAY                             ; THEN STORE IT IN Y
11162  332E                        ; (NOTE : SEE HOW VIC SPRITE POS REGISTERS ARE ORDERED
11163  332E                        ;  TO UNDERSTAND WHY I'M DOING THIS)
11164  332E             
11165  332E  A5 03                 LDA PARAM1                      ; LOAD IN THE X CHAR POSITION
11166  3330  0A                    ASL                             ; 3 X SHIFT LEFT = MULTIPLICATION BY 8
11167  3331  0A                    ASL
11168  3332  0A                    ASL
11169  3333  18                    CLC
11170  3334  69 10                 ADC #24 - ENEMY_SPRITE_DELTA_OFFSET_X ; ADD THE EDGE OF SCREEN (24) MINUS THE DELTA OFFSET
11171  3336                        ; TO THE ROUGH CENTER 8 PIXELS (1 CHAR) OF THE SPRITE
11172  3336             
11173  3336  9D D9 35              STA ENEMY_SPRITE_POS_X,X        ; SAVE IN THE CORRECT SPRITE POS X VARIABLE
11174  3339  99 00 D0              STA VIC_SPRITE_X_POS,Y          ; SAVE IN THE CORRECT VIC SPRITE POS REGISTER
11175  333C             
11176  333C             
11177  333C  A5 04                 LDA PARAM2                      ; LOAD IN THE Y CHAR POSITION (ROWS)
11178  333E  9D 0A 36              STA ENEMY_SPRITE_CHAR_POS_Y,X   ; STORE IT IN THE CHARACTER Y POS FOR THIS SPRITE
11179  3341  0A                    ASL                             ; 3 X SHIFT LEFT = MULTIPLICATION BY 8
11180  3342  0A                    ASL
11181  3343  0A                    ASL
11182  3344  18                    CLC
11183  3345  6D 59 35              ADC SPRITE_DEPTH
11184  3348  38                    SEC
11185  3349  E5 0E                 SBC SPRITE_DELTA_OFFSET_Y
11186  334B  69 24                 ADC #50 - ENEMY_SPRITE_DELTA_OFFSET_Y ; ADD TOP EDGE OF SCREEN (50) MINUS THE DELTA OFFSET
11187  334D  9D FA 35              STA ENEMY_SPRITE_POS_Y,X              ; STORE IN THE CORRECT SPRITE POS Y VARIABLE
11188  3350  99 01 D0              STA VIC_SPRITE_Y_POS,Y                ; AND THE CORRECT VIC SPRITE POS REGISTER
11189  3353             
11190  3353  A9 00                 LDA #0
11191  3355  9D E1 35              STA ENEMY_SPRITE_POS_X_DELTA,X        ;SET BOTH X AND Y DELTA VALUES TO 0 - WE ARE ALIGNED
11192  3358  9D 02 36              STA ENEMY_SPRITE_POS_Y_DELTA,X        ;ON A CHARACTER BORDER (FOR THE PURPOSES OF COLLISIONS)
11193  335B  60                    RTS
11194  335C             
11195  335C             
11196  335C             
11197  335C             FLIPBITS
11198  335C  BD 67 3C              LDA BIT_TABLE,X
11199  335F  49 FF                 EOR #$FF
11200  3361  2D 82 35              AND SPRITE_POS_X_EXTEND
11201  3364  8D 82 35              STA SPRITE_POS_X_EXTEND         ; ENEMY POSITION X
11202  3367  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; 53264
11203  336A  8A                    TXA
11204  336B  0A                    ASL
11205  336C  A8                    TAY
11206  336D             
11207  336D  BD 62 35              LDA SPRITE_POS_X,X
11208  3370  99 00 D0              STA VIC_SPRITE_X_POS,Y          ; $D000,X
11209  3373             
11210  3373  BD 67 3C              LDA BIT_TABLE,X
11211  3376  4D 82 35              EOR SPRITE_POS_X_EXTEND         ; ENEMY POSITION X
11212  3379  8D 82 35              STA SPRITE_POS_X_EXTEND         ; ENEMY POSITION X
11213  337C  8D 10 D0              STA VIC_SPRITE_X_EXTEND         ; 53264
11214  337F  60                    RTS
11215  3380             
11216  3380             REPOSITIONSPRITE 
11217  3380  A2 01                 LDX #1
11218  3382  BD 72 35              LDA SPRITE_CHAR_POS_X,X         ; CHAR X POS = SPRITE_CHAR_POS_X,X
11219  3385  85 03                 STA PARAM1                      ; CHAR X POS = 19
11220  3387             
11221  3387  A2 00                 LDX #0
11222  3389  BD 93 35              LDA SPRITE_CHAR_POS_Y,X         ; 10,12,10,12,0,0,0,0
11223  338C  85 04                 STA PARAM2                      ; CHAR Y POS = 10
11224  338E  20 BA 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
11225  3391             
11226  3391  A2 01                 LDX #1                          ; SPRITE NUMBER 1
11227  3393  BD 93 35              LDA SPRITE_CHAR_POS_Y,X         ; 10,12,10,12,0,0,0,0
11228  3396  85 04                 STA PARAM2
11229  3398  20 BA 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
11230  339B             
11231  339B             ; SPRITE 2 AND 3: ENEMY
11232  339B  A2 02                 LDX #2
11233  339D  BD 72 35              LDA SPRITE_CHAR_POS_X,X
11234  33A0  85 03                 STA PARAM1                      ; CHAR X POS = 19
11235  33A2             
11236  33A2  A2 02                 LDX #2
11237  33A4  BD 93 35              LDA SPRITE_CHAR_POS_Y,X         ; 10,12,10,12,0,0,0,0
11238  33A7  85 04                 STA PARAM2                      ; CHAR Y POS = 10
11239  33A9  20 BA 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
11240  33AC             
11241  33AC  A2 03                 LDX #3                          ; SPRITE NUMBER 1
11242  33AE  BD 93 35              LDA SPRITE_CHAR_POS_Y,X         ; 10,12,10,12,0,0,0,0
11243  33B1  85 04                 STA PARAM2
11244  33B3  20 BA 32              JSR SPRITETOCHARPOS             ; SET SPRITE AND STORE COORDS
11245  33B6  60                    RTS
11246  33B7             
11247  33B7             ;===============================================================================
11248  33B7             ; SPRITES WALKS TO THE LEFT
11249  33B7             ;===============================================================================
11250  33B7             
11251  33B7             
11252  33B7             
11253  33B7             MOVESPRITELEFT 
11254  33B7  BD 62 35              LDA SPRITE_POS_X,X                      ; FIRST CHECK FOR 0 (NOT NEGATIVE)
11255  33BA  D0 12                 BNE @DECNOCHANGE                        ; BRANCH IF NOT 0
11256  33BC             
11257  33BC  DE 62 35              DEC SPRITE_POS_X,X                      ; DECREMENT SPRITE X POSITION BY 1 (TO $FF)
11258  33BF             
11259  33BF  BD 67 3C              LDA BIT_TABLE,X                         ; FETCH THE BIT NEEDED TO CHANGE FOR THIS SPRITE
11260  33C2  4D 82 35              EOR SPRITE_POS_X_EXTEND                 ; USE IT AS A MASK TO FLIP THE CORRECT X EXTEND BIT
11261  33C5  8D 82 35              STA SPRITE_POS_X_EXTEND                 ; STORE TEH DATA THEN SAVE IT IN THE VIC II REGISTER
11262  33C8  8D 10 D0              STA VIC_SPRITE_X_EXTEND                 ; $D011 - SPRITE EXTENDED X BITS (ONE BIT PER SPRITE)
11263  33CB  4C D1 33              JMP @NOCHANGEINEXTENDEDFLAG             ; JUMP TO SAVING THE X POSITION
11264  33CE             
11265  33CE             @DECNOCHANGE ; NOT ZERO X SO WE DECREMENT
11266  33CE  DE 62 35              DEC SPRITE_POS_X,X
11267  33D1             @NOCHANGEINEXTENDEDFLAG 
11268  33D1  8A                    TXA                                     ; COPY X TO THE ACCUMULATOR (SPRITE NUMBER)
11269  33D2  0A                    ASL                                     ; SHIFT IT LEFT (MULTIPLY BY 2)
11270  33D3  A8                    TAY                                     ; SAVE IT IN Y (TO CALCULATE THE REGISTER TO SAVE TO)
11271  33D4             
11272  33D4  BD 62 35              LDA SPRITE_POS_X,X                      ; LOAD OUR VARIABLE SAVED X POSITION
11273  33D7  99 00 D0              STA VIC_SPRITE_X_POS,Y                  ; SAVE IT IN $D000 OFFSET BY Y TO THE CORRECT VIC
11274  33DA                        ; SPRITE REGISTER
11275  33DA             
11276  33DA                        ; HERE WE DECREMENT THE SPRITE DELTA - WE MOVED
11277  33DA                        ; A PIXEL SO THE DELTA GOES DOWN BY ONE
11278  33DA  DE 6A 35              DEC SPRITE_POS_X_DELTA,X
11279  33DD  30 01                 BMI @RESETDELTA                         ; TEST FOR CHANGE TO NEGATIVE
11280  33DF  60                    RTS                                     ; IF DELTA IS STILL > 0 WE'RE DONE
11281  33E0             
11282  33E0             @RESETDELTA 
11283  33E0  A9 07                 LDA #$07                                ; IF DELTA FALLS BELOW 0
11284  33E2  9D 6A 35              STA SPRITE_POS_X_DELTA,X                ; RESET IT TO #$07 - ONE CHAR
11285  33E5  DE 72 35              DEC SPRITE_CHAR_POS_X,X                 ; DELTA HAS RESET - SO DECREMENT CHARACTER POSITION
11286  33E8  60                    RTS
11287  33E9                        
11288  33E9             
11289  33E9             
11290  33E9             ;===============================================================================
11291  33E9             ; SPRITES WALKS TO THE RIGHT
11292  33E9             ;===============================================================================
11293  33E9             
11294  33E9             
11295  33E9             MOVESPRITERIGHT 
11296  33E9  FE 62 35              INC SPRITE_POS_X,X                      ; INCREASE SPRITE X POSITION BY 1
11297  33EC  D0 0C                 BNE @NOCHANGEINEXTENDEDFLAG             ; IF NOT #$00 THEN NO CHANGE IN X FLAG
11298  33EE                        
11299  33EE  BD 67 3C              LDA BIT_TABLE,X                         ; GET THE CORRECT BIT TO SET FOR THIS SPRITE
11300  33F1  4D 82 35              EOR SPRITE_POS_X_EXTEND                 ; EOR IN THE EXTENDED BIT (TOGGLE IT ON OR OFF)
11301  33F4  8D 82 35              STA SPRITE_POS_X_EXTEND                 ; STORE THE NEW FLAGS
11302  33F7  8D 10 D0              STA VIC_SPRITE_X_EXTEND                 ; SET IT IN THE VIC REGISTER
11303  33FA             
11304  33FA             @NOCHANGEINEXTENDEDFLAG 
11305  33FA  8A                    TXA                                     ; TRANSFER THE SPRITE # TO A
11306  33FB  0A                    ASL                                     ; MULTIPLY IT BY 2
11307  33FC  A8                    TAY                                     ; TRANSFER THE RESULT TO Y
11308  33FD             
11309  33FD  BD 62 35              LDA SPRITE_POS_X,X                      ; COPY THE NEW POSITION TO OUR VARIABLE
11310  3400  99 00 D0              STA VIC_SPRITE_X_POS,Y                  ; UPDATE THE CORRECT X POSITION
11311  3403                        ; REGISTER IN THE VIC
11312  3403             
11313  3403                        ; OUR X POSITION IS NOW INCREMENTED,
11314  3403                        ; SO DELTA ALSO INCREASES BY 1
11315  3403  FE 6A 35              INC SPRITE_POS_X_DELTA,X
11316  3406  BD 6A 35              LDA SPRITE_POS_X_DELTA,X
11317  3409  29 07                 AND #%0111                              ; MASK IT TO 0-7
11318  340B  F0 01                 BEQ @RESET_DELTA
11319  340D  60                    RTS                                     ; IF IT HASN'T WE'RE DONE
11320  340E             @RESET_DELTA 
11321  340E  9D 6A 35              STA SPRITE_POS_X_DELTA,X                ; RESET DELTA TO 0 - THIS MEANS WE'VE CROSSED A
11322  3411  FE 72 35              INC SPRITE_CHAR_POS_X,X                 ; A CHARACTER BOUNDRY, SO INCREASE OUR CHAR POSITION
11323  3414  60                    RTS
11324  3415             
11325  3415             
11326  3415             
11327  3415             ;===============================================================================
11328  3415             ; SPRITES MOVES UP
11329  3415             ;===============================================================================
11330  3415             
11331  3415             MOVESPRITEUP 
11332  3415  DE 83 35              DEC SPRITE_POS_Y,X                      ; DECREMENT THE SPRITE POSITION VARIABLE
11333  3418  8A                    TXA                                     ; COPY THE SPRITE NUMBER TO A
11334  3419  0A                    ASL                                     ; MULTIPLY IT BY 2
11335  341A  A8                    TAY                                     ; TRANSFER IT TO Y
11336  341B  BD 83 35              LDA SPRITE_POS_Y,X                      ; LOAD THE SPRITE POSITION FOR THIS SPRITE
11337  341E  99 01 D0              STA VIC_SPRITE_Y_POS,Y                  ; SEND IT TO THE CORRECT VIC REGISTER - $D001 + Y
11338  3421             
11339  3421                        ; Y POSITION HAS DECREASED, SO OUR DELTA DECREASES
11340  3421  DE 8B 35              DEC SPRITE_POS_Y_DELTA,X
11341  3424  30 01                 BMI @RESET_DELTA                        ; TEST TO SEE IF IT DROPS TO NEGATIVE
11342  3426  60                    RTS                                     ; IF NOT WE'RE DONE
11343  3427             @RESET_DELTA 
11344  3427  A9 07                 LDA #$07                                ; RESET THE DELTA TO 0
11345  3429  9D 8B 35              STA SPRITE_POS_Y_DELTA,X
11346  342C  DE 93 35              DEC SPRITE_CHAR_POS_Y,X                 ; IF DELTA RESETS, WE'VE CROSSED A CHARACTER BORDER
11347  342F  60                    RTS
11348  3430             
11349  3430             
11350  3430             
11351  3430             ;===============================================================================
11352  3430             ; SPRITES MOVES DOWN
11353  3430             ;===============================================================================
11354  3430             
11355  3430             MOVESPRITEDOWN 
11356  3430  FE 83 35              INC SPRITE_POS_Y,X                      ; INCREMENT THE Y POS VARIABLE FOR THIS SPRITE
11357  3433  8A                    TXA
11358  3434  0A                    ASL
11359  3435  A8                    TAY
11360  3436             
11361  3436  BD 83 35              LDA SPRITE_POS_Y,X
11362  3439  99 01 D0              STA VIC_SPRITE_Y_POS,Y
11363  343C  FE 8B 35              INC SPRITE_POS_Y_DELTA,X
11364  343F  BD 8B 35              LDA SPRITE_POS_Y_DELTA,X
11365  3442  C9 08                 CMP #$08
11366  3444  F0 01                 BEQ @RESET_DELTA
11367  3446  60                    RTS
11368  3447             
11369  3447             ;@CHECKENEMYHEAD
11370  3447             ;        CPX #2
11371  3447             ;        BEQ @DEACTIVATESPRITE
11372  3447             
11373  3447             ;@CHECKENEMYBODY
11374  3447             ;        CPX #3
11375  3447             ;        BEQ @DEACTIVATESPRITE
11376  3447             ;        RTS
11377  3447             
11378  3447             ;@DEACTIVATESPRITE
11379  3447             ;        LDA #2
11380  3447             ;        STA 53280
11381  3447             ;        JSR DISABLEENEMYSPRITE
11382  3447             ;        RTS
11383  3447             
11384  3447             @RESET_DELTA 
11385  3447  A9 00                 LDA #$00
11386  3449  9D 8B 35              STA SPRITE_POS_Y_DELTA,X
11387  344C  FE 93 35              INC SPRITE_CHAR_POS_Y,X
11388  344F  60                    RTS
11389  3450             
11390  3450             
11391  3450             
11392  3450             ;===============================================================================
11393  3450             ; SPRITE ANIMATION ROUTINES
11394  3450             ;===============================================================================
11395  3450             
11396  3450             
11397  3450             ;===============================================================================
11398  3450             ; ANIMATE SPRITE
11399  3450             ;-------------------------------------------------------------------------------
11400  3450             ; ANIMATE AN INDIVIDUAL SPRITE. TAKING DATA FROM IT'S ANIM LIST, UPDATING
11401  3450             ; IT'S VARIABLES AND UPDATING IT'S ANIMATION FRAME
11402  3450             ;
11403  3450             ; IT CAN CURRENTLY HANDLE LOOP, PLAY ONCE, AND PING-PONG ANIMATIONS
11404  3450             ;
11405  3450             ; X = SPRITE NUMBER TO ANIMATE
11406  3450             ;
11407  3450             ; MODIFIES :  Y, ZEROPAGE_POINTER_1
11408  3450             ;
11409  3450             ;-------------------------------------------------------------------------------
11410  3450             
11411  3450             ANIMATESPRITE 
11412  3450                        ;-----------------------------------------------------------------------
11413  3450                        ; FIRST - DO WE NEED TO ANIMATE THIS SPRITE AT ALL? CHECK THE TIMER
11414  3450             
11415  3450  AD BB 35              LDA SPRITE_ANIM_PLAY                    ; RETURN IF ANIM PAUSED
11416  3453  D0 01                 BNE @START
11417  3455  60                    RTS
11418  3456             @START
11419  3456             
11420  3456             ; CONTAINS THE FIRST 2 BYTES OF ANIM_PLAYER_
11421  3456             
11422  3456             ; WITHIN SPRITE_ANIM_TIMER,X
11423  3456             ; BYTE  1: %0000111
11424  3456             ; BYTES 2-X: 18,20,22 "ANIM_PLAYER_R"
11425  3456  BD AB 35              LDA SPRITE_ANIM_TIMER,X                 ; LOAD THE ANIM TIMER MASK
11426  3459  D0 01                 BNE @TIMERCHECK                         ; IS OUR TIMER TURNED OFF? (SET TO 0)
11427  345B             
11428  345B  60                    RTS
11429  345C             @TIMERCHECK 
11430  345C  29 0F                 AND #%00001111                          ; MASK OUT THE UPPER HALF BYTE (EXTRA INFO)
11431  345E  25 08                 AND TIMER                               ; AND THE MASK AGAINST THE TIMER
11432  3460  F0 01                 BEQ @UPDATE                             ; IF THE RESULT ISN'T 0 - RETURN
11433  3462  60                    RTS
11434  3463             @UPDATE
11435  3463                        ;-----------------------------------------------------------------------
11436  3463                        ; FIRST WE NEED TO FETCH THIS SPRITES ANIM LIST.
11437  3463                        
11438  3463  8A                    TXA                                     ; PUT THE SPRITE NUMBER IN A
11439  3464  0A                    ASL                                     ; MULTIPLY BY 2 (TO LOOKUP A WORD)
11440  3465  A8                    TAY                                     ; STORE THE RESULT IN Y
11441  3466             
11442  3466             ; EARLIER IN INITSPRITEANIM WE SAVED THE SPRITE FRAME DATA IN
11443  3466             ; SPRITE_ANIMATION,Y. SO AN EXAMPLE FOR ANIM_ENEMY_WALK_L WOULD SHOW AS BYTES
11444  3466             ; 68,70,72 OR SEEN AS SPRITE ANIMATION: WORD 74,76,78 - ETC.
11445  3466             ; BYTES 74,76,78 ARE THE INDIVIDUAL DIFFERENT SPRITES SHAPES PLACED HERE.
11446  3466                        
11447  3466  B9 C3 35              LDA SPRITE_ANIMATION,Y                  ; FETCH THE ADDRESS TO THE SPRITES ANIM LIST
11448  3469  85 17                 STA ZEROPAGE_POINTER_1                  ; AND STORE IT IN ZEROPAGE_POINTER_1
11449  346B  B9 C4 35              LDA SPRITE_ANIMATION + 1,Y
11450  346E  85 18                 STA ZEROPAGE_POINTER_1 + 1
11451  3470             
11452  3470                        ;-----------------------------------------------------------------------
11453  3470                        ; NEXT - INCREMENT (OR DECREMENT FOR PING PONG) THE ANIMATION COUNTER
11454  3470             
11455  3470             ; READS THE BYTE (EXAMPLE: %0000111) TO SEE IF THE TIMER
11456  3470             ; IS COUNTING UP OR DOWN.
11457  3470             
11458  3470  BD AB 35              LDA SPRITE_ANIM_TIMER,X                 ; CHECK FOR THE MSB IN THE TIMER, IF IT'S SET
11459  3473  10 06                 BPL @INCTIMER                           ; WE COUNT DOWN INSTEAD
11460  3475                        
11461  3475  DE B3 35              DEC SPRITE_ANIM_COUNT,X                 ; DECREMENT ANIM COUNTER AND CONTINUE AS NORMAL
11462  3478  4C 7E 34              JMP @ZEROCHECK
11463  347B             
11464  347B             @INCTIMER
11465  347B  FE B3 35              INC SPRITE_ANIM_COUNT,X                 ; INCREMENT THE COUNTER
11466  347E             @ZEROCHECK 
11467  347E  BD B3 35              LDA SPRITE_ANIM_COUNT,X                 ; FETCH IT SO WE CAN DO AN END TEST
11468  3481             
11469  3481  F0 2F                 BEQ @RESETPONG                          ; IT SHOULD NEVER BE ZERO, UNLESS IT'S A PING_PONG
11470  3483                        ; ANIM RETURNING BACK TO ZERO AS THE FIRST BYTES
11471  3483                        ; IS THE ANIM TIMER MASK
11472  3483             
11473  3483             ; EXAMPLE: CYCLE THROUGH 18, 20, 22 ("ANIM_PLAYER_WALK_R")
11474  3483             ; BASIC EXAMPLE POKE 2040, BYTES (68, 70, 72)
11475  3483  A8                    TAY                                     ; USE AS AN INDEX TO LOAD THE CURRENT FRAME FROM THE
11476  3484  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; ANIMLIST
11477  3486             
11478  3486  10 45                 BPL @SETIMAGE                           ; TEST TO MAKE SURE THE FRAME IS POSITIVE (0-128)
11479  3488                        ; IF IT ISN'T, AND THE MSB IS SET, THEN IT'S THE
11480  3488                        ; END BYTE, WHICH WE USE TO TELL US THE TYPE OF
11481  3488                        ; ANIM (AND WHAT TO DO WHEN WE REACH THE END)
11482  3488             
11483  3488  C9 FF                 CMP #TYPE_LOOP                          ; CHECK TO SEE WHAT TYPE OF ANIM THIS IS
11484  348A  F0 39                 BEQ @RESETLOOP
11485  348C             
11486  348C  C9 FD                 CMP #TYPE_PING_PONG
11487  348E  F0 0B                 BEQ @RESETPING
11488  3490                        ;----------------------------------------------------------PLAY_ONCE_ANIM
11489  3490                        ; PLAYONCE ANIM DOESN'T GET RESET
11490  3490  A9 00                 LDA #0                                  ; WE SET THE ANIM TIMER TO 0, SO IT NEVER UPDATES
11491  3492  9D AB 35              STA SPRITE_ANIM_TIMER,X
11492  3495  A9 FF                 LDA #$FF                                ; WE SET THE COUNT TO -1 ($FF) AS SOMETHING OUR
11493  3497  9D B3 35              STA SPRITE_ANIM_COUNT,X                 ; CODE CAN CHECK TO SEE IF A ONCE ONLY IS FINISHED
11494  349A  60                    RTS
11495  349B                        ;------------------------------------------------------PING_PONG_ANIM
11496  349B                        ; WE'VE REACHED THE END OF THE ANIMLIST
11497  349B             @RESETPING 
11498  349B  BD AB 35              LDA SPRITE_ANIM_TIMER,X
11499  349E  49 80                 EOR #%10000000                          ; FLIP BIT 7 IN THE TIMER TO START 0 CHECK
11500  34A0                        ; AND TURN ON DECREMENTING
11501  34A0  9D AB 35              STA SPRITE_ANIM_TIMER,X                 ; SAVE THE NEW COUNTER
11502  34A3             
11503  34A3  BD B3 35              LDA SPRITE_ANIM_COUNT,X
11504  34A6  38                    SEC
11505  34A7  E9 02                 SBC #2                                  ; SUBTRACT 2 FROM THE ANIM COUNTER
11506  34A9  9D B3 35              STA SPRITE_ANIM_COUNT,X                 ; AND SAVE THE RESULT
11507  34AC  A8                    TAY
11508  34AD  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; LOOKUP THE NEW SPRITE FRAME
11509  34AF                        ; A NOW HAS THE SPRITE IMAGE
11510  34AF                        ; X HAS THE SPRITE NUMBER
11511  34AF                        ; SO WE SET THE IMAGE(S)
11512  34AF  4C CD 34              JMP @SETIMAGE
11513  34B2             
11514  34B2             @RESETPONG ; THE REVERSE OF THE ABOVE
11515  34B2  BD AB 35              LDA SPRITE_ANIM_TIMER,X
11516  34B5  49 80                 EOR #%10000000                          ; FLIP BIT 7 (MSB) TO COUNT FORWARDS
11517  34B7  9D AB 35              STA SPRITE_ANIM_TIMER,X                 ; SAVE THE NEW TIMER
11518  34BA             
11519  34BA  A9 02                 LDA #2                                  ; SKIP TO FRAME 2
11520  34BC  9D B3 35              STA SPRITE_ANIM_COUNT,X                 ; SAVE THE NEW COUNTER
11521  34BF  A8                    TAY
11522  34C0  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; LOAD THE NEW SPRITE IMAGE
11523  34C2  4C CD 34              JMP @SETIMAGE
11524  34C5                        ;-------------------------------------------------------------LOOP_ANIM
11525  34C5             @RESETLOOP 
11526  34C5  A9 01                 LDA #1                                  ; RESET THE COUNTER TO THE FIRST FRAME
11527  34C7  9D B3 35              STA SPRITE_ANIM_COUNT,X
11528  34CA  A8                    TAY                                     ; NOW FETCH THE FIRST FRAME
11529  34CB  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
11530  34CD             
11531  34CD             @SETIMAGE
11532  34CD                        ;-------------------------------------------------------------------
11533  34CD                        ; SET THE SPRITE TO IT'S NEW IMAGE - A CURRENTLY CONTAINS THE COUNT
11534  34CD                        ; ZEROPAGE_POINTER_1 HAS THE ADDRESS OF THE SPRITES ANIMLIST
11535  34CD             
11536  34CD                        ; A = CORRECT SPRITE IMAGE, X = SPRITE NUMBER,
11537  34CD                        ; SO WE'RE READY TO SET OUR NEW SPRITE IMAGE
11538  34CD  20 EB 34              JSR SETSPRITEIMAGE                      ; PLACED IN SPRITE_POINTER_BASE (REGISTER 2040+)
11539  34D0                        
11540  34D0  E0 00                 CPX #0                                  ; IF SPRITE IS 0 , IT'S THE PLAYER SPRITE
11541  34D2  F0 05                 BEQ @SETHEADSPRITE0                    ; SO WE NEED TO SET A SECOND SPRITE
11542  34D4             
11543  34D4             ; THIS READS THE BODY SPRITE
11544  34D4  E0 02                 CPX #2                                  ; IF SPRITE IS 2 , IT'S THE ENEMY SPRITE
11545  34D6  F0 0A                 BEQ @SETBODYSPRITE0                    ; SO WE NEED TO SET A SECOND SPRITE
11546  34D8  60                    RTS
11547  34D9             
11548  34D9             @SETHEADSPRITE0 
11549  34D9  18                    CLC
11550  34DA  69 01                 ADC #1                                  ; ADD ONE TO THE FRAME
11551  34DC  E8                    INX                                     ; ADD ONE TO THE SPRITE NUMBER
11552  34DD  20 EB 34              JSR SETSPRITEIMAGE
11553  34E0  CA                    DEX
11554  34E1  60                    RTS
11555  34E2             
11556  34E2             @SETBODYSPRITE0 
11557  34E2  18                    CLC
11558  34E3  69 01                 ADC #1                                  ; ADD ONE TO THE FRAME
11559  34E5  E8                    INX                                     ; ADD ONE TO THE SPRITE NUMBER
11560  34E6  20 EB 34              JSR SETSPRITEIMAGE
11561  34E9  CA                    DEX
11562  34EA  60                    RTS
11563  34EB             
11564  34EB             
11565  34EB             
11566  34EB             ;===============================================================================
11567  34EB             ; SET SPRITE IMAGE
11568  34EB             ;===============================================================================
11569  34EB             ; SETS THE SPRITE IMAGE FOR A HARDWARE SPRITE, AND SETS UP ITS POINTERS FOR
11570  34EB             ; BOTH SCREENS
11571  34EB             ;-------------------------------------------------------------------------------
11572  34EB             ; A = SPRITE IMAGE NUMBER
11573  34EB             ; X = HARDWARE SPRITE NUMBER
11574  34EB             ;
11575  34EB             ; LEAVES REGISTERS INTACT
11576  34EB             ;-------------------------------------------------------------------------------
11577  34EB             
11578  34EB             SETSPRITEIMAGE 
11579  34EB  48                    PHA                                     ; SPRITE IMAGE NUMBER
11580  34EC  18                    CLC
11581  34ED  69 70                 ADC #SPRITE_BASE                        ; SPRITE IMAGE = IMAGE NUM + BASE
11582  34EF  9D F8 43              STA SPRITE_POINTER_BASE1,X
11583  34F2  9D F8 47              STA SPRITE_POINTER_BASE2,X
11584  34F5  68                    PLA
11585  34F6  60                    RTS
11586  34F7             
11587  34F7             
11588  34F7             
11589  34F7             ;===============================================================================
11590  34F7             ; INIT SPRITE ANIM
11591  34F7             ;-------------------------------------------------------------------------------
11592  34F7             ;
11593  34F7             ; SETUP AND INITIALIZE A SPRITES ANIMATIONS
11594  34F7             ;
11595  34F7             ; X = SPRITE NUMBER
11596  34F7             ; ZERO_PAGE_POINTER_1 = ANIMATION LIST ADDRESS
11597  34F7             ;
11598  34F7             ; MODIFIES A,Y
11599  34F7             ;-------------------------------------------------------------------------------
11600  34F7             
11601  34F7             INITSPRITEANIM 
11602  34F7  A9 01                 LDA #1                          ; RESET ANIM COUNTER TO FIRST FRAME
11603  34F9  9D B3 35              STA SPRITE_ANIM_COUNT,X
11604  34FC             
11605  34FC  8A                    TXA                             ; COPY SPRITE NUMBER TO A
11606  34FD  0A                    ASL                             ; MULTIPLY IT BY 2 (SO WE CAN INDEX A WORD)
11607  34FE  A8                    TAY                             ; TRANSFER RESULT TO Y
11608  34FF                        ; READS "ANIM_PLAYER_" OR "ANIM_ENEMY_"
11609  34FF  A5 17                 LDA ZEROPAGE_POINTER_1          ; STORE THE ADDRESS FOR THE ANIMLIST
11610  3501  99 C3 35              STA SPRITE_ANIMATION,Y          ; IN THE CORRECT 'SLOT' FOR THIS SPRITE
11611  3504  A5 18                 LDA ZEROPAGE_POINTER_1 + 1
11612  3506  99 C4 35              STA SPRITE_ANIMATION + 1,Y      ; SPRITE_ANIMATION = "ANIM_PLAYER_" (EXAMPLE)
11613  3509             
11614  3509             ; READS THROUGH ANIMATION BYTES EXAMPLE: "ANIM_ENEMY_WALK_L"
11615  3509             ; SUCH AS BYTE %00000011, BYTE 74,76,78, BYTE TYPE_LOOP
11616  3509             
11617  3509             ; ON THE FIRST PASS THROUGH OF Y=0 WE READ THE TIMER DATA
11618  3509             ; WHEN Y=0, THE CODE BELOW COULD CURRENTLY BE SEEN IN MEMORY AS:
11619  3509             
11620  3509             ;       LDY #0
11621  3509             ;       LDA (ZEROPAGE_POINTER_1),Y    > %000111 (ANIM_ENEMY_WALK_L) TIMER
11622  3509             
11623  3509  A0 00                 LDY #0                          ; FIRST BYTE IN THE LIST IS THE TIMER
11624  350B  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH IT
11625  350D  9D AB 35              STA SPRITE_ANIM_TIMER,X         ; STORE IT IN THIS SPRITES TIMER SLOT
11626  3510             
11627  3510             ; EARLIER IN PLAYERSTATEWALK (LEFT/RIGHT) WE STORED DATA IN ZEROPAGE_POINTER_1
11628  3510             ; TO POINT TO OUR SPRITE ANIMATION FRAMES.
11629  3510             
11630  3510             ; THE ABOVE CODE COULD NOW BE SEEN IN MEMORY AS:
11631  3510             ;       LDY #0
11632  3510             ;       LDA (ZEROPAGE_POINTER_1),Y      ; 68,70,72 (ANIM_ENEMY_WALK_L)
11633  3510             
11634  3510  C8                    INY                             ; INCREMENT Y TO 1 - THE FIRST ANIM FRAME
11635  3511  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; LOAD IT
11636  3513                        ; RIGHT NOW WE HAVE THE SPRITE IMAGE IN A
11637  3513                        ; AND THE SPRITE NUMBER IN X, WHICH IS EXACTLY WHAT
11638  3513                        ; WHAT WE NEED TO USE SETSPRITEIMAGE
11639  3513  20 EB 34              JSR SETSPRITEIMAGE              ; SET (HEAD) SPRITE (POKE 2040, SPRITE FRAME)
11640  3516             
11641  3516  E0 00                 CPX #0                          ; IF THE SPRITE = 0, THEN WE ARE SETTING THE PLAYER SPRITE
11642  3518  F0 01                 BEQ @BODYSPRITE0               ; THE PLAYER USES 2 SPRITES
11643  351A  60                    RTS
11644  351B             
11645  351B             ; SET THE BODY OF THE SPRITE (POKE 2041, SPRITE FRAME)
11646  351B             
11647  351B             @BODYSPRITE0 ; WE DON'T NEED TO SET ALL THE INFO FOR THIS SPRITE
11648  351B  E8                    INX                             ; INCREMENT X TO THE NEXT HARDWARE SPRITE
11649  351C  18                    CLC                             ; ADD ONE TO THE CURRENT ANIM FRAME NUMBER
11650  351D  69 01                 ADC #1                          ; BECAUSE OUR BACKGROUND SPRITE IS THE NEXT FRAME.
11651  351F  20 EB 34              JSR SETSPRITEIMAGE              ; NOW SET THE SPRITE IMAGE
11652  3522  60                    RTS
11653  3523             
11654  3523             
11655  3523             
11656  3523             ;===============================================================================
11657  3523             ; INIT SPRITE ANIM
11658  3523             ;-------------------------------------------------------------------------------
11659  3523             ;
11660  3523             ; SETUP AND INITIALIZE A SPRITES ANIMATIONS
11661  3523             ;
11662  3523             ; X = SPRITE NUMBER
11663  3523             ; ZERO_PAGE_POINTER_1 = ANIMATION LIST ADDRESS
11664  3523             ;
11665  3523             ; MODIFIES A,Y
11666  3523             ;-------------------------------------------------------------------------------
11667  3523             
11668  3523             INITENEMYANIM 
11669  3523  A9 01                 LDA #1                          ; RESET ANIM COUNTER TO FIRST FRAME
11670  3525  9D B3 35              STA SPRITE_ANIM_COUNT,X
11671  3528             
11672  3528  8A                    TXA                             ; COPY SPRITE NUMBER TO A
11673  3529  0A                    ASL                             ; MULTIPLY IT BY 2 (SO WE CAN INDEX A WORD)
11674  352A  A8                    TAY                             ; TRANSFER RESULT TO Y
11675  352B                        ; READS "ANIM_PLAYER_" OR "ANIM_ENEMY_"
11676  352B  A5 17                 LDA ZEROPAGE_POINTER_1          ; STORE THE ADDRESS FOR THE ANIMLIST
11677  352D  99 C3 35              STA SPRITE_ANIMATION,Y          ; IN THE CORRECT 'SLOT' FOR THIS SPRITE
11678  3530  A5 18                 LDA ZEROPAGE_POINTER_1 + 1
11679  3532  99 C4 35              STA SPRITE_ANIMATION + 1,Y
11680  3535             
11681  3535             ; READS THROUGH ANIMATION BYTES EXAMPLE: "ANIM_ENEMY_WALK_L"
11682  3535             ; SUCH AS BYTE %00000011, BYTE 74,76,78, BYTE TYPE_LOOP
11683  3535             
11684  3535             ; ON THE FIRST PASS THROUGH OF Y=0 WE READ THE TIMER DATA
11685  3535             ; WHEN Y=0, THE CODE BELOW COULD CURRENTLY BE SEEN IN MEMORY AS:
11686  3535             
11687  3535             ;       LDY #0
11688  3535             ;       LDA (ZEROPAGE_POINTER_1),Y    > %000111 (ANIM_ENEMY_WALK_L) TIMER
11689  3535             
11690  3535  A0 00                 LDY #0                          ; FIRST BYTE IN THE LIST IS THE TIMER
11691  3537  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH IT
11692  3539  9D AB 35              STA SPRITE_ANIM_TIMER,X         ; STORE IT IN THIS SPRITES TIMER SLOT
11693  353C             
11694  353C             ; EARLIER IN PLAYERSTATEWALK (LEFT/RIGHT) WE STORED DATA IN ZEROPAGE_POINTER_1
11695  353C             ; TO POINT TO OUR SPRITE ANIMATION FRAMES.
11696  353C             
11697  353C             ; THE ABOVE CODE COULD NOW BE SEEN IN MEMORY AS:
11698  353C             ;       LDY #0
11699  353C             ;       LDA (ZEROPAGE_POINTER_1),Y      ; 68,70,72 (ANIM_ENEMY_WALK_L)
11700  353C             
11701  353C  C8                    INY                             ; INCREMENT Y TO 1 - THE FIRST ANIM FRAME
11702  353D  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; LOAD IT
11703  353F                        
11704  353F                        ; RIGHT NOW WE HAVE THE SPRITE IMAGE IN A
11705  353F                        ; AND THE SPRITE NUMBER IN X, WHICH IS EXACTLY WHAT
11706  353F                        ; WHAT WE NEED TO USE SETSPRITEIMAGE
11707  353F  20 EB 34              JSR SETSPRITEIMAGE
11708  3542             
11709  3542  E0 02                 CPX #2                          ; IF THE SPRITE = 0, THEN WE ARE SETTING THE PLAYER SPRITE
11710  3544  F0 01                 BEQ @SECONDSPRITE               ; THE PLAYER USES 2 SPRITES
11711  3546  60                    RTS
11712  3547             @SECONDSPRITE 
11713  3547                        ; WE DON'T NEED TO SET ALL THE INFO FOR THIS SPRITE
11714  3547  E8                    INX                             ; INCREMENT X TO THE NEXT HARDWARE SPRITE
11715  3548  18                    CLC                             ; ADD ONE TO THE CURRENT ANIM FRAME NUMBER
11716  3549  69 01                 ADC #1                          ; BECAUSE OUR BACKGROUND SPRITE IS THE NEXT FRAME.
11717  354B  20 EB 34              JSR SETSPRITEIMAGE              ; NOW SET THE SPRITE IMAGE
11718  354E  60                    RTS
11719  354F             
11720  354F             
11721  354F             ;-------------------------------------------------------------------------------
11722  354F             ;===============================================================================
11723  354F             ; DATA AND TABLES
11724  354F             ;===============================================================================
11725  354F             ;-------------------------------------------------------------------------------
11726  354F             ; SPRITE POINTER TABLES
11727  354F             ;-------------------------------------------------------------------------------
11728  354F             
11729  354F             ; LOOKUP TABLES FOR SETTING SPRITE POINTERS FOR THE
11730  354F             ; CORRECT SCREENS
11731  354F             
11732  354F             SPRITE_POINTER_BASE1 = SCREEN1_MEM + $3F8
11733  354F             SPRITE_POINTER_BASE2 = SCREEN2_MEM + $3F8
11734  354F             SPRITE_POINTER_BASE3 = SCREEN2_MEM + $3F8
11735  354F             
11736  354F             ;-------------------------------------------------------------------------------
11737  354F             ;===============================================================================
11738  354F             ; SPRITE HANDLING DATA
11739  354F             ;===============================================================================
11740  354F             
11741  354F  00         RSP_GAME_SWITCH BYTE 0
11742  3550  00         LSP_GAME_SWITCH BYTE 0                                  ; BUT WITH 2 DIFFERENT Y POSITIONS, IT HAD TO
11743  3551             
11744  3551             ; 0,1 = SPRITE 0 (PLAYER)
11745  3551             ; 2,3 = SPRITE 1 (ENEMY)
11746  3551             SPRITE_STACK 
11747  3551  0A 0C 0A              BYTE 10,12,10,12,10,0,0,0                       ; HANDLES THE UPPER/LOWER SPRITE Y POSITIONS
11748  3559                        ; NOTE: THIS WAS ORIGINALLY MANAGED BY PARAM2
11749  3559                        ; BUT WITH 2 DIFFERENT Y POSITIONS, IT HAD TO
11750  3559                        ; BE ALTERED.
11751  3559  24         SPRITE_DEPTH BYTE 36
11752  355A             
11753  355A             SPRITE_IS_ACTIVE 
11754  355A  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11755  3562                        ; HARDWARE SPRITE X POSITION
11756  3562             SPRITE_POS_X 
11757  3562  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11758  356A                        ; DELTA X POSITION (0-7) - WITHIN A CHAR
11759  356A             SPRITE_POS_X_DELTA 
11760  356A  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11761  3572             
11762  3572             SPRITE_CHAR_POS_X ; CHAR POS X - SPRITE POSITION IN CHARACTER
11763  3572  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00            ; COORDS (0-40)
11764  357A             SPRITE_DELTA_TRIM_X 
11765  357A  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00            ; TRIM DELTA FOR BETTER COLLISIONS
11766  3582             
11767  3582             SPRITE_POS_X_EXTEND ; EXTENDED FLAG FOR X POSITON > 255
11768  3582  00                    BYTE $00                                        ; BITS 0-7 CORRESPOND TO SPRITE NUMBERS
11769  3583             
11770  3583             
11771  3583             SPRITE_POS_Y ; HARDWARE SPRITE Y POSITION
11772  3583  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11773  358B             SPRITE_POS_Y_DELTA 
11774  358B  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11775  3593             SPRITE_CHAR_POS_Y 
11776  3593  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11777  359B             
11778  359B             SPRITE_DIRECTION_X 
11779  359B  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00    ; DIRECTION OF THE SPRITE (-1 0 1)
11780  35A3             SPRITE_DIRECTION_Y 
11781  35A3  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11782  35AB             
11783  35AB             SPRITE_ANIM_TIMER 
11784  35AB  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00    ; TIMING AND PLAYBACK DIRECTION FOR CURRENT ANIM
11785  35B3             SPRITE_ANIM_COUNT 
11786  35B3  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00    ; POSITION IN THE ANIM LIST
11787  35BB             SPRITE_ANIM_PLAY 
11788  35BB  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00    ; CURRENTLY ANIMATED OR PAUSED?
11789  35C3             
11790  35C3                        ; POINTER TO CURRENT ANIMATION TABLE
11791  35C3             SPRITE_ANIMATION 
11792  35C3  00 00 00              WORD $0000,$0000,$0000,$0000
11793  35CB  00 00 00              WORD $0000,$0000,$0000,$0000
11794  35D3             
11795  35D3             ; ENEMY DATA
11796  35D3             
11797  35D3  01         ACTIVETIMER BYTE 1
11798  35D4  01         ENEMYTIMER BYTE 1
11799  35D5  00         ENEMYCOUNTDOWN BYTE 0
11800  35D6  00         ENEMYFIRECD BYTE 0
11801  35D7             
11802  35D7             ENEMY_DISTANCE 
11803  35D7  16                    BYTE 22
11804  35D8             
11805  35D8  00         ENEMY_HIT  BYTE 0
11806  35D9                        
11807  35D9             ENEMY_SPRITE_POS_X 
11808  35D9  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11809  35E1                        ; DELTA X POSITION (0-7) - WITHIN A CHAR
11810  35E1             ENEMY_SPRITE_POS_X_DELTA 
11811  35E1  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11812  35E9             
11813  35E9             ENEMY_SPRITE_CHAR_POS_X ; CHAR POS X - SPRITE POSITION IN CHARACTER
11814  35E9  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00            ; COORDS (0-40)
11815  35F1             ENEMY_SPRITE_DELTA_TRIM_X 
11816  35F1  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00            ; TRIM DELTA FOR BETTER COLLISIONS
11817  35F9             
11818  35F9             ENEMY_SPRITE_POS_X_EXTEND ; EXTENDED FLAG FOR X POSITON > 255
11819  35F9  00                    BYTE $00                                        ; BITS 0-7 CORRESPOND TO SPRITE NUMBERS
11820  35FA             
11821  35FA             
11822  35FA             ENEMY_SPRITE_POS_Y ; HARDWARE SPRITE Y POSITION
11823  35FA  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11824  3602             ENEMY_SPRITE_POS_Y_DELTA 
11825  3602  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11826  360A             ENEMY_SPRITE_CHAR_POS_Y 
11827  360A  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
11828  3612                        
11829  3612             ;===============================================================================
11830  3612             ; SPRITE ANIMATION TABLES
11831  3612             ;===============================================================================
11832  3612             ; ANIMS ARE HELD IN A BLOCK OF DATA CONTAINING INFO AND A LIST OF ANIM FRAMES.
11833  3612             ; BYTE 0 = TIMING MASK:
11834  3612             ;          THE LOWER 4 BITS CONTAIN A MASK WE WILL AND WITH THE MASTER TIMER,
11835  3612             ; IF THE RESULT IS
11836  3612             ; IS 0 WE WILL GO TO THE NEXT FRAME
11837  3612             ; VALID VALUES ARE THOSE THAT USE ALL BITS (1,3,5,7,15)
11838  3612             .
11839  3612             ; BIT 7 IS USED FOR THE DIRECTION OF THE ANIMATION (IN PING PONG ANIMS). IF WE
11840  3612             ; SET IT
11841  3612             ; WE CAN THEN USE BMI (BRANCH MINUS) TO SEE IF WE COUNT BACKWARDS INSTEAD OF
11842  3612             ; FORWARDS
11843  3612             ;
11844  3612             ; BYTE 1 TO END = SPRITE NUMBERS FOR THE ANIMATION FRAMES
11845  3612             ;
11846  3612             ; THE LAST BYTE BOTH TERMINATES THE ANIMATION, AND ALSO SHOWS WHAT SHOULD BE
11847  3612             ; DONE AT THE END
11848  3612             ; OF IT.  ON A LOOP WE WOULD RESET TO 0, ON A PLAY ONCE ANIM WE WOULD END, ON
11849  3612             ; A PING PONG TYPE IT WILL START COUNTING BACKWARDS
11850  3612             ;-------------------------------------------------------------------------------
11851  3612             ; ANIMATION TYPES
11852  3612             TYPE_LOOP  = $FF
11853  3612             TYPE_PLAY_ONCE = $FE
11854  3612             TYPE_PING_PONG = $FD
11855  3612             ;-------------------------------------------------------------------------------
11856  3612             ANIM_PLAYER_IDLE ; PLAYER IDLE ANIMATION
11857  3612  0F                    BYTE %0001111
11858  3613  04 02                 BYTE 4,2
11859  3615  FD                    BYTE TYPE_PING_PONG
11860  3616             
11861  3616             ANIM_PLAYER_WALK_R 
11862  3616  07                    BYTE %0000111
11863  3617  12 14 16              BYTE 18,20,22
11864  361A  FF                    BYTE TYPE_LOOP
11865  361B             
11866  361B             ANIM_PLAYER_WALK_L 
11867  361B  07                    BYTE %0000111
11868  361C  0C 0E 10              BYTE 12,14,16
11869  361F  FF                    BYTE TYPE_LOOP
11870  3620             
11871  3620             ANIM_PLAYER_FALL 
11872  3620  0F                    BYTE %0001111
11873  3621  22                    BYTE 34
11874  3622  FE                    BYTE TYPE_PLAY_ONCE
11875  3623             
11876  3623             ANIM_CLIMB_POLE 
11877  3623  03                    BYTE %0000011
11878  3624  08 0A 0C              BYTE 8,10,12
11879  3627  FF                    BYTE TYPE_LOOP
11880  3628             
11881  3628             ANIM_PLAYER_JUMP ; PLAYER JUMP ANIMATION
11882  3628  07                    BYTE %00000111
11883  3629  02 04 06              BYTE 2,4,6
11884  362C  FD                    BYTE TYPE_PING_PONG
11885  362D             
11886  362D             ANIM_PLAYER_PUNCH_R 
11887  362D  03                    BYTE %0000011
11888  362E  18 1A                 BYTE 24,26
11889  3630  FF                    BYTE TYPE_LOOP
11890  3631             
11891  3631             ANIM_PLAYER_PUNCH_L 
11892  3631  03                    BYTE %0000011
11893  3632  1E 20                 BYTE 30,32
11894  3634  FF                    BYTE TYPE_LOOP
11895  3635             
11896  3635             ANIM_PLAYER_SHOOT_RIGHT 
11897  3635  0F                    BYTE %0001111
11898  3636  32 32                 BYTE 50,50                              ; START AT 50
11899  3638  FF                    BYTE TYPE_LOOP
11900  3639             
11901  3639             ANIM_PLAYER_SHOOT_LEFT 
11902  3639  0F                    BYTE %0001111
11903  363A  34 34                 BYTE 52,52
11904  363C  FF                    BYTE TYPE_LOOP
11905  363D             
11906  363D             ANIM_PLAYER_KICK_R 
11907  363D  0F                    BYTE %0001111
11908  363E  1A 1C                 BYTE 26,28
11909  3640  FF                    BYTE TYPE_LOOP
11910  3641             
11911  3641             ANIM_PLAYER_KICK_L 
11912  3641  0F                    BYTE %0001111
11913  3642  26 28                 BYTE 38,40
11914  3644  FF                    BYTE TYPE_LOOP
11915  3645             
11916  3645             PLAYER_JUMPCOUNT 
11917  3645  00                    BYTE 0
11918  3646             
11919  3646             ANIM_PLAYER_SWIM_R 
11920  3646  03                    BYTE %0000011
11921  3647  2B 2D                 BYTE 43,45
11922  3649  FF                    BYTE TYPE_LOOP
11923  364A             
11924  364A             ANIM_PLAYER_SWIM_L 
11925  364A  03                    BYTE %0000011
11926  364B  2E 30                 BYTE 46,48
11927  364D  FF                    BYTE TYPE_LOOP
11928  364E             
11929  364E             ; ENEMY ANIMATION: ALWAYS GO BACK 1 FRAME BEFORE THE ONE THAT
11930  364E             ; SHOWS IN THE SPRITE EDITOR.
11931  364E             
11932  364E             ANIM_ENEMY_IDLE 
11933  364E  0F                    BYTE %0001111
11934  364F  62 66                 BYTE 98,102                           ; SPRITES 99-104
11935  3651  FD                    BYTE TYPE_PING_PONG
11936  3652             
11937  3652             ANIM_ENEMY_WALK_R 
11938  3652  07                    BYTE %0000111
11939  3653  4A 4E                 BYTE 74,78                            ; SPRITES 77-80 RUNNING RIGHT
11940  3655  FF                    BYTE TYPE_LOOP
11941  3656             
11942  3656             ANIM_ENEMY_WALK_L 
11943  3656  07                    BYTE %0000111
11944  3657  44 48                 BYTE 68,72                            ; SPRITES 69-74 RUNNING LEFT
11945  3659  FF                    BYTE TYPE_LOOP
11946  365A             
11947  365A             ANIM_ENEMY_WALK_D 
11948  365A  07                    BYTE %0000111
11949  365B  3A 3C 3E              BYTE 58,60,62                         ; SPRITES 69-74 RUNNING LEFT
11950  365E  FF                    BYTE TYPE_LOOP
11951  365F             
11952  365F             ANIM_ENEMY_FIRING_RIGHT 
11953  365F  07                    BYTE %0000111
11954  3660  4A 50                 BYTE 74,80                            ; SPRITES 81, 82, (85,87)
11955  3662  FF                    BYTE TYPE_LOOP
11956  3663             
11957  3663             ANIM_ENEMY_FIRING_LEFT 
11958  3663  0F                    BYTE %0001111
11959  3664  42 48                 BYTE 66,72                            ; SPRITES 67, 68
11960  3666  FF                    BYTE TYPE_LOOP
11961  3667             
11962  3667             ANIM_ENEMY_ATTACK_RIGHT 
11963  3667  07                    BYTE %0000111
11964  3668  56 58                 BYTE 86,88                            ;SPRITES 69-74 RUNNING LEFT
11965  366A  FF                    BYTE TYPE_LOOP
11966  366B             
11967  366B             ANIM_ENEMY_ATTACK_LEFT 
11968  366B  07                    BYTE %0000111
11969  366C  5A 5C                 BYTE 90,92                            ;SPRITES 69-74 RUNNING LEFT
11970  366E  FF                    BYTE TYPE_LOOP
11971  366F             
11972  366F             ANIM_ENEMY_RIGHT_DEAD 
11973  366F  07                    BYTE %0000111
11974  3670  52 54 56              BYTE 82,84,86
11975  3673  FF                    BYTE TYPE_LOOP
11976  3674             
11977  3674             ANIM_ENEMY_LEFT_DEAD 
11978  3674  07                    BYTE %0000111
11979  3675  52 54 56              BYTE 82,84,86
11980  3678  FF                    BYTE TYPE_LOOP
11981  3679             
11982  3679             ANIM_ENEMY_CLIMB_ROPE 
11983  3679  03                    BYTE %0000011
11984  367A  55 56                 BYTE 85,86
11985  367C  FF                    BYTE TYPE_LOOP
11986  367D             
11987  367D             ANIM_ENEMY_BULLET 
11988  367D  03                    BYTE %0000011
11989  367E  36 36                 BYTE 54,54
11990  3680  FF                    BYTE TYPE_LOOP
11991  3681             
11992  3681             ; BELOW ARE OUR CURRENT STATIONARY SPRITES (DON'T MOVE)
11993  3681             ANIM_NPC1  ; NUMBERS 0 TO 9
11994  3681  03                    BYTE %0000011
11995  3682  50 50                 BYTE 80,80                              ; WAS 74,68,82
11996  3684  FD                    BYTE TYPE_PING_PONG
11997  3685             
11998  3685             ANIM_NPC2  ; NUMBERS 0 TO 9
11999  3685  03                    BYTE %0000011
12000  3686  51 51                 BYTE 81,81                              ; WAS 75,69,83
12001  3688  FD                    BYTE TYPE_PING_PONG
12002  3689             
12003  3689             ANIM_NPC3  ; NUMBERS 0 TO 9
12004  3689  03                    BYTE %0000011
12005  368A  5F 5F                 BYTE 95,95                              ; WAS 99,99
12006  368C  FD                    BYTE TYPE_PING_PONG
12007  368D             
12008  368D             ANIM_NPC4  ; NUMBERS 0 TO 9
12009  368D  03                    BYTE %0000011
12010  368E  60 60                 BYTE 96,96                              ; WAS 99,99
12011  3690  FD                    BYTE TYPE_PING_PONG
12012  3691             `;============================================================================== 
12013  3691             ; COLLISION ROUTINES
12014  3691             ;===============================================================================
12015  3691             ; PETER 'SIG' HEWETT
12016  3691             ; - 2016,2017
12017  3691             ;-------------------------------------------------------------------------------
12018  3691             ; ROUTINES DEALING WITH COLLISIONS BETWEEN GAME OBJECTS
12019  3691             ;
12020  3691             ;===============================================================================
12021  3691             ; SPRITE TO BACKGROUND CHARACTERS
12022  3691             ;===============================================================================
12023  3691             ; CHECKS TO SEE IF THE SPRITE IS COLLIDING WITH A BACKGROUND CHARACTER.
12024  3691             ; MANY OF THESE CHECKS WILL BE 'FORWARD LOOKING' (ESPECIALLY IN MOVEMENT CHECKS)
12025  3691             ; WE WILL BE LOOKING TO WHERE THE SPRITE WILL BE, NOT WHERE IT IS, AND THEN
12026  3691             ; LETTING THE SPRITE HANDLING ROUTINES UPDATE THE POSITIONS AND DELTAS FOR US
12027  3691             ; IF WE MOVE.
12028  3691             ;
12029  3691             ; THE ORIGINAL 'FRAMEWORK CODE' WORKED AGAINST A SINGLE SCREEN AND RETURNED A SIMPLE
12030  3691             ; 1 FOR BLOCKED AND 0 FOR CLEAR. WE NEED A MUCH BETTER SYSTEM FOR THE GAME ENGINE
12031  3691             ; THAT WILL HANDLE DOUBLE BUFFERED SCREENS AS WELL AS CALCULATING SCREEN SCROLLING.
12032  3691             ; IT WILL ALSO NEED TO RETURN MORE INFORMATION DEALING WITH DIFFERENT
12033  3691             ; TYPES OF BLOCKS
12034  3691             ;
12035  3691             ;
12036  3691             ;===============================================================================
12037  3691             ; ENEMY CHECK MOVE LEFT
12038  3691             ;-------------------------------------------------------------------------------
12039  3691             ; CHECKS AHEAD TO SEE IF THIS SPRITE CAN LOVE LEFT, OF IT'S GOING TO BE STOPPED
12040  3691             ; BY A BLOCKING CHARACTER
12041  3691             ;
12042  3691             ; X = SPRITE WE WANT TO CHECK FOR
12043  3691             ;
12044  3691             ; RETURNS A = 0 WE CAN MOVE OR A = 1 WE ARE BLOCKED
12045  3691             ;
12046  3691             ; MODIFIES A, Y, PARAM1, PARAM2
12047  3691             ; X REGISTER IS LEFT INTACT
12048  3691             ;-------------------------------------------------------------------------------
12049  3691             
12050  3691             ENEMYCHECKMOVELEFT 
12051  3691  BD 72 35              LDA SPRITE_CHAR_POS_X,X                 ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
12052  3694  85 03                 STA PARAM1
12053  3696  BD 93 35              LDA SPRITE_CHAR_POS_Y,X                 ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
12054  3699  85 04                 STA PARAM2
12055  369B             
12056  369B  BD 6A 35              LDA SPRITE_POS_X_DELTA,X                ; LOAD X POS DELTA
12057  369E  38                    SEC
12058  369F  E5 29                 SBC SCROLL_COUNT_X                      ; ADJUST THE DELTA FOR SCROLLING LEFT/RIGHT
12059  36A1  10 02                 BPL @NOADJX                             ; CHECK TO SEE IF DELTA WRAPS TO -1 ($FF)
12060  36A3             
12061  36A3  C6 03                 DEC PARAM1                              ; IF THE DELTA WRAPS, ADJUST THE X CHAR POSITION
12062  36A5             
12063  36A5             
12064  36A5             @NOADJX
12065  36A5  29 07                 AND #%0111                              ; MASK THE DELTA VALUE BACK TO A 0-7 VALUE
12066  36A7  C9 00                 CMP #0                                  ; CHECK X DELTA TO SEE IF THE SPRITE IS 'FLUSH'
12067  36A9  F0 03                 BEQ @CHECKLEFT                          ; IF IT IS, CONTINUE
12068  36AB  A9 00                 LDA #0                                  ; ELSE RETURN WITH A 'CLEAR' CODE
12069  36AD  60                    RTS
12070  36AE             
12071  36AE             @CHECKLEFT 
12072  36AE  BD 8B 35              LDA SPRITE_POS_Y_DELTA,X                ; LOAD THE SPRITE DELTA Y POS
12073  36B1  38                    SEC                                     ; SUBTRACT THE CURRENT Y SCROLL
12074  36B2  E5 2A                 SBC SCROLL_COUNT_Y
12075  36B4  10 02                 BPL @NOADJY                             ; IF IT WRAPS, DECREMENT THE Y CHAR POSITION
12076  36B6             
12077  36B6  C6 04                 DEC PARAM2
12078  36B8             @NOADJY
12079  36B8  29 07                 AND #%0111                              ; MASK BACK TO A 0-7 VALUE
12080  36BA  F0 10                 BEQ @CHECKLEFT2                         ; IF ADJUSTED DELTA Y IS 0, WE ONLY NEED TO CHECK 2
12081  36BC                        ; CHARACTERS
12082  36BC             
12083  36BC                        ; IF NOT WE NEED TO CHECK 3 CHARACTERS
12084  36BC             
12085  36BC  A4 04                 LDY PARAM2                              ; LOAD ADJUSTED Y CHAR POSITION (SCREEN LINE)
12086  36BE  C8                    INY                                     ; INCREMENT BY ONE LINE
12087  36BF             
12088  36BF  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS           ; USE SCREEN_ROUTINES HELPER TO FETCH THE ADDRESS
12089  36C2                        ; STORED IN (ZEROPAGE_POINTER_1)
12090  36C2             
12091  36C2  A4 03                 LDY PARAM1                              ; FETCH SPRITES X POSITION
12092  36C4  88                    DEY                                     ; SUB 1 CHARACTER (LEFT)
12093  36C5             
12094  36C5  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; FETCH THE CHARACTER FROM SCREEN MEMORY
12095  36C7             
12096  36C7  20 4D 38              JSR ENEMYTESTBLOCKING                   ; TEST FOR A BLOCKING CHARACTER
12097  36CA                        ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12098  36CA                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12099  36CA             
12100  36CA             
12101  36CA  D0 1F                 BNE @BLOCKEDLEFT
12102  36CC                        
12103  36CC                        ; OTHERWISE CHECK THE OTHER 2 CHARACTERS
12104  36CC             @CHECKLEFT2 
12105  36CC  A4 04                 LDY PARAM2                              ; FETCH THE SPRITE Y CHAR POSITION
12106  36CE  88                    DEY                                     ; GO ONE LINE UP
12107  36CF  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS
12108  36D2             
12109  36D2  A4 03                 LDY PARAM1
12110  36D4  88                    DEY                                     ; ONE CHAR LEFT
12111  36D5             
12112  36D5             
12113  36D5  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12114  36D7  20 4D 38              JSR ENEMYTESTBLOCKING                   ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12115  36DA                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12116  36DA             
12117  36DA  D0 0F                 BNE @BLOCKEDLEFT
12118  36DC             
12119  36DC  98                    TYA
12120  36DD  18                    CLC
12121  36DE  69 28                 ADC #40
12122  36E0  A8                    TAY
12123  36E1                        
12124  36E1  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12125  36E3  20 4D 38              JSR ENEMYTESTBLOCKING                   ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12126  36E6                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12127  36E6             
12128  36E6  D0 03                 BNE @BLOCKEDLEFT
12129  36E8                        
12130  36E8  A9 00                 LDA #0
12131  36EA  60                    RTS
12132  36EB                        
12133  36EB             @BLOCKEDLEFT 
12134  36EB  A9 01                 LDA #1
12135  36ED  60                    RTS
12136  36EE             
12137  36EE             
12138  36EE             ;-------------------------------------------------------------------------------
12139  36EE             
12140  36EE             ;===============================================================================
12141  36EE             ; ENEMY CHECK MOVE RIGHT
12142  36EE             ;-------------------------------------------------------------------------------
12143  36EE             ; BASED ON THE PREVIOUS 'CANMOVERIGHT' ROUTINE. IT CHECKS AHEAD TO SEE IF THERE
12144  36EE             ; ARE GOING TO BE BLOCKING CHARACTERS IN THE DIRECTION WE WANT TO MOVE.
12145  36EE             ;
12146  36EE             ; THIS VERSION CHECKS THE APPROPRIATE FRONT SCREEN AND RETURNS A CODE. 0 FOR
12147  36EE             ; CLEAR OR 1-255 FOR ANY SPECIAL ACTION THAT CAN OR MUST BE TAKEN.
12148  36EE             ;
12149  36EE             ; X = SPRITE TO CHECK AGAINST
12150  36EE             ;
12151  36EE             ; MODIFIES Y, PARAM1, PARAM2
12152  36EE             ;
12153  36EE             ; RETURNS A = BLOCKING CODE
12154  36EE             ; X REGISTER IS LEFT INTACT
12155  36EE             ;-------------------------------------------------------------------------------
12156  36EE             
12157  36EE             
12158  36EE             ENEMYCHECKMOVERIGHT 
12159  36EE             
12160  36EE  BD 72 35              LDA SPRITE_CHAR_POS_X,X         ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
12161  36F1  85 03                 STA PARAM1
12162  36F3  BD 93 35              LDA SPRITE_CHAR_POS_Y,X         ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
12163  36F6  85 04                 STA PARAM2
12164  36F8             
12165  36F8  BD 6A 35              LDA SPRITE_POS_X_DELTA,X        ; FETCH X DELTA
12166  36FB  38                    SEC
12167  36FC  E5 29                 SBC SCROLL_COUNT_X              ; SUBTRACT THE SCROLL COUNT
12168  36FE  10 02                 BPL @NOADJX
12169  3700                        
12170  3700  C6 03                 DEC PARAM1                      ; INCREMENT PARAM1
12171  3702             
12172  3702             @NOADJX
12173  3702  29 07                 AND #%0111                      ; MASK BACK TO A RANGE OF 0-7  ; NO ADJUSTMENT IS NEEDED
12174  3704  C9 04                 CMP #4                          ; IS NEW DELTA = 0?
12175  3706  F0 03                 BEQ @CHECKRIGHT                 ; IF SO, WE CAN CHECK RIGHT
12176  3708  A9 00                 LDA #0                          ; OTHERWISE GIVE A CLEAR CODE AND CARRY ON
12177  370A  60                    RTS
12178  370B             
12179  370B             
12180  370B             @CHECKRIGHT 
12181  370B  BD 8B 35              LDA SPRITE_POS_Y_DELTA,X        ; LOAD THE Y DELTA
12182  370E  38                    SEC
12183  370F  E5 2A                 SBC SCROLL_COUNT_Y              ; ADJUST BY THE CURRENT Y SCROLL VALUE
12184  3711  10 02                 BPL @NOADJY                     ; IF THE DELTA GOES BELOW 0 ADJUST Y POSITION
12185  3713             
12186  3713  C6 04                 DEC PARAM2
12187  3715             
12188  3715             @NOADJY
12189  3715  29 07                 AND #%0111                      ; MASK ADJUSTED DELTA VALUE BACK TO 0 - 7
12190  3717                        ; IF Y DELTA IS 0, WE ARE FLUSH ON THE Y AXIS, SO ONLY
12191  3717  F0 10                 BEQ @RIGHTCHECK2                ; CHECK 2 CHARACTERS
12192  3719                        ; OTHERWISE WE ARE OVERLAPPING, SO WE NEED TO CHECK 3
12193  3719  A4 04                 LDY PARAM2                      ; FETCH THE SPRITES Y CHARACTER POSITION
12194  371B  C8                    INY                             ; ADD 1 (ONE CHARACTER LINE DOWN)
12195  371C                        
12196  371C  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THAT SCREEN LINE
12197  371F             
12198  371F  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES X POSITION AND STORE IT IN Y
12199  3721  C8                    INY                             ; ADD 1 CHARACTER (RIGHT)
12200  3722  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE SCREEN CHARACTER
12201  3724  20 4D 38              JSR ENEMYTESTBLOCKING           ; SEE IF IT'S A BLOCKING CHARACTER
12202  3727                        ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12203  3727                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12204  3727             
12205  3727             
12206  3727  D0 1F                 BNE @BLOCKEDRIGHT               ; RETURN IF IT IS
12207  3729             
12208  3729             @RIGHTCHECK2 ; CHECK THE 2 CHARACTERS TO THE RIGHT OF THE SPRITE
12209  3729  A4 04                 LDY PARAM2
12210  372B  88                    DEY                             ; SUBTRACT ONE (ONE CHARACTER DOWN)
12211  372C                        
12212  372C  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THAT LINE
12213  372F                        
12214  372F  A4 03                 LDY PARAM1                      ; LOAD THE ADJUSTED X CHARACTER POSITION IN Y
12215  3731  C8                    INY                             ; ADD ONE CHARACTER TO THE RIGHT
12216  3732             
12217  3732  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE CHARACTER
12218  3734  20 4D 38              JSR ENEMYTESTBLOCKING           ; TEST THE CHARACTER FOR BLOCKING
12219  3737                        ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12220  3737                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12221  3737             
12222  3737  D0 0F                 BNE @BLOCKEDRIGHT               ; EXIT AND RETURN THE CODE IF BLOCKING
12223  3739             
12224  3739  98                    TYA                             ; ADD #40 TO THE CURRENT X POSITION
12225  373A  18                    CLC                             ; THIS IS THE SAME AS GOING DOWN ONE BLOCK
12226  373B  69 28                 ADC #40
12227  373D  A8                    TAY
12228  373E  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; LOAD THE CHARACTER TO CHECKMOVEDOWN
12229  3740  20 4D 38              JSR ENEMYTESTBLOCKING           ; TEST IT
12230  3743                        ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12231  3743                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12232  3743             
12233  3743  D0 03                 BNE @BLOCKEDRIGHT               ; RETURN THE CODE IF BLOCKING
12234  3745             
12235  3745  A9 00                 LDA #0                          ; ELSE RETURN WITH A 'CLEAR' CODE
12236  3747  60                    RTS
12237  3748             
12238  3748             @BLOCKEDRIGHT 
12239  3748  A9 01                 LDA #1
12240  374A  60                    RTS
12241  374B                        
12242  374B             
12243  374B             ;-------------------------------------------------------------------------------
12244  374B             ;===============================================================================
12245  374B             ; ENEMY CHECK MOVE DOWN
12246  374B             ;-------------------------------------------------------------------------------
12247  374B             ;
12248  374B             ; X = SPRITE WE WANT TO CHECK FOR
12249  374B             ;
12250  374B             ; RETURNS : A = 0 WE MOVE OR A = 1 WE ARE BLOCKED
12251  374B             ;
12252  374B             ; MODIFIES : Y,PARAM1, PARAM2
12253  374B             ;            X IS LEFT INTACT
12254  374B             ;-------------------------------------------------------------------------------
12255  374B             
12256  374B             ENEMYCHECKMOVEDOWN 
12257  374B             
12258  374B  BD 72 35              LDA SPRITE_CHAR_POS_X,X           ; FETCH THE SPRITES X CHARACTER COORD
12259  374E  85 03                 STA PARAM1                              ; PARAM1 WILL HOLD THE ADJUSTED Y COORD
12260  3750  BD 93 35              LDA SPRITE_CHAR_POS_Y,X           ; FETCH THE SPRITES Y CHARACTER COORD
12261  3753  85 04                 STA PARAM2                              ; PARAM2 WILL HOLD THE ADJUSTED Y COORD
12262  3755             
12263  3755             
12264  3755                        ; ADJUST THE Y DELTA AND POS Y VALUES
12265  3755  BD 8B 35              LDA SPRITE_POS_Y_DELTA,X          ; LOAD THE DELTA Y
12266  3758  38                    SEC
12267  3759  E5 2A                 SBC SCROLL_COUNT_Y                      ; SUBTRACT THE Y SCROLL COUNT
12268  375B  10 02                 BPL @NOADJUSTY                          ; IF IT'S LESS THAN 0, ADJUST Y POS
12269  375D             
12270  375D  C6 04                 DEC PARAM2
12271  375F             
12272  375F             
12273  375F             @NOADJUSTY 
12274  375F  29 07                 AND #%0111                              ; MASK BACK TO 0-7 VALUE
12275  3761                        ; IF ADJUSTED DELTA Y IS 0, WE ARE FLUSH
12276  3761  F0 03                 BEQ @DOWNCHECK                          ; AND DO A CHARACTER CHECK
12277  3763  A9 00                 LDA #0                                  ; ELSE RETURN A CLEAR CODE
12278  3765  60                    RTS
12279  3766                        
12280  3766             
12281  3766             @DOWNCHECK 
12282  3766  BD 6A 35              LDA SPRITE_POS_X_DELTA,X           ; CHECK THE X DELTA, IF IT'S FLUSH (0) WE ONLY
12283  3769  38                    SEC
12284  376A  E5 29                 SBC SCROLL_COUNT_X
12285  376C  10 02                 BPL @NOADJX
12286  376E             
12287  376E  C6 03                 DEC PARAM1
12288  3770             
12289  3770             @NOADJX
12290  3770  29 07                 AND #%0111                              ; (MASK AT 0-7 PIXELS)
12291  3772  F0 10                 BEQ @DOWNCHECK2                         ; NEED TO CHECK 2 CHARACTERS
12292  3774             
12293  3774  A4 04                 LDY PARAM2                              ; LOAD THE ADJUSTED Y CHARACTER LINE
12294  3776  C8                    INY                                     ; INCREMENT TO ONE LINE DOWN
12295  3777             
12296  3777  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS
12297  377A                        ; LOAD SPRITE X CHAR POSITION
12298  377A  A4 03                 LDY PARAM1
12299  377C  C8                    INY                                     ; INC X POS (LEFT CHARACTER)
12300  377D  B1 17                 LDA (ZEROPAGE_POINTER_1),Y              ; FETCH THE CHARACTER
12301  377F             
12302  377F  20 4D 38              JSR ENEMYTESTBLOCKING                   ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12303  3782                        ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12304  3782  D0 12                 BNE @DOWNBLOCKED
12305  3784             
12306  3784             @DOWNCHECK2 
12307  3784  A4 04                 LDY PARAM2                              ; LOAD SPRITE Y CHAR COORD
12308  3786  C8                    INY                                     ; INCREMENT DOWN ONE LINE
12309  3787             
12310  3787  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS           ;SAVES DATA IN ZEROPPAGE_POINTER_1
12311  378A                        
12312  378A  A4 03                 LDY PARAM1
12313  378C  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12314  378E             
12315  378E  20 4D 38              JSR ENEMYTESTBLOCKING                   ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12316  3791                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12317  3791  D0 03                 BNE @DOWNBLOCKED
12318  3793             
12319  3793  A9 00                 LDA #0
12320  3795  60                    RTS
12321  3796             
12322  3796             @DOWNBLOCKED 
12323  3796  60                    RTS
12324  3797             
12325  3797             
12326  3797             ;===============================================================================
12327  3797             ; ENEMY CHECK MOVE UP
12328  3797             ;-------------------------------------------------------------------------------
12329  3797             ; CHECKS AHEAD TO SEE IF THIS SPRITE CAN MOVE UP, OR IF IT'S GOING TO BE STOPPED
12330  3797             ; BY A BLOCKING CHARACTER
12331  3797             ;
12332  3797             ; X = SPRITE WE WANT TO CHECK FOR
12333  3797             ;
12334  3797             ; RETURNS A = 0 WE CAN MOVE OR A = 1 WE ARE BLOCKED
12335  3797             ;
12336  3797             ; MODIFIES Y,PARAM1,PARAM2
12337  3797             ;-------------------------------------------------------------------------------
12338  3797             
12339  3797             ENEMYCHECKMOVEUP 
12340  3797  BD 72 35              LDA SPRITE_CHAR_POS_X,X                 ; LOAD SPRITES X CHARACTER POS
12341  379A  85 03                 STA PARAM1                              ; ADJUSTED X CHAR POS WILL BE IN PARAM1
12342  379C  BD 93 35              LDA SPRITE_CHAR_POS_Y,X                 ; ADJUSTED Y CHARACTER POS
12343  379F  85 04                 STA PARAM2                              ; LOAD SPRITES Y CHARACTER POS
12344  37A1             
12345  37A1  BD 8B 35              LDA SPRITE_POS_Y_DELTA,X                ; LOAD SPRITES Y DELTA
12346  37A4  38                    SEC                                     ; SUBTRACT Y SCROLL VALUE
12347  37A5  E5 2A                 SBC SCROLL_COUNT_Y
12348  37A7  10 02                 BPL @NOADJY                             ; IF IT WRAPS PAST 0 - ADJUST Y CHAR POS
12349  37A9             
12350  37A9  C6 04                 DEC PARAM2
12351  37AB             
12352  37AB             @NOADJY
12353  37AB  29 07                 AND #%0111                              ; MASK BACK TO A VALUE OF 0-7
12354  37AD  F0 03                 BEQ @CHECKUP                            ; IF IT'S 0 - WE ARE FLUSH AND DO A CHECK
12355  37AF  A9 00                 LDA #0                                  ; OTHERWISE RETURN WITH A 'CLEAR' CODE
12356  37B1  60                    RTS
12357  37B2             
12358  37B2             @CHECKUP
12359  37B2  BD 6A 35              LDA SPRITE_POS_X_DELTA,X                ; LOAD THE SPRITE X DELTA VALUE
12360  37B5  38                    SEC
12361  37B6  E5 29                 SBC SCROLL_COUNT_X                      ; SUBTRACT CURRENT SCROLL X VALUE
12362  37B8  10 02                 BPL @NOADJX                             ; IF IT WRAPS PAST 0 - ADJUST THE X CHAR POS
12363  37BA             
12364  37BA  C6 03                 DEC PARAM1
12365  37BC             
12366  37BC             @NOADJX    
12367  37BC  29 07                 AND #%0111                              ; MASK BACK TO A 0-7 VALUE
12368  37BE  F0 11                 BEQ @CHECKUP2                           ; IF WE ARE NOT FLUSH WE NEED TO CHECK 2 CHARACTERS
12369  37C0             
12370  37C0  A4 04                 LDY PARAM2                              ; FETCH THE ADJUSTED SPRITE Y CHAR COORD
12371  37C2  88                    DEY                                     ; SUBTRACT 2 LINES (UP)
12372  37C3  88                    DEY
12373  37C4                        
12374  37C4  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS
12375  37C7             
12376  37C7  A4 03                 LDY PARAM1                              ; LOAD ADJUSTED X CHARACTER POS
12377  37C9  C8                    INY                                     ; INC X BY 1 (ONE CHAR RIGHT)
12378  37CA  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12379  37CC                        
12380  37CC             
12381  37CC  20 4D 38              JSR ENEMYTESTBLOCKING                   ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12382  37CF                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12383  37CF  D0 13                 BNE @UPBLOCKED
12384  37D1             
12385  37D1             
12386  37D1             @CHECKUP2
12387  37D1  A4 04                 LDY PARAM2                              ; LOAD THE ADJUSTED SPRITE CHAR Y POSITION
12388  37D3  88                    DEY                                     ; DECREMENT (GO UP) BY 2 LINES
12389  37D4  88                    DEY
12390  37D5             
12391  37D5  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS
12392  37D8             
12393  37D8  A4 03                 LDY PARAM1                              ; LOAD ADJUSTED X CHARACTER POSITION
12394  37DA             
12395  37DA  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12396  37DC  20 4D 38              JSR ENEMYTESTBLOCKING                   ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12397  37DF                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12398  37DF  D0 03                 BNE @UPBLOCKED
12399  37E1             
12400  37E1  A9 00                 LDA #0
12401  37E3  60                    RTS
12402  37E4             
12403  37E4             @UPBLOCKED 
12404  37E4  A9 01                 LDA #1
12405  37E6  60                    RTS
12406  37E7             
12407  37E7             
12408  37E7             
12409  37E7             ;===============================================================================
12410  37E7             ; ENEMY CHECK BLOCK UNDER
12411  37E7             ;-------------------------------------------------------------------------------
12412  37E7             ; CHECK THE BLOCK UNDER THE SPRITE FOR COLLISION (USEFULL FOR THINGS LIKE
12413  37E7             ; ROPES AND CHESTS)
12414  37E7             ;-------------------------------------------------------------------------------
12415  37E7             
12416  37E7             ENEMYCHECKBLOCKUNDER 
12417  37E7  BD 72 35              LDA SPRITE_CHAR_POS_X,X   ; PARAM1 WILL HOLD THE ADJUSTED X POSITION
12418  37EA  85 03                 STA PARAM1
12419  37EC  BD 93 35              LDA SPRITE_CHAR_POS_Y,X   ; PARAM2 WILL HOLD THE ADJUSTED Y POSITION
12420  37EF  85 04                 STA PARAM2
12421  37F1             
12422  37F1  AD 6A 35              LDA SPRITE_POS_X_DELTA    ; FETCH X DELTA
12423  37F4  38                    SEC
12424  37F5  E5 29                 SBC SCROLL_COUNT_X              ; SUBTRACT THE SCROLL COUNT
12425  37F7  18                    CLC
12426  37F8  69 03                 ADC #3
12427  37FA  10 02                 BPL @NOADJX                     ; IF IT'S 0 OR GREATER, DON'T ADJUST X POSITION
12428  37FC  C6 03                 DEC PARAM1                      ; OTHERWISE SUBTRACT 1
12429  37FE             
12430  37FE             @NOADJX
12431  37FE  29 07                 AND #%0111                      ; MASK DELTA BACK TO A VALUE BETWEEN 0-7
12432  3800  F0 00                 BEQ @ADJY                       ; WE ARE FLUSH ON THE X AXIS - DO CHECK ON Y
12433  3802                        ; OTHERWISE ?? I COULD DO ANOTHER SET OF LOOKUPS
12434  3802                        ; BASED ON 'NON FLUSH'
12435  3802             
12436  3802             
12437  3802             @ADJY
12438  3802  AD 8B 35              LDA SPRITE_POS_Y_DELTA    ; FETCH THE Y DELTA
12439  3805  38                    SEC
12440  3806  E5 2A                 SBC SCROLL_COUNT_Y
12441  3808  10 02                 BPL @NOADJY
12442  380A  C6 04                 DEC PARAM2
12443  380C             
12444  380C             @NOADJY
12445  380C  29 07                 AND #%0111                      ; IF WE ARE FLUSH ON Y WE ONLY NEED TO CHECK 2 CHARACTERS
12446  380E  F0 14                 BEQ @UNDERCHECK2                ; OTHERWISE WE NEED TO CHECK 3
12447  3810             
12448  3810             @UNDERCHECK 
12449  3810  A4 04                 LDY PARAM2                      ; FETCH THE ADJUSTED Y POSITION
12450  3812  C8                    INY                             ; ADD ONE LINE (DOWN)
12451  3813                        
12452  3813  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THE SCREEN LINE
12453  3816                        ; RETURNED IN ZEROPAGE_POINTER_1
12454  3816  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES ADJUSTED X CHARACTER POSITION
12455  3818  B1 17                 LDA (ZEROPAGE_POINTER_1),Y      ; FETCH THE SCREEN CHARACTER
12456  381A  20 4D 38              JSR ENEMYTESTBLOCKING           ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12457  381D  D0 2A                 BNE @BLOCKINGUNDER              ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12458  381F                        
12459  381F  AD 7D 38              LDA ENEMY_COLLIDER_ATTR
12460  3822  D0 28                 BNE @SPECIAL_UNDER               ; A SPECIAL BLOCK IS UNDER US - EXIT
12461  3824             
12462  3824             @UNDERCHECK2 
12463  3824  A4 04                 LDY PARAM2                      ; FETCH THE ADJUSTED Y POSITION
12464  3826  88                    DEY                             ; ONE LINE UP
12465  3827  20 BB 1F              JSR FETCHPLAYFIELDLINEADDRESS   ; FETCH THE ADDRESS FOR THE START OF THE SCREEN LINE
12466  382A                        ; RETURNED IN ZEROPAGE_POINTER_1
12467  382A  A4 03                 LDY PARAM1                      ; FETCH THE SPRITES ADJUSTED X CHARACTER POSITION
12468  382C  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12469  382E  20 4D 38              JSR ENEMYTESTBLOCKING           ; CHECKS COLL_ROPE, COLL_FLOOR, COLL_STAIRS
12470  3831                        ; RETURNS: 0 = CAN MOVE : 1 = BLOCKED
12471  3831  D0 16                 BNE @BLOCKINGUNDER
12472  3833  AD 7D 38              LDA ENEMY_COLLIDER_ATTR         ; NO BLOCKED, CONTINUE
12473  3836  D0 14                 BNE @SPECIAL_UNDER
12474  3838             
12475  3838  98                    TYA
12476  3839  18                    CLC
12477  383A  69 28                 ADC #40
12478  383C  A8                    TAY
12479  383D  B1 17                 LDA (ZEROPAGE_POINTER_1),Y
12480  383F  D0 08                 BNE @BLOCKINGUNDER
12481  3841  AD 7D 38              LDA ENEMY_COLLIDER_ATTR
12482  3844  D0 06                 BNE @SPECIAL_UNDER
12483  3846  A9 00                 LDA #0                          ; RETURNS 0 = NO BLOCK EXIST (FREE SPACE)
12484  3848  60                    RTS
12485  3849             @BLOCKINGUNDER 
12486  3849  A9 01                 LDA #1                          ; CHARACTER HAS BEEN BLOCKED
12487  384B  60                    RTS
12488  384C             @SPECIAL_UNDER ; RETURN THE 'SPECIAL - NOT 1 OR 2'
12489  384C  60                    RTS
12490  384D             
12491  384D             ;===============================================================================
12492  384D             ; ENEMY TEST CHARACTER FOR BLOCKING
12493  384D             ;===============================================================================
12494  384D             ; ORIGINALLY WE HAD A SIMPLE CHECK FOR BLOCKING CHARACTERS > 128. USING CHARPAD
12495  384D             ; WE CAN TEST FOR ATTRIBUTES WE ENCODE IN THE UPPER HALF BYTE OF THE COLOR INFO
12496  384D             ; NOTE : IT SEEMS YOU CAN'T READ THIS BACK DIRECTLY FROM COLOR RAM, BUT WE CAN
12497  384D             ;        LOOK IT UP EASILY ENOUGH GIVEN THE CHARACTER NUMBER.
12498  384D             ;
12499  384D             ;
12500  384D             ;
12501  384D             ; A = CHARACTER NUMBER WE'RE CHECKING AGAINST
12502  384D             ; RETURNS: A = 0 OR 1 (CLEAR - BLOCKED) AND STORES THE COLLISON ATTRIBUTE
12503  384D             ; SO WE CAN TEST AGAINST IT
12504  384D             ;
12505  384D             ; MODIFIES A
12506  384D             ; RESTORES X, Y
12507  384D             ;-------------------------------------------------------------------------------
12508  384D             ; COLLIDER CODES
12509  384D             ;-------------------------------------------------------------------------------
12510  384D             COLL_CLEAR = $00
12511  384D             COLL_FLOOR = $10
12512  384D             COLL_STAIR = $20
12513  384D             COLL_ROPE  = $30
12514  384D             
12515  384D             ;-------------------------------------------------------------------------------
12516  384D             
12517  384D             ENEMYTESTBLOCKING 
12518  384D                        
12519  384D  8D 7D 38              STA ENEMY_COLLIDER_ATTR       ; SAVE THE INFO PASSED TO US, WE NEED TO USE A
12520  3850                        
12521  3850  8A                    TXA                     ; STORE X AND Y ON THE STACK
12522  3851  48                    PHA                     ; THE ROUTINES WE GO BACK TO NEED THESE INTACT
12523  3852  98                    TYA
12524  3853  48                    PHA
12525  3854             
12526  3854  AE 7D 38              LDX ENEMY_COLLIDER_ATTR       ; LOAD THE CHARACTER NUMBER IN X
12527  3857  BD 20 78              LDA ATTRIBUTE_MEM,X     ; FETCH THE ATTRIBUTE
12528  385A  29 F0                 AND #%11110000          ; MASK THE COLOR INFO - LEAVING THE ATTRIBUTE
12529  385C  8D 7D 38              STA ENEMY_COLLIDER_ATTR       ; STORE IT SO THE REST OF THE PROGRAM CAN USE IT
12530  385F  F0 0E                 BEQ @RETURNCLEAR        ; 0 IS ALWAYS CLEAR - SO RETURN
12531  3861  C9 30                 CMP #COLL_ROPE
12532  3863  F0 0A                 BEQ @RETURNCLEAR        ; ROPES ($30) DON'T BLOCK
12533  3865  C9 10                 CMP #COLL_FLOOR         ; COLL_FLOOR = 16: CHECK FOR SKY BACKGROUND
12534  3867  F0 06                 BEQ @RETURNCLEAR
12535  3869  C9 20                 CMP #COLL_STAIR
12536  386B  F0 02                 BEQ @RETURNCLEAR
12537  386D  D0 07                 BNE @BLOCKING           ; BLOCKING CHARACTER  (COMMENT OUT TO PREVENT BLOCKING)
12538  386F             
12539  386F             
12540  386F             @RETURNCLEAR 
12541  386F  68                    PLA                     ; RESTORE X AND Y OFF THE STACK
12542  3870  A8                    TAY
12543  3871  68                    PLA
12544  3872  AA                    TAX
12545  3873             
12546  3873  A9 00                 LDA #0                  ; RETURN 0 - A CLEAR CODE
12547  3875  60                    RTS
12548  3876             
12549  3876             @BLOCKING
12550  3876                        ; ATM ONLY BASIC COLLIDE INFO - IF NOT 0, WE'RE BLOCKING
12551  3876  68                    PLA                     ; RESTORE X AND Y FROM THE STACK
12552  3877  A8                    TAY
12553  3878  68                    PLA
12554  3879  AA                    TAX
12555  387A             
12556  387A  A9 01                 LDA #1                  ; SET TO BLOCKING AND RETURN
12557  387C             
12558  387C  60                    RTS
12559  387D             
12560  387D             ENEMY_COLLIDER_ATTR ; A PLACE TO STORE OUR ATTRIBUTE, AND READ IT LATER IF NEEDED
12561  387D  00                    BYTE 0
12562  387E             
12563  387E             
12564  387E             
12565  387E             ;===============================================================================
12566  387E             ;  JOYSTICK
12567  387E             ;===============================================================================
12568  387E             DISPLAYSPRITEINFO 
12569  387E             
12570  387E  20 82 38              JSR ADMINTEST
12571  3881  60                    RTS
12572  3882             
12573  3882             ;******************************************************************************
12574  3882             ; TURN OFF REGULAR DISPLAY FOR NOW
12575  3882             ; (IT IS COMMENTED OUT)
12576  3882             ;******************************************************************************
12577  3882             
12578  3882             
12579  3882             ;        LDA JOY_X
12580  3882             ;        BNE DISPLAYSPRITEINFONOW
12581  3882             ;        LDA JOY_Y
12582  3882             ;        BNE DISPLAYSPRITEINFONOW
12583  3882             ;        RTS
12584  3882             
12585  3882             
12586  3882             ; 4/5/25
12587  3882             ; IMPLEMENTED THIS ROUTINE TO TEST WRITE OUT HEX VALUES
12588  3882             ; FOR EXAMPLE: FIRST TESTING CONSISTED OF CHECKING IF
12589  3882             ; ATTRIBUTE2_MEM IS READING DATA INTO ITS MEMORY SINCE
12590  3882             ; THE SPRITE KEPT FALLING THROUGH THE MAP (BACKALLEYWAY)
12591  3882             
12592  3882             ; WE WILL SET UP A LOOP HERE THAT DISPLAYS THE VALUES
12593  3882             ; ON THE SCREEN IN A ROW AS THEY ARE SEEN IN MEMORY.
12594  3882             ; NOTE: C64 DEBUGGER MAY BE HELPFUL HERE LATER.
12595  3882             
12596  3882             
12597  3882             DISPLAYSPRITEINFONOW 
12598  3882             ADMINTEST
12599  3882             
12600  3882             ;MAP_CHAR_MEM
12601  3882             
12602  3882  AD 2E 10              LDA MAPTWOLOADED
12603  3885  A2 13                 LDX #19
12604  3887  A0 03                 LDY #3
12605  3889  20 10 20              JSR DISPLAYBYTE
12606  388C             
12607  388C  AD 10 48              LDA $4800 + 16
12608  388F  A2 13                 LDX #19
12609  3891  A0 06                 LDY #6
12610  3893  20 10 20              JSR DISPLAYBYTE
12611  3896             
12612  3896  AD 11 48              LDA $4800 + 17
12613  3899  A2 13                 LDX #19
12614  389B  A0 09                 LDY #9
12615  389D  20 10 20              JSR DISPLAYBYTE
12616  38A0             
12617  38A0  AD 12 48              LDA $4800 + 18
12618  38A3  A2 13                 LDX #19
12619  38A5  A0 0C                 LDY #12
12620  38A7  20 10 20              JSR DISPLAYBYTE
12621  38AA             
12622  38AA  AD 13 48              LDA $4800 + 19
12623  38AD  A2 13                 LDX #19
12624  38AF  A0 0F                 LDY #15
12625  38B1  20 10 20              JSR DISPLAYBYTE
12626  38B4                        
12627  38B4  AD 14 48              LDA $4800 + 20
12628  38B7  A2 13                 LDX #19
12629  38B9  A0 12                 LDY #18
12630  38BB  20 10 20              JSR DISPLAYBYTE
12631  38BE             
12632  38BE  AD 15 48              LDA $4800 + 21
12633  38C1  A2 13                 LDX #19
12634  38C3  A0 15                 LDY #21
12635  38C5  20 10 20              JSR DISPLAYBYTE
12636  38C8             
12637  38C8  AD B7 0D              LDA HOTELCHARS
12638  38CB  A2 14                 LDX #20
12639  38CD  A0 03                 LDY #3
12640  38CF  20 10 20              JSR DISPLAYBYTE
12641  38D2             
12642  38D2             ;        LDA FILEHI
12643  38D2             ;        LDX #20
12644  38D2             ;        LDY #21
12645  38D2             ;        JSR DISPLAYBYTE
12646  38D2             
12647  38D2             ;        LDA MAP_CHAR_MEM + 17
12648  38D2             ;        LDX #20
12649  38D2             ;        LDY #9
12650  38D2             ;        JSR DISPLAYBYTE
12651  38D2             
12652  38D2             
12653  38D2             
12654  38D2             
12655  38D2  A9 00                 LDA #<SCORE_SCREEN
12656  38D4  85 0A                 STA WPARAM1
12657  38D6  A9 58                 LDA #>SCORE_SCREEN
12658  38D8  85 0B                 STA WPARAM1 + 1
12659  38DA             
12660  38DA  60                    RTS
12661  38DB             
12662  38DB  AD AA 80              LDA ATTRIBUTE2_MEM
12663  38DE  A2 13                 LDX #19
12664  38E0  A0 03                 LDY #3
12665  38E2  20 10 20              JSR DISPLAYBYTE
12666  38E5             
12667  38E5  AD AB 80              LDA ATTRIBUTE2_MEM + 1
12668  38E8  A2 13                 LDX #19
12669  38EA  A0 06                 LDY #6
12670  38EC  20 10 20              JSR DISPLAYBYTE
12671  38EF             
12672  38EF  AD AC 80              LDA ATTRIBUTE2_MEM + 2
12673  38F2  A2 13                 LDX #19
12674  38F4  A0 09                 LDY #9
12675  38F6  20 10 20              JSR DISPLAYBYTE
12676  38F9             
12677  38F9  AD AD 80              LDA ATTRIBUTE2_MEM + 3
12678  38FC  A2 13                 LDX #19
12679  38FE  A0 0C                 LDY #12
12680  3900  20 10 20              JSR DISPLAYBYTE
12681  3903             
12682  3903  AD AE 80              LDA ATTRIBUTE2_MEM + 4
12683  3906  A2 13                 LDX #19
12684  3908  A0 0F                 LDY #15
12685  390A  20 10 20              JSR DISPLAYBYTE
12686  390D             
12687  390D  AD AF 80              LDA ATTRIBUTE2_MEM + 5
12688  3910  A2 13                 LDX #19
12689  3912  A0 12                 LDY #18
12690  3914  20 10 20              JSR DISPLAYBYTE
12691  3917             
12692  3917  AD B0 80              LDA ATTRIBUTE2_MEM + 6
12693  391A  A2 13                 LDX #19
12694  391C  A0 15                 LDY #21
12695  391E  20 10 20              JSR DISPLAYBYTE
12696  3921             
12697  3921  AD B1 80              LDA ATTRIBUTE2_MEM + 7
12698  3924  A2 13                 LDX #19
12699  3926  A0 18                 LDY #24
12700  3928  20 10 20              JSR DISPLAYBYTE
12701  392B                        
12702  392B  AD B2 80              LDA ATTRIBUTE2_MEM + 8
12703  392E  A2 13                 LDX #19
12704  3930  A0 1B                 LDY #27
12705  3932  20 10 20              JSR DISPLAYBYTE
12706  3935             
12707  3935  AD B3 80              LDA ATTRIBUTE2_MEM + 9
12708  3938  A2 13                 LDX #19
12709  393A  A0 1E                 LDY #30
12710  393C  20 10 20              JSR DISPLAYBYTE
12711  393F             
12712  393F  AD B4 80              LDA ATTRIBUTE2_MEM + 10
12713  3942  A2 13                 LDX #19
12714  3944  A0 21                 LDY #33
12715  3946  20 10 20              JSR DISPLAYBYTE
12716  3949             
12717  3949  AD B5 80              LDA ATTRIBUTE2_MEM + 11
12718  394C  A2 13                 LDX #19
12719  394E  A0 24                 LDY #36
12720  3950  20 10 20              JSR DISPLAYBYTE
12721  3953             
12722  3953             
12723  3953             
12724  3953             
12725  3953  A9 00                 LDA #<SCORE_SCREEN
12726  3955  85 0A                 STA WPARAM1
12727  3957  A9 58                 LDA #>SCORE_SCREEN
12728  3959  85 0B                 STA WPARAM1 + 1
12729  395B             
12730  395B             
12731  395B  60                    RTS
12732  395C             
12733  395C             ; LINE 1
12734  395C  AD C2 0A              LDA COLLIDER_ATTR
12735  395F  A2 13                 LDX #19
12736  3961  A0 07                 LDY #7
12737  3963  20 10 20              JSR DISPLAYBYTE
12738  3966             
12739  3966  AD D3 35              LDA ACTIVETIMER
12740  3969  A2 02                 LDX #2
12741  396B  A2 13                 LDX #19
12742  396D  A0 10                 LDY #16
12743  396F  20 10 20              JSR DISPLAYBYTE
12744  3972             
12745  3972  A2 01                 LDX #1
12746  3974  BD 62 35              LDA SPRITE_POS_X,X
12747  3977  A2 13                 LDX #19
12748  3979  A0 19                 LDY #25
12749  397B  20 10 20              JSR DISPLAYBYTE
12750  397E             
12751  397E             
12752  397E             
12753  397E             ; LINE 2
12754  397E  AD 7D 38              LDA ENEMY_COLLIDER_ATTR
12755  3981  A2 14                 LDX #20
12756  3983  A0 07                 LDY #7
12757  3985  20 10 20              JSR DISPLAYBYTE
12758  3988             
12759  3988  AD 4C 18              LDA PLAYER_JUMP_POS
12760  398B  A2 14                 LDX #20
12761  398D  A0 10                 LDY #16
12762  398F  20 10 20              JSR DISPLAYBYTE
12763  3992             
12764  3992  A5 30                 LDA MAP_X_POS
12765  3994  A2 14                 LDX #20
12766  3996  A0 19                 LDY #25
12767  3998  20 10 20              JSR DISPLAYBYTE
12768  399B             
12769  399B  A2 01                 LDX #1
12770  399D  A5 31                 LDA MAP_Y_POS
12771  399F  A2 14                 LDX #20
12772  39A1  A0 21                 LDY #33
12773  39A3  20 10 20              JSR DISPLAYBYTE
12774  39A6             
12775  39A6             ; LINE 3
12776  39A6  A2 03                 LDX #3
12777  39A8  BD 62 35              LDA SPRITE_POS_X,X
12778  39AB  A2 16                 LDX #22
12779  39AD  A0 07                 LDY #7
12780  39AF  20 10 20              JSR DISPLAYBYTE
12781  39B2             
12782  39B2  AD 91 1F              LDA WAITTOFIRECD
12783  39B5  A2 16                 LDX #22
12784  39B7  A0 0F                 LDY #15
12785  39B9  20 10 20              JSR DISPLAYBYTE
12786  39BC             
12787  39BC  AD 90 1F              LDA FIRINGHOLDCD
12788  39BF  A2 16                 LDX #22
12789  39C1  A0 17                 LDY #23
12790  39C3  20 10 20              JSR DISPLAYBYTE
12791  39C6             
12792  39C6  A2 02                 LDX #2
12793  39C8  BD AB 35              LDA SPRITE_ANIM_TIMER,X
12794  39CB  A2 16                 LDX #22
12795  39CD  A0 20                 LDY #32
12796  39CF  20 10 20              JSR DISPLAYBYTE
12797  39D2             
12798  39D2             ; LINE 4
12799  39D2  AD 27 10              LDA GAMESCORE
12800  39D5  A2 17                 LDX #23
12801  39D7  A0 06                 LDY #6
12802  39D9  20 54 0E              JSR SCOREBOARD
12803  39DC             
12804  39DC  AD 8D 1F              LDA ENEMY_BULLETS
12805  39DF  A2 17                 LDX #23
12806  39E1  A0 17                 LDY #23
12807  39E3  20 10 20              JSR DISPLAYBYTE
12808  39E6             
12809  39E6  AD 10 D0              LDA $D010
12810  39E9  A2 17                 LDX #23
12811  39EB  A0 20                 LDY #32
12812  39ED  20 10 20              JSR DISPLAYBYTE
12813  39F0  60                    RTS
12814  39F1             
12815  39F1             SPRITE_CONSOLE_TEXT 
12816  39F1  20 03 0F              BYTE ' COLL:$   TIMR:$   SPCX:$   SPCY:$      /'
12817  3A1A  20 05 0E              BYTE ' ENCO:$   JUMP:$   MAPX:$   MAPY:$      /'
12818  3A43  20 20 20              BYTE '                                        /'
12819  3A6C  20 05 0E              BYTE ' ENYX:$   WFIR:$: FRHD:$   ACTV:$       /'
12820  3A95  20 13 03              BYTE ' SCORE:$      BULLETS:$   MSBX:$            ',0
12821  3AC2             
12822  3AC2             GAME_PANEL_DISPLAY 
12823  3AC2  20 20 20              BYTE '            C64BRAIN.COM                /'
12824  3AEB  20 20 20              BYTE '                                        /'
12825  3B14  20 20 20              BYTE '             GAME DEMO                  /'
12826  3B3D  20 20 20              BYTE '                                        /'
12827  3B66  20 20 20              BYTE '      WITH MULTIPLE SCROLLING MAPS       ',0
12828  3B90             
12829  3B90             
12830  3B90             ADMIN_TEST_DISPLAY 
12831  3B90  20 20 20              BYTE '                                        /'
12832  3BB9  20 20 20              BYTE '                                        /'
12833  3BE2  20 20 20              BYTE '                                        /'
12834  3C0B  20 20 20              BYTE '                                        /'
12835  3C34  20 20 20              BYTE '                                            ',0
12836  3C61             
12837  3C61             JOY_X      ; CURRENT POSITON OF JOYSTICK(2)
12838  3C61  00                    BYTE $00                ; -1 0 OR +1
12839  3C62             JOY_Y
12840  3C62  00                    BYTE $00                ; -1 0 OR +1
12841  3C63             NE_DIR
12842  3C63  00                    BYTE $00
12843  3C64             JOY_NW
12844  3C64  00                    BYTE $00
12845  3C65             
12846  3C65             BUTTON_PRESSED ; HOLDS 1 WHEN THE BUTTON IS HELD DOWN
12847  3C65  00                    BYTE $00
12848  3C66                        ; HOLDS 1 WHEN A SINGLE PRESS IS MADE (BUTTON RELEASED)
12849  3C66             BUTTON_ACTION 
12850  3C66  00                    BYTE $00
12851  3C67             
12852  3C67             ;-------------------------------------------------------------------------------
12853  3C67             ; BIT TABLE
12854  3C67             ; TAKE A VALUE FROM 0 TO 7 AND RETURN IT'S BIT VALUE
12855  3C67             BIT_TABLE
12856  3C67  01 02 04              BYTE 1,2,4,8,16,32,64,128
12857  3C6F             
12858  3C6F             
12859  3C6F             ;*=$4000
12860  3C6F             ;===============================================================================
12861  3C6F             ; VIC MEMORY BLOCK
12862  3C6F             ; CHARSET AND SPRITE DATA
12863  3C6F             ;===============================================================================
12864  3C6F             ; CHARSET AND SPRITE DATA DIRECTLY LOADED HERE.
12865  3C6F             
12866  3C6F             VIC_DATA_INCLUDES 
12867  3C6F             
12868  3C6F             ; VIC VIDEO MEMORY LAYOUT - BANK 1 ($4000 - $7FFF)
12869  3C6F             ; SCREEN_1         = $4000 - $43FF         (SCREEN 0)      ; DOUBLE BUFFERED
12870  3C6F             ; SCREEN_2         = $4400 - $47FF         (SCREEN 1)      ; GAME SCREEN
12871  3C6F             ; MAP_CHARSET1     = $4800 - $5FFF         (CHARSET 1)     ; GAME CHARS (TILES)
12872  3C6F             ; MAP_CHARSET2     = $5000 - $5FFF         (CHARSET 1)     ; GAME CHARS (TILES)
12873  3C6F             ; SCORE_CHARS      = $5800 - $57FF         (CHARSET 2)     ; SCOREBOARD CHARS
12874  3C6F             ; SCORE_SCREEN     = $5800 - $5BFF         (SCREEN 6)      ; SCOREBOARD SCREEN
12875  3C6F             ; SPRITES          = $5COO - $7FFF         (144 SPRITE IMAGES)
12876  3C6F             
12877  3C6F             ;*******************************************************************************
12878  3C6F             ;                             HOTEL MAP
12879  3C6F             ;*******************************************************************************
12880  3C6F             
12881  3C6F             ;*=$4800
12882  3C6F             MAP_CHAR_MEM ; CHARACTER SET FOR MAP SCREEN
12883  3C6F             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FBK - CHARS.BIN"
12884  3C6F             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FTEXTMULTICOLOR - CHARS.BIN"
12885  3C6F             
12886  3C6F             *=$5000
12887  5000             
12888  5000             *=$5800
12889  5800             SCORE_CHAR_MEM 
12890  5800             @          
12891  5800  3C 66 DE   	BYTE	60,102,222,212,218,102,60,0 
12892  5808  38 6C C6   	BYTE	56,108,198,198,254,198,198,0 
12893  5810  FC C6 C6   	BYTE	252,198,198,252,198,198,252,0 
12894  5818  3C 66 C0   	BYTE	60,102,192,192,192,102,60,0 
12895  5820  F8 CC C6   	BYTE	248,204,198,198,198,204,248,0 
12896  5828  7E 60 60   	BYTE	126,96,96,124,96,96,126,0 
12897  5830  7E 60 60   	BYTE	126,96,96,124,96,96,96,0 
12898  5838  3E 60 C0   	BYTE	62,96,192,206,198,102,62,0 
12899  5840  C6 C6 C6   	BYTE	198,198,198,254,198,198,198,0 
12900  5848  7E 18 18   	BYTE	126,24,24,24,24,24,126,0 
12901  5850  06 06 06   	BYTE	6,6,6,6,6,198,124,0 
12902  5858  C6 CC D8   	BYTE	198,204,216,240,248,220,206,0 
12903  5860  60 60 60   	BYTE	96,96,96,96,96,96,126,0 
12904  5868  C6 EE FE   	BYTE	198,238,254,254,214,198,198,0 
12905  5870  C6 E6 F6   	BYTE	198,230,246,254,222,206,198,0 
12906  5878  7C C6 C6   	BYTE	124,198,198,198,198,198,124,0 
12907  5880  FC C6 C6   	BYTE	252,198,198,198,252,192,192,0 
12908  5888  7C C6 C6   	BYTE	124,198,198,198,222,204,122,0 
12909  5890  FC C6 C6   	BYTE	252,198,198,206,248,220,206,0 
12910  5898  78 CC C0   	BYTE	120,204,192,124,6,198,124,0 
12911  58A0  7E 18 18   	BYTE	126,24,24,24,24,24,24,0 
12912  58A8  C6 C6 C6   	BYTE	198,198,198,198,198,198,124,0 
12913  58B0  C6 C6 C6   	BYTE	198,198,198,238,124,56,16,0 
12914  58B8  C6 C6 D6   	BYTE	198,198,214,254,254,238,198,0 
12915  58C0  C6 EE 7C   	BYTE	198,238,124,56,124,238,198,0 
12916  58C8  66 66 66   	BYTE	102,102,102,60,24,24,24,0 
12917  58D0  FE 0E 1C   	BYTE	254,14,28,56,112,224,254,0 
12918  58D8  3C 30 30   	BYTE	60,48,48,48,48,48,60,0 
12919  58E0  0C 12 30   	BYTE	12,18,48,124,48,98,252,0 
12920  58E8  3C 0C 0C   	BYTE	60,12,12,12,12,12,60,0 
12921  58F0  00 18 3C   	BYTE	0,24,60,126,24,24,24,24 
12922  58F8  00 10 30   	BYTE	0,16,48,127,127,48,16,0 
12923  5900  00 00 00   	BYTE	0,0,0,0,0,0,0,0 
12924  5908  18 18 18   	BYTE	24,24,24,24,0,0,24,0 
12925  5910  66 66 66   	BYTE	102,102,102,0,0,0,0,0 
12926  5918  66 66 FF   	BYTE	102,102,255,102,255,102,102,0 
12927  5920  18 3E 60   	BYTE	24,62,96,60,6,124,24,0 
12928  5928  62 66 0C   	BYTE	98,102,12,24,48,102,70,0 
12929  5930  3C 66 3C   	BYTE	60,102,60,56,103,102,63,0 
12930  5938  06 0C 18   	BYTE	6,12,24,0,0,0,0,0 
12931  5940  0C 18 30   	BYTE	12,24,48,48,48,24,12,0 
12932  5948  30 18 0C   	BYTE	48,24,12,12,12,24,48,0 
12933  5950  01 03 07   	BYTE	1,3,7,14,156,248,112,32 
12934  5958  00 18 18   	BYTE	0,24,24,126,24,24,0,0 
12935  5960  00 00 00   	BYTE	0,0,0,0,0,24,24,48 
12936  5968  00 00 00   	BYTE	0,0,0,126,0,0,0,0 
12937  5970  00 00 00   	BYTE	0,0,0,0,0,24,24,0 
12938  5978  00 03 06   	BYTE	0,3,6,12,24,48,96,0 
12939  5980  38 4C C6   	BYTE	56,76,198,198,198,100,56,0 
12940  5988  18 38 18   	BYTE	24,56,24,24,24,24,126,0 
12941  5990  7C C6 0E   	BYTE	124,198,14,60,120,224,254,0 
12942  5998  7E 0C 18   	BYTE	126,12,24,60,6,198,124,0 
12943  59A0  1C 3C 6C   	BYTE	28,60,108,204,254,12,12,0 
12944  59A8  FC C0 FC   	BYTE	252,192,252,6,6,198,124,0 
12945  59B0  3C 60 C0   	BYTE	60,96,192,252,198,198,124,0 
12946  59B8  FE C6 0C   	BYTE	254,198,12,24,48,48,48,0 
12947  59C0  78 C4 E4   	BYTE	120,196,228,120,222,198,124,0 
12948  59C8  7C C6 C6   	BYTE	124,198,198,126,6,12,120,0 
12949  59D0  00 00 18   	BYTE	0,0,24,0,0,24,0,0 
12950  59D8  00 00 18   	BYTE	0,0,24,0,0,24,24,48 
12951  59E0  0E 18 30   	BYTE	14,24,48,96,48,24,14,0 
12952  59E8  00 00 7E   	BYTE	0,0,126,0,126,0,0,0 
12953  59F0  70 18 0C   	BYTE	112,24,12,6,12,24,112,0 
12954  59F8  3C 66 06   	BYTE	60,102,6,12,24,0,24,0 
12955  5A00  00 7F 7F   	BYTE	0,127,127,127,0,247,247,247 
12956  5A08  55 55 55   	BYTE	85,85,85,85,85,85,85,85 
12957  5A10  18 18 18   	BYTE	24,24,24,24,24,24,24,24 
12958  5A18  00 00 00   	BYTE	0,0,0,255,255,0,0,0 
12959  5A20  00 00 FF   	BYTE	0,0,255,255,0,0,0,0 
12960  5A28  00 FF FF   	BYTE	0,255,255,0,0,0,0,0 
12961  5A30  00 00 00   	BYTE	0,0,0,0,255,255,0,0 
12962  5A38  30 30 30   	BYTE	48,48,48,48,48,48,48,48 
12963  5A40  0C 0C 0C   	BYTE	12,12,12,12,12,12,12,12 
12964  5A48  00 00 00   	BYTE	0,0,0,224,240,56,24,24 
12965  5A50  18 18 1C   	BYTE	24,24,28,15,7,0,0,0 
12966  5A58  18 18 38   	BYTE	24,24,56,240,224,0,0,0 
12967  5A60  C0 C0 C0   	BYTE	192,192,192,192,192,192,255,255 
12968  5A68  C0 E0 70   	BYTE	192,224,112,56,28,14,7,3 
12969  5A70  03 07 0E   	BYTE	3,7,14,28,56,112,224,192 
12970  5A78  FF FF C0   	BYTE	255,255,192,192,192,192,192,192 
12971  5A80  FF FF 03   	BYTE	255,255,3,3,3,3,3,3 
12972  5A88  00 3C 7E   	BYTE	0,60,126,126,126,126,60,0 
12973  5A90  00 00 00   	BYTE	0,0,0,0,0,255,255,0 
12974  5A98  36 7F 7F   	BYTE	54,127,127,127,62,28,8,0 
12975  5AA0  60 60 60   	BYTE	96,96,96,96,96,96,96,96 
12976  5AA8  00 00 00   	BYTE	0,0,0,7,15,28,24,24 
12977  5AB0  C3 E7 7E   	BYTE	195,231,126,60,60,126,231,195 
12978  5AB8  00 3C 7E   	BYTE	0,60,126,102,102,126,60,0 
12979  5AC0  18 18 66   	BYTE	24,24,102,102,24,24,60,0 
12980  5AC8  06 06 06   	BYTE	6,6,6,6,6,6,6,6 
12981  5AD0  08 1C 3E   	BYTE	8,28,62,127,62,28,8,0 
12982  5AD8  18 18 18   	BYTE	24,24,24,255,255,24,24,24 
12983  5AE0  C0 C0 30   	BYTE	192,192,48,48,192,192,48,48 
12984  5AE8  18 18 18   	BYTE	24,24,24,24,24,24,24,24 
12985  5AF0  00 00 03   	BYTE	0,0,3,62,118,54,54,0 
12986  5AF8  FF 7F 3F   	BYTE	255,127,63,31,15,7,3,1 
12987  5B00  00 00 00   	BYTE	0,0,0,0,0,0,0,0 
12988  5B08  F0 F0 F0   	BYTE	240,240,240,240,240,240,240,240 
12989  5B10  00 00 00   	BYTE	0,0,0,0,255,255,255,255 
12990  5B18  FF 00 00   	BYTE	255,0,0,0,0,0,0,0 
12991  5B20  00 00 00   	BYTE	0,0,0,0,0,0,0,255 
12992  5B28  C0 C0 C0   	BYTE	192,192,192,192,192,192,192,192 
12993  5B30  CC CC 33   	BYTE	204,204,51,51,204,204,51,51 
12994  5B38  03 03 03   	BYTE	3,3,3,3,3,3,3,3 
12995  5B40  00 00 00   	BYTE	0,0,0,0,204,204,51,51 
12996  5B48  FF FE FC   	BYTE	255,254,252,248,240,224,192,128 
12997  5B50  03 03 03   	BYTE	3,3,3,3,3,3,3,3 
12998  5B58  18 18 18   	BYTE	24,24,24,31,31,24,24,24 
12999  5B60  00 00 00   	BYTE	0,0,0,0,15,15,15,15 
13000  5B68  18 18 18   	BYTE	24,24,24,31,31,0,0,0 
13001  5B70  00 00 00   	BYTE	0,0,0,248,248,24,24,24 
13002  5B78  00 00 00   	BYTE	0,0,0,0,0,0,255,255 
13003  5B80  00 00 00   	BYTE	0,0,0,31,31,24,24,24 
13004  5B88  18 18 18   	BYTE	24,24,24,255,255,0,0,0 
13005  5B90  00 00 00   	BYTE	0,0,0,255,255,24,24,24 
13006  5B98  18 18 18   	BYTE	24,24,24,248,248,24,24,24 
13007  5BA0  C0 C0 C0   	BYTE	192,192,192,192,192,192,192,192 
13008  5BA8  E0 E0 E0   	BYTE	224,224,224,224,224,224,224,224 
13009  5BB0  07 07 07   	BYTE	7,7,7,7,7,7,7,7 
13010  5BB8  FF FF 00   	BYTE	255,255,0,0,0,0,0,0 
13011  5BC0  FF FF FF   	BYTE	255,255,255,0,0,0,0,0 
13012  5BC8  00 00 00   	BYTE	0,0,0,0,0,255,255,255 
13013  5BD0  03 03 03   	BYTE	3,3,3,3,3,3,255,255 
13014  5BD8  00 00 00   	BYTE	0,0,0,0,240,240,240,240 
13015  5BE0  0F 0F 0F   	BYTE	15,15,15,15,0,0,0,0 
13016  5BE8  18 18 18   	BYTE	24,24,24,248,248,0,0,0 
13017  5BF0  F0 F0 F0   	BYTE	240,240,240,240,0,0,0,0 
13018  5BF8  F0 F0 F0   	BYTE	240,240,240,240,15,15,15,15 
13019  5C00  EE 88 E8   	BYTE	238,136,232,40,238,0,0,0 
13020  5C08  E7 C3 99   	BYTE	231,195,153,129,153,153,153,255 
13021  5C10  83 99 99   	BYTE	131,153,153,131,153,153,131,255 
13022  5C18  C3 99 9F   	BYTE	195,153,159,159,159,153,195,255 
13023  5C20  87 93 99   	BYTE	135,147,153,153,153,147,135,255 
13024  5C28  81 9F 9F   	BYTE	129,159,159,135,159,159,129,255 
13025  5C30  81 9F 9F   	BYTE	129,159,159,135,159,159,159,255 
13026  5C38  C3 99 9F   	BYTE	195,153,159,145,153,153,195,255 
13027  5C40  99 99 99   	BYTE	153,153,153,129,153,153,153,255 
13028  5C48  C3 E7 E7   	BYTE	195,231,231,231,231,231,195,255 
13029  5C50  E1 F3 F3   	BYTE	225,243,243,243,243,147,199,255 
13030  5C58  99 93 87   	BYTE	153,147,135,143,135,147,153,255 
13031  5C60  9F 9F 9F   	BYTE	159,159,159,159,159,159,129,255 
13032  5C68  9C 88 80   	BYTE	156,136,128,148,156,156,156,255 
13033  5C70  99 89 81   	BYTE	153,137,129,129,145,153,153,255 
13034  5C78  C3 99 99   	BYTE	195,153,153,153,153,153,195,255 
13035  5C80  00 3C 3C   	BYTE	0,60,60,60,0,60,60,60 
13036  5C88  C3 99 99   	BYTE	195,153,153,153,153,195,241,255 
13037  5C90  83 99 99   	BYTE	131,153,153,131,135,147,153,255 
13038  5C98  C3 99 9F   	BYTE	195,153,159,195,249,153,195,255 
13039  5CA0  81 E7 E7   	BYTE	129,231,231,231,231,231,231,255 
13040  5CA8  99 99 99   	BYTE	153,153,153,153,153,153,195,255 
13041  5CB0  99 99 99   	BYTE	153,153,153,153,153,195,231,255 
13042  5CB8  9C 9C 9C   	BYTE	156,156,156,148,128,136,156,255 
13043  5CC0  99 99 C3   	BYTE	153,153,195,231,195,153,153,255 
13044  5CC8  FF FF FF   	BYTE	255,255,255,255,170,85,170,85 
13045  5CD0  FF FF FF   	BYTE	255,255,255,255,170,85,170,85 
13046  5CD8  C3 CF CF   	BYTE	195,207,207,207,207,207,195,255 
13047  5CE0  F3 ED CF   	BYTE	243,237,207,131,207,157,3,255 
13048  5CE8  C3 F3 F3   	BYTE	195,243,243,243,243,243,195,255 
13049  5CF0  FF E7 C3   	BYTE	255,231,195,129,231,231,231,231 
13050  5CF8  FF EF CF   	BYTE	255,239,207,128,128,207,239,255 
13051  5D00  FF FF FF   	BYTE	255,255,255,255,255,255,255,255 
13052  5D08  E7 E7 E7   	BYTE	231,231,231,231,255,255,231,255 
13053  5D10  99 99 99   	BYTE	153,153,153,255,255,255,255,255 
13054  5D18  99 99 00   	BYTE	153,153,0,153,0,153,153,255 
13055  5D20  E7 C1 9F   	BYTE	231,193,159,195,249,131,231,255 
13056  5D28  9D 99 F3   	BYTE	157,153,243,231,207,153,185,255 
13057  5D30  C3 99 C3   	BYTE	195,153,195,199,152,153,192,255 
13058  5D38  F9 F3 E7   	BYTE	249,243,231,255,255,255,255,255 
13059  5D40  F3 E7 CF   	BYTE	243,231,207,207,207,231,243,255 
13060  5D48  CF E7 F3   	BYTE	207,231,243,243,243,231,207,255 
13061  5D50  FF 99 C3   	BYTE	255,153,195,0,195,153,255,255 
13062  5D58  FF E7 E7   	BYTE	255,231,231,129,231,231,255,255 
13063  5D60  FF FF FF   	BYTE	255,255,255,255,255,231,231,207 
13064  5D68  FF FF FF   	BYTE	255,255,255,129,255,255,255,255 
13065  5D70  FF FF FF   	BYTE	255,255,255,255,255,231,231,255 
13066  5D78  FF FC F9   	BYTE	255,252,249,243,231,207,159,255 
13067  5D80  C3 99 91   	BYTE	195,153,145,137,153,153,195,255 
13068  5D88  E7 E7 C7   	BYTE	231,231,199,231,231,231,129,255 
13069  5D90  C3 99 F9   	BYTE	195,153,249,243,207,159,129,255 
13070  5D98  C3 99 F9   	BYTE	195,153,249,227,249,153,195,255 
13071  5DA0  F9 F1 E1   	BYTE	249,241,225,153,128,249,249,255 
13072  5DA8  81 9F 83   	BYTE	129,159,131,249,249,153,195,255 
13073  5DB0  C3 99 9F   	BYTE	195,153,159,131,153,153,195,255 
13074  5DB8  81 99 F3   	BYTE	129,153,243,231,231,231,231,255 
13075  5DC0  C3 99 99   	BYTE	195,153,153,195,153,153,195,255 
13076  5DC8  C3 99 99   	BYTE	195,153,153,193,249,153,195,255 
13077  5DD0  FF FF E7   	BYTE	255,255,231,255,255,231,255,255 
13078  5DD8  FF FF E7   	BYTE	255,255,231,255,255,231,231,207 
13079  5DE0  F1 E7 CF   	BYTE	241,231,207,159,207,231,241,255 
13080  5DE8  FF FF 81   	BYTE	255,255,129,255,129,255,255,255 
13081  5DF0  8F E7 F3   	BYTE	143,231,243,249,243,231,143,255 
13082  5DF8  C3 99 F9   	BYTE	195,153,249,243,231,255,231,255 
13083  5E00  C3 0F 3C   	BYTE	195,15,60,240,195,15,60,240 
13084  5E08  F7 E3 C1   	BYTE	247,227,193,128,128,227,193,255 
13085  5E10  E7 E7 E7   	BYTE	231,231,231,231,231,231,231,231 
13086  5E18  FF FF FF   	BYTE	255,255,255,0,0,255,255,255 
13087  5E20  FF FF 00   	BYTE	255,255,0,0,255,255,255,255 
13088  5E28  FF 00 00   	BYTE	255,0,0,255,255,255,255,255 
13089  5E30  FF FF FF   	BYTE	255,255,255,255,0,0,255,255 
13090  5E38  CF CF CF   	BYTE	207,207,207,207,207,207,207,207 
13091  5E40  F3 F3 F3   	BYTE	243,243,243,243,243,243,243,243 
13092  5E48  FF FF FF   	BYTE	255,255,255,31,15,199,231,231 
13093  5E50  E7 E7 E3   	BYTE	231,231,227,240,248,255,255,255 
13094  5E58  E7 E7 C7   	BYTE	231,231,199,15,31,255,255,255 
13095  5E60  3F 3F 3F   	BYTE	63,63,63,63,63,63,0,0 
13096  5E68  3F 1F 8F   	BYTE	63,31,143,199,227,241,248,252 
13097  5E70  FC F8 F1   	BYTE	252,248,241,227,199,143,31,63 
13098  5E78  00 00 3F   	BYTE	0,0,63,63,63,63,63,63 
13099  5E80  00 00 FC   	BYTE	0,0,252,252,252,252,252,252 
13100  5E88  FF C3 81   	BYTE	255,195,129,129,129,129,195,255 
13101  5E90  FF FF FF   	BYTE	255,255,255,255,255,0,0,255 
13102  5E98  C9 80 80   	BYTE	201,128,128,128,193,227,247,255 
13103  5EA0  9F 9F 9F   	BYTE	159,159,159,159,159,159,159,159 
13104  5EA8  FF FF FF   	BYTE	255,255,255,248,240,227,231,231 
13105  5EB0  3C 18 81   	BYTE	60,24,129,195,195,129,24,60 
13106  5EB8  FF C3 81   	BYTE	255,195,129,153,153,129,195,255 
13107  5EC0  E7 E7 99   	BYTE	231,231,153,153,231,231,195,255 
13108  5EC8  F9 F9 F9   	BYTE	249,249,249,249,249,249,249,249 
13109  5ED0  F7 E3 C1   	BYTE	247,227,193,128,193,227,247,255 
13110  5ED8  E7 E7 E7   	BYTE	231,231,231,0,0,231,231,231 
13111  5EE0  3F 3F CF   	BYTE	63,63,207,207,63,63,207,207 
13112  5EE8  E7 E7 E7   	BYTE	231,231,231,231,231,231,231,231 
13113  5EF0  FF FF FC   	BYTE	255,255,252,193,137,201,201,255 
13114  5EF8  00 80 C0   	BYTE	0,128,192,224,240,248,252,254 
13115  5F00  FF FF FF   	BYTE	255,255,255,255,255,255,255,255 
13116  5F08  0F 0F 0F   	BYTE	15,15,15,15,15,15,15,15 
13117  5F10  FF FF FF   	BYTE	255,255,255,255,0,0,0,0 
13118  5F18  00 FF FF   	BYTE	0,255,255,255,255,255,255,255 
13119  5F20  FF FF FF   	BYTE	255,255,255,255,255,255,255,0 
13120  5F28  3F 3F 3F   	BYTE	63,63,63,63,63,63,63,63 
13121  5F30  33 33 CC   	BYTE	51,51,204,204,51,51,204,204 
13122  5F38  FC FC FC   	BYTE	252,252,252,252,252,252,252,252 
13123  5F40  FF FF FF   	BYTE	255,255,255,255,51,51,204,204 
13124  5F48  00 01 03   	BYTE	0,1,3,7,15,31,63,127 
13125  5F50  FC FC FC   	BYTE	252,252,252,252,252,252,252,252 
13126  5F58  E7 E7 E7   	BYTE	231,231,231,224,224,231,231,231 
13127  5F60  FF FF FF   	BYTE	255,255,255,255,240,240,240,240 
13128  5F68  E7 E7 E7   	BYTE	231,231,231,224,224,255,255,255 
13129  5F70  FF FF FF   	BYTE	255,255,255,7,7,231,231,231 
13130  5F78  FF FF FF   	BYTE	255,255,255,255,255,255,0,0 
13131  5F80  F7 F7 F7   	BYTE	247,247,247,227,227,227,193,193 
13132  5F88  E7 E7 E7   	BYTE	231,231,231,0,0,255,255,255 
13133  5F90  FF FF FF   	BYTE	255,255,255,0,0,231,231,231 
13134  5F98  E7 E7 E7   	BYTE	231,231,231,7,7,231,231,231 
13135  5FA0  3F 3F 3F   	BYTE	63,63,63,63,63,63,63,63 
13136  5FA8  1F 1F 1F   	BYTE	31,31,31,31,31,31,31,31 
13137  5FB0  F8 F8 F8   	BYTE	248,248,248,248,248,248,248,248 
13138  5FB8  00 00 FF   	BYTE	0,0,255,255,255,255,255,255 
13139  5FC0  00 00 00   	BYTE	0,0,0,255,255,255,255,255 
13140  5FC8  FF FF FF   	BYTE	255,255,255,255,255,0,0,0 
13141  5FD0  FC FC FC   	BYTE	252,252,252,252,252,252,0,0 
13142  5FD8  FF FF FF   	BYTE	255,255,255,255,15,15,15,15 
13143  5FE0  F0 F0 F0   	BYTE	240,240,240,240,255,255,255,255 
13144  5FE8  E7 E7 E7   	BYTE	231,231,231,7,7,255,255,255 
13145  5FF0  0F 0F 0F   	BYTE	15,15,15,15,255,255,255,255 
13146  5FF8  0F 0F 0F   	BYTE	15,15,15,15,240,240,240,240 
13147  6000             @          
13148  6000             INCBIN     "SCORECHARS.CST",0,255           ; CHARACTER SET FOR SCOREBOARD
13149  6000             
13150  6000             *=$5C00
13151  5C00             
13152  5C00             @          
13153  5C00  00 00 30              BYTE $00,$00,$30,$00,$00,$00,$00,$54
13154  5C08  00 00 54              BYTE $00,$00,$54,$00,$00,$54,$00,$00
13155  5C10  FC 00 00              BYTE $FC,$00,$00,$74,$00,$05,$FD,$00
13156  5C18  15 DD 40              BYTE $15,$DD,$40,$5E,$76,$D0,$5E,$5E
13157  5C20  D0 7E 7E              BYTE $D0,$7E,$7E,$F4,$FE,$7E,$F4,$FE
13158  5C28  7A F4 D6              BYTE $7A,$F4,$D6,$9A,$FC,$F6,$9A,$7C
13159  5C30  75 9A 7D              BYTE $75,$9A,$7D,$7F,$96,$5D,$5F,$96
13160  5C38  5D 06 95              BYTE $5D,$06,$95,$FC,$0A,$95,$F4,$00
13161  5C40  A5 77 5F              BYTE $A5,$77,$5F,$67,$DB,$5F,$67,$FF
13162  5C48  82 00 55              BYTE $82,$00,$55,$04,$05,$A7,$11,$1E
13163  5C50  A9 C4 1E              BYTE $A9,$C4,$1E,$A9,$D4,$1E,$A9,$10
13164  5C58  1E 9E 40              BYTE $1E,$9E,$40,$1F,$9E,$90,$07,$9E
13165  5C60  90 07 9E              BYTE $90,$07,$9E,$40,$07,$9E,$40,$07
13166  5C68  9E 40 07              BYTE $9E,$40,$07,$9E,$40,$07,$9E,$40
13167  5C70  01 45 00              BYTE $01,$45,$00,$07,$9E,$40,$07,$9E
13168  5C78  40 1E 57              BYTE $40,$1E,$57,$90,$19,$01,$90,$00
13169  5C80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13170  5C88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13171  5C90  54 00 00              BYTE $54,$00,$00,$54,$00,$00,$54,$00
13172  5C98  00 FC 00              BYTE $00,$FC,$00,$00,$74,$00,$05,$FD
13173  5CA0  00 15 DD              BYTE $00,$15,$DD,$40,$5E,$76,$D0,$5E
13174  5CA8  5E D0 7E              BYTE $5E,$D0,$7E,$7E,$F4,$FE,$7E,$F4
13175  5CB0  FE 7A F4              BYTE $FE,$7A,$F4,$D6,$9A,$F4,$F6,$9A
13176  5CB8  7D 75 9A              BYTE $7D,$75,$9A,$7D,$7F,$66,$5D,$00
13177  5CC0  66 5D 40              BYTE $66,$5D,$40,$A5,$FE,$40,$A5,$F5
13178  5CC8  80 01 55              BYTE $80,$01,$55,$40,$06,$AA,$00,$1E
13179  5CD0  AA 90 1E              BYTE $AA,$90,$1E,$AA,$90,$1E,$AA,$80
13180  5CD8  1E 9E 40              BYTE $1E,$9E,$40,$1F,$9E,$40,$07,$9E
13181  5CE0  40 07 9E              BYTE $40,$07,$9E,$00,$07,$95,$00,$07
13182  5CE8  9B 00 07              BYTE $9B,$00,$07,$9A,$40,$07,$86,$40
13183  5CF0  01 41 00              BYTE $01,$41,$00,$07,$90,$00,$1E,$40
13184  5CF8  00 19 00              BYTE $00,$19,$00,$00,$04,$00,$00,$00
13185  5D00             
13186  5D00             @          
13187  5D00             INCBIN     "YOURSPRITE.SPT",1,4,TRUE        ; IDLE (28,33)
13188  5D00             @          
13189  5D00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13190  5D08  00 00 00              BYTE $00,$00,$00,$00,$00,$54,$00,$00
13191  5D10  54 00 00              BYTE $54,$00,$00,$54,$00,$00,$54,$00
13192  5D18  00 FC 00              BYTE $00,$FC,$00,$00,$74,$00,$01,$FD
13193  5D20  40 05 DD              BYTE $40,$05,$DD,$D0,$1E,$76,$D0,$1E
13194  5D28  5E F4 1E              BYTE $5E,$F4,$1E,$7E,$F4,$7E,$7E,$FD
13195  5D30  7E 7A 7D              BYTE $7E,$7A,$7D,$7E,$9A,$5D,$76,$9A
13196  5D38  7D F6 99              BYTE $7D,$F6,$99,$74,$F6,$A7,$C4,$00
13197  5D40  A7 DD 70              BYTE $A7,$DD,$70,$A4,$E5,$70,$A6,$DE
13198  5D48  80 01 5D              BYTE $80,$01,$5D,$10,$07,$A8,$40,$07
13199  5D50  AA 00 07              BYTE $AA,$00,$07,$AA,$90,$1E,$AA,$90
13200  5D58  1E 9E 90              BYTE $1E,$9E,$90,$1E,$5E,$90,$1E,$9E
13201  5D60  50 17 9E              BYTE $50,$17,$9E,$50,$05,$5E,$50,$07
13202  5D68  9E 50 16              BYTE $9E,$50,$16,$9E,$50,$1E,$5E,$40
13203  5D70  09 15 00              BYTE $09,$15,$00,$00,$1E,$40,$00,$17
13204  5D78  90 00 07              BYTE $90,$00,$07,$90,$00,$01,$40,$00
13205  5D80             
13206  5D80             @          
13207  5D80             INCBIN     "YOURSPRITE.SPT",5,6,TRUE
13208  5D80             @          
13209  5D80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13210  5D88  00 01 55              BYTE $00,$01,$55,$00,$01,$55,$00,$01
13211  5D90  55 00 01              BYTE $55,$00,$01,$55,$00,$00,$54,$00
13212  5D98  02 9A 00              BYTE $02,$9A,$00,$01,$75,$00,$01,$FD
13213  5DA0  00 06 A6              BYTE $00,$06,$A6,$40,$1F,$A6,$D0,$1E
13214  5DA8  A7 D0 7F              BYTE $A7,$D0,$7F,$A7,$F4,$7F,$A7,$F4
13215  5DB0  7E 9A F4              BYTE $7E,$9A,$F4,$FF,$9B,$F4,$F6,$9A
13216  5DB8  3D F6 9A              BYTE $3D,$F6,$9A,$7D,$C6,$6A,$5D,$00
13217  5DC0  6A 5D F6              BYTE $6A,$5D,$F6,$6A,$7D,$D1,$69,$5D
13218  5DC8  82 05 55              BYTE $82,$05,$55,$00,$06,$AA,$40,$1E
13219  5DD0  AA 90 1E              BYTE $AA,$90,$1E,$AA,$90,$1E,$9E,$90
13220  5DD8  1E 56 90              BYTE $1E,$56,$90,$1E,$9E,$90,$07,$9E
13221  5DE0  40 07 9E              BYTE $40,$07,$9E,$40,$07,$9E,$40,$07
13222  5DE8  9E 40 07              BYTE $9E,$40,$07,$9E,$40,$07,$9E,$40
13223  5DF0  01 45 00              BYTE $01,$45,$00,$07,$9E,$40,$07,$9E
13224  5DF8  40 01 45              BYTE $40,$01,$45,$00,$00,$00,$00,$00
13225  5E00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$54
13226  5E08  00 01 55              BYTE $00,$01,$55,$00,$01,$55,$00,$01
13227  5E10  55 00 01              BYTE $55,$00,$01,$55,$00,$01,$55,$00
13228  5E18  00 54 00              BYTE $00,$54,$00,$02,$BA,$00,$01,$FD
13229  5E20  00 06 A6              BYTE $00,$06,$A6,$40,$1F,$A6,$D0,$1F
13230  5E28  A7 D0 1F              BYTE $A7,$D0,$1F,$A6,$F4,$1E,$A7,$F4
13231  5E30  7F 9B F4              BYTE $7F,$9B,$F4,$7E,$9A,$7D,$7F,$9A
13232  5E38  7D 76 9A              BYTE $7D,$76,$9A,$1D,$76,$6A,$1D,$00
13233  5E40  6A 1D D6              BYTE $6A,$1D,$D6,$6A,$7C,$55,$69,$75
13234  5E48  82 01 55              BYTE $82,$01,$55,$7D,$07,$AA,$54,$07
13235  5E50  AA 40 1E              BYTE $AA,$40,$1E,$AA,$40,$1E,$AA,$90
13236  5E58  1E 9E 90              BYTE $1E,$9E,$90,$06,$9E,$90,$07,$97
13237  5E60  90 07 97              BYTE $90,$07,$97,$90,$07,$97,$40,$07
13238  5E68  91 90 07              BYTE $91,$90,$07,$97,$90,$07,$97,$90
13239  5E70  01 41 40              BYTE $01,$41,$40,$07,$90,$00,$07,$90
13240  5E78  00 01 40              BYTE $00,$01,$40,$00,$00,$00,$00,$00
13241  5E80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$54
13242  5E88  00 01 55              BYTE $00,$01,$55,$00,$05,$55,$40,$05
13243  5E90  55 40 05              BYTE $55,$40,$05,$55,$40,$01,$55,$00
13244  5E98  00 54 00              BYTE $00,$54,$00,$00,$74,$00,$00,$FC
13245  5EA0  00 06 A6              BYTE $00,$06,$A6,$40,$1F,$A7,$D0,$1E
13246  5EA8  A6 D0 1E              BYTE $A6,$D0,$1E,$A7,$D0,$1E,$A7,$F4
13247  5EB0  7F 9A F4              BYTE $7F,$9A,$F4,$7F,$9A,$F4,$7E,$9B
13248  5EB8  74 77 9A              BYTE $74,$77,$9A,$74,$F7,$6A,$74,$00
13249  5EC0  6A 7D F7              BYTE $6A,$7D,$F7,$6A,$1D,$D1,$69,$04
13250  5EC8  82 00 55              BYTE $82,$00,$55,$00,$01,$EA,$40,$07
13251  5ED0  AA 40 07              BYTE $AA,$40,$07,$BA,$40,$07,$BE,$40
13252  5ED8  1E 9E 40              BYTE $1E,$9E,$40,$1E,$9E,$40,$1E,$5E
13253  5EE0  40 1E 5E              BYTE $40,$1E,$5E,$40,$0E,$5E,$40,$11
13254  5EE8  5E 40 1E              BYTE $5E,$40,$1E,$5E,$40,$1E,$5E,$40
13255  5EF0  06 55 00              BYTE $06,$55,$00,$01,$1E,$40,$00,$1E
13256  5EF8  40 00 06              BYTE $40,$00,$06,$40,$00,$01,$00,$00
13257  5F00             
13258  5F00             @          
13259  5F00             INCBIN     "YOURSPRITE.SPT",7,12,TRUE        ; ROPE CLIMB (36-39)
13260  5F00             @          
13261  5F00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13262  5F08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13263  5F10  00 00 00              BYTE $00,$00,$00,$00,$00,$05,$50,$00
13264  5F18  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$D4
13265  5F20  00 03 F4              BYTE $00,$03,$F4,$00,$03,$D4,$00,$00
13266  5F28  69 00 01              BYTE $69,$00,$01,$AB,$40,$01,$6F,$40
13267  5F30  01 6F 40              BYTE $01,$6F,$40,$01,$9F,$40,$01,$9F
13268  5F38  40 01 9F              BYTE $40,$01,$9F,$40,$01,$9D,$00,$00
13269  5F40  01 6D 00              BYTE $01,$6D,$00,$01,$6D,$00,$01,$6D
13270  5F48  00 00 7D              BYTE $00,$00,$7D,$00,$00,$55,$00,$01
13271  5F50  AF 40 01              BYTE $AF,$40,$01,$AF,$40,$01,$AB,$40
13272  5F58  01 AB 40              BYTE $01,$AB,$40,$01,$AD,$00,$00,$6D
13273  5F60  00 00 6D              BYTE $00,$00,$6D,$00,$00,$6B,$40,$00
13274  5F68  6B 40 00              BYTE $6B,$40,$00,$6B,$40,$00,$1B,$40
13275  5F70  00 15 40              BYTE $00,$15,$40,$00,$5B,$40,$01,$6B
13276  5F78  40 01 A5              BYTE $40,$01,$A5,$00,$00,$50,$00,$00
13277  5F80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13278  5F88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13279  5F90  00 00 00              BYTE $00,$00,$00,$00,$00,$05,$50,$00
13280  5F98  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$D4
13281  5FA0  00 03 F5              BYTE $00,$03,$F5,$00,$03,$DB,$40,$00
13282  5FA8  6F D0 01              BYTE $6F,$D0,$01,$EF,$D0,$01,$EF,$F4
13283  5FB0  01 6D F4              BYTE $01,$6D,$F4,$01,$69,$F4,$01,$9B
13284  5FB8  7D 01 9A              BYTE $7D,$01,$9A,$DD,$01,$A7,$DD,$00
13285  5FC0  AB DD F5              BYTE $AB,$DD,$F5,$AF,$5F,$DD,$6D,$7D
13286  5FC8  82 1D 96              BYTE $82,$1D,$96,$7D,$04,$7D,$54,$00
13287  5FD0  6F 71 01              BYTE $6F,$71,$01,$AB,$75,$01,$AB,$44
13288  5FD8  01 AB 40              BYTE $01,$AB,$40,$06,$AD,$00,$06,$BD
13289  5FE0  00 06 F7              BYTE $00,$06,$F7,$40,$06,$DF,$40,$1B
13290  5FE8  DE D0 1B              BYTE $DE,$D0,$1B,$7A,$D0,$57,$56,$B4
13291  5FF0  A5 01 94              BYTE $A5,$01,$94,$6A,$40,$69,$1A,$40
13292  5FF8  69 05 01              BYTE $69,$05,$01,$A4,$00,$01,$A4,$00
13293  6000  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13294  6008  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13295  6010  00 00 05              BYTE $00,$00,$05,$50,$00,$05,$50,$00
13296  6018  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$D4
13297  6020  00 03 F4              BYTE $00,$03,$F4,$00,$03,$DD,$00,$01
13298  6028  67 40 01              BYTE $67,$40,$01,$9F,$40,$01,$9F,$40
13299  6030  01 7F 40              BYTE $01,$7F,$40,$01,$7D,$00,$01,$F7
13300  6038  40 07 DB              BYTE $40,$07,$DB,$40,$1F,$5B,$40,$00
13301  6040  A7 6A 40              BYTE $A7,$6A,$40,$AD,$59,$00,$6D,$75
13302  6048  80 7D 96              BYTE $80,$7D,$96,$40,$15,$7D,$00,$0D
13303  6050  AF 40 0D              BYTE $AF,$40,$0D,$AB,$40,$01,$AB,$40
13304  6058  0D 6B 00              BYTE $0D,$6B,$00,$01,$6D,$00,$06,$6B
13305  6060  40 1A 5B              BYTE $40,$1A,$5B,$40,$1A,$DB,$50,$1B
13306  6068  5A D0 1B              BYTE $5A,$D0,$1B,$46,$B4,$57,$06,$B4
13307  6070  A5 01 94              BYTE $A5,$01,$94,$AD,$00,$7D,$7D,$00
13308  6078  6D 14 01              BYTE $6D,$14,$01,$A4,$00,$01,$90,$00
13309  6080             
13310  6080             @          
13311  6080             INCBIN     "YOURSPRITE.SPT",13,18,TRUE       ; WALKING LEFT (14-27)
13312  6080             @          
13313  6080  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13314  6088  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13315  6090  00 00 00              BYTE $00,$00,$00,$05,$50,$00,$05,$50
13316  6098  00 17 C0              BYTE $00,$17,$C0,$00,$17,$40,$00,$17
13317  60A0  C0 00 1F              BYTE $C0,$00,$1F,$C0,$00,$17,$C0,$00
13318  60A8  69 00 01              BYTE $69,$00,$01,$EA,$40,$01,$F9,$40
13319  60B0  01 F9 40              BYTE $01,$F9,$40,$01,$F6,$40,$01,$F6
13320  60B8  40 01 F6              BYTE $40,$01,$F6,$40,$00,$76,$40,$00
13321  60C0  02 79 00              BYTE $02,$79,$00,$01,$75,$00,$01,$7D
13322  60C8  00 00 7D              BYTE $00,$00,$7D,$00,$00,$55,$00,$01
13323  60D0  FA 40 01              BYTE $FA,$40,$01,$FA,$40,$01,$EA,$40
13324  60D8  01 EA 40              BYTE $01,$EA,$40,$00,$7A,$40,$00,$79
13325  60E0  00 00 79              BYTE $00,$00,$79,$00,$01,$E9,$00,$01
13326  60E8  E9 00 01              BYTE $E9,$00,$01,$E9,$00,$01,$E4,$00
13327  60F0  01 54 00              BYTE $01,$54,$00,$01,$E5,$00,$01,$E9
13328  60F8  40 00 5A              BYTE $40,$00,$5A,$40,$00,$05,$00,$00
13329  6100  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13330  6108  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13331  6110  00 00 00              BYTE $00,$00,$00,$05,$50,$00,$05,$50
13332  6118  00 17 C0              BYTE $00,$17,$C0,$00,$17,$40,$00,$17
13333  6120  C0 00 5F              BYTE $C0,$00,$5F,$C0,$01,$E7,$C0,$07
13334  6128  F9 00 07              BYTE $F9,$00,$07,$FB,$40,$1F,$FB,$40
13335  6130  1F 79 40              BYTE $1F,$79,$40,$1F,$69,$40,$7D,$E6
13336  6138  40 77 A6              BYTE $40,$77,$A6,$40,$77,$DA,$40,$00
13337  6140  2A 7E B4              BYTE $2A,$7E,$B4,$3A,$5F,$7C,$39,$76
13338  6148  A0 3D 96              BYTE $A0,$3D,$96,$74,$15,$7D,$10,$0D
13339  6150  F9 00 0D              BYTE $F9,$00,$0D,$EA,$40,$01,$EA,$40
13340  6158  01 EA 40              BYTE $01,$EA,$40,$00,$7A,$90,$00,$7E
13341  6160  90 01 DF              BYTE $90,$01,$DF,$90,$01,$F7,$90,$07
13342  6168  B7 E4 07              BYTE $B7,$E4,$07,$AD,$E4,$1E,$95,$D5
13343  6170  16 40 5A              BYTE $16,$40,$5A,$69,$01,$A9,$69,$01
13344  6178  A4 1A 40              BYTE $A4,$1A,$40,$50,$1A,$40,$00,$00
13345  6180  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13346  6188  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13347  6190  00 00 00              BYTE $00,$00,$00,$05,$50,$00,$05,$50
13348  6198  00 17 C0              BYTE $00,$17,$C0,$00,$17,$40,$00,$17
13349  61A0  C0 00 1F              BYTE $C0,$00,$1F,$C0,$00,$77,$C0,$01
13350  61A8  D9 40 01              BYTE $D9,$40,$01,$F6,$40,$01,$F6,$40
13351  61B0  01 FD 40              BYTE $01,$FD,$40,$00,$7D,$40,$01,$DF
13352  61B8  40 01 E7              BYTE $40,$01,$E7,$D0,$01,$E5,$F4,$00
13353  61C0  1A 77 A5              BYTE $1A,$77,$A5,$3A,$5F,$9D,$39,$F7
13354  61C8  92 1D 96              BYTE $92,$1D,$96,$7D,$04,$7D,$54,$01
13355  61D0  FA 71 01              BYTE $FA,$71,$01,$EA,$75,$01,$EA,$44
13356  61D8  00 E9 70              BYTE $00,$E9,$70,$00,$79,$44,$01,$E9
13357  61E0  90 01 E5              BYTE $90,$01,$E5,$A4,$05,$E7,$A4,$07
13358  61E8  A5 E4 1E              BYTE $A5,$E4,$1E,$91,$E4,$1E,$90,$D5
13359  61F0  16 40 5A              BYTE $16,$40,$5A,$7D,$00,$7A,$79,$00
13360  61F8  7D 1A 40              BYTE $7D,$1A,$40,$14,$06,$40,$00,$00
13361  6200             
13362  6200             @          
13363  6200             INCBIN     "YOURSPRITE.SPT",19,24,TRUE       ; WALKING RIGHT (0 - 13)
13364  6200             @          
13365  6200  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13366  6208  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13367  6210  00 00 00              BYTE $00,$00,$00,$05,$50,$00,$05,$40
13368  6218  00 17 C0              BYTE $00,$17,$C0,$00,$17,$40,$00,$1F
13369  6220  C0 00 17              BYTE $C0,$00,$17,$C0,$00,$17,$00,$00
13370  6228  69 00 01              BYTE $69,$00,$01,$DA,$4C,$01,$F6,$5C
13371  6230  01 F6 74              BYTE $01,$F6,$74,$01,$F6,$7D,$01,$F5
13372  6238  FD 01 FF              BYTE $FD,$01,$FF,$D4,$00,$7F,$40,$00
13373  6240  02 79 00              BYTE $02,$79,$00,$01,$75,$00,$01,$7D
13374  6248  00 00 7D              BYTE $00,$00,$7D,$00,$00,$55,$00,$01
13375  6250  FA 40 01              BYTE $FA,$40,$01,$FA,$40,$01,$EA,$40
13376  6258  01 EA 40              BYTE $01,$EA,$40,$00,$7A,$40,$00,$79
13377  6260  00 00 79              BYTE $00,$00,$79,$00,$01,$E9,$00,$01
13378  6268  E9 00 01              BYTE $E9,$00,$01,$E9,$00,$01,$E4,$00
13379  6270  01 54 00              BYTE $01,$54,$00,$01,$E5,$00,$01,$E9
13380  6278  40 00 5A              BYTE $40,$00,$5A,$40,$00,$05,$00,$00
13381  6280  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13382  6288  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13383  6290  00 00 00              BYTE $00,$00,$00,$05,$50,$00,$05,$50
13384  6298  00 17 C0              BYTE $00,$17,$C0,$00,$17,$40,$00,$17
13385  62A0  C0 00 1F              BYTE $C0,$00,$1F,$C0,$00,$17,$C0,$00
13386  62A8  69 00 01              BYTE $69,$00,$01,$D6,$97,$01,$79,$6B
13387  62B0  01 E9 58              BYTE $01,$E9,$58,$01,$F9,$00,$01,$65
13388  62B8  00 01 F6              BYTE $00,$01,$F6,$00,$00,$76,$00,$00
13389  62C0  02 79 00              BYTE $02,$79,$00,$01,$75,$00,$01,$7D
13390  62C8  00 00 7D              BYTE $00,$00,$7D,$00,$00,$55,$00,$01
13391  62D0  FA 40 01              BYTE $FA,$40,$01,$FA,$40,$01,$EA,$40
13392  62D8  01 EA 40              BYTE $01,$EA,$40,$00,$7A,$40,$00,$79
13393  62E0  00 00 79              BYTE $00,$00,$79,$00,$01,$E9,$00,$01
13394  62E8  E9 00 01              BYTE $E9,$00,$01,$E9,$00,$01,$E4,$00
13395  62F0  01 54 00              BYTE $01,$54,$00,$01,$E5,$00,$01,$E9
13396  62F8  40 00 5A              BYTE $40,$00,$5A,$40,$00,$05,$00,$00
13397  6300             
13398  6300             @          
13399  6300             INCBIN     "YOURSPRITE.SPT",25,28,TRUE       ; PUNCHING TO THE RIGHT
13400  6300             @          
13401  6300  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13402  6308  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13403  6310  00 00 05              BYTE $00,$00,$05,$50,$00,$05,$50,$00
13404  6318  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$D4
13405  6320  00 03 F4              BYTE $00,$03,$F4,$00,$03,$D4,$00,$00
13406  6328  69 00 01              BYTE $69,$00,$01,$AB,$40,$01,$6F,$40
13407  6330  01 6F 40              BYTE $01,$6F,$40,$01,$9F,$40,$01,$9F
13408  6338  40 01 9F              BYTE $40,$01,$9F,$40,$01,$9D,$00,$00
13409  6340  00 6D 80              BYTE $00,$6D,$80,$00,$5D,$40,$00,$7D
13410  6348  40 00 7D              BYTE $40,$00,$7D,$00,$00,$55,$00,$01
13411  6350  AF 40 01              BYTE $AF,$40,$01,$AF,$40,$01,$AB,$40
13412  6358  01 AB 40              BYTE $01,$AB,$40,$01,$AD,$00,$00,$6D
13413  6360  00 00 6D              BYTE $00,$00,$6D,$00,$00,$6B,$40,$00
13414  6368  6B 40 00              BYTE $6B,$40,$00,$6B,$40,$00,$1B,$40
13415  6370  00 15 40              BYTE $00,$15,$40,$00,$5B,$40,$01,$6B
13416  6378  40 01 A5              BYTE $40,$01,$A5,$00,$00,$50,$00,$00
13417  6380  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13418  6388  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13419  6390  00 00 05              BYTE $00,$00,$05,$50,$00,$05,$50,$00
13420  6398  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$D4
13421  63A0  00 03 F4              BYTE $00,$03,$F4,$00,$03,$D4,$00,$00
13422  63A8  69 00 D6              BYTE $69,$00,$D6,$97,$40,$E9,$6D,$40
13423  63B0  25 6B 40              BYTE $25,$6B,$40,$00,$6F,$40,$00,$59
13424  63B8  40 00 9F              BYTE $40,$00,$9F,$40,$00,$9D,$00,$00
13425  63C0  00 6D 80              BYTE $00,$6D,$80,$00,$5D,$40,$00,$7D
13426  63C8  40 00 7D              BYTE $40,$00,$7D,$00,$00,$55,$00,$01
13427  63D0  AF 40 01              BYTE $AF,$40,$01,$AF,$40,$01,$AB,$40
13428  63D8  01 AB 40              BYTE $01,$AB,$40,$01,$AD,$00,$00,$6D
13429  63E0  00 00 6D              BYTE $00,$00,$6D,$00,$00,$6B,$40,$00
13430  63E8  6B 40 00              BYTE $6B,$40,$00,$6B,$40,$00,$1B,$40
13431  63F0  00 15 40              BYTE $00,$15,$40,$00,$5B,$40,$01,$6B
13432  63F8  40 01 A5              BYTE $40,$01,$A5,$00,$00,$50,$00,$00
13433  6400             
13434  6400             @          
13435  6400             INCBIN     "YOURSPRITE.SPT",29,32,TRUE       ; PUNCHING TO THE LEFT
13436  6400             @          
13437  6400  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13438  6408  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13439  6410  00 00 05              BYTE $00,$00,$05,$50,$00,$01,$50,$00
13440  6418  03 D4 00              BYTE $03,$D4,$00,$01,$D4,$00,$03,$F4
13441  6420  00 03 D4              BYTE $00,$03,$D4,$00,$00,$D4,$00,$00
13442  6428  69 00 31              BYTE $69,$00,$31,$A7,$40,$35,$9F,$40
13443  6430  1D 9F 40              BYTE $1D,$9F,$40,$7D,$9F,$40,$7F,$5F
13444  6438  40 17 FF              BYTE $40,$17,$FF,$40,$01,$FD,$00,$00
13445  6440  01 7A 40              BYTE $01,$7A,$40,$03,$7A,$40,$03,$6F
13446  6448  40 01 AB              BYTE $40,$01,$AB,$40,$01,$59,$40,$01
13447  6450  A7 40 01              BYTE $A7,$40,$01,$AB,$40,$01,$AB,$40
13448  6458  01 AB 40              BYTE $01,$AB,$40,$01,$AD,$00,$00,$6D
13449  6460  00 00 6D              BYTE $00,$00,$6D,$00,$00,$6B,$40,$00
13450  6468  6B 40 00              BYTE $6B,$40,$00,$6B,$40,$00,$1B,$40
13451  6470  00 15 00              BYTE $00,$15,$00,$00,$5B,$40,$01,$6B
13452  6478  40 01 A5              BYTE $40,$01,$A5,$00,$00,$54,$00,$00
13453  6480             
13454  6480             @          
13455  6480             INCBIN     "YOURSPRITE.SPT",33,34,TRUE       ; FIGHTING
13456  6480             @          
13457  6480  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13458  6488  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13459  6490  00 00 00              BYTE $00,$00,$00,$55,$00,$00,$54,$00
13460  6498  01 7C 00              BYTE $01,$7C,$00,$01,$74,$00,$01,$FC
13461  64A0  00 01 7C              BYTE $00,$01,$7C,$00,$01,$70,$00,$06
13462  64A8  90 00 1D              BYTE $90,$00,$1D,$A4,$C0,$1F,$65,$C0
13463  64B0  1F 67 40              BYTE $1F,$67,$40,$1F,$67,$D0,$1F,$5F
13464  64B8  D0 1F FD              BYTE $D0,$1F,$FD,$40,$07,$F4,$00,$00
13465  64C0  27 90 00              BYTE $27,$90,$00,$17,$50,$00,$17,$D0
13466  64C8  00 07 D0              BYTE $00,$07,$D0,$00,$05,$50,$00,$1F
13467  64D0  A5 00 1F              BYTE $A5,$00,$1F,$97,$C0,$1E,$7F,$40
13468  64D8  1E A7 C2              BYTE $1E,$A7,$C2,$07,$A5,$CA,$07,$51
13469  64E0  DA 07 90              BYTE $DA,$07,$90,$78,$1E,$90,$50,$1E
13470  64E8  90 00 1E              BYTE $90,$00,$1E,$90,$00,$1E,$40,$00
13471  64F0  15 40 00              BYTE $15,$40,$00,$1E,$50,$00,$1E,$94
13472  64F8  00 05 A4              BYTE $00,$05,$A4,$00,$00,$50,$00,$00
13473  6500  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13474  6508  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13475  6510  00 00 00              BYTE $00,$00,$00,$55,$00,$00,$54,$00
13476  6518  01 7C 00              BYTE $01,$7C,$00,$01,$74,$00,$01,$FC
13477  6520  00 01 7C              BYTE $00,$01,$7C,$00,$01,$70,$00,$06
13478  6528  90 00 1D              BYTE $90,$00,$1D,$A4,$C0,$1F,$65,$C0
13479  6530  1F 67 40              BYTE $1F,$67,$40,$1F,$67,$D0,$1F,$5F
13480  6538  D0 1F FD              BYTE $D0,$1F,$FD,$40,$07,$F4,$00,$00
13481  6540  27 90 01              BYTE $27,$90,$01,$17,$50,$06,$17,$D0
13482  6548  1E 07 D0              BYTE $1E,$07,$D0,$7D,$05,$51,$75,$1F
13483  6550  A5 D5 1F              BYTE $A5,$D5,$1F,$97,$D4,$1E,$7F,$50
13484  6558  1E F5 40              BYTE $1E,$F5,$40,$07,$F5,$00,$07,$54
13485  6560  00 07 90              BYTE $00,$07,$90,$00,$1E,$90,$00,$1E
13486  6568  90 00 1E              BYTE $90,$00,$1E,$90,$00,$1E,$40,$00
13487  6570  15 40 00              BYTE $15,$40,$00,$1E,$50,$00,$1E,$94
13488  6578  00 05 A4              BYTE $00,$05,$A4,$00,$00,$50,$00,$00
13489  6580             
13490  6580             @          
13491  6580             INCBIN     "YOURSPRITE.SPT",35,38,TRUE       ; KICKING TO THE RIGHT
13492  6580             @          
13493  6580  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13494  6588  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13495  6590  00 00 00              BYTE $00,$00,$00,$55,$00,$00,$15,$00
13496  6598  00 3D 40              BYTE $00,$3D,$40,$00,$1D,$40,$00,$3F
13497  65A0  40 00 3D              BYTE $40,$00,$3D,$40,$00,$0D,$40,$00
13498  65A8  06 90 03              BYTE $06,$90,$03,$1A,$74,$03,$59,$F4
13499  65B0  01 D9 F4              BYTE $01,$D9,$F4,$07,$D9,$F4,$07,$F5
13500  65B8  F4 01 7F              BYTE $F4,$01,$7F,$F4,$00,$1F,$D0,$00
13501  65C0  00 06 D8              BYTE $00,$06,$D8,$00,$05,$D4,$00,$07
13502  65C8  D4 00 07              BYTE $D4,$00,$07,$D0,$00,$05,$50,$00
13503  65D0  5A F4 03              BYTE $5A,$F4,$03,$D6,$F4,$01,$FD,$B4
13504  65D8  93 DA B4              BYTE $93,$DA,$B4,$A7,$5A,$D0,$A7,$45
13505  65E0  D0 2D 06              BYTE $D0,$2D,$06,$D0,$05,$06,$B4,$00
13506  65E8  06 B4 00              BYTE $06,$B4,$00,$06,$B4,$00,$01,$B4
13507  65F0  00 01 54              BYTE $00,$01,$54,$00,$05,$B4,$00,$16
13508  65F8  B4 00 1A              BYTE $B4,$00,$1A,$50,$00,$05,$00,$00
13509  6600  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13510  6608  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13511  6610  00 00 00              BYTE $00,$00,$00,$55,$00,$00,$15,$00
13512  6618  00 3D 40              BYTE $00,$3D,$40,$00,$1D,$40,$00,$3F
13513  6620  40 00 3D              BYTE $40,$00,$3D,$40,$00,$0D,$40,$00
13514  6628  06 90 03              BYTE $06,$90,$03,$1A,$74,$03,$59,$F4
13515  6630  01 D9 F4              BYTE $01,$D9,$F4,$07,$D9,$F4,$07,$F5
13516  6638  F4 01 7F              BYTE $F4,$01,$7F,$F4,$00,$1F,$D0,$00
13517  6640  40 06 D8              BYTE $40,$06,$D8,$90,$05,$D4,$B4,$07
13518  6648  D4 7D 07              BYTE $D4,$7D,$07,$D0,$5D,$45,$50,$57
13519  6650  5A F4 17              BYTE $5A,$F4,$17,$D6,$F4,$05,$FD,$B4
13520  6658  01 5F B4              BYTE $01,$5F,$B4,$00,$5F,$D0,$00,$15
13521  6660  D0 00 06              BYTE $D0,$00,$06,$D0,$00,$06,$B4,$00
13522  6668  06 B4 00              BYTE $06,$B4,$00,$06,$B4,$00,$01,$B4
13523  6670  00 01 54              BYTE $00,$01,$54,$00,$05,$B4,$00,$16
13524  6678  B4 00 1A              BYTE $B4,$00,$1A,$50,$00,$05,$00,$00
13525  6680             
13526  6680             @          
13527  6680             INCBIN     "YOURSPRITE.SPT",39,42,TRUE       ; KICKING TO THE LEFT
13528  6680             @          
13529  6680  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13530  6688  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13531  6690  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13532  6698  00 00 00              BYTE $00,$00,$00,$40,$00,$00,$55,$00
13533  66A0  00 D5 40              BYTE $00,$D5,$40,$00,$3D,$55,$00,$55
13534  66A8  55 5A FF              BYTE $55,$5A,$FF,$D5,$5A,$57,$F5,$55
13535  66B0  00 D6 95              BYTE $00,$D6,$95,$00,$15,$55,$00,$3A
13536  66B8  75 00 05              BYTE $75,$00,$05,$96,$00,$00,$00,$00
13537  66C0             
13538  66C0             @          
13539  66C0             INCBIN     "YOURSPRITE.SPT",43,43,TRUE       ; UNUSED
13540  66C0             @          
13541  66C0  00 05 50              BYTE $00,$05,$50,$00,$05,$50,$00,$17
13542  66C8  C0 00 17              BYTE $C0,$00,$17,$40,$00,$17,$C0,$00
13543  66D0  1F C0 00              BYTE $1F,$C0,$00,$17,$C0,$00,$69,$00
13544  66D8  01 D6 97              BYTE $01,$D6,$97,$01,$79,$6B,$01,$E9
13545  66E0  58 01 F9              BYTE $58,$01,$F9,$00,$05,$65,$00,$25
13546  66E8  F6 00 55              BYTE $F6,$00,$55,$AF,$00,$65,$A8,$00
13547  66F0  66 B4 00              BYTE $66,$B4,$00,$65,$D0,$00,$67,$40
13548  66F8  00 6C 00              BYTE $00,$6C,$00,$00,$00,$00,$00,$00
13549  6700  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13550  6708  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13551  6710  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13552  6718  00 00 00              BYTE $00,$00,$00,$50,$00,$00,$55,$00
13553  6720  00 15 40              BYTE $00,$15,$40,$00,$01,$50,$00,$00
13554  6728  55 5A 00              BYTE $55,$5A,$00,$15,$5A,$54,$05,$5A
13555  6730  55 16 95              BYTE $55,$16,$95,$05,$55,$55,$00,$5A
13556  6738  75 00 15              BYTE $75,$00,$15,$96,$00,$00,$00,$00
13557  6740  00 05 50              BYTE $00,$05,$50,$00,$05,$50,$00,$17
13558  6748  C0 00 17              BYTE $C0,$00,$17,$40,$00,$17,$C0,$00
13559  6750  1F C0 00              BYTE $1F,$C0,$00,$17,$C0,$00,$69,$00
13560  6758  01 D6 97              BYTE $01,$D6,$97,$01,$79,$6B,$01,$E9
13561  6760  58 01 F9              BYTE $58,$01,$F9,$00,$05,$65,$00,$25
13562  6768  F6 40 55              BYTE $F6,$40,$55,$AF,$50,$65,$A8,$D4
13563  6770  66 B4 34              BYTE $66,$B4,$34,$65,$D0,$00,$67,$40
13564  6778  00 6C 00              BYTE $00,$6C,$00,$00,$00,$00,$00,$00
13565  6780             
13566  6780             @          
13567  6780             INCBIN     "YOURSPRITE.SPT",44,46,TRUE       ; SWIMMING TO THE RIGHT
13568  6780             @          
13569  6780  05 50 00              BYTE $05,$50,$00,$05,$50,$00,$03,$D4
13570  6788  00 01 D4              BYTE $00,$01,$D4,$00,$03,$D4,$00,$03
13571  6790  F4 00 03              BYTE $F4,$00,$03,$D4,$00,$00,$69,$00
13572  6798  D6 97 40              BYTE $D6,$97,$40,$E9,$6D,$40,$25,$6B
13573  67A0  40 00 6F              BYTE $40,$00,$6F,$40,$00,$59,$50,$00
13574  67A8  9F 58 00              BYTE $9F,$58,$00,$FA,$55,$00,$2A,$59
13575  67B0  00 1E 99              BYTE $00,$1E,$99,$00,$07,$59,$00,$01
13576  67B8  D9 00 00              BYTE $D9,$00,$00,$39,$00,$00,$00,$00
13577  67C0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13578  67C8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13579  67D0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13580  67D8  00 00 00              BYTE $00,$00,$00,$00,$00,$01,$00,$00
13581  67E0  55 00 01              BYTE $55,$00,$01,$57,$00,$55,$7C,$A5
13582  67E8  55 55 A5              BYTE $55,$55,$A5,$57,$FF,$55,$5F,$D5
13583  67F0  56 97 00              BYTE $56,$97,$00,$55,$54,$00,$5D,$AC
13584  67F8  00 96 50              BYTE $00,$96,$50,$00,$00,$00,$00,$00
13585  6800  05 50 00              BYTE $05,$50,$00,$05,$50,$00,$03,$D4
13586  6808  00 01 D4              BYTE $00,$01,$D4,$00,$03,$D4,$00,$03
13587  6810  F4 00 03              BYTE $F4,$00,$03,$D4,$00,$00,$69,$00
13588  6818  D6 97 40              BYTE $D6,$97,$40,$E9,$6D,$40,$25,$6B
13589  6820  40 00 6F              BYTE $40,$00,$6F,$40,$00,$59,$50,$01
13590  6828  9F 58 05              BYTE $9F,$58,$05,$FA,$55,$17,$2A,$59
13591  6830  1C 1E 99              BYTE $1C,$1E,$99,$00,$07,$59,$00,$01
13592  6838  D9 00 00              BYTE $D9,$00,$00,$39,$00,$00,$00,$00
13593  6840  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13594  6848  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13595  6850  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13596  6858  00 00 00              BYTE $00,$00,$00,$00,$00,$05,$00,$00
13597  6860  55 00 01              BYTE $55,$00,$01,$54,$00,$05,$40,$A5
13598  6868  55 00 A5              BYTE $55,$00,$A5,$54,$00,$A5,$50,$15
13599  6870  56 94 55              BYTE $56,$94,$55,$55,$55,$50,$5D,$A5
13600  6878  00 96 54              BYTE $00,$96,$54,$00,$00,$00,$00,$00
13601  6880             
13602  6880             @          
13603  6880             INCBIN     "YOURSPRITE.SPT",47,50,TRUE       ; SWIMMING TO THE LEFT
13604  6880             @          
13605  6880  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13606  6888  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13607  6890  00 00 01              BYTE $00,$00,$01,$54,$00,$01,$54,$00
13608  6898  05 F0 00              BYTE $05,$F0,$00,$05,$D0,$00,$05,$F0
13609  68A0  00 07 F0              BYTE $00,$07,$F0,$00,$05,$F2,$00,$1A
13610  68A8  40 95 75              BYTE $40,$95,$75,$A5,$E5,$5E,$5A,$D0
13611  68B0  7A 59 80              BYTE $7A,$59,$80,$7E,$64,$80,$59,$50
13612  68B8  00 7D 80              BYTE $00,$7D,$80,$00,$1D,$80,$00,$00
13613  68C0  9E 40 00              BYTE $9E,$40,$00,$5D,$40,$00,$5F,$40
13614  68C8  00 1F 40              BYTE $00,$1F,$40,$00,$15,$40,$00,$7E
13615  68D0  90 00 7E              BYTE $90,$00,$7E,$90,$00,$7A,$90,$00
13616  68D8  7A 90 00              BYTE $7A,$90,$00,$1E,$90,$00,$1E,$40
13617  68E0  00 1E 40              BYTE $00,$1E,$40,$00,$7A,$40,$00,$7A
13618  68E8  40 00 7A              BYTE $40,$00,$7A,$40,$00,$79,$00,$00
13619  68F0  55 00 00              BYTE $55,$00,$00,$79,$40,$00,$7A,$50
13620  68F8  00 16 90              BYTE $00,$16,$90,$00,$01,$40,$00,$00
13621  6900             
13622  6900             @          
13623  6900             INCBIN     "YOURSPRITE.SPT",51,52,TRUE       ; PLAYER (GUN TO THE RIGHT)
13624  6900             @          
13625  6900  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13626  6908  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13627  6910  00 00 00              BYTE $00,$00,$00,$15,$40,$00,$15,$40
13628  6918  00 0F 50              BYTE $00,$0F,$50,$00,$07,$50,$00,$0F
13629  6920  50 00 0F              BYTE $50,$00,$0F,$D0,$00,$8F,$50,$56
13630  6928  01 A4 5B              BYTE $01,$A4,$5B,$5A,$5D,$07,$A5,$B5
13631  6930  02 65 AD              BYTE $02,$65,$AD,$02,$19,$BD,$00,$05
13632  6938  65 00 02              BYTE $65,$00,$02,$7D,$00,$02,$74,$00
13633  6940  00 01 B6              BYTE $00,$01,$B6,$00,$01,$75,$00,$01
13634  6948  F5 00 01              BYTE $F5,$00,$01,$F4,$00,$01,$54,$00
13635  6950  06 BD 00              BYTE $06,$BD,$00,$06,$BD,$00,$06,$AD
13636  6958  00 06 AD              BYTE $00,$06,$AD,$00,$06,$B4,$00,$01
13637  6960  B4 00 01              BYTE $B4,$00,$01,$B4,$00,$01,$AD,$00
13638  6968  01 AD 00              BYTE $01,$AD,$00,$01,$AD,$00,$00,$6D
13639  6970  00 00 55              BYTE $00,$00,$55,$00,$01,$6D,$00,$05
13640  6978  AD 00 06              BYTE $AD,$00,$06,$94,$00,$01,$40,$00
13641  6980             
13642  6980             @          
13643  6980             INCBIN     "YOURSPRITE.SPT",53,54,TRUE       ; PLAYER (GUN TO THE LEFT)
13644  6980             @          
13645  6980  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13646  6988  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13647  6990  00 00 03              BYTE $00,$00,$03,$AA,$C0,$03,$AA,$C0
13648  6998  03 96 C0              BYTE $03,$96,$C0,$03,$96,$C0,$00,$00
13649  69A0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13650  69A8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13651  69B0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13652  69B8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13653  69C0             
13654  69C0             @          
13655  69C0             INCBIN     "YOURSPRITE.SPT",55,55,TRUE       ; ENEMY BULLET
13656  69C0             @          
13657  69C0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13658  69C8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13659  69D0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13660  69D8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13661  69E0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13662  69E8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13663  69F0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13664  69F8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13665  6A00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13666  6A08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13667  6A10  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13668  6A18  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13669  6A20  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13670  6A28  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13671  6A30  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13672  6A38  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13673  6A40  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13674  6A48  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13675  6A50  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13676  6A58  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13677  6A60  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13678  6A68  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13679  6A70  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13680  6A78  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13681  6A80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13682  6A88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13683  6A90  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13684  6A98  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13685  6AA0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13686  6AA8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13687  6AB0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13688  6AB8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13689  6AC0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13690  6AC8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13691  6AD0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13692  6AD8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13693  6AE0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13694  6AE8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13695  6AF0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13696  6AF8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13697  6B00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13698  6B08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13699  6B10  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13700  6B18  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13701  6B20  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13702  6B28  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13703  6B30  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13704  6B38  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13705  6B40  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13706  6B48  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13707  6B50  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13708  6B58  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13709  6B60  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13710  6B68  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13711  6B70  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13712  6B78  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13713  6B80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13714  6B88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13715  6B90  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13716  6B98  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13717  6BA0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13718  6BA8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13719  6BB0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13720  6BB8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13721  6BC0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13722  6BC8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13723  6BD0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13724  6BD8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13725  6BE0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13726  6BE8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13727  6BF0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13728  6BF8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13729  6C00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13730  6C08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13731  6C10  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13732  6C18  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13733  6C20  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13734  6C28  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13735  6C30  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13736  6C38  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13737  6C40  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13738  6C48  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13739  6C50  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13740  6C58  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13741  6C60  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13742  6C68  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13743  6C70  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13744  6C78  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13745  6C80             
13746  6C80             @          
13747  6C80             INCBIN     "YOURSPRITE.SPT",56,66,TRUE       ; UNUSED
13748  6C80             @          
13749  6C80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13750  6C88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13751  6C90  05 40 00              BYTE $05,$40,$00,$05,$50,$00,$0D,$50
13752  6C98  00 07 50              BYTE $00,$07,$50,$00,$0F,$50,$00,$05
13753  6CA0  50 00 0D              BYTE $50,$00,$0D,$50,$00,$05,$F0,$A4
13754  6CA8  05 C0 A4              BYTE $05,$C0,$A4,$03,$90,$07,$01,$D4
13755  6CB0  0E 67 64              BYTE $0E,$67,$64,$05,$57,$69,$0D,$AD
13756  6CB8  65 01 55              BYTE $65,$01,$55,$F9,$00,$06,$E9,$00
13757  6CC0  00 0E FC              BYTE $00,$0E,$FC,$00,$0E,$EC,$00,$0A
13758  6CC8  E4 00 0D              BYTE $E4,$00,$0D,$E4,$00,$01,$E4,$00
13759  6CD0  0D 54 00              BYTE $0D,$54,$00,$0E,$95,$00,$0F,$A5
13760  6CD8  00 0E D9              BYTE $00,$0E,$D9,$00,$0F,$A5,$00,$0E
13761  6CE0  94 00 03              BYTE $94,$00,$03,$A4,$00,$03,$E4,$00
13762  6CE8  03 A9 00              BYTE $03,$A9,$00,$03,$E5,$00,$03,$A9
13763  6CF0  00 00 E5              BYTE $00,$00,$E5,$00,$00,$54,$00,$03
13764  6CF8  F4 00 0F              BYTE $F4,$00,$0F,$D4,$00,$05,$40,$00
13765  6D00             
13766  6D00             @          
13767  6D00             INCBIN     "YOURSPRITE.SPT",67,68,TRUE       ; ENEMY SHOOTING LEFT
13768  6D00             @          
13769  6D00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13770  6D08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13771  6D10  00 00 00              BYTE $00,$00,$00,$00,$00,$01,$50,$00
13772  6D18  01 54 00              BYTE $01,$54,$00,$03,$54,$00,$01,$D4
13773  6D20  00 03 D4              BYTE $00,$03,$D4,$00,$01,$74,$00,$03
13774  6D28  54 00 01              BYTE $54,$00,$01,$69,$00,$00,$7A,$40
13775  6D30  00 E9 40              BYTE $00,$E9,$40,$00,$FA,$50,$03,$B9
13776  6D38  90 03 BE              BYTE $90,$03,$BE,$50,$03,$BA,$90,$00
13777  6D40  02 7E 00              BYTE $02,$7E,$00,$02,$7A,$00,$01,$55
13778  6D48  00 03 79              BYTE $00,$03,$79,$00,$00,$79,$00,$03
13779  6D50  55 00 03              BYTE $55,$00,$03,$A5,$40,$03,$E9,$40
13780  6D58  03 B6 40              BYTE $03,$B6,$40,$03,$E9,$40,$03,$A5
13781  6D60  00 00 E9              BYTE $00,$00,$E9,$00,$00,$F9,$00,$00
13782  6D68  EA 40 00              BYTE $EA,$40,$00,$F9,$40,$00,$EA,$40
13783  6D70  00 39 40              BYTE $00,$39,$40,$00,$15,$00,$00,$FD
13784  6D78  00 03 F5              BYTE $00,$03,$F5,$00,$01,$50,$00,$00
13785  6D80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13786  6D88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13787  6D90  00 00 00              BYTE $00,$00,$00,$00,$00,$05,$40,$00
13788  6D98  05 50 00              BYTE $05,$50,$00,$0D,$50,$00,$07,$50
13789  6DA0  00 0F 50              BYTE $00,$0F,$50,$00,$05,$D4,$00,$0D
13790  6DA8  55 00 05              BYTE $55,$00,$05,$A9,$40,$05,$E6,$40
13791  6DB0  00 E9 50              BYTE $00,$E9,$50,$00,$BA,$50,$00,$EE
13792  6DB8  90 00 EF              BYTE $90,$00,$EF,$64,$00,$EE,$94,$00
13793  6DC0  FB E4 00              BYTE $FB,$E4,$00,$EB,$94,$1F,$BB,$D0
13794  6DC8  85 1D 59              BYTE $85,$1D,$59,$79,$19,$96,$79,$04
13795  6DD0  E9 54 03              BYTE $E9,$54,$03,$B9,$40,$03,$E6,$40
13796  6DD8  03 A9 00              BYTE $03,$A9,$00,$03,$E5,$00,$03,$99
13797  6DE0  00 0F A6              BYTE $00,$0F,$A6,$40,$0E,$96,$40,$0E
13798  6DE8  59 90 0B              BYTE $59,$90,$0B,$9A,$50,$0D,$4E,$94
13799  6DF0  1E 43 64              BYTE $1E,$43,$64,$15,$43,$D5,$F5,$00
13800  6DF8  D4 3F 40              BYTE $D4,$3F,$40,$39,$0F,$00,$3D,$00
13801  6E00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13802  6E08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13803  6E10  00 00 00              BYTE $00,$00,$00,$00,$00,$01,$50,$00
13804  6E18  01 54 00              BYTE $01,$54,$00,$03,$54,$00,$01,$D4
13805  6E20  00 03 D4              BYTE $00,$03,$D4,$00,$01,$74,$00,$03
13806  6E28  55 00 01              BYTE $55,$00,$01,$59,$40,$01,$66,$40
13807  6E30  00 E9 40              BYTE $00,$E9,$40,$00,$E6,$40,$03,$99
13808  6E38  00 03 A6              BYTE $00,$03,$A6,$40,$0E,$56,$40,$00
13809  6E40  99 40 3A              BYTE $99,$40,$3A,$7E,$40,$19,$39,$50
13810  6E48  85 1F 79              BYTE $85,$1F,$79,$74,$1D,$55,$30,$05
13811  6E50  E9 00 00              BYTE $E9,$00,$00,$FA,$40,$00,$E9,$40
13812  6E58  00 FA 40              BYTE $00,$FA,$40,$03,$E9,$40,$03,$FA
13813  6E60  40 03 ED              BYTE $40,$03,$ED,$40,$0F,$7A,$40,$0E
13814  6E68  7E 40 0D              BYTE $7E,$40,$0D,$BA,$40,$3E,$4F,$90
13815  6E70  39 4E 90              BYTE $39,$4E,$90,$05,$03,$D0,$F5,$03
13816  6E78  54 7D 00              BYTE $54,$7D,$00,$74,$1D,$01,$F4,$00
13817  6E80             
13818  6E80             @          
13819  6E80             INCBIN     "YOURSPRITE.SPT",69,74,TRUE       ; ENEMY RUNNING LEFT
13820  6E80             @          
13821  6E80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13822  6E88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13823  6E90  05 40 00              BYTE $05,$40,$00,$15,$40,$00,$15,$C0
13824  6E98  00 17 40              BYTE $00,$17,$40,$00,$17,$C0,$00,$15
13825  6EA0  40 00 15              BYTE $40,$00,$15,$C0,$00,$3D,$40,$00
13826  6EA8  0D 40 00              BYTE $0D,$40,$00,$1B,$00,$00,$5D,$00
13827  6EB0  00 6B 00              BYTE $00,$6B,$00,$01,$AF,$00,$01,$6E
13828  6EB8  C0 01 BE              BYTE $C0,$01,$BE,$C0,$01,$AE,$C0,$00
13829  6EC0  00 FE C0              BYTE $00,$FE,$C0,$00,$EE,$C0,$00,$6E
13830  6EC8  80 00 6D              BYTE $80,$00,$6D,$C0,$00,$6D,$00,$00
13831  6ED0  55 C0 01              BYTE $55,$C0,$01,$5A,$C0,$01,$6B,$C0
13832  6ED8  01 9E C0              BYTE $01,$9E,$C0,$01,$6B,$C0,$00,$5A
13833  6EE0  C0 00 6B              BYTE $C0,$00,$6B,$00,$00,$6F,$00,$01
13834  6EE8  AB 00 01              BYTE $AB,$00,$01,$6F,$00,$01,$AB,$00
13835  6EF0  01 6C 00              BYTE $01,$6C,$00,$00,$54,$00,$00,$7F
13836  6EF8  00 00 5F              BYTE $00,$00,$5F,$C0,$00,$05,$40,$00
13837  6F00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13838  6F08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13839  6F10  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$01,$50
13840  6F18  00 05 50              BYTE $00,$05,$50,$00,$05,$70,$00,$05
13841  6F20  D0 00 05              BYTE $D0,$00,$05,$F0,$00,$17,$50,$00
13842  6F28  55 70 01              BYTE $55,$70,$01,$6A,$50,$01,$9B,$50
13843  6F30  05 6B 00              BYTE $05,$6B,$00,$05,$AE,$00,$06,$BB
13844  6F38  00 19 FB              BYTE $00,$19,$FB,$00,$16,$BB,$00,$00
13845  6F40  BC 00 5B              BYTE $BC,$00,$5B,$AC,$00,$1F,$BB,$D0
13846  6F48  85 6D 65              BYTE $85,$6D,$65,$74,$6D,$96,$64,$15
13847  6F50  6B 10 01              BYTE $6B,$10,$01,$6E,$C0,$01,$9B,$C0
13848  6F58  00 6A C0              BYTE $00,$6A,$C0,$00,$5B,$C0,$00,$66
13849  6F60  C0 01 9A              BYTE $C0,$01,$9A,$F0,$01,$96,$B0,$06
13850  6F68  65 B0 05              BYTE $65,$B0,$05,$A6,$E0,$16,$B1,$70
13851  6F70  19 C1 B4              BYTE $19,$C1,$B4,$57,$C1,$54,$17,$00
13852  6F78  5F 6C 01              BYTE $5F,$6C,$01,$FC,$7C,$00,$F0,$00
13853  6F80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13854  6F88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13855  6F90  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$05,$40
13856  6F98  00 15 40              BYTE $00,$15,$40,$00,$15,$C0,$00,$17
13857  6FA0  40 00 17              BYTE $40,$00,$17,$C0,$00,$1D,$40,$00
13858  6FA8  55 C0 01              BYTE $55,$C0,$01,$65,$40,$01,$99,$40
13859  6FB0  01 6B 00              BYTE $01,$6B,$00,$01,$9B,$00,$00,$66
13860  6FB8  C0 01 9A              BYTE $C0,$01,$9A,$C0,$01,$95,$B0,$00
13861  6FC0  66 6C 01              BYTE $66,$6C,$01,$BD,$AC,$05,$6C,$64
13862  6FC8  85 1D 6D              BYTE $85,$1D,$6D,$F4,$0C,$55,$74,$00
13863  6FD0  6B 50 01              BYTE $6B,$50,$01,$AF,$00,$01,$6B,$00
13864  6FD8  01 AF 00              BYTE $01,$AF,$00,$01,$6B,$C0,$01,$AF
13865  6FE0  C0 01 7B              BYTE $C0,$01,$7B,$C0,$01,$AD,$F0,$01
13866  6FE8  BD B0 01              BYTE $BD,$B0,$01,$AE,$70,$06,$F1,$BC
13867  6FF0  06 B1 6C              BYTE $06,$B1,$6C,$07,$C0,$50,$15,$C0
13868  6FF8  5F 1D 00              BYTE $5F,$1D,$00,$7D,$1F,$40,$74,$00
13869  7000             
13870  7000             @          
13871  7000             INCBIN     "YOURSPRITE.SPT",75,80,TRUE       ; ENEMY RUNNING RIGHT
13872  7000             @          
13873  7000  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13874  7008  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$01
13875  7010  50 00 05              BYTE $50,$00,$05,$50,$00,$05,$70,$00
13876  7018  05 D0 00              BYTE $05,$D0,$00,$05,$F0,$00,$05,$50
13877  7020  00 05 70              BYTE $00,$05,$70,$00,$0F,$50,$00,$03
13878  7028  50 1A 06              BYTE $50,$1A,$06,$C0,$1A,$17,$40,$D0
13879  7030  19 D9 B0              BYTE $19,$D9,$B0,$69,$D5,$50,$59,$7A
13880  7038  70 6F 55              BYTE $70,$6F,$55,$40,$6B,$90,$00,$00
13881  7040  3F B0 00              BYTE $3F,$B0,$00,$3B,$B0,$00,$1B,$A0
13882  7048  00 1B 70              BYTE $00,$1B,$70,$00,$1B,$40,$00,$15
13883  7050  70 00 56              BYTE $70,$00,$56,$B0,$00,$5A,$F0,$00
13884  7058  67 B0 00              BYTE $67,$B0,$00,$5A,$F0,$00,$16,$B0
13885  7060  00 1A C0              BYTE $00,$1A,$C0,$00,$1B,$C0,$00,$6A
13886  7068  C0 00 5B              BYTE $C0,$00,$5B,$C0,$00,$6A,$C0,$00
13887  7070  5B 00 00              BYTE $5B,$00,$00,$15,$00,$00,$1F,$C0
13888  7078  00 17 F0              BYTE $00,$17,$F0,$00,$01,$50,$00,$00
13889  7080             
13890  7080             @          
13891  7080             INCBIN     "YOURSPRITE.SPT",81,82,TRUE       ; ENEMY SHOOTING RIGHT
13892  7080             @          
13893  7080  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13894  7088  00 3C 05              BYTE $00,$3C,$05,$40,$3C,$05,$50,$14
13895  7090  0D 50 14              BYTE $0D,$50,$14,$07,$50,$18,$0F,$50
13896  7098  25 05 D0              BYTE $25,$05,$D0,$19,$4D,$54,$06,$55
13897  70A0  65 05 95              BYTE $65,$05,$95,$99,$01,$5B,$A5,$00
13898  70A8  6F 99 00              BYTE $6F,$99,$00,$3E,$64,$00,$1E,$99
13899  70B0  00 39 5B              BYTE $00,$39,$5B,$00,$05,$FF,$00,$17
13900  70B8  FD 00 1F              BYTE $FD,$00,$1F,$F5,$00,$55,$55,$00
13901  70C0  00 15 55              BYTE $00,$15,$55,$01,$6F,$DD,$06,$BF
13902  70C8  FD 1A F7              BYTE $FD,$1A,$F7,$FD,$1B,$F7,$7D,$1B
13903  70D0  D5 FD 1B              BYTE $D5,$FD,$1B,$4D,$F4,$1B,$36,$E4
13904  70D8  06 5B 90              BYTE $06,$5B,$90,$05,$6E,$40,$05,$BD
13905  70E0  00 16 F4              BYTE $00,$16,$F4,$00,$16,$E4,$00,$01
13906  70E8  90 00 05              BYTE $90,$00,$05,$40,$00,$15,$40,$00
13907  70F0  55 00 00              BYTE $55,$00,$00,$14,$00,$00,$00,$00
13908  70F8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13909  7100             
13910  7100             @          
13911  7100             INCBIN     "YOURSPRITE.SPT",83,84,TRUE       ; DEAD SPRITE TO LEFT
13912  7100             @          
13913  7100  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13914  7108  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$01
13915  7110  50 00 05              BYTE $50,$00,$05,$50,$00,$05,$70,$00
13916  7118  05 D0 00              BYTE $05,$D0,$00,$05,$F0,$00,$05,$50
13917  7120  00 05 70              BYTE $00,$05,$70,$0F,$0F,$50,$17,$03
13918  7128  50 1D 06              BYTE $50,$1D,$06,$C0,$17,$17,$40,$64
13919  7130  1A D9 94              BYTE $1A,$D9,$94,$6B,$D5,$50,$5B,$BA
13920  7138  40 6F B5              BYTE $40,$6F,$B5,$40,$6B,$B0,$00,$00
13921  7140  3F B0 00              BYTE $3F,$B0,$00,$3B,$B0,$00,$1B,$A0
13922  7148  00 1B 70              BYTE $00,$1B,$70,$00,$1B,$40,$00,$15
13923  7150  70 00 56              BYTE $70,$00,$56,$B0,$00,$5A,$F0,$00
13924  7158  67 B0 00              BYTE $67,$B0,$00,$5A,$F0,$00,$16,$B0
13925  7160  00 1A C0              BYTE $00,$1A,$C0,$00,$1B,$C0,$00,$6A
13926  7168  C0 00 5B              BYTE $C0,$00,$5B,$C0,$00,$6A,$C0,$00
13927  7170  5B 00 00              BYTE $5B,$00,$00,$15,$00,$00,$1F,$C0
13928  7178  00 17 F0              BYTE $00,$17,$F0,$00,$01,$50,$00,$00
13929  7180  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13930  7188  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$01
13931  7190  50 00 05              BYTE $50,$00,$05,$50,$00,$05,$70,$00
13932  7198  05 D0 00              BYTE $05,$D0,$00,$05,$F0,$00,$05,$50
13933  71A0  00 05 70              BYTE $00,$05,$70,$00,$0F,$50,$00,$03
13934  71A8  50 00 06              BYTE $50,$00,$06,$C0,$00,$17,$40,$00
13935  71B0  1A D9 97              BYTE $1A,$D9,$97,$6B,$D5,$57,$5B,$BA
13936  71B8  57 6F B5              BYTE $57,$6F,$B5,$40,$6B,$B0,$00,$00
13937  71C0  3F B0 00              BYTE $3F,$B0,$00,$3B,$B0,$00,$1B,$A0
13938  71C8  00 1B 70              BYTE $00,$1B,$70,$00,$1B,$40,$00,$15
13939  71D0  70 00 56              BYTE $70,$00,$56,$B0,$00,$5A,$F0,$00
13940  71D8  67 B0 00              BYTE $67,$B0,$00,$5A,$F0,$00,$16,$B0
13941  71E0  00 1A C0              BYTE $00,$1A,$C0,$00,$1B,$C0,$00,$6A
13942  71E8  C0 00 5B              BYTE $C0,$00,$5B,$C0,$00,$6A,$C0,$00
13943  71F0  5B 00 00              BYTE $5B,$00,$00,$15,$00,$00,$1F,$C0
13944  71F8  00 17 F0              BYTE $00,$17,$F0,$00,$01,$50,$00,$00
13945  7200             
13946  7200             @          
13947  7200             INCBIN     "YOURSPRITE.SPT",85,88,TRUE       ; ENEMY ATTACK TO RIGHT
13948  7200             @          
13949  7200  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13950  7208  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13951  7210  05 40 00              BYTE $05,$40,$00,$05,$50,$00,$0D,$50
13952  7218  00 07 50              BYTE $00,$07,$50,$00,$0F,$50,$00,$05
13953  7220  50 F0 0D              BYTE $50,$F0,$0D,$50,$D4,$05,$F0,$74
13954  7228  05 C0 D4              BYTE $05,$C0,$D4,$03,$90,$19,$01,$D4
13955  7230  16 67 A4              BYTE $16,$67,$A4,$05,$57,$E9,$01,$AE
13956  7238  E5 01 5E              BYTE $E5,$01,$5E,$F9,$00,$0E,$E9,$00
13957  7240  00 0E FC              BYTE $00,$0E,$FC,$00,$0E,$EC,$00,$0A
13958  7248  E4 00 0D              BYTE $E4,$00,$0D,$E4,$00,$01,$E4,$00
13959  7250  0D 54 00              BYTE $0D,$54,$00,$0E,$95,$00,$0F,$A5
13960  7258  00 0E D9              BYTE $00,$0E,$D9,$00,$0F,$A5,$00,$0E
13961  7260  94 00 03              BYTE $94,$00,$03,$A4,$00,$03,$E4,$00
13962  7268  03 A9 00              BYTE $03,$A9,$00,$03,$E5,$00,$03,$A9
13963  7270  00 00 E5              BYTE $00,$00,$E5,$00,$00,$54,$00,$03
13964  7278  F4 00 0F              BYTE $F4,$00,$0F,$D4,$00,$05,$40,$00
13965  7280  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13966  7288  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13967  7290  05 40 00              BYTE $05,$40,$00,$05,$50,$00,$0D,$50
13968  7298  00 07 50              BYTE $00,$07,$50,$00,$0F,$50,$00,$05
13969  72A0  50 00 0D              BYTE $50,$00,$0D,$50,$00,$05,$F0,$00
13970  72A8  05 C0 00              BYTE $05,$C0,$00,$03,$90,$00,$01,$D4
13971  72B0  D6 67 A4              BYTE $D6,$67,$A4,$D5,$57,$E9,$D5,$AE
13972  72B8  E5 01 5E              BYTE $E5,$01,$5E,$F9,$00,$0E,$E9,$00
13973  72C0  00 0E FC              BYTE $00,$0E,$FC,$00,$0E,$EC,$00,$0A
13974  72C8  E4 00 0D              BYTE $E4,$00,$0D,$E4,$00,$01,$E4,$00
13975  72D0  0D 54 00              BYTE $0D,$54,$00,$0E,$95,$00,$0F,$A5
13976  72D8  00 0E D9              BYTE $00,$0E,$D9,$00,$0F,$A5,$00,$0E
13977  72E0  94 00 03              BYTE $94,$00,$03,$A4,$00,$03,$E4,$00
13978  72E8  03 A9 00              BYTE $03,$A9,$00,$03,$E5,$00,$03,$A9
13979  72F0  00 00 E5              BYTE $00,$00,$E5,$00,$00,$54,$00,$03
13980  72F8  F4 00 0F              BYTE $F4,$00,$0F,$D4,$00,$05,$40,$00
13981  7300             
13982  7300             @          
13983  7300             INCBIN     "YOURSPRITE.SPT",89,92,TRUE       ; ENEMY ATTACK TO LEFT
13984  7300             @          
13985  7300  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13986  7308  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13987  7310  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13988  7318  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13989  7320  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13990  7328  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13991  7330  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13992  7338  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13993  7340  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13994  7348  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13995  7350  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13996  7358  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13997  7360  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13998  7368  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
13999  7370  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14000  7378  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14001  7380             
14002  7380             @          
14003  7380             INCBIN     "YOURSPRITE.SPT",93,94,TRUE       ; UNUSED
14004  7380             @          
14005  7380  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14006  7388  00 00 05              BYTE $00,$00,$05,$40,$00,$05,$50,$00
14007  7390  0D 50 00              BYTE $0D,$50,$00,$07,$50,$20,$0F,$50
14008  7398  10 05 D0              BYTE $10,$05,$D0,$34,$0D,$54,$19,$05
14009  73A0  64 26 55              BYTE $64,$26,$55,$98,$05,$5B,$A4,$05
14010  73A8  5F 98 01              BYTE $5F,$98,$01,$7E,$64,$00,$DE,$98
14011  73B0  00 79 58              BYTE $00,$79,$58,$00,$05,$FC,$00,$17
14012  73B8  F0 00 1F              BYTE $F0,$00,$1F,$F0,$00,$55,$50,$00
14013  73C0  00 55 54              BYTE $00,$55,$54,$05,$BF,$74,$1A,$FF
14014  73C8  F4 6B DF              BYTE $F4,$6B,$DF,$F4,$6F,$DD,$F4,$6F
14015  73D0  57 F4 6D              BYTE $57,$F4,$6D,$37,$D0,$6C,$DB,$90
14016  73D8  19 6E 40              BYTE $19,$6E,$40,$15,$B9,$00,$16,$F4
14017  73E0  00 5B D0              BYTE $00,$5B,$D0,$00,$5B,$90,$00,$06
14018  73E8  40 00 15              BYTE $40,$00,$15,$00,$00,$55,$00,$00
14019  73F0  54 00 00              BYTE $54,$00,$00,$50,$00,$00,$00,$00
14020  73F8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14021  7400             
14022  7400             @          
14023  7400             INCBIN     "YOURSPRITE.SPT",95,96,TRUE       ; DEAD SPRITE TO LEFT
14024  7400             @          
14025  7400  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14026  7408  00 3C 05              BYTE $00,$3C,$05,$40,$3C,$05,$50,$14
14027  7410  0D 50 14              BYTE $0D,$50,$14,$07,$50,$18,$0F,$50
14028  7418  25 05 D0              BYTE $25,$05,$D0,$19,$4D,$54,$06,$55
14029  7420  65 05 95              BYTE $65,$05,$95,$99,$01,$5B,$A5,$00
14030  7428  6F 99 00              BYTE $6F,$99,$00,$3E,$64,$00,$1E,$99
14031  7430  00 39 5B              BYTE $00,$39,$5B,$00,$05,$FF,$00,$17
14032  7438  FD 00 1F              BYTE $FD,$00,$1F,$F5,$00,$55,$55,$00
14033  7440  00 15 55              BYTE $00,$15,$55,$01,$6F,$DD,$06,$BF
14034  7448  FD 1A F7              BYTE $FD,$1A,$F7,$FD,$1B,$F7,$7D,$1B
14035  7450  D5 FD 1B              BYTE $D5,$FD,$1B,$4D,$F4,$1B,$36,$E4
14036  7458  06 5B 90              BYTE $06,$5B,$90,$05,$6E,$40,$05,$BD
14037  7460  00 16 F4              BYTE $00,$16,$F4,$00,$16,$E4,$00,$01
14038  7468  90 00 05              BYTE $90,$00,$05,$40,$00,$15,$40,$00
14039  7470  55 00 00              BYTE $55,$00,$00,$14,$00,$00,$00,$00
14040  7478  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14041  7480             
14042  7480             @          
14043  7480             INCBIN     "YOURSPRITE.SPT",97,98,TRUE       ; DEAD SPRITE TO LEFT
14044  7480             @          
14045  7480  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14046  7488  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14047  7490  54 00 01              BYTE $54,$00,$01,$55,$00,$01,$55,$00
14048  7498  01 55 00              BYTE $01,$55,$00,$01,$DD,$00,$00,$74
14049  74A0  00 01 FD              BYTE $00,$01,$FD,$00,$05,$55,$C0,$16
14050  74A8  76 F0 1A              BYTE $76,$F0,$1A,$56,$B0,$66,$56,$EC
14051  74B0  5A 6A BC              BYTE $5A,$6A,$BC,$6A,$6A,$AC,$AA,$99
14052  74B8  BB 69 9A              BYTE $BB,$69,$9A,$6F,$A6,$9A,$6B,$00
14053  74C0  A6 6F A5              BYTE $A6,$6F,$A5,$A5,$6B,$5F,$67,$DF
14054  74C8  88 5F 67              BYTE $88,$5F,$67,$C4,$01,$55,$00,$06
14055  74D0  AA C0 1A              BYTE $AA,$C0,$1A,$AA,$B0,$16,$AA,$F0
14056  74D8  1A 66 B0              BYTE $1A,$66,$B0,$16,$9A,$F0,$15,$9A
14057  74E0  B0 06 9A              BYTE $B0,$06,$9A,$C0,$05,$9B,$C0,$06
14058  74E8  9A C0 05              BYTE $9A,$C0,$05,$9B,$C0,$06,$9A,$C0
14059  74F0  05 9B C0              BYTE $05,$9B,$C0,$01,$45,$00,$07,$DF
14060  74F8  40 1F 47              BYTE $40,$1F,$47,$D0,$1D,$01,$D0,$00
14061  7500  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14062  7508  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14063  7510  54 00 01              BYTE $54,$00,$01,$55,$00,$01,$55,$00
14064  7518  01 55 00              BYTE $01,$55,$00,$01,$DD,$00,$00,$74
14065  7520  00 05 FD              BYTE $00,$05,$FD,$00,$15,$55,$C0,$59
14066  7528  75 B0 5A              BYTE $75,$B0,$5A,$56,$F0,$66,$56,$BC
14067  7530  9A 6A AC              BYTE $9A,$6A,$AC,$AA,$6A,$BC,$A6,$99
14068  7538  AF 96 9A              BYTE $AF,$96,$9A,$6B,$A5,$9A,$6F,$00
14069  7540  66 6B 5F              BYTE $66,$6B,$5F,$66,$5F,$05,$A5,$F4
14070  7548  85 02 A9              BYTE $85,$02,$A9,$F4,$01,$55,$00,$06
14071  7550  AA C0 19              BYTE $AA,$C0,$19,$AA,$B0,$16,$99,$F0
14072  7558  1A B7 B0              BYTE $1A,$B7,$B0,$16,$F6,$C0,$16,$B7
14073  7560  C0 19 F6              BYTE $C0,$19,$F6,$C0,$06,$B7,$C0,$05
14074  7568  F5 00 06              BYTE $F5,$00,$06,$B7,$40,$05,$D7,$D0
14075  7570  06 91 D0              BYTE $06,$91,$D0,$01,$41,$40,$07,$D0
14076  7578  00 1F 50              BYTE $00,$1F,$50,$00,$1D,$00,$00,$00
14077  7580  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14078  7588  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14079  7590  54 00 01              BYTE $54,$00,$01,$55,$00,$01,$55,$00
14080  7598  01 55 00              BYTE $01,$55,$00,$01,$DD,$00,$00,$74
14081  75A0  00 01 FD              BYTE $00,$01,$FD,$C0,$05,$55,$B0,$15
14082  75A8  75 EC 1A              BYTE $75,$EC,$1A,$56,$BC,$66,$56,$AC
14083  75B0  5A 6A BC              BYTE $5A,$6A,$BC,$6A,$6A,$AF,$9A,$9A
14084  75B8  6B 69 9A              BYTE $6B,$69,$9A,$6F,$A5,$99,$6B,$00
14085  75C0  F5 E9 99              BYTE $F5,$E9,$99,$50,$F5,$99,$52,$1F
14086  75C8  5A 1F 6A              BYTE $5A,$1F,$6A,$80,$00,$55,$40,$03
14087  75D0  AA 90 0E              BYTE $AA,$90,$0E,$AA,$64,$0F,$66,$94
14088  75D8  0E DE A4              BYTE $0E,$DE,$A4,$03,$9F,$94,$03,$DE
14089  75E0  94 03 9F              BYTE $94,$03,$9F,$64,$03,$DE,$90,$00
14090  75E8  5F 50 01              BYTE $5F,$50,$01,$DE,$90,$07,$D7,$50
14091  75F0  07 46 90              BYTE $07,$46,$90,$01,$41,$40,$00,$07
14092  75F8  D0 00 05              BYTE $D0,$00,$05,$F4,$00,$00,$74,$00
14093  7600             
14094  7600             @          
14095  7600             INCBIN     "YOURSPRITE.SPT",99,104,TRUE      ; ENEMY FRONT WALKING
14096  7600             @          
14097  7600  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14098  7608  00 00 54              BYTE $00,$00,$54,$00,$01,$6F,$00,$05
14099  7610  FA C0 07              BYTE $FA,$C0,$07,$AB,$C0,$06,$6A,$C0
14100  7618  05 AB C0              BYTE $05,$AB,$C0,$01,$5F,$00,$01,$A9
14101  7620  00 01 FD              BYTE $00,$01,$FD,$00,$05,$AB,$C0,$15
14102  7628  AE F0 1A              BYTE $AE,$F0,$1A,$6A,$B0,$66,$6A,$AC
14103  7630  5A 6A BC              BYTE $5A,$6A,$BC,$6A,$9D,$6C,$5A,$9D
14104  7638  AB 69 9B              BYTE $AB,$69,$9B,$6F,$A6,$9E,$5B,$00
14105  7640  A7 6F A6              BYTE $A7,$6F,$A6,$A7,$DB,$55,$A7,$D5
14106  7648  85 E5 A5              BYTE $85,$E5,$A5,$6D,$E5,$55,$6D,$55
14107  7650  AB 54 16              BYTE $AB,$54,$16,$AA,$F0,$19,$AA,$B0
14108  7658  16 DA F0              BYTE $16,$DA,$F0,$1B,$D6,$B0,$16,$DA
14109  7660  F0 1B D6              BYTE $F0,$1B,$D6,$B0,$06,$DA,$C0,$07
14110  7668  D7 C0 06              BYTE $D7,$C0,$06,$DA,$C0,$07,$D7,$C0
14111  7670  06 DA C0              BYTE $06,$DA,$C0,$01,$45,$00,$07,$DF
14112  7678  40 07 DF              BYTE $40,$07,$DF,$40,$06,$9A,$40,$00
14113  7680  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14114  7688  00 00 54              BYTE $00,$00,$54,$00,$01,$6F,$00,$05
14115  7690  FA C0 07              BYTE $FA,$C0,$07,$AB,$C0,$06,$6A,$C0
14116  7698  05 AB C0              BYTE $05,$AB,$C0,$05,$5F,$00,$01,$A9
14117  76A0  00 01 FD              BYTE $00,$01,$FD,$00,$06,$6B,$C0,$1A
14118  76A8  6A F0 16              BYTE $6A,$F0,$16,$6A,$B0,$5A,$6A,$AC
14119  76B0  66 6A BC              BYTE $66,$6A,$BC,$5A,$9E,$6C,$6A,$9B
14120  76B8  9B 9A 9B              BYTE $9B,$9A,$9B,$DB,$65,$9B,$5B,$00
14121  76C0  66 6B F5              BYTE $66,$6B,$F5,$A7,$5B,$F6,$6A,$5C
14122  76C8  85 55 A9              BYTE $85,$55,$A9,$7D,$01,$55,$7D,$06
14123  76D0  AA 94 1A              BYTE $AA,$94,$1A,$AA,$F0,$16,$A6,$B0
14124  76D8  1A BA F0              BYTE $1A,$BA,$F0,$16,$F6,$B0,$19,$B6
14125  76E0  F0 06 F6              BYTE $F0,$06,$F6,$B0,$05,$B6,$40,$06
14126  76E8  F5 D0 05              BYTE $F5,$D0,$05,$B3,$D0,$06,$F3,$40
14127  76F0  05 B5 00              BYTE $05,$B5,$00,$05,$50,$00,$07,$D0
14128  76F8  00 07 D0              BYTE $00,$07,$D0,$00,$01,$40,$00,$00
14129  7700  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
14130  7708  00 00 54              BYTE $00,$00,$54,$00,$01,$6F,$00,$05
14131  7710  FA C0 07              BYTE $FA,$C0,$07,$AB,$C0,$06,$6A,$C0
14132  7718  05 AB C0              BYTE $05,$AB,$C0,$01,$5F,$00,$01,$A9
14133  7720  00 01 FD              BYTE $00,$01,$FD,$00,$05,$6B,$C0,$16
14134  7728  6A F0 19              BYTE $6A,$F0,$19,$6A,$B0,$66,$6A,$EC
14135  7730  5A 69 7C              BYTE $5A,$69,$7C,$6A,$9D,$AC,$9A,$9B
14136  7738  5B 69 9F              BYTE $5B,$69,$9F,$6F,$A6,$5B,$5B,$00
14137  7740  A7 55 65              BYTE $A7,$55,$65,$67,$7D,$55,$A7,$7D
14138  7748  85 F5 A5              BYTE $85,$F5,$A5,$55,$F5,$55,$00,$56
14139  7750  AA C0 1A              BYTE $AA,$C0,$1A,$AB,$B0,$16,$EA,$F0
14140  7758  1B 9A B0              BYTE $1B,$9A,$B0,$16,$D6,$F0,$17,$DA
14141  7760  B0 16 D6              BYTE $B0,$16,$D6,$F0,$1D,$DB,$C0,$1F
14142  7768  56 C0 1F              BYTE $56,$C0,$1F,$5B,$C0,$07,$5A,$C0
14143  7770  01 1B C0              BYTE $01,$1B,$C0,$00,$15,$00,$00,$1F
14144  7778  40 00 1F              BYTE $40,$00,$1F,$40,$00,$05,$00,$00
14145  7780             
14146  7780             @          
14147  7780             INCBIN     "YOURSPRITE.SPT",105,110,TRUE     ; ENEMY BACK WALKING
14148  7780             
14149  7780             ;===============================================================================
14150  7780             ;  LEVEL DATA
14151  7780             ;===============================================================================
14152  7780             
14153  7780             $8000
14154  7780             MAP_MEM
14155  7780             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FBK - MAP (22X21).BIN"
14156  7780             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FTEXTMULTICOLOR - MAP (22X21).BIN"
14157  7780             
14158  7780             ;INCBIN"MAPS2025/HOTEL3L - MAP (16X10).BIN"
14159  7780  00 2E 15              BYTE $00,$2E,$15,$29,$00,$2E,$29,$00,$2E,$00,$29,$00,$2E,$29,$15,$29
14160  7790  26 25 19              BYTE $26,$25,$19,$29,$25,$26,$25,$25,$26,$25,$29,$25,$26,$29,$15,$29
14161  77A0  28 2B 18              BYTE $28,$2B,$18,$29,$00,$00,$00,$28,$2B,$27,$29,$28,$2B,$29,$15,$29
14162  77B0  08 08 1A              BYTE $08,$08,$1A,$08,$08,$2F,$04,$08,$08,$08,$08,$08,$08,$08,$1A,$08
14163  77C0  2D 2D 17              BYTE $2D,$2D,$17,$2D,$0B,$01,$2D,$1E,$1D,$1F,$2D,$2D,$2D,$2D,$17,$2D
14164  77D0  24 24 16              BYTE $24,$24,$16,$0C,$03,$06,$24,$1C,$1B,$20,$23,$12,$13,$23,$16,$23
14165  77E0  22 22 0D              BYTE $22,$22,$0D,$02,$07,$0E,$22,$22,$22,$22,$22,$22,$22,$22,$22,$22
14166  77F0  14 14 05              BYTE $14,$14,$05,$14,$14,$0F,$0F,$2A,$10,$11,$2A,$0F,$14,$14,$14,$14
14167  7800  21 21 21              BYTE $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
14168  7810  21 21 21              BYTE $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
14169  7820             
14170  7820             
14171  7820             ; HOTEL MAP COLORS
14172  7820             ATTRIBUTE_MEM 
14173  7820             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FBK - CHARATTRIBS_L1.BIN"
14174  7820             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FTEXTMULTICOLOR - CHARATTRIBS_L1.BIN"
14175  7820             
14176  7820             ;INCBIN"MAPS2025/HOTEL3L - CHARATTRIBS_L1.BIN"
14177  7820  03 0A 0A              BYTE $03,$0A,$0A,$0A,$0A,$3E,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E
14178  7830  0E 0E 0E              BYTE $0E,$0E,$0E,$0E,$1E,$0A,$0A,$0A,$1E,$0B,$0A,$0A,$0A,$0A,$0A,$0A
14179  7840  0A 0A 0A              BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E,$0C
14180  7850  0C 0C 1E              BYTE $0C,$0C,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$18,$0C,$0C,$08,$0C,$0C,$0C
14181  7860  0B 0E 0E              BYTE $0B,$0E,$0E,$0E,$0C,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$0A
14182  7870  0A 0A 0A              BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E,$0E
14183  7880  0E 0E 0E              BYTE $0E,$0E,$0E,$0E,$0E,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
14184  7890  0A 0A 0A              BYTE $0A,$0A,$0A,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$0A,$0A,$0D,$0D
14185  78A0  0D 0D 0D              BYTE $0D,$0D,$0D,$0A,$0A,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$0A,$8C,$8C
14186  78B0  8C 8C 8C              BYTE $8C,$8C,$8C,$0A,$0E,$09,$0E,$09,$0E,$09,$0E,$0A,$09,$0E,$09,$0E
14187  78C0  0E 0C 0C              BYTE $0E,$0C,$0C,$0C,$0E,$0E,$0E,$0A,$0E,$0E,$0A,$0A,$0A,$0A,$0A,$0E
14188  78D0  0E 0A 0A              BYTE $0E,$0A,$0A,$0A,$0A,$0A,$0B,$0A,$0A,$0B,$0A,$0A,$0A,$0A,$0F,$0F
14189  78E0  0E 0A 0A              BYTE $0E,$0A,$0A,$0A,$0A,$0D,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$1E,$0E,$0E
14190  78F0  0C 0C 0C              BYTE $0C,$0C,$0C,$0C,$0B,$0B,$0C,$0A,$0D,$0A,$0A,$0E,$0E,$0E,$0A,$0A
14191  7900  0A 0E 0E              BYTE $0A,$0E,$0E,$0C,$0C,$0A,$0E,$0E,$0E,$0E,$0C,$0C,$0A,$0A,$0A,$0A
14192  7910  0A 0A 0A              BYTE $0A,$0A,$0A,$0A,$0E,$0C,$0B,$0B,$0B
14193  7919             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FBK - TILES.BIN"
14194  7919             ;INCBIN"MAPS2025/GAMEPROJECTHOMEDAY3FTEXTMULTICOLOR - TILES.BIN"
14195  7919             
14196  7919             ;INCBIN"MAPS2025/HOTEL3L - TILES.BIN"
14197  7919             
14198  7919             TILE_MEM
14199  7919  00 01 00              BYTE $00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14200  7929  02 03 04              BYTE $02,$03,$04,$05,$06,$06,$05,$07,$06,$05,$08,$09,$05,$0A,$06,$0B
14201  7939  0C 0D 0E              BYTE $0C,$0D,$0E,$05,$0C,$0F,$05,$10,$0E,$05,$11,$12,$05,$13,$12,$14
14202  7949  06 15 06              BYTE $06,$15,$06,$05,$06,$16,$05,$17,$0E,$05,$11,$12,$05,$13,$12,$18
14203  7959  19 19 19              BYTE $19,$19,$19,$05,$01,$01,$05,$1A,$01,$05,$1B,$01,$05,$1C,$1D,$1D
14204  7969  1E 1F 06              BYTE $1E,$1F,$06,$05,$20,$21,$05,$22,$23,$05,$24,$25,$05,$1C,$26,$27
14205  7979  28 06 06              BYTE $28,$06,$06,$29,$2A,$06,$06,$29,$18,$18,$18,$2B,$18,$18,$18,$2B
14206  7989  2C 2D 18              BYTE $2C,$2D,$18,$18,$2E,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14
14207  7999  2F 30 30              BYTE $2F,$30,$30,$31,$32,$33,$34,$35,$36,$37,$38,$37,$39,$3A,$3B,$3C
14208  79A9  3D 3E 3E              BYTE $3D,$3E,$3E,$3F,$40,$41,$41,$42,$41,$41,$40,$42,$43,$43,$44,$45
14209  79B9  3D 3E 3E              BYTE $3D,$3E,$3E,$3F,$40,$46,$47,$48,$49,$4A,$40,$4B,$4C,$43,$44,$4D
14210  79C9  4E 4F 50              BYTE $4E,$4F,$50,$51,$06,$52,$53,$54,$55,$16,$06,$54,$56,$15,$06,$54
14211  79D9  06 06 57              BYTE $06,$06,$57,$58,$06,$59,$06,$5A,$5B,$5C,$18,$5D,$5E,$0D,$18,$5D
14212  79E9  18 18 18              BYTE $18,$18,$18,$5F,$18,$18,$60,$61,$14,$62,$63,$18,$14,$5F,$64,$18
14213  79F9  18 18 18              BYTE $18,$18,$18,$2B,$18,$18,$18,$2B,$14,$14,$14,$2B,$14,$14,$14,$2B
14214  7A09  65 65 65              BYTE $65,$65,$65,$66,$67,$67,$67,$68,$69,$6A,$25,$6B,$6C,$6D,$6E,$6F
14215  7A19  65 70 71              BYTE $65,$70,$71,$71,$72,$73,$74,$75,$76,$77,$78,$78,$79,$7A,$7A,$7A
14216  7A29  7B 7B 7C              BYTE $7B,$7B,$7C,$7D,$7E,$74,$7F,$72,$78,$78,$80,$81,$7A,$7A,$7A,$82
14217  7A39  06 83 84              BYTE $06,$83,$84,$84,$06,$85,$86,$87,$88,$89,$8A,$8A,$8B,$8C,$8C,$8C
14218  7A49  84 84 8D              BYTE $84,$84,$8D,$06,$8E,$86,$8F,$06,$8A,$8A,$90,$91,$8C,$8C,$8C,$92
14219  7A59  93 65 65              BYTE $93,$65,$65,$65,$67,$67,$67,$67,$6A,$25,$6A,$25,$6D,$6E,$6D,$6E
14220  7A69  94 95 96              BYTE $94,$95,$96,$97,$98,$99,$9A,$97,$94,$95,$96,$40,$98,$99,$9A,$40
14221  7A79  94 95 96              BYTE $94,$95,$96,$9B,$98,$99,$9A,$9B,$94,$95,$9C,$40,$9D,$9E,$9F,$A0
14222  7A89  94 95 96              BYTE $94,$95,$96,$9B,$98,$99,$9A,$9B,$94,$95,$96,$9B,$98,$99,$9A,$9B
14223  7A99  94 95 96              BYTE $94,$95,$96,$A1,$98,$99,$9A,$A1,$94,$95,$96,$A1,$98,$99,$9A,$40
14224  7AA9  94 95 96              BYTE $94,$95,$96,$A2,$98,$99,$9A,$A3,$94,$95,$96,$A2,$98,$99,$9A,$A3
14225  7AB9  94 95 96              BYTE $94,$95,$96,$A4,$98,$99,$9A,$A5,$94,$95,$96,$A6,$98,$99,$9A,$40
14226  7AC9  A7 A8 A9              BYTE $A7,$A8,$A9,$A7,$AA,$AA,$AA,$AA,$AB,$AB,$AC,$AC,$AD,$AD,$AD,$AD
14227  7AD9  06 AE AF              BYTE $06,$AE,$AF,$B0,$06,$AA,$AA,$AA,$0C,$B1,$AC,$AC,$0C,$B2,$AD,$AD
14228  7AE9  B3 B3 B3              BYTE $B3,$B3,$B3,$B4,$06,$06,$06,$06,$B5,$B6,$B6,$B7,$B8,$B9,$B9,$BA
14229  7AF9  BB BC BC              BYTE $BB,$BC,$BC,$BC,$BD,$BD,$BD,$BD,$BD,$BD,$BE,$BF,$BD,$BD,$AF,$C0
14230  7B09  B3 B3 B3              BYTE $B3,$B3,$B3,$B4,$06,$06,$06,$06,$C1,$C2,$C3,$06,$C4,$C5,$C6,$06
14231  7B19  AF B0 C7              BYTE $AF,$B0,$C7,$06,$AA,$AA,$AA,$C8,$AC,$AC,$C9,$CA,$AD,$AD,$CB,$CC
14232  7B29  18 18 18              BYTE $18,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14,$CD,$CD,$CD,$CD
14233  7B39  18 18 18              BYTE $18,$18,$18,$18,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14,$14
14234  7B49  06 06 06              BYTE $06,$06,$06,$06,$06,$06,$06,$06,$40,$CE,$CF,$18,$CF,$18,$18,$18
14235  7B59  06 06 06              BYTE $06,$06,$06,$06,$06,$06,$06,$06,$18,$18,$18,$18,$18,$18,$18,$18
14236  7B69  D0 D1 D0              BYTE $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$D3,$D2,$D3,$D2,$D2,$D3,$D2,$D3
14237  7B79  D0 D1 D0              BYTE $D0,$D1,$D0,$D1,$D2,$D4,$D5,$D6,$D6,$D2,$D6,$D2,$D6,$D2,$D6,$D2
14238  7B89  A1 A1 A1              BYTE $A1,$A1,$A1,$A1,$40,$D7,$40,$D8,$D9,$DA,$97,$97,$DB,$DC,$DD,$DD
14239  7B99  A1 A1 A1              BYTE $A1,$A1,$A1,$A1,$D8,$40,$DE,$40,$97,$97,$DF,$E0,$DD,$DD,$E1,$E2
14240  7BA9  A1 E3 E4              BYTE $A1,$E3,$E4,$A1,$D8,$E3,$E4,$40,$97,$E3,$E4,$97,$D8,$E3,$E4,$A1
14241  7BB9  65 65 65              BYTE $65,$65,$65,$65,$72,$E5,$72,$72,$40,$E6,$E7,$40,$44,$E8,$E9,$44
14242  7BC9  A1 A1 A1              BYTE $A1,$A1,$A1,$A1,$01,$EA,$EB,$40,$EC,$ED,$EE,$EF,$44,$F0,$F1,$44
14243  7BD9  06 06 06              BYTE $06,$06,$06,$F2,$06,$06,$06,$F2,$06,$06,$06,$F2,$06,$06,$06,$F2
14244  7BE9  F3 B4 4F              BYTE $F3,$B4,$4F,$4F,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
14245  7BF9  00 F4 F5              BYTE $00,$F4,$F5,$00,$40,$F6,$F7,$40,$00,$F8,$F8,$40,$00,$00,$00,$00
14246  7C09  19 19 19              BYTE $19,$19,$19,$19,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14247  7C19             
14248  7C19             ;*******************************************************************************
14249  7C19             ;                          BACK ALLEY MAP
14250  7C19             ;*******************************************************************************
14251  7C19             
14252  7C19             ;CHARSET_DATA
14253  7C19             ;* = $4800
14254  7C19             MAP2_CHAR_MEM 
14255  7C19             
14256  7C19             *=$8000
14257  8000             MAP2_MEM
14258  8000  25 00 02              BYTE $25,$00,$02,$02,$02,$02,$02,$20,$00,$25,$00,$00,$24,$00,$00,$25
14259  8010  00 00 00              BYTE $00,$00,$00,$01,$1F,$03,$1F,$03,$21,$00,$00,$00,$23,$23,$00,$00
14260  8020  00 00 22              BYTE $00,$00,$22,$00,$02,$02,$02,$02,$02,$20,$22,$00,$00,$23,$23,$00
14261  8030  0A 25 08              BYTE $0A,$25,$08,$0D,$00,$01,$1F,$04,$1F,$03,$21,$0D,$00,$00,$23,$23
14262  8040  00 0A 00              BYTE $00,$0A,$00,$07,$0E,$06,$06,$06,$05,$06,$06,$06,$0E,$19,$1A,$10
14263  8050  0F 0F 26              BYTE $0F,$0F,$26,$27,$0F,$12,$11,$13,$11,$12,$16,$17,$18,$11,$11,$11
14264  8060  11 12 13              BYTE $11,$12,$13,$11,$11,$12,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
14265  8070  15 15 15              BYTE $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
14266  8080  15 15 15              BYTE $15,$15,$15,$15,$15,$15,$15,$15,$1E,$1B,$1E,$1E,$1E,$1B,$1E,$1E
14267  8090  1E 1B 1E              BYTE $1E,$1B,$1E,$1E,$15,$15,$15,$15,$1E,$1D,$1C,$1D,$1C,$1D,$1C,$1D
14268  80A0  1C 1D 1C              BYTE $1C,$1D,$1C,$1D,$1C,$1D,$1C,$1D,$1C,$1D
14269  80AA             
14270  80AA             ;COLOR_DATA
14271  80AA             ATTRIBUTE2_MEM 
14272  80AA  03 0C 0A              BYTE $03,$0C,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0E,$0E,$0E,$0A,$0A,$0A,$0A
14273  80BA  0A 0A 0A              BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$09,$0B
14274  80CA  0B 0B 0B              BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0E,$0E
14275  80DA  0E 0A 0A              BYTE $0E,$0A,$0A,$0A,$0A,$0A,$0A,$0F,$0A,$0A,$0A,$0F,$0A,$0F,$0F,$0A
14276  80EA  0A 0A 0A              BYTE $0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0E,$0E,$0E,$0B
14277  80FA  0E 0B 0B              BYTE $0E,$0B,$0B,$0B,$0E,$0B,$0B,$0B,$0E,$0B,$0B,$0B,$0E,$0B,$0B,$0B
14278  810A  0B 0B 0B              BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
14279  811A  0B 0B 0B              BYTE $0B,$0B,$0B,$1A,$1A,$1A,$1A,$1A,$1A,$1F,$1A,$1F,$1A,$1A,$1A,$1E
14280  812A  1E 1E 1E              BYTE $1E,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$1A,$1A,$1A,$1A,$1E,$1E,$1E,$1E
14281  813A  1E 1A 1A              BYTE $1E,$1A,$1A,$1A,$1E,$1A,$1E,$1E,$1E,$1A,$0E,$0E,$5E,$0E,$0D,$0D
14282  814A  5E 5E 5E              BYTE $5E,$5E,$5E,$5E,$5E,$5E,$5E,$5E,$0E,$0C,$0D,$0E,$0E,$0E,$0E,$0E
14283  815A  0E 0E 0E              BYTE $0E,$0E,$0E,$0B,$0B,$0A,$0A,$09,$09,$09,$09,$09,$0E,$0E,$0F,$0E
14284  816A  0E 0E 0A              BYTE $0E,$0E,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0E,$0A,$0E,$0A
14285  817A  0A 0E 0A              BYTE $0A,$0E,$0A,$0A,$0E,$0A,$0E,$0E,$0E,$09,$0E,$0E,$0E,$0E,$0E,$0E
14286  818A  0E 0E 0E              BYTE $0E,$0E,$0E,$0E,$0F,$0B,$0B,$09,$0E,$0E,$0E,$0C,$0C,$0A,$09,$09
14287  819A  0D 0E 0E              BYTE $0D,$0E,$0E,$0E,$0C,$0C,$0A
14288  81A1             
14289  81A1             
14290  81A1             ;TILES_DATA
14291  81A1             TILE2_MEM
14292  81A1  00 01 00              BYTE $00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14293  81B1  02 03 04              BYTE $02,$03,$04,$05,$02,$02,$06,$07,$02,$03,$04,$05,$02,$02,$06,$07
14294  81C1  08 09 0A              BYTE $08,$09,$0A,$0B,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F,$02,$03,$10,$05
14295  81D1  02 03 10              BYTE $02,$03,$10,$05,$02,$02,$10,$05,$02,$03,$10,$05,$02,$03,$10,$05
14296  81E1  11 12 13              BYTE $11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$18,$15,$1C,$1D,$18
14297  81F1  1E 1F 20              BYTE $1E,$1F,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D
14298  8201  2E 2F 2F              BYTE $2E,$2F,$2F,$30,$31,$32,$32,$33,$31,$32,$32,$33,$34,$35,$35,$36
14299  8211  37 38 38              BYTE $37,$38,$38,$39,$3A,$3B,$3B,$3C,$3A,$3B,$3D,$3C,$3A,$3E,$3F,$3C
14300  8221  37 40 41              BYTE $37,$40,$41,$39,$3A,$42,$43,$3C,$3A,$3B,$3D,$3C,$3A,$3E,$3F,$3C
14301  8231  44 45 46              BYTE $44,$45,$46,$47,$44,$45,$46,$47,$44,$45,$46,$47,$44,$45,$46,$47
14302  8241  48 49 49              BYTE $48,$49,$49,$4A,$49,$4B,$49,$4A,$49,$49,$48,$4A,$49,$49,$49,$4A
14303  8251  44 44 44              BYTE $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44
14304  8261  44 4C 44              BYTE $44,$4C,$44,$44,$44,$4C,$44,$44,$44,$4C,$44,$44,$4D,$4E,$44,$44
14305  8271  44 4C 44              BYTE $44,$4C,$44,$44,$44,$4C,$44,$44,$44,$4C,$44,$44,$44,$4C,$44,$44
14306  8281  4F 50 51              BYTE $4F,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E
14307  8291  5F 60 61              BYTE $5F,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$5D,$6D
14308  82A1  4F 6E 51              BYTE $4F,$6E,$51,$6F,$53,$70,$55,$71,$57,$72,$59,$5A,$5B,$6C,$5D,$5E
14309  82B1  73 73 73              BYTE $73,$73,$73,$73,$74,$74,$74,$74,$74,$74,$74,$74,$75,$76,$76,$77
14310  82C1  73 73 73              BYTE $73,$73,$73,$73,$74,$74,$74,$74,$74,$74,$74,$74,$78,$78,$78,$78
14311  82D1  73 73 73              BYTE $73,$73,$73,$73,$74,$74,$74,$74,$74,$79,$74,$74,$7A,$7B,$7A,$7A
14312  82E1  73 73 73              BYTE $73,$73,$73,$73,$74,$74,$74,$74,$74,$74,$74,$74,$74,$74,$74,$74
14313  82F1  7C 04 7C              BYTE $7C,$04,$7C,$04,$7D,$7C,$04,$7C,$7C,$04,$7C,$04,$04,$7C,$04,$7C
14314  8301  73 73 7E              BYTE $73,$73,$7E,$7F,$74,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$8A
14315  8311  7F 7F 7F              BYTE $7F,$7F,$7F,$7F,$8B,$8C,$8B,$8C,$86,$86,$8D,$8E,$8F,$90,$91,$92
14316  8321  7F 93 94              BYTE $7F,$93,$94,$94,$82,$95,$74,$74,$96,$97,$74,$74,$8F,$90,$39,$98
14317  8331  99 9A 9A              BYTE $99,$9A,$9A,$9A,$9B,$9C,$9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4,$A5,$A6
14318  8341  9A 9A 9A              BYTE $9A,$9A,$9A,$A7,$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AB,$AF,$AF,$B0,$B1
14319  8351  B2 B2 B2              BYTE $B2,$B2,$B2,$B2,$B3,$B4,$B5,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3
14320  8361  B6 B6 B6              BYTE $B6,$B6,$B6,$B6,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7
14321  8371  B6 B6 B6              BYTE $B6,$B6,$B6,$B8,$B7,$B7,$B9,$BA,$B7,$B9,$BA,$B7,$B9,$BA,$B7,$B7
14322  8381  B2 B2 B2              BYTE $B2,$B2,$B2,$B2,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3,$B3
14323  8391  02 03 04              BYTE $02,$03,$04,$05,$02,$BB,$BC,$07,$02,$BD,$BE,$05,$02,$BF,$C0,$07
14324  83A1  02 C1 C2              BYTE $02,$C1,$C2,$C3,$C4,$C5,$C6,$C7,$C8,$C9,$CA,$CB,$02,$CC,$C2,$C3
14325  83B1  02 CD CE              BYTE $02,$CD,$CE,$CF,$02,$D0,$D1,$D2,$02,$D0,$CE,$C3,$02,$D3,$D1,$D4
14326  83C1  00 D5 D6              BYTE $00,$D5,$D6,$D7,$44,$4C,$00,$D8,$44,$4C,$00,$00,$00,$4C,$00,$00
14327  83D1  D9 DA D9              BYTE $D9,$DA,$D9,$DB,$DC,$DD,$DC,$DE,$D9,$DA,$D9,$DF,$DC,$DD,$DC,$E0
14328  83E1  00 00 00              BYTE $00,$00,$00,$00,$00,$44,$44,$00,$00,$44,$44,$00,$00,$E1,$E2,$44
14329  83F1  00 00 00              BYTE $00,$00,$00,$00,$00,$E3,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14330  8401  E4 60 61              BYTE $E4,$60,$61,$62,$E5,$64,$55,$E6,$57,$E7,$E8,$E9,$5B,$88,$EA,$EB
14331  8411  EC 60 61              BYTE $EC,$60,$61,$62,$ED,$EE,$EF,$71,$F0,$E9,$F1,$F2,$F3,$F4,$91,$F5
14332  8421  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14333  8431  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
14334  8441             
14335  8441             DEBUGGER   BYTE 1
14336  8441             
14337  8441             
14338  8441             

******* 400 Label(s) *******
$8000 = $7780 
. = $3612 
` = $35EE 
` = $3691 
ActiveTimer = $35D3 
addrhi = $0DBE 
addrlo = $0DBD 
ADMIN_TEST_DISPLAY = $3B90 
admintest = $3882 
ALLEYMAP_LINE_LOOKUP_HI = $23B0 
ALLEYMAP_LINE_LOOKUP_LO = $239A 
ANIM_CLIMB_POLE = $3623 
ANIM_ENEMY_ATTACK_LEFT = $366B 
ANIM_ENEMY_ATTACK_RIGHT = $3667 
ANIM_ENEMY_BULLET = $367D 
ANIM_ENEMY_CLIMB_ROPE = $3679 
ANIM_ENEMY_FIRING_LEFT = $3663 
ANIM_ENEMY_FIRING_RIGHT = $365F 
ANIM_ENEMY_IDLE = $364E 
ANIM_ENEMY_LEFT_DEAD = $3674 
ANIM_ENEMY_RIGHT_DEAD = $366F 
ANIM_ENEMY_WALK_D = $365A 
ANIM_ENEMY_WALK_L = $3656 
ANIM_ENEMY_WALK_R = $3652 
ANIM_NPC1 = $3681 
ANIM_NPC2 = $3685 
ANIM_NPC3 = $3689 
ANIM_NPC4 = $368D 
ANIM_PLAYER_FALL = $3620 
ANIM_PLAYER_IDLE = $3612 
ANIM_PLAYER_JUMP = $3628 
ANIM_PLAYER_KICK_L = $3641 
ANIM_PLAYER_KICK_R = $363D 
ANIM_PLAYER_PUNCH_L = $3631 
ANIM_PLAYER_PUNCH_R = $362D 
ANIM_PLAYER_SHOOT_LEFT = $3639 
ANIM_PLAYER_SHOOT_RIGHT = $3635 
ANIM_PLAYER_SWIM_L = $364A 
ANIM_PLAYER_SWIM_R = $3646 
ANIM_PLAYER_WALK_L = $361B 
ANIM_PLAYER_WALK_R = $3616 
AnimateSprite = $3450 
AnimateStreetLight = $0E0D 
AnimateTiles = $0DDA 
AnimationRoutine = $0BBD 
animLevel = $102C 
AnimScreenControl = $0E29 
ApplyGravity = $11F2 
ATTRIB_ADDRESS = $2343 
ATTRIB_ADDRESS = $2368 
ATTRIBUTE_MEM = $7820 
ATTRIBUTE2_MEM = $80AA 
BIT_TABLE = $3C67 
buffer_index = $3192 
BUTTON_ACTION = $3C66 
BUTTON_PRESSED = $3C65 
ChangeEnAnimState = $1AA3 
ChangeEnemyStage = $1A95 
ChangeEnemyState = $1A7A 
ChangePlayerState = $11CB 
CheckBlockUnder = $0A15 
checkdown = $1013 
checkdownright = $1016 
checkleft = $1014 
CheckMoveDown = $0977 
CheckMoveLeft = $08BD 
CheckMoveRight = $091A 
CheckMoveUp = $09C5 
checkright = $1015 
checkup = $1012 
checkupleft = $1849 
checkupright = $1848 
clear_chsetdata = $0DC9 
ClearChsetMemory = $0DBF 
ClearColorRam = $20CF 
clearing = $0DCB 
ClearScreen1 = $20A7 
ClearScreen2 = $20BB 
COLLIDER_ATTR = $0AC2 
COLOR_LINE_OFFSET_TABLE_HI = $2180 
COLOR_LINE_OFFSET_TABLE_LO = $2167 
ColorShiftDown = $2C20 
ColorShiftLeft = $29BA 
ColorShiftRight = $2B32 
ColorShiftUp = $2BAC 
continue_copy2 = $0C7C 
continue_copyalley = $0C46 
continue_copyanim = $0DFE 
copy_alley_tiles = $0CB2 
copy_lights = $0E1F 
copy_loopanimate = $0DEE 
copy_loopforalley = $0C36 
copy_loopset2 = $0C6C 
copy_outer_loop = $0C95 
CopyChars = $0F33 
CopyHorizontalBuffer = $30EF 
CopyLeftBuffer = $3193 
CopyRightBuffer = $30EF 
CopyToBuffer = $20E3 
CopyVerticalBuffer = $3024 
CURRENT_LEVEL = $2367 
DetectKeyPress = $0BF2 
detectScreen = $1FE3 
DetectSprite = $138A 
DisableEnemySprite = $1A37 
display = $0E82 
DisplayByte = $2010 
DisplayNewSprite = $1351 
DisplaySpriteInfo = $387E 
DisplaySpriteInfoNow = $3882 
DisplayText = $204E 
done = $0C8A 
done2 = $0C54 
doneanim = $0E0C 
DrawDownBuffer = $2CCA 
DrawDownColor = $2D22 
DrawLeftBuffer = $2D42 
DrawLeftColor = $2E3A 
DrawMap = $21CB 
DrawRightBuffer = $2EB3 
DrawRightColor = $2FAB 
DrawTile = $2219 
DrawUpBuffer = $2C94 
DrawUpColor = $2D06 
ENANIM_STATE = $1F67 
ENEMY_BULLETS = $1F8D 
ENEMY_COLLIDER_ATTR = $387D 
ENEMY_DATA = $1F61 
ENEMY_DISTANCE = $35D7 
ENEMY_FALL_POS = $1F7E 
ENEMY_FALL_SPEED_TABLE = $1F7F 
ENEMY_FALLFLAG = $1F66 
ENEMY_HIT = $35D8 
ENEMY_JUMP_POS = $1F68 
ENEMY_JUMP_TABLE = $1F69 
ENEMY_JUMP_TABLE_SIZE = $1F7D 
ENEMY_JUMPUPLEFT = $1F65 
ENEMY_JUMPUPRIGHT = $1F64 
ENEMY_SPEED = $1F8C 
ENEMY_SPRITE_CHAR_POS_X = $35E9 
ENEMY_SPRITE_CHAR_POS_Y = $360A 
ENEMY_SPRITE_DELTA_TRIM_X = $35F1 
ENEMY_SPRITE_POS_X = $35D9 
ENEMY_SPRITE_POS_X_DELTA = $35E1 
ENEMY_SPRITE_POS_X_EXTEND = $35F9 
ENEMY_SPRITE_POS_Y = $35FA 
ENEMY_SPRITE_POS_Y_DELTA = $3602 
ENEMY_STATE = $1F61 
ENEMY_STATE_JUMPTABLE = $1A40 
ENEMY_SUBSTAGE = $1F63 
ENEMY_SUBSTAGE_JUMPTABLE = $1A60 
ENEMY_SUBSTATE = $1F62 
ENEMY_TIMER = $1F8A 
ENEMY_TIMER2 = $1F8B 
EnemyActionState = $1B6B 
EnemyCheckBlockUnder = $37E7 
EnemyCheckMoveDown = $374B 
EnemyCheckMoveLeft = $3691 
EnemyCheckMoveRight = $36EE 
EnemyCheckMoveUp = $3797 
ENEMYCOLCHAR = $0AC4 
EnemyCountDown = $35D5 
ENEMYDOWNCAP = $1F89 
EnemyFireCD = $35D6 
EnemyFireRightTimer = $1BF0 
EnemyRandomTimer = $1AF9 
EnemySetup = $185A 
EnemyState_Framework = $1F42 
EnemyStateAttackLeft = $1D31 
EnemyStateAttackRight = $1D13 
EnemyStateBullet = $1BBE 
EnemyStateFiringLeft = $1CC1 
EnemyStateFiringRight = $1C95 
EnemyStateIdle = $1BD2 
EnemyStateJump = $1E5A 
EnemyStateKickL = $1F17 
EnemyStateKickR = $1EEC 
EnemyStateLeftDead = $1D70 
EnemyStatePunchL = $1DC3 
EnemyStatePunchR = $1D91 
EnemyStateRightDead = $1D4F 
EnemyStateRope = $1DF3 
EnemyStateWalkDown = $1CEB 
EnemyStateWalkL = $1C6D 
EnemyStateWalkR = $1B96 
EnemyTestBlocking = $384D 
EnemyTimer = $35D4 
EnemyToCharPos = $3308 
EnemytoPlayerCollision = $1ADC 
EnemyVisible = $1B55 
FetchBufferLineAddress = $1FE1 
FetchPlayfieldLineAddress = $1FBB 
FILE_LENGTH_TABLE = $0DB8 
file_not_found = $0D51 
filehi = $0DA2 
filelo = $0DA1 
FILENAME_TABLE_HI = $0DB2 
FILENAME_TABLE_LO = $0DAD 
filename1 = $0D57 
filename2 = $0D65 
filename3 = $0D72 
filename4 = $0D82 
filename5 = $0D91 
FIRE_LEFT = $1F8F 
FIRE_RIGHT = $1F8E 
FiringHoldCD = $1F90 
FiringHoldState = $1C56 
flength = $0DA0 
FlipBits = $335C 
GAME_PANEL_DISPLAY = $3AC2 
gamedeve.net/blog/949/entry-2250107-a-c64-game-step-7' = $1F68 
gamescore = $1027 
GetLineAddress = $1FD7 
GetScreenLineAddress = $1FDC 
HORIZONTAL_BUFFER = $323E 
HORIZONTAL_COLOR_BUFFER = $3254 
hotelchars = $0DB7 
IDLE_VAR = $132A 
InitEnemyAnim = $3523 
InitRasterIRQ = $0AC6 
InitSpriteAnim = $34F7 
IrqGlitchCatcher = $0B39 
IrqScoreBoard = $0B98 
IrqTopScreen = $0AF2 
JOY_NW = $3C64 
JOY_X = $3C61 
JOY_Y = $3C62 
JoyButton = $0F09 
JoystickReady = $10A8 
last_part2 = $0C7F 
last_partalley = $0C49 
last_partofanim = $0E01 
LOAD_ADDRESS_TABLE_HI = $0DA8 
LOAD_ADDRESS_TABLE_LO = $0DA3 
Load_AlleyTiles = $0CB4 
Load_Tiles = $0C97 
LoadAlleyMap = $0C22 
LoadAlleyTiles = $0CA8 
LoadChsetFromDisk = $0CC5 
LoadChsetFromDisk2 = $0D0B 
LoadColors = $0C04 
LoadColorsLoop = $0C06 
LoadHotelMap = $0C55 
LoadNewTiles = $0C8B 
LoadScreen = $0C13 
LoadScreenLoop = $0C15 
LSP_GAME_SWITCH = $3550 
MainLoop = $08A8 
MAP_ADDRESS = $236C 
MAP_CHAR_MEM = $3C6F 
MAP_LINE_LOOKUP_HI = $236E 
MAP_LINE_LOOKUP_LO = $236E 
MAP_MEM = $7780 
MAP2_CHAR_MEM = $7C19 
MAP2_MEM = $8000 
MAP2025_LINE_LOOKUP_HI = $2384 
MAP2025_LINE_LOOKUP_LO = $236E 
maptwoloaded = $102E 
MoveBulletLeft = $1A0F 
MoveBulletRight = $19E7 
MoveEnemyDown = $195E 
MoveEnemyLeft = $18F9 
MoveEnemyRight = $1890 
MoveEnemyUp = $19B2 
MovePlayerDown = $113D 
MovePlayerLeft = $10FE 
MovePlayerRight = $10B8 
MovePlayerUp = $1177 
MoveSpriteDown = $3430 
MoveSpriteLeft = $33B7 
MoveSpriteRight = $33E9 
MoveSpriteUp = $3415 
NE_DIR = $3C63 
no_key = $0C03 
PLAYER_DIRECTION = $1F92 
PLAYER_JUMP_POS = $184C 
PLAYER_JUMP_TABLE = $184D 
PLAYER_JUMPCOUNT = $3645 
PLAYER_SPEED = $1858 
PLAYER_STATE = $184A 
PLAYER_STATE_JUMPTABLE = $11AF 
PLAYER_SUBSTATE = $184B 
PLAYER_TIMER = $1857 
PlayerInit = $102F 
PlayerStateFloating = $1725 
PlayerStateIdle = $122A 
PlayerStateJump = $17B8 
PlayerStateKickLeft = $15A9 
PlayerStateKickRight = $1586 
PlayerStatePole = $15CC 
PlayerStatePunchLeft = $14C5 
PlayerStatePunchRight = $1482 
PlayerStateShootLeft = $154C 
PlayerStateShootRight = $1509 
PlayerStateSwimL = $16E5 
PlayerStateSwimR = $16A5 
PlayerStateWalkLeft = $1427 
PlayerStateWalkRight = $13A8 
PlayertoEnemyCollis = $132B 
PlotATile = $0E49 
plotdigit = $0E9D 
PRG_START = $0810 
ReadCharsetAddress = $0F84 
ReadJoystick = $0EA8 
RepositionSprite = $3380 
ResetEnemytoPlayerVertical = $1AC7 
RIVER_ANIM1_HI = $1018 
RIVER_ANIM1_LO = $1017 
RIVER_ANIM2_HI = $101A 
RIVER_ANIM2_LO = $1019 
RIVER_ANIM3_HI = $101C 
RIVER_ANIM3_LO = $101B 
RIVER_ANIM4_HI = $101E 
RIVER_ANIM4_LO = $101D 
riverAnimation = $0F89 
riverAnimation2 = $0FE7 
RSP_GAME_SWITCH = $354F 
SCORE_CHAR_MEM = $5800 
SCORE_LINE_OFFSET_TABLE_HI = $21B2 
SCORE_LINE_OFFSET_TABLE_LO = $2199 
ScoreBoard = $0E54 
SCREEN_LINE_OFFSET_TABLE_HI = $211C 
SCREEN_LINE_OFFSET_TABLE_LO = $2103 
Screen_Setup = $083A 
SCREEN1_LINE_OFFSET_TABLE_HI = $211C 
SCREEN1_LINE_OFFSET_TABLE_LO = $2103 
SCREEN2_LINE_OFFSET_TABLE_HI = $214E 
SCREEN2_LINE_OFFSET_TABLE_LO = $2135 
SCROLL_FIX_SKIP = $323D 
ScrollDown = $25A4 
ScrollLeft = $25EC 
ScrollRight = $2645 
ScrollUp = $2557 
SetEnemyFiringLeft = $1B4B 
SetEnemyFiringRight = $1B4A 
SetEnemyLeft = $1B4C 
SetEnemyRight = $1B41 
SetEnemyState = $1AB9 
SetSpriteImage = $34EB 
ShiftCharsDown = $27AC 
ShiftCharsLeft = $28B9 
ShiftCharsRight = $2A32 
ShiftCharsUp = $269F 
sloop = $0E86 
SPRITE_ANIM_COUNT = $35B3 
SPRITE_ANIM_PLAY = $35BB 
SPRITE_ANIM_TIMER = $35AB 
SPRITE_ANIMATION = $35C3 
SPRITE_CHAR_POS_X = $3572 
SPRITE_CHAR_POS_Y = $3593 
SPRITE_CONSOLE_TEXT = $39F1 
SPRITE_DELTA_TRIM_X = $357A 
SPRITE_DEPTH = $3559 
SPRITE_DIRECTION_X = $359B 
SPRITE_DIRECTION_Y = $35A3 
SPRITE_IS_ACTIVE = $355A 
SPRITE_POS_X = $3562 
SPRITE_POS_X_DELTA = $356A 
SPRITE_POS_X_EXTEND = $3582 
SPRITE_POS_Y = $3583 
SPRITE_POS_Y_DELTA = $358B 
Sprite_Setup = $0892 
SPRITE_STACK = $3551 
SPRITE_Y_ADJUST = $0AC5 
SpriteToCharPos = $32BA 
StartAlleyMap = $1393 
StartHotelMap = $1212 
SwapScreens = $1F93 
System_Setup = $082C 
TestBlocking = $0A81 
TILE_ADDRESS = $236A 
TILE_DATA = $0AC3 
TILE_MEM = $7919 
TILE_NUMBER_LOOKUP_HI = $2407 
TILE_NUMBER_LOOKUP_LO = $23C6 
TILE2_MEM = $81A1 
TILE2_NUMBER_LOOKUP_HI = $2488 
TILE2_NUMBER_LOOKUP_LO = $2447 
TileDraw = $22E7 
TileMap = $2299 
UpdateEnemy = $1881 
UpdateEnemyState = $1AA9 
UpdatePlayer = $1099 
UpdatePlayerState = $11E1 
UpdateScroll = $24C9 
UpdateTimers = $0BE6 
VERTICAL_BUFFER = $326A 
VERTICAL_COLOR_BUFFER = $3292 
VIC_DATA_INCLUDES = $3C6F 
WaitFrame = $0BD7 
WaitToFireCD = $1F91 
WaterAnimation = $0F65 
waterSpeed = $183A 
waterSpeed = $1859 
WhichKey = $0E3D 
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = $21CB 
ZP1 = $101F 
ZP2 = $1021 
ZP3 = $1023 
ZP4 = $1025 

******* 135 Unused label(s) *******
$8000
.
@adjY
@adjY
@beginCount
@beginMoveRoutine
@blockedLeft
@blockedLeft
@blockedRight
@blockedRight
@blocking
@blocking
@blockingUnder
@blockingUnder
@bodySprite0
@butPress
@butPress
@butPress
@butPress
@buttonAction
@buttonNotPressed
@buttonTest
@cantMove
@cantMoveUp
@changeSpriteColor
@check_left
@checkbelow240
@checkdiagonals
@checkFloor
@checkJoyJumping
@checkJoystick
@checkLeft
@checkLeft
@checkLeft2
@checkLeft2
@checkRight
@checkRight
@checkUp
@checkUp
@checkUp2
@checkUp2
@checkUpLeft
@checkWater
@checkWaterCollis
@checkWaterUp
@clearLoop
@clearLoop
@clearLoop
@contAnim
@contJump
@contLeftCheck
@contRightCheck
@copy_screen1
@CopyCharactersDone
@copyfm1
@copyFm1
@copyFm1
@copyFm1
@copyfm2
@copyFm2
@copyFm2
@copyFm2
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop
@copyloop1
@copyloop1
@copyloop1
@copyloop1
@copyloop1
@copyloop2
@copyloop2
@copyloop2
@copyloop2
@copyloop2
@copyloop2
@decNoChange
@deltaFinished
@deltaLess
@done
@done
@done
@done
@done
@done
@done
@done
@done
@done
@doneJoy
@doneJoy
@doneJoy
@doneJoy
@doorEntrance
@doorEntrance
@doorEntrance
@down
@down
@down
@down
@down
@downBlocked
@downBlocked
@downCheck
@downCheck
@downCheck2
@downCheck2
@downDone
@downDone
@downMove
@downMove
@downMove
@downScroll
@downScroll
@drawloop
@drawloop
@end
@end
@end
@end
@end
@end
@end_enemytimer
@endClimb
@endMarkerReached
@enemyCDReached
@enemymovesdownPole
@enemyTimerComplete
@enterhoteldoor
@exit
@exitFloating
@exitKey
@exitLeft
@exitLoop
@exitLoop
@exitPoleClimb
@exitRight
@exitRightIdle
@exitStage
@falling
@fetchtile
@fetchtile
@fetchTile
@fireholdDone
@fix_done
@fix_down
@fix_frame
@fix_left
@fix_right
@fix_up
@foundCouch
@foundCouch
@fr_0
@fr_1
@fr_2
@fr_3
@fr_4
@fr_5
@fr_6
@fr_7
@frame0
@frame0
@frame0
@frame0
@frame1
@frame1
@frame2
@frame2
@frame3
@frame4
@frame4
@frame4
@frame5
@frame5
@frame6
@frame6
@frame7
@frame7
@frame7
@frame7
@goFloor
@goingDown
@goingUp
@goLadder
@goLeft
@goRight
@goRopeClimb
@horizCheck
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@idle
@incTimer
@inlineLoop
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@input
@joyCheck
@joyCheck
@joyCheck
@joychkOnPole
@joyready
@jumpBlocked
@jumpComplete
@jumpContinue
@jumping
@jumping
@jumping
@jumping
@jumpOn
@lastDigit
@left
@left
@left
@left
@left
@left
@leftDone
@leftDone
@leftenemyIsDown
@leftJump
@leftMove
@leftMove
@leftWaterMove
@less
@level2colors
@level2leftcolors
@level2leftiles
@level2leftmap
@level2rightcolors
@level2tilemap
@level2tilemap
@leveltworightmap
@leveltwovertmap
@lineBreak
@loadalleymap2
@loadmapanimate
@loop
@loop
@loop1
@map2collisfound
@missedLeftPunch
@missedLeftShot
@missedRightPunch
@missedRightShot
@moveBulletLeft
@moveBulletRight
@moveDownPole
@moveDownPole
@moveEnSprite
@moveLeft
@moveLeft
@moveRight
@moveRight
@movespritedown
@moveSpriteUp
@moveUp
@movingDirLeftSprite
@movingDirRightSprite
@new_tile
@newtile
@newtile
@newtile
@newTile
@NextLine
@noAdjustY
@noAdjustY
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjX
@noAdjY
@noAdjY
@noAdjY
@noAdjY
@noAdjY
@noAdjY
@noAdjY
@noAdjY
@noChangeInExtendedFlag
@noChangeInExtendedFlag
@nodownMove
@noEnemyCollis
@noEnemyCollis
@noExtendedX
@noExtendedX
@nolevel2colors
@noPoleFound
@noRope
@notFound
@notile2load
@PageBoundryNotReached
@playerCanJump
@playerIsFalling
@playerNotFalling
@poleFound
@poleNotAbove
@poleNotBelow
@pressUpLeft
@pressUpRight
@readyToFire
@reset_delta
@reset_delta
@reset_delta
@resetDelta
@resetJump
@resetLoop
@resetPing
@resetPong
@resetvertPos
@returnClear
@returnClear
@right
@right
@right
@right
@right
@right
@rightCheck2
@rightCheck2
@rightDone
@rightDone
@rightenemyIsDown
@rightJump
@rightMove
@rightMove
@rightWaterMove
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running
@running2
@score
@screen1
@screen1
@screen1
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2
@screen2_scene1
@screen2_scene2
@scroll
@scroll
@scroll
@scroll
@scroll
@scroll
@scroll
@scrollingDown
@scrollingUp
@scrollLeft
@scrollLeft
@scrollRight
@scrollRight
@scrollwater1
@scrollwater2
@secondSprite
@setBodySprite0
@setHeadSprite0
@setImage
@shiftPixelsRight
@shootToLeft
@shootToRight
@skipalleymap
@skipalleymap
@skipalleymap2
@skipLeftGravity
@skiplevel2leftcolors
@skiplevel2leftmap
@skiplevel2rightcolors
@skiplevel2tiles
@skipmap2collis
@skipRightGravity
@skiptile2load
@special_under
@special_under
@spriteFallCheck
@spriteFalls
@spriteHit
@start
@start
@start
@start
@stillFalling
@stopClimb
@store2
@store5
@testDown
@testDownRight
@testLeft
@testRight
@testUp
@testUpLeft
@tileloop
@tileloop
@tileloop
@timerCheck
@timernotFound
@underCheck
@underCheck
@undercheck2
@undercheck2
@up
@up
@up
@up
@upBlocked
@upBlocked
@update
@update
@update
@updateSlowTimer
@upDone
@upDone
@upMove
@upMove
@upScroll
@upScroll
@verifyLeftPosition
@verifyRightPosition
@vert_check
@vert_check
@vertCheck
@vertCheck
@vertCheck
@vertCheck
@WaitStep2
@waitToFire
@writeDigit
@zerocheck
`
`
ANIM_NPC2
ANIM_NPC3
ANIM_NPC4
ANIM_PLAYER_FALL
AnimateStreetLight
AnimateTiles
AnimationRoutine
AnimScreenControl
ATTRIB_ADDRESS
ATTRIB_ADDRESS
ChangeEnAnimState
ChangeEnemyStage
ClearColorRam
ClearScreen1
ClearScreen2
CopyChars
CopyRightBuffer
CURRENT_LEVEL
DetectKeyPress
DisableEnemySprite
DisplayNewSprite
DisplaySpriteInfo
ENEMY_DATA
ENEMY_FALL_POS
ENEMY_FALL_SPEED_TABLE
ENEMY_FALLFLAG
ENEMY_JUMP_POS
ENEMY_JUMP_TABLE
ENEMY_JUMP_TABLE_SIZE
ENEMY_JUMPUPLEFT
ENEMY_JUMPUPRIGHT
ENEMY_SPRITE_CHAR_POS_X
ENEMY_SPRITE_DELTA_TRIM_X
ENEMY_TIMER2
EnemyCheckMoveLeft
EnemyCheckMoveRight
EnemyRandomTimer
EnemyState_Framework
EnemyStateAttackLeft
EnemyStateAttackRight
EnemyStateBullet
EnemyStateIdle
EnemyStateJump
EnemyStateKickL
EnemyStateKickR
EnemyStatePunchL
EnemyStatePunchR
EnemyStateRope
EnemyStateWalkL
EnemyStateWalkR
EnemyToCharPos
EnemytoPlayerCollision
FetchBufferLineAddress
filename1
filename2
filename3
filename4
filename5
FlipBits
GAME_PANEL_DISPLAY
gamedeve.net/blog/949/entry-2250107-a-c64-game-step-7'
InitEnemyAnim
JOY_NW
Load_AlleyTiles
LoadAlleyMap
LoadAlleyTiles
LoadChsetFromDisk2
LoadColors
LoadScreen
LSP_GAME_SWITCH
MAP_LINE_LOOKUP_HI
MAP_LINE_LOOKUP_LO
MAP_MEM
MAP2_MEM
MoveBulletLeft
MoveBulletRight
MoveEnemyUp
PLAYER_JUMPCOUNT
PLAYER_SPEED
PLAYER_TIMER
PlayerStateFloating
PlayerStateIdle
PlayerStateJump
PlayerStateKickLeft
PlayerStateKickRight
PlayerStatePole
PlayerStatePunchLeft
PlayerStatePunchRight
PlayerStateShootLeft
PlayerStateShootRight
PlayerStateSwimL
PlayerStateSwimR
PlayerStateWalkLeft
PlayerStateWalkRight
PlotATile
PRG_START
ReadCharsetAddress
RepositionSprite
RIVER_ANIM1_HI
RIVER_ANIM1_LO
RIVER_ANIM2_HI
RIVER_ANIM2_LO
RIVER_ANIM4_HI
RIVER_ANIM4_LO
riverAnimation
riverAnimation2
RSP_GAME_SWITCH
SCORE_CHAR_MEM
SCREEN_LINE_OFFSET_TABLE_HI
SCREEN_LINE_OFFSET_TABLE_LO
Screen_Setup
SetEnemyFiringLeft
SetEnemyFiringRight
SetEnemyState
SPRITE_CONSOLE_TEXT
SPRITE_DIRECTION_X
SPRITE_DIRECTION_Y
Sprite_Setup
SPRITE_Y_ADJUST
System_Setup
TILE_ADDRESS
TILE_DATA
VIC_DATA_INCLUDES
WaterAnimation
waterSpeed
WhichKey
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
ZP1
ZP2
ZP3
ZP4

******* 214 Variable(s) *******
alleymap  = $4802
BOTTOM_DRAW_LINE  = $0011
charload  = $4802
CHRADR1  = $4E18
CHRADR2  = $4AC8
CHRADR3  = $4C58
CHRADR4  = $4F58
CIA_PRA  = $DD00
CIA1_TIMA_HI  = $DC05
CIA1_TIMA_LO  = $DC04
CIA1_TIMB_HI  = $DC07
CIA1_TIMB_LO  = $DC06
COLL_CLEAR  = $0000
COLL_COUCH  = $0080
COLL_DOOR  = $0050
COLL_FLOOR  = $0010
COLL_POLE  = $0030
COLL_ROPE  = $0030
COLL_STAIR  = $0020
COLL_WATER  = $0040
COLOR_BLACK  = $0000
COLOR_BLUE  = $0006
COLOR_BROWN  = $0009
COLOR_CYAN  = $0003
COLOR_GREEN  = $0005
COLOR_GREY1  = $000B
COLOR_GREY2  = $000C
COLOR_GREY3  = $000F
COLOR_LTBLUE  = $000E
COLOR_LTGREEN  = $000D
COLOR_LTRED  = $000A
COLOR_MEM  = $D800
COLOR_ORANGE  = $0008
COLOR_RED  = $0002
COLOR_VIOLET  = $0004
COLOR_WHITE  = $0001
COLOR_YELLOW  = $0007
CONSOLE_DISPLAY  = $387E
CONSOLE_TEXT  = $39F1
CURRENT_BUFFER  = $0027
CURRENT_SCREEN  = $0025
ENEMY_DOWN_CAP  = $000F
ENEMY_LEFT_CAP  = $0003
ENEMY_RIGHT_CAP  = $0032
ENEMY_SPRITE_DELTA_OFFSET_X  = $0008
ENEMY_SPRITE_DELTA_OFFSET_Y  = $000E
ENEMY_STATE_ATTACK_LEFT  = $0016
ENEMY_STATE_ATTACK_RIGHT  = $0014
ENEMY_STATE_FIRING_LEFT  = $001E
ENEMY_STATE_FIRING_RIGHT  = $001C
ENEMY_STATE_IDLE  = $0000
ENEMY_STATE_JUMP  = $000A
ENEMY_STATE_KICK_L  = $0012
ENEMY_STATE_KICK_R  = $0010
ENEMY_STATE_LEFT_DEAD  = $001A
ENEMY_STATE_PUNCH_L  = $000E
ENEMY_STATE_PUNCH_R  = $000C
ENEMY_STATE_RIGHT_DEAD  = $0018
ENEMY_STATE_ROPE  = $0008
ENEMY_STATE_WALK_D  = $0006
ENEMY_STATE_WALK_L  = $0004
ENEMY_STATE_WALK_R  = $0002
ENEMY_SUBSTAGE_RUNNING  = $0001
ENEMY_SUBSTATE_ENTER  = $0000
ENEMY_SUBSTATE_RUNNING  = $0001
ENEMY_UP_CAP  = $0004
ENMAP_X_DELTA  = $0036
ENMAP_X_POS  = $0034
ENMAP_Y_DELTA  = $0037
ENMAP_Y_POS  = $0035
INT_CONTROL  = $DC0D
JOY_2  = $DC00
LEVEL_1_MAP  = $E000
MAP_DOWN_LIMIT  = $000A
MAP_POS_ADDRESS  = $002E
MAP_RIGHT_LIMIT  = $0011
MAP_X_DELTA  = $0032
MAP_X_POS  = $0030
MAP_Y_DELTA  = $0033
MAP_Y_POS  = $0031
NUMBER_OF_SPRITES_DIV_4  = $0003
PARAM1  = $0003
PARAM2  = $0004
PARAM3  = $0005
PARAM4  = $0006
PARAM5  = $0007
PLAYER_DOWN_CAP  = $000A
PLAYER_LEFT_CAP  = $0009
PLAYER_RIGHT_CAP  = $0011
PLAYER_STATE_FLOATING  = $0018
PLAYER_STATE_IDLE  = $0000
PLAYER_STATE_JUMP  = $001A
PLAYER_STATE_KICK_LEFT  = $0010
PLAYER_STATE_KICK_RIGHT  = $000E
PLAYER_STATE_POLE  = $0012
PLAYER_STATE_PUNCH_LEFT  = $0008
PLAYER_STATE_PUNCH_RIGHT  = $0006
PLAYER_STATE_SHOOT_LEFT  = $000C
PLAYER_STATE_SHOOT_RIGHT  = $000A
PLAYER_STATE_SWIM_L  = $0016
PLAYER_STATE_SWIM_R  = $0014
PLAYER_STATE_WALK_LEFT  = $0004
PLAYER_STATE_WALK_RIGHT  = $0002
PLAYER_SUBSTATE_ENTER  = $0000
PLAYER_SUBSTATE_RUNNING  = $0001
PLAYER_UP_CAP  = $0004
PORT_A  = $DC00
PROC_PORT  = $0001
SCORE_SCREEN  = $5800
SCREEN1_MEM  = $4000
SCREEN2_MEM  = $4400
SCROLL_COUNT_X  = $0029
SCROLL_COUNT_Y  = $002A
SCROLL_DIRECTION  = $002C
SCROLL_DOWN  = $0004
SCROLL_LEFT  = $0002
SCROLL_MOVING  = $002D
SCROLL_RIGHT  = $0001
SCROLL_SPEED  = $002B
SCROLL_STOP  = $0000
SCROLL_UP  = $0003
SLOW_TIMER  = $0009
SPRITE_0_PTR  = $43F8
SPRITE_1_PTR  = $43F9
SPRITE_2_PTR  = $43FA
SPRITE_3_PTR  = $43FB
SPRITE_4_PTR  = $43FC
SPRITE_5_PTR  = $43FD
SPRITE_6_PTR  = $43FE
SPRITE_7_PTR  = $43FF
SPRITE_BASE  = $0070
SPRITE_DELTA_OFFSET_X  = $0008
SPRITE_DELTA_OFFSET_Y  = $000E
SPRITE_POINTER_BASE  = $43F8
SPRITE_POINTER_BASE1  = $43F8
SPRITE_POINTER_BASE2  = $47F8
SPRITE_POINTER_BASE3  = $47F8
tgt_c64  = $0001
TILE_DEPTH1  = $0010
TILE_DEPTH10  = $00A0
TILE_DEPTH11  = $00B0
TILE_DEPTH12  = $00C0
TILE_DEPTH13  = $00D0
TILE_DEPTH14  = $00E0
TILE_DEPTH15  = $00F0
TILE_DEPTH16  = $0100
TILE_DEPTH17  = $0110
TILE_DEPTH18  = $0120
TILE_DEPTH19  = $0130
TILE_DEPTH2  = $0020
TILE_DEPTH20  = $0140
TILE_DEPTH21  = $0150
TILE_DEPTH3  = $0030
TILE_DEPTH4  = $0040
TILE_DEPTH5  = $0050
TILE_DEPTH6  = $0060
TILE_DEPTH7  = $0070
TILE_DEPTH8  = $0080
TILE_DEPTH9  = $0090
TILE2_DEPTH1  = $0011
TILE2_DEPTH10  = $00AA
TILE2_DEPTH11  = $00BB
TILE2_DEPTH12  = $00CC
TILE2_DEPTH13  = $00DD
TILE2_DEPTH14  = $00EE
TILE2_DEPTH15  = $00FF
TILE2_DEPTH16  = $0110
TILE2_DEPTH17  = $0121
TILE2_DEPTH18  = $0132
TILE2_DEPTH19  = $0143
TILE2_DEPTH2  = $0022
TILE2_DEPTH20  = $0154
TILE2_DEPTH21  = $0165
TILE2_DEPTH3  = $0033
TILE2_DEPTH4  = $0044
TILE2_DEPTH5  = $0055
TILE2_DEPTH6  = $0066
TILE2_DEPTH7  = $0077
TILE2_DEPTH8  = $0088
TILE2_DEPTH9  = $0099
tilesload  = $8000
TIMER  = $0008
TYPE_LOOP  = $00FF
TYPE_PING_PONG  = $00FD
TYPE_PLAY_ONCE  = $00FE
VIC_BACKGROUND_COLOR  = $D021
VIC_BANK  = $DD00
VIC_BORDER_COLOR  = $D020
VIC_CHARSET_MULTICOLOR_1  = $D022
VIC_CHARSET_MULTICOLOR_2  = $D023
VIC_CHARSET_MULTICOLOR_3  = $D024
VIC_CONTROL  = $D016
VIC_INTERRUPT_CONTROL  = $D01A
VIC_MASK_IRQ  = $D019
VIC_MEMORY_CONTROL  = $D018
VIC_RASTER_LINE  = $D012
VIC_SCREEN_CONTROL  = $D011
VIC_SCREEN_CONTROL_X  = $D016
VIC_SCREEN_CONTROL_Y  = $D011
VIC_SPRITE_COLOR  = $D027
VIC_SPRITE_ENABLE  = $D015
VIC_SPRITE_MULTICOLOR  = $D01C
VIC_SPRITE_MULTICOLOR_1  = $D025
VIC_SPRITE_MULTICOLOR_2  = $D026
VIC_SPRITE_X_EXTEND  = $D010
VIC_SPRITE_X_POS  = $D000
VIC_SPRITE_Y_POS  = $D001
WPARAM1  = $000A
WPARAM2  = $000C
WPARAM3  = $000E
ZEROPAGE_POINTER_1  = $0017
ZEROPAGE_POINTER_2  = $0019
ZEROPAGE_POINTER_3  = $0021
ZEROPAGE_POINTER_4  = $0023
******* -392 Unused variables(s) *******
alleymap
CIA_PRA
CIA1_TIMA_HI
CIA1_TIMA_LO
CIA1_TIMB_HI
CIA1_TIMB_LO
COLL_CLEAR
COLOR_GREY3
COLOR_LTBLUE
COLOR_LTGREEN
COLOR_ORANGE
COLOR_RED
COLOR_VIOLET
CONSOLE_DISPLAY
CONSOLE_TEXT
ENEMY_LEFT_CAP
ENEMY_RIGHT_CAP
ENEMY_SPRITE_DELTA_OFFSET_X
ENEMY_SPRITE_DELTA_OFFSET_Y
ENEMY_STATE_ATTACK_LEFT
ENEMY_STATE_ATTACK_RIGHT
ENEMY_STATE_FIRING_LEFT
ENEMY_STATE_FIRING_RIGHT
ENEMY_STATE_KICK_L
ENEMY_STATE_KICK_R
ENEMY_STATE_LEFT_DEAD
ENEMY_STATE_PUNCH_L
ENEMY_STATE_PUNCH_R
ENEMY_STATE_RIGHT_DEAD
ENEMY_SUBSTATE_ENTER
ENEMY_SUBSTATE_RUNNING
ENMAP_X_DELTA
ENMAP_X_POS
MAP_DOWN_LIMIT
MAP_RIGHT_LIMIT
NUMBER_OF_SPRITES_DIV_4
PARAM5
PLAYER_STATE_KICK_LEFT
PLAYER_STATE_KICK_RIGHT
PLAYER_STATE_PUNCH_LEFT
PLAYER_STATE_PUNCH_RIGHT
PORT_A
SCROLL_SPEED
SPRITE_0_PTR
SPRITE_1_PTR
SPRITE_2_PTR
SPRITE_3_PTR
SPRITE_4_PTR
SPRITE_5_PTR
SPRITE_6_PTR
SPRITE_7_PTR
SPRITE_DELTA_OFFSET_X
SPRITE_POINTER_BASE
SPRITE_POINTER_BASE1
SPRITE_POINTER_BASE2
SPRITE_POINTER_BASE3
tgt_c64
TILE_DEPTH1
TILE_DEPTH10
TILE_DEPTH11
TILE_DEPTH12
TILE_DEPTH13
TILE_DEPTH14
TILE_DEPTH15
TILE_DEPTH16
TILE_DEPTH17
TILE_DEPTH18
TILE_DEPTH19
TILE_DEPTH2
TILE_DEPTH20
TILE_DEPTH21
TILE_DEPTH3
TILE_DEPTH4
TILE_DEPTH5
TILE_DEPTH6
TILE_DEPTH7
TILE_DEPTH8
TILE_DEPTH9
TILE2_DEPTH1
TILE2_DEPTH10
TILE2_DEPTH11
TILE2_DEPTH12
TILE2_DEPTH13
TILE2_DEPTH14
TILE2_DEPTH15
TILE2_DEPTH16
TILE2_DEPTH17
TILE2_DEPTH18
TILE2_DEPTH19
TILE2_DEPTH2
TILE2_DEPTH20
TILE2_DEPTH21
TILE2_DEPTH3
TILE2_DEPTH4
TILE2_DEPTH5
TILE2_DEPTH6
TILE2_DEPTH7
TILE2_DEPTH8
TILE2_DEPTH9
tilesload
VIC_CHARSET_MULTICOLOR_3
VIC_CONTROL
VIC_MASK_IRQ
VIC_SPRITE_X_POS
VIC_SPRITE_Y_POS
WPARAM2
WPARAM3

